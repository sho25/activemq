begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalQueueAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalTopicAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|NonCachedMessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|async
operator|.
name|AsyncDataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|async
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|hash
operator|.
name|HashIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStoreAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicReferenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadaptor
operator|.
name|KahaReferenceStoreAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|DefaultThreadPools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|Usage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|UsageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link PersistenceAdapter} designed for use with a  * {@link Journal} and then check pointing asynchronously on a timeout with some  * other long term persistent storage.  *   * @org.apache.xbean.XBean element="amqPersistenceAdapter"  * @version $Revision: 1.17 $  */
end_comment

begin_class
specifier|public
class|class
name|AMQPersistenceAdapter
implements|implements
name|PersistenceAdapter
implements|,
name|UsageListener
implements|,
name|BrokerServiceAware
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQPersistenceAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ActiveMQQueue
argument_list|,
name|AMQMessageStore
argument_list|>
name|queues
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ActiveMQQueue
argument_list|,
name|AMQMessageStore
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ActiveMQTopic
argument_list|,
name|AMQTopicMessageStore
argument_list|>
name|topics
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ActiveMQTopic
argument_list|,
name|AMQTopicMessageStore
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_PREFIX
init|=
literal|"org.apache.activemq.store.amq"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|BROKEN_FILE_LOCK
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DISABLE_LOCKING
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|JOURNAL_LOCKED_WAIT_DELAY
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
specifier|private
name|AsyncDataManager
name|asyncDataManager
decl_stmt|;
specifier|private
name|ReferenceStoreAdapter
name|referenceStoreAdapter
decl_stmt|;
specifier|private
name|TaskRunnerFactory
name|taskRunnerFactory
decl_stmt|;
specifier|private
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
specifier|private
name|SystemUsage
name|usageManager
decl_stmt|;
specifier|private
name|long
name|cleanupInterval
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
specifier|private
name|long
name|checkpointInterval
init|=
literal|1000
operator|*
literal|60
decl_stmt|;
specifier|private
name|int
name|maxCheckpointMessageAddSize
init|=
literal|1024
operator|*
literal|4
decl_stmt|;
specifier|private
name|AMQTransactionStore
name|transactionStore
init|=
operator|new
name|AMQTransactionStore
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|TaskRunner
name|checkpointTask
decl_stmt|;
specifier|private
name|CountDownLatch
name|nextCheckpointCountDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|Runnable
name|periodicCheckpointTask
decl_stmt|;
specifier|private
name|Runnable
name|periodicCleanupTask
decl_stmt|;
specifier|private
name|boolean
name|deleteAllMessages
decl_stmt|;
specifier|private
name|boolean
name|syncOnWrite
decl_stmt|;
specifier|private
name|String
name|brokerName
init|=
literal|""
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
name|File
name|directoryArchive
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|AtomicLong
name|storeSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|persistentIndex
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useNio
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|archiveDataLogs
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|maxFileLength
init|=
name|AsyncDataManager
operator|.
name|DEFAULT_MAX_FILE_LENGTH
decl_stmt|;
specifier|private
name|int
name|indexBinSize
init|=
name|HashIndex
operator|.
name|DEFAULT_BIN_SIZE
decl_stmt|;
specifier|private
name|int
name|indexKeySize
init|=
name|HashIndex
operator|.
name|DEFAULT_KEY_SIZE
decl_stmt|;
specifier|private
name|int
name|indexPageSize
init|=
name|HashIndex
operator|.
name|DEFAULT_PAGE_SIZE
decl_stmt|;
specifier|private
name|int
name|maxReferenceFileLength
init|=
name|AsyncDataManager
operator|.
name|DEFAULT_MAX_FILE_LENGTH
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|AMQMessageStore
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|dataFilesInProgress
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|AMQMessageStore
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|directoryPath
init|=
literal|""
decl_stmt|;
specifier|private
name|RandomAccessFile
name|lockFile
decl_stmt|;
specifier|private
name|FileLock
name|lock
decl_stmt|;
specifier|private
name|boolean
name|disableLocking
init|=
name|DISABLE_LOCKING
decl_stmt|;
specifier|private
name|boolean
name|failIfJournalIsLocked
decl_stmt|;
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|brokerName
return|;
block|}
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|this
operator|.
name|brokerName
operator|=
name|brokerName
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|referenceStoreAdapter
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|referenceStoreAdapter
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|BrokerService
name|getBrokerService
parameter_list|()
block|{
return|return
name|brokerService
return|;
block|}
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|directory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|directory
operator|=
name|brokerService
operator|.
name|getBrokerDataDirectory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|directory
operator|=
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
argument_list|,
name|IOHelper
operator|.
name|toFileSystemSafeName
argument_list|(
name|brokerName
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|directory
operator|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"amqstore"
argument_list|)
expr_stmt|;
name|this
operator|.
name|directoryPath
operator|=
name|directory
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|directoryArchive
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|directoryArchive
operator|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|directory
argument_list|,
literal|"archive"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|directory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|lockFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"lock"
argument_list|)
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|lock
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"AMQStore starting using directory: "
operator|+
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
name|archiveDataLogs
condition|)
block|{
name|this
operator|.
name|directoryArchive
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|usageManager
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|usageManager
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|addUsageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|asyncDataManager
operator|==
literal|null
condition|)
block|{
name|asyncDataManager
operator|=
name|createAsyncDataManager
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|referenceStoreAdapter
operator|==
literal|null
condition|)
block|{
name|referenceStoreAdapter
operator|=
name|createReferenceStoreAdapter
argument_list|()
expr_stmt|;
block|}
name|referenceStoreAdapter
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"kr-store"
argument_list|)
argument_list|)
expr_stmt|;
name|referenceStoreAdapter
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|referenceStoreAdapter
operator|.
name|setUsageManager
argument_list|(
name|usageManager
argument_list|)
expr_stmt|;
name|referenceStoreAdapter
operator|.
name|setMaxDataFileLength
argument_list|(
name|getMaxReferenceFileLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskRunnerFactory
operator|==
literal|null
condition|)
block|{
name|taskRunnerFactory
operator|=
name|createTaskRunnerFactory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|failIfJournalIsLocked
condition|)
block|{
name|asyncDataManager
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|asyncDataManager
operator|.
name|lock
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Journal is locked... waiting "
operator|+
operator|(
name|JOURNAL_LOCKED_WAIT_DELAY
operator|/
literal|1000
operator|)
operator|+
literal|" seconds for the journal to be unlocked."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|JOURNAL_LOCKED_WAIT_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{                     }
block|}
block|}
block|}
name|asyncDataManager
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteAllMessages
condition|)
block|{
name|asyncDataManager
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|JournalTrace
name|trace
init|=
operator|new
name|JournalTrace
argument_list|()
decl_stmt|;
name|trace
operator|.
name|setMessage
argument_list|(
literal|"DELETED "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|Location
name|location
init|=
name|asyncDataManager
operator|.
name|write
argument_list|(
name|wireFormat
operator|.
name|marshal
argument_list|(
name|trace
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|asyncDataManager
operator|.
name|setMark
argument_list|(
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Journal deleted: "
argument_list|)
expr_stmt|;
name|deleteAllMessages
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|referenceStoreAdapter
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
name|referenceStoreAdapter
operator|.
name|start
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|files
init|=
name|referenceStoreAdapter
operator|.
name|getReferenceFileIdsInUse
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Active data files: "
operator|+
name|files
argument_list|)
expr_stmt|;
name|checkpointTask
operator|=
name|taskRunnerFactory
operator|.
name|createTaskRunner
argument_list|(
operator|new
name|Task
argument_list|()
block|{
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
name|doCheckpoint
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|"ActiveMQ Journal Checkpoint Worker"
argument_list|)
expr_stmt|;
name|createTransactionStore
argument_list|()
expr_stmt|;
comment|//
comment|// The following was attempting to reduce startup times by avoiding the
comment|// log
comment|// file scanning that recovery performs. The problem with it is that XA
comment|// transactions
comment|// only live in transaction log and are not stored in the reference
comment|// store, but they still
comment|// need to be recovered when the broker starts up.
if|if
condition|(
operator|!
name|referenceStoreAdapter
operator|.
name|isStoreValid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The ReferenceStore is not valid - recovering ..."
argument_list|)
expr_stmt|;
name|recover
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished recovering the ReferenceStore"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Location
name|location
init|=
name|writeTraceMessage
argument_list|(
literal|"RECOVERED "
operator|+
operator|new
name|Date
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|asyncDataManager
operator|.
name|setMark
argument_list|(
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// recover transactions
name|getTransactionStore
argument_list|()
operator|.
name|setPreparedTransactions
argument_list|(
name|referenceStoreAdapter
operator|.
name|retrievePreparedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Do a checkpoint periodically.
name|periodicCheckpointTask
operator|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkpoint
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Scheduler
operator|.
name|executePeriodically
argument_list|(
name|periodicCheckpointTask
argument_list|,
name|checkpointInterval
argument_list|)
expr_stmt|;
name|periodicCleanupTask
operator|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Scheduler
operator|.
name|executePeriodically
argument_list|(
name|periodicCleanupTask
argument_list|,
name|cleanupInterval
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|lockFile
operator|!=
literal|null
condition|)
block|{
name|lockFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|lockFile
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|usageManager
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|removeUsageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Scheduler
operator|.
name|cancel
argument_list|(
name|periodicCheckpointTask
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|cancel
argument_list|(
name|periodicCleanupTask
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|AMQMessageStore
argument_list|>
name|queueIterator
init|=
name|queues
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|queueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AMQMessageStore
name|ms
init|=
name|queueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|AMQTopicMessageStore
argument_list|>
name|topicIterator
init|=
name|topics
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|topicIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|AMQTopicMessageStore
name|ms
init|=
name|topicIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Take one final checkpoint and stop checkpoint processing.
name|checkpoint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|checkpointTask
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|referenceStoreAdapter
operator|.
name|savePreparedState
argument_list|(
name|getTransactionStore
argument_list|()
operator|.
name|getPreparedTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|queues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|topics
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IOException
name|firstException
init|=
literal|null
decl_stmt|;
name|referenceStoreAdapter
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Journal close"
argument_list|)
expr_stmt|;
name|asyncDataManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|firstException
operator|=
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to close journals: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|firstException
throw|;
block|}
block|}
comment|/**      * When we checkpoint we move all the journalled data to long term storage.      *       * @param sync      */
specifier|public
name|void
name|checkpoint
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|asyncDataManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Journal is closed."
argument_list|)
throw|;
block|}
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|latch
operator|=
name|nextCheckpointCountDownLatch
expr_stmt|;
name|checkpointTask
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sync
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waitng for checkpoint to complete."
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|referenceStoreAdapter
operator|.
name|checkpoint
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Request to start checkpoint failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"checkpoint failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This does the actual checkpoint.      *       * @return true if successful      */
specifier|public
name|boolean
name|doCheckpoint
parameter_list|()
block|{
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|latch
operator|=
name|nextCheckpointCountDownLatch
expr_stmt|;
name|nextCheckpointCountDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checkpoint started."
argument_list|)
expr_stmt|;
block|}
name|Location
name|newMark
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|AMQMessageStore
argument_list|>
name|queueIterator
init|=
name|queues
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|queueIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|AMQMessageStore
name|ms
init|=
name|queueIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Location
name|mark
init|=
operator|(
name|Location
operator|)
name|ms
operator|.
name|getMark
argument_list|()
decl_stmt|;
if|if
condition|(
name|mark
operator|!=
literal|null
operator|&&
operator|(
name|newMark
operator|==
literal|null
operator|||
name|newMark
operator|.
name|compareTo
argument_list|(
name|mark
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|newMark
operator|=
name|mark
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|AMQTopicMessageStore
argument_list|>
name|topicIterator
init|=
name|topics
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|topicIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|AMQTopicMessageStore
name|ms
init|=
name|topicIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Location
name|mark
init|=
operator|(
name|Location
operator|)
name|ms
operator|.
name|getMark
argument_list|()
decl_stmt|;
if|if
condition|(
name|mark
operator|!=
literal|null
operator|&&
operator|(
name|newMark
operator|==
literal|null
operator|||
name|newMark
operator|.
name|compareTo
argument_list|(
name|mark
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|newMark
operator|=
name|mark
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|newMark
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Marking journal at: "
operator|+
name|newMark
argument_list|)
expr_stmt|;
block|}
name|asyncDataManager
operator|.
name|setMark
argument_list|(
name|newMark
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeTraceMessage
argument_list|(
literal|"CHECKPOINT "
operator|+
operator|new
name|Date
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to mark the Journal: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checkpoint done."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Cleans up the data files      * @throws IOException      */
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
try|try
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|inProgress
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
range|:
name|dataFilesInProgress
operator|.
name|values
argument_list|()
control|)
block|{
name|inProgress
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
name|Integer
name|lastDataFile
init|=
name|asyncDataManager
operator|.
name|getCurrentDataFileId
argument_list|()
decl_stmt|;
name|inProgress
operator|.
name|add
argument_list|(
name|lastDataFile
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|inUse
init|=
name|referenceStoreAdapter
operator|.
name|getReferenceFileIdsInUse
argument_list|()
decl_stmt|;
name|asyncDataManager
operator|.
name|consolidateDataFilesNotIn
argument_list|(
name|inUse
argument_list|,
name|inProgress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not cleanup data files: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|getDestinations
parameter_list|()
block|{
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|destinations
init|=
operator|new
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|(
name|referenceStoreAdapter
operator|.
name|getDestinations
argument_list|()
argument_list|)
decl_stmt|;
name|destinations
operator|.
name|addAll
argument_list|(
name|queues
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|addAll
argument_list|(
name|topics
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinations
return|;
block|}
name|MessageStore
name|createMessageStore
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
return|return
name|createQueueMessageStore
argument_list|(
operator|(
name|ActiveMQQueue
operator|)
name|destination
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createTopicMessageStore
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|destination
argument_list|)
return|;
block|}
block|}
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|AMQMessageStore
name|store
init|=
name|queues
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|ReferenceStore
name|checkpointStore
init|=
name|referenceStoreAdapter
operator|.
name|createQueueReferenceStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|AMQMessageStore
argument_list|(
name|this
argument_list|,
name|checkpointStore
argument_list|,
name|destination
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|queues
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destinationName
parameter_list|)
throws|throws
name|IOException
block|{
name|AMQTopicMessageStore
name|store
init|=
name|topics
operator|.
name|get
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|TopicReferenceStore
name|checkpointStore
init|=
name|referenceStoreAdapter
operator|.
name|createTopicReferenceStore
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|AMQTopicMessageStore
argument_list|(
name|this
argument_list|,
name|checkpointStore
argument_list|,
name|destinationName
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|topics
operator|.
name|put
argument_list|(
name|destinationName
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|public
name|TransactionStore
name|createTransactionStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|transactionStore
return|;
block|}
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|referenceStoreAdapter
operator|.
name|getLastMessageBrokerSequenceId
argument_list|()
return|;
block|}
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|referenceStoreAdapter
operator|.
name|beginTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|referenceStoreAdapter
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|referenceStoreAdapter
operator|.
name|rollbackTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPersistentIndex
parameter_list|()
block|{
return|return
name|persistentIndex
return|;
block|}
specifier|public
name|void
name|setPersistentIndex
parameter_list|(
name|boolean
name|persistentIndex
parameter_list|)
block|{
name|this
operator|.
name|persistentIndex
operator|=
name|persistentIndex
expr_stmt|;
block|}
comment|/**      * @param location      * @return      * @throws IOException      */
specifier|public
name|DataStructure
name|readCommand
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ByteSequence
name|packet
init|=
name|asyncDataManager
operator|.
name|read
argument_list|(
name|location
argument_list|)
decl_stmt|;
return|return
operator|(
name|DataStructure
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|packet
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|createReadException
argument_list|(
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Move all the messages that were in the journal into long term storage. We      * just replay and do a checkpoint.      *       * @throws IOException      * @throws IOException      * @throws InvalidLocationException      * @throws IllegalStateException      */
specifier|private
name|void
name|recover
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
name|referenceStoreAdapter
operator|.
name|clearMessages
argument_list|()
expr_stmt|;
name|referenceStoreAdapter
operator|.
name|recoverState
argument_list|()
expr_stmt|;
name|Location
name|pos
init|=
literal|null
decl_stmt|;
name|int
name|redoCounter
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Journal Recovery Started from: "
operator|+
name|asyncDataManager
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|(
operator|new
name|NonCachedMessageEvaluationContext
argument_list|()
argument_list|)
decl_stmt|;
comment|// While we have records in the journal.
while|while
condition|(
operator|(
name|pos
operator|=
name|asyncDataManager
operator|.
name|getNextLocation
argument_list|(
name|pos
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|data
init|=
name|asyncDataManager
operator|.
name|read
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|DataStructure
name|c
init|=
operator|(
name|DataStructure
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|Message
condition|)
block|{
name|Message
name|message
init|=
operator|(
name|Message
operator|)
name|c
decl_stmt|;
name|AMQMessageStore
name|store
init|=
operator|(
name|AMQMessageStore
operator|)
name|createMessageStore
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|transactionStore
operator|.
name|addMessage
argument_list|(
name|store
argument_list|,
name|message
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|store
operator|.
name|replayAddMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
name|pos
argument_list|)
condition|)
block|{
name|redoCounter
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|c
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|JournalQueueAck
operator|.
name|DATA_STRUCTURE_TYPE
case|:
block|{
name|JournalQueueAck
name|command
init|=
operator|(
name|JournalQueueAck
operator|)
name|c
decl_stmt|;
name|AMQMessageStore
name|store
init|=
operator|(
name|AMQMessageStore
operator|)
name|createMessageStore
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getMessageAck
argument_list|()
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|transactionStore
operator|.
name|removeMessage
argument_list|(
name|store
argument_list|,
name|command
operator|.
name|getMessageAck
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|store
operator|.
name|replayRemoveMessage
argument_list|(
name|context
argument_list|,
name|command
operator|.
name|getMessageAck
argument_list|()
argument_list|)
condition|)
block|{
name|redoCounter
operator|++
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|JournalTopicAck
operator|.
name|DATA_STRUCTURE_TYPE
case|:
block|{
name|JournalTopicAck
name|command
init|=
operator|(
name|JournalTopicAck
operator|)
name|c
decl_stmt|;
name|AMQTopicMessageStore
name|store
init|=
operator|(
name|AMQTopicMessageStore
operator|)
name|createMessageStore
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getTransactionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|transactionStore
operator|.
name|acknowledge
argument_list|(
name|store
argument_list|,
name|command
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|store
operator|.
name|replayAcknowledge
argument_list|(
name|context
argument_list|,
name|command
operator|.
name|getClientId
argument_list|()
argument_list|,
name|command
operator|.
name|getSubscritionName
argument_list|()
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
name|redoCounter
operator|++
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|JournalTransaction
operator|.
name|DATA_STRUCTURE_TYPE
case|:
block|{
name|JournalTransaction
name|command
init|=
operator|(
name|JournalTransaction
operator|)
name|c
decl_stmt|;
try|try
block|{
comment|// Try to replay the packet.
switch|switch
condition|(
name|command
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|JournalTransaction
operator|.
name|XA_PREPARE
case|:
name|transactionStore
operator|.
name|replayPrepare
argument_list|(
name|command
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JournalTransaction
operator|.
name|XA_COMMIT
case|:
case|case
name|JournalTransaction
operator|.
name|LOCAL_COMMIT
case|:
name|AMQTx
name|tx
init|=
name|transactionStore
operator|.
name|replayCommit
argument_list|(
name|command
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|command
operator|.
name|getWasPrepared
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
break|break;
comment|// We may be trying to replay a commit
block|}
comment|// that
comment|// was already committed.
comment|// Replay the committed operations.
name|tx
operator|.
name|getOperations
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|tx
operator|.
name|getOperations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AMQTxOperation
name|op
init|=
operator|(
name|AMQTxOperation
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|replay
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|redoCounter
operator|++
expr_stmt|;
block|}
block|}
break|break;
case|case
name|JournalTransaction
operator|.
name|LOCAL_ROLLBACK
case|:
case|case
name|JournalTransaction
operator|.
name|XA_ROLLBACK
case|:
name|transactionStore
operator|.
name|replayRollback
argument_list|(
name|command
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid journal command type: "
operator|+
name|command
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Recovery Failure: Could not replay: "
operator|+
name|c
operator|+
literal|", reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|JournalTrace
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|JournalTrace
name|trace
init|=
operator|(
name|JournalTrace
operator|)
name|c
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"TRACE Entry: "
operator|+
name|trace
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown type of record in transaction log which will be discarded: "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Location
name|location
init|=
name|writeTraceMessage
argument_list|(
literal|"RECOVERED "
operator|+
operator|new
name|Date
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|asyncDataManager
operator|.
name|setMark
argument_list|(
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovered "
operator|+
name|redoCounter
operator|+
literal|" operations from redo log in "
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0f
operator|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IOException
name|createReadException
parameter_list|(
name|Location
name|location
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to read to journal for: "
operator|+
name|location
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|protected
name|IOException
name|createWriteException
parameter_list|(
name|DataStructure
name|packet
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to write to journal for: "
operator|+
name|packet
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|protected
name|IOException
name|createWriteException
parameter_list|(
name|String
name|command
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to write to journal for command: "
operator|+
name|command
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|protected
name|IOException
name|createRecoveryFailedException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to recover from journal. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|/**      * @param command      * @param syncHint      * @return      * @throws IOException      */
specifier|public
name|Location
name|writeCommand
parameter_list|(
name|DataStructure
name|command
parameter_list|,
name|boolean
name|syncHint
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|asyncDataManager
operator|.
name|write
argument_list|(
name|wireFormat
operator|.
name|marshal
argument_list|(
name|command
argument_list|)
argument_list|,
name|syncHint
operator|&&
name|syncOnWrite
argument_list|)
return|;
block|}
specifier|private
name|Location
name|writeTraceMessage
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|JournalTrace
name|trace
init|=
operator|new
name|JournalTrace
argument_list|()
decl_stmt|;
name|trace
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|writeCommand
argument_list|(
name|trace
argument_list|,
name|sync
argument_list|)
return|;
block|}
specifier|public
name|void
name|onUsageChanged
parameter_list|(
name|Usage
name|usage
parameter_list|,
name|int
name|oldPercentUsage
parameter_list|,
name|int
name|newPercentUsage
parameter_list|)
block|{
name|newPercentUsage
operator|=
operator|(
name|newPercentUsage
operator|/
literal|10
operator|)
operator|*
literal|10
expr_stmt|;
name|oldPercentUsage
operator|=
operator|(
name|oldPercentUsage
operator|/
literal|10
operator|)
operator|*
literal|10
expr_stmt|;
if|if
condition|(
name|newPercentUsage
operator|>=
literal|70
operator|&&
name|oldPercentUsage
operator|<
name|newPercentUsage
condition|)
block|{
name|checkpoint
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|AMQTransactionStore
name|getTransactionStore
parameter_list|()
block|{
return|return
name|transactionStore
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteAllMessages
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AMQPersistenceAdapter("
operator|+
name|directory
operator|+
literal|")"
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Subclass overridables
comment|// /////////////////////////////////////////////////////////////////
specifier|protected
name|AsyncDataManager
name|createAsyncDataManager
parameter_list|()
block|{
name|AsyncDataManager
name|manager
init|=
operator|new
name|AsyncDataManager
argument_list|(
name|storeSize
argument_list|)
decl_stmt|;
name|manager
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"journal"
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDirectoryArchive
argument_list|(
name|getDirectoryArchive
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setArchiveDataLogs
argument_list|(
name|isArchiveDataLogs
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setMaxFileLength
argument_list|(
name|maxFileLength
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setUseNio
argument_list|(
name|useNio
argument_list|)
expr_stmt|;
return|return
name|manager
return|;
block|}
specifier|protected
name|KahaReferenceStoreAdapter
name|createReferenceStoreAdapter
parameter_list|()
throws|throws
name|IOException
block|{
name|KahaReferenceStoreAdapter
name|adaptor
init|=
operator|new
name|KahaReferenceStoreAdapter
argument_list|(
name|storeSize
argument_list|)
decl_stmt|;
name|adaptor
operator|.
name|setPersistentIndex
argument_list|(
name|isPersistentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setIndexBinSize
argument_list|(
name|getIndexBinSize
argument_list|()
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setIndexKeySize
argument_list|(
name|getIndexKeySize
argument_list|()
argument_list|)
expr_stmt|;
name|adaptor
operator|.
name|setIndexPageSize
argument_list|(
name|getIndexPageSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|adaptor
return|;
block|}
specifier|protected
name|TaskRunnerFactory
name|createTaskRunnerFactory
parameter_list|()
block|{
return|return
name|DefaultThreadPools
operator|.
name|getDefaultTaskRunnerFactory
argument_list|()
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Property Accessors
comment|// /////////////////////////////////////////////////////////////////
specifier|public
name|AsyncDataManager
name|getAsyncDataManager
parameter_list|()
block|{
return|return
name|asyncDataManager
return|;
block|}
specifier|public
name|void
name|setAsyncDataManager
parameter_list|(
name|AsyncDataManager
name|asyncDataManager
parameter_list|)
block|{
name|this
operator|.
name|asyncDataManager
operator|=
name|asyncDataManager
expr_stmt|;
block|}
specifier|public
name|ReferenceStoreAdapter
name|getReferenceStoreAdapter
parameter_list|()
block|{
return|return
name|referenceStoreAdapter
return|;
block|}
specifier|public
name|TaskRunnerFactory
name|getTaskRunnerFactory
parameter_list|()
block|{
return|return
name|taskRunnerFactory
return|;
block|}
specifier|public
name|void
name|setTaskRunnerFactory
parameter_list|(
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
name|this
operator|.
name|taskRunnerFactory
operator|=
name|taskRunnerFactory
expr_stmt|;
block|}
comment|/**      * @return Returns the wireFormat.      */
specifier|public
name|WireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|wireFormat
return|;
block|}
specifier|public
name|void
name|setWireFormat
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|SystemUsage
name|getUsageManager
parameter_list|()
block|{
return|return
name|usageManager
return|;
block|}
specifier|public
name|void
name|setUsageManager
parameter_list|(
name|SystemUsage
name|usageManager
parameter_list|)
block|{
name|this
operator|.
name|usageManager
operator|=
name|usageManager
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxCheckpointMessageAddSize
parameter_list|()
block|{
return|return
name|maxCheckpointMessageAddSize
return|;
block|}
comment|/**      * When set using XBean, you can use values such as: "20      * mb", "1024 kb", or "1 gb"      *       * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"      */
specifier|public
name|void
name|setMaxCheckpointMessageAddSize
parameter_list|(
name|int
name|maxCheckpointMessageAddSize
parameter_list|)
block|{
name|this
operator|.
name|maxCheckpointMessageAddSize
operator|=
name|maxCheckpointMessageAddSize
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSyncOnWrite
parameter_list|()
block|{
return|return
name|this
operator|.
name|syncOnWrite
return|;
block|}
specifier|public
name|void
name|setSyncOnWrite
parameter_list|(
name|boolean
name|syncOnWrite
parameter_list|)
block|{
name|this
operator|.
name|syncOnWrite
operator|=
name|syncOnWrite
expr_stmt|;
block|}
comment|/**      * @param referenceStoreAdapter the referenceStoreAdapter to set      */
specifier|public
name|void
name|setReferenceStoreAdapter
parameter_list|(
name|ReferenceStoreAdapter
name|referenceStoreAdapter
parameter_list|)
block|{
name|this
operator|.
name|referenceStoreAdapter
operator|=
name|referenceStoreAdapter
expr_stmt|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|storeSize
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUseNio
parameter_list|()
block|{
return|return
name|useNio
return|;
block|}
specifier|public
name|void
name|setUseNio
parameter_list|(
name|boolean
name|useNio
parameter_list|)
block|{
name|this
operator|.
name|useNio
operator|=
name|useNio
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxFileLength
parameter_list|()
block|{
return|return
name|maxFileLength
return|;
block|}
comment|/**      * When set using XBean, you can use values such as: "20      * mb", "1024 kb", or "1 gb"      *       * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"      */
specifier|public
name|void
name|setMaxFileLength
parameter_list|(
name|int
name|maxFileLength
parameter_list|)
block|{
name|this
operator|.
name|maxFileLength
operator|=
name|maxFileLength
expr_stmt|;
block|}
specifier|public
name|long
name|getCleanupInterval
parameter_list|()
block|{
return|return
name|cleanupInterval
return|;
block|}
specifier|public
name|void
name|setCleanupInterval
parameter_list|(
name|long
name|cleanupInterval
parameter_list|)
block|{
name|this
operator|.
name|cleanupInterval
operator|=
name|cleanupInterval
expr_stmt|;
block|}
specifier|public
name|long
name|getCheckpointInterval
parameter_list|()
block|{
return|return
name|checkpointInterval
return|;
block|}
specifier|public
name|void
name|setCheckpointInterval
parameter_list|(
name|long
name|checkpointInterval
parameter_list|)
block|{
name|this
operator|.
name|checkpointInterval
operator|=
name|checkpointInterval
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexBinSize
parameter_list|()
block|{
return|return
name|indexBinSize
return|;
block|}
specifier|public
name|void
name|setIndexBinSize
parameter_list|(
name|int
name|indexBinSize
parameter_list|)
block|{
name|this
operator|.
name|indexBinSize
operator|=
name|indexBinSize
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexKeySize
parameter_list|()
block|{
return|return
name|indexKeySize
return|;
block|}
specifier|public
name|void
name|setIndexKeySize
parameter_list|(
name|int
name|indexKeySize
parameter_list|)
block|{
name|this
operator|.
name|indexKeySize
operator|=
name|indexKeySize
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexPageSize
parameter_list|()
block|{
return|return
name|indexPageSize
return|;
block|}
comment|/**      * When set using XBean, you can use values such as: "20      * mb", "1024 kb", or "1 gb"      *       * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"      */
specifier|public
name|void
name|setIndexPageSize
parameter_list|(
name|int
name|indexPageSize
parameter_list|)
block|{
name|this
operator|.
name|indexPageSize
operator|=
name|indexPageSize
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxReferenceFileLength
parameter_list|()
block|{
return|return
name|maxReferenceFileLength
return|;
block|}
comment|/**      * When set using XBean, you can use values such as: "20      * mb", "1024 kb", or "1 gb"      *       * @org.apache.xbean.Property propertyEditor="org.apache.activemq.util.MemoryPropertyEditor"      */
specifier|public
name|void
name|setMaxReferenceFileLength
parameter_list|(
name|int
name|maxReferenceFileLength
parameter_list|)
block|{
name|this
operator|.
name|maxReferenceFileLength
operator|=
name|maxReferenceFileLength
expr_stmt|;
block|}
specifier|public
name|File
name|getDirectoryArchive
parameter_list|()
block|{
return|return
name|directoryArchive
return|;
block|}
specifier|public
name|void
name|setDirectoryArchive
parameter_list|(
name|File
name|directoryArchive
parameter_list|)
block|{
name|this
operator|.
name|directoryArchive
operator|=
name|directoryArchive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isArchiveDataLogs
parameter_list|()
block|{
return|return
name|archiveDataLogs
return|;
block|}
specifier|public
name|void
name|setArchiveDataLogs
parameter_list|(
name|boolean
name|archiveDataLogs
parameter_list|)
block|{
name|this
operator|.
name|archiveDataLogs
operator|=
name|archiveDataLogs
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDisableLocking
parameter_list|()
block|{
return|return
name|disableLocking
return|;
block|}
specifier|public
name|void
name|setDisableLocking
parameter_list|(
name|boolean
name|disableLocking
parameter_list|)
block|{
name|this
operator|.
name|disableLocking
operator|=
name|disableLocking
expr_stmt|;
block|}
specifier|protected
name|void
name|addInProgressDataFile
parameter_list|(
name|AMQMessageStore
name|store
parameter_list|,
name|int
name|dataFileId
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|dataFilesInProgress
operator|.
name|get
argument_list|(
name|store
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|dataFilesInProgress
operator|.
name|put
argument_list|(
name|store
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|dataFileId
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeInProgressDataFile
parameter_list|(
name|AMQMessageStore
name|store
parameter_list|,
name|int
name|dataFileId
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
name|dataFilesInProgress
operator|.
name|get
argument_list|(
name|store
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|remove
argument_list|(
name|dataFileId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|lock
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|boolean
name|logged
init|=
literal|false
decl_stmt|;
name|boolean
name|aquiredLock
init|=
literal|false
decl_stmt|;
do|do
block|{
if|if
condition|(
name|doLock
argument_list|()
condition|)
block|{
name|aquiredLock
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|logged
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Waiting to Lock the Store "
operator|+
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|logged
operator|=
literal|true
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|aquiredLock
operator|&&
name|logged
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aquired lock for AMQ Store"
operator|+
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|aquiredLock
operator|&&
operator|!
name|disableLocking
condition|)
do|;
block|}
specifier|private
specifier|synchronized
name|void
name|unlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|disableLocking
operator|&&
operator|(
literal|null
operator|!=
name|lock
operator|)
condition|)
block|{
comment|//clear property doesn't work on some platforms
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|getPropertyKey
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|getPropertyKey
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|System
operator|.
name|getProperty
argument_list|(
name|getPropertyKey
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
assert|;
if|if
condition|(
name|lock
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
name|lock
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|lock
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|doLock
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|disableLocking
operator|&&
name|directory
operator|!=
literal|null
operator|&&
name|lock
operator|==
literal|null
condition|)
block|{
name|String
name|key
init|=
name|getPropertyKey
argument_list|()
decl_stmt|;
name|String
name|property
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|property
condition|)
block|{
if|if
condition|(
operator|!
name|BROKEN_FILE_LOCK
condition|)
block|{
name|lock
operator|=
name|lockFile
operator|.
name|getChannel
argument_list|()
operator|.
name|tryLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// already locked
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|getPropertyKey
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".lock."
operator|+
name|directory
operator|.
name|getCanonicalPath
argument_list|()
return|;
block|}
static|static
block|{
name|BROKEN_FILE_LOCK
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_PREFIX
operator|+
literal|".FileLockBroken"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|DISABLE_LOCKING
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_PREFIX
operator|+
literal|".DisableLocking"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

