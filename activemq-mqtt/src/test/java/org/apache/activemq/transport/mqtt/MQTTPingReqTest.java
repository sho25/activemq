begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtdispatch
operator|.
name|DispatchQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtdispatch
operator|.
name|internal
operator|.
name|SerialDispatchQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtdispatch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|CallbackConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|FutureConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTProtocolCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PINGREQ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PINGRESP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test to show that a PINGRESP will only be sent for a PINGREQ  * packet after a CONNECT packet has been received.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MQTTPingReqTest
extends|extends
name|MQTTTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTPingReqTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|version
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"mqtt-version:{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"3.1"
block|}
block|,
block|{
literal|"3.1.1"
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|MQTTPingReqTest
parameter_list|(
specifier|final
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|EOFException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPingReqWithoutConnectFail
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Transport
argument_list|>
name|transport
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Callback
argument_list|<
name|Transport
argument_list|>
name|con
init|=
operator|new
name|Callback
argument_list|<
name|Transport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Transport
name|value
parameter_list|)
block|{
name|transport
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|value
parameter_list|)
block|{
name|error
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//Connect to the transport by using the createTransport method with a custom callback
comment|//This will ensure that we connect without sending a CONNECT packet for testing
comment|//and that we won't receive automatically
name|CallbackConnection
name|connection
init|=
operator|new
name|CallbackConnection
argument_list|(
name|mqtt
argument_list|)
decl_stmt|;
name|Method
name|createTransportMethod
init|=
name|connection
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createTransport"
argument_list|,
name|Callback
operator|.
name|class
argument_list|)
decl_stmt|;
name|createTransportMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createTransportMethod
operator|.
name|invoke
argument_list|(
name|connection
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|//Make sure no error on connect
if|if
condition|(
name|error
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|error
operator|.
name|get
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|error
operator|.
name|get
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|disableDispatchAssertion
argument_list|(
name|transport
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//Send a PINGREQ without a connect packet first
specifier|final
name|MQTTProtocolCodec
name|codec
init|=
operator|new
name|MQTTProtocolCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|setTransport
argument_list|(
name|transport
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|.
name|get
argument_list|()
operator|.
name|offer
argument_list|(
operator|new
name|PINGREQ
argument_list|()
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
comment|//Protocol should throw an exception since we never sent a CONNECT
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Wait for exception to be thrown
name|codec
operator|.
name|read
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPingReqConnectSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|pingRespReceived
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|//Tracer to assert we received the response by waiting for it
name|mqtt
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PINGRESP
operator|.
name|TYPE
condition|)
block|{
name|pingRespReceived
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|CallbackConnection
name|callbackConnection
init|=
operator|new
name|CallbackConnection
argument_list|(
name|mqtt
argument_list|)
decl_stmt|;
name|BlockingConnection
name|connection
init|=
operator|new
name|BlockingConnection
argument_list|(
operator|new
name|FutureConnection
argument_list|(
name|callbackConnection
argument_list|)
argument_list|)
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Transport
name|transport
init|=
name|callbackConnection
operator|.
name|transport
argument_list|()
decl_stmt|;
name|disableDispatchAssertion
argument_list|(
name|transport
argument_list|)
expr_stmt|;
comment|//SEND a PINGREQ and wait for the response
specifier|final
name|MQTTProtocolCodec
name|codec
init|=
operator|new
name|MQTTProtocolCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|setTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|transport
operator|.
name|offer
argument_list|(
operator|new
name|PINGREQ
argument_list|()
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
comment|//Wait for the response
name|assertTrue
argument_list|(
name|pingRespReceived
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|disableDispatchAssertion
parameter_list|(
specifier|final
name|Transport
name|transport
parameter_list|)
block|{
comment|//Since we are purposefully bypassing the normal way of sending a packet, turn off the
comment|//assertion
name|DispatchQueue
name|dispatchQueue
init|=
name|transport
operator|.
name|getDispatchQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|dispatchQueue
operator|instanceof
name|SerialDispatchQueue
condition|)
block|{
name|SerialDispatchQueue
name|spyQueue
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|(
name|SerialDispatchQueue
operator|)
name|dispatchQueue
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyQueue
argument_list|)
operator|.
name|assertExecuting
argument_list|()
expr_stmt|;
name|transport
operator|.
name|setDispatchQueue
argument_list|(
name|spyQueue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

