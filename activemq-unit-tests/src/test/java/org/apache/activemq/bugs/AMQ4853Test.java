begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisoryBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ4853Test
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4853Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_ADDRESS
init|=
literal|"tcp://localhost:0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ActiveMQQueue
name|DESTINATION
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.QUEUE"
argument_list|)
decl_stmt|;
specifier|private
name|CountDownLatch
name|cycleDoneLatch
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionUri
operator|=
name|brokerService
operator|.
name|addConnector
argument_list|(
name|BROKER_ADDRESS
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test to shows the performance of the removing consumers while other stay active.      * @throws Exception      */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a stable set of consumers to fill in the advisory broker's consumer list.
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
name|fixedConsumers
init|=
operator|new
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
operator|++
name|i
control|)
block|{
name|fixedConsumers
operator|.
name|add
argument_list|(
operator|new
name|Consumer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create a set of consumers that comes online for a short time and then
comment|// goes offline again.  Cycles will repeat as each batch completes
specifier|final
name|int
name|fixedDelayConsumers
init|=
literal|300
decl_stmt|;
specifier|final
name|int
name|fixedDelayCycles
init|=
literal|25
decl_stmt|;
specifier|final
name|CountDownLatch
name|fixedDelayCycleLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|fixedDelayCycles
argument_list|)
decl_stmt|;
comment|// Update so done method can track state.
name|cycleDoneLatch
operator|=
name|fixedDelayCycleLatch
expr_stmt|;
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|fixedDelayConsumers
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fixed delay consumers cycle {} completed."
argument_list|,
name|fixedDelayCycleLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|fixedDelayCycleLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedDelayConsumers
condition|;
operator|++
name|i
control|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|FixedDelyConsumer
argument_list|(
name|barrier
argument_list|)
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|fixedDelayCycleLatch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
comment|// Clean up.
for|for
control|(
name|Consumer
name|consumer
range|:
name|fixedConsumers
control|)
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|fixedConsumers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ConnectionInfo
name|createConnectionInfo
parameter_list|()
block|{
name|ConnectionId
name|id
init|=
operator|new
name|ConnectionId
argument_list|()
decl_stmt|;
name|id
operator|.
name|setValue
argument_list|(
literal|"ID:123456789:0:1"
argument_list|)
expr_stmt|;
name|ConnectionInfo
name|info
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|SessionInfo
name|createSessionInfo
parameter_list|(
name|ConnectionInfo
name|connection
parameter_list|)
block|{
name|SessionId
name|id
init|=
operator|new
name|SessionId
argument_list|(
name|connection
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SessionInfo
name|info
init|=
operator|new
name|SessionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setSessionId
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|public
name|ConsumerInfo
name|createConsumerInfo
parameter_list|(
name|SessionInfo
name|session
parameter_list|,
name|int
name|value
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|ConsumerId
name|id
init|=
operator|new
name|ConsumerId
argument_list|()
decl_stmt|;
name|id
operator|.
name|setConnectionId
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|.
name|setSessionId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|id
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|info
init|=
operator|new
name|ConsumerInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConsumerId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**      * Test to shows the performance impact of removing consumers in various scenarios.      * @throws Exception      */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testPerformanceOfRemovals
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup
name|AdvisoryBroker
name|testObj
init|=
operator|(
name|AdvisoryBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AdvisoryBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|ConnectionContext
name|connectionContext
init|=
operator|new
name|ConnectionContext
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|connectionContext
operator|.
name|setBroker
argument_list|(
name|brokerService
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|500
condition|;
name|j
operator|++
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|j
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|testObj
operator|.
name|addConsumer
argument_list|(
name|connectionContext
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|500
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|j
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|testObj
operator|.
name|removeConsumer
argument_list|(
name|connectionContext
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|500
condition|;
name|j
operator|++
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|j
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|testObj
operator|.
name|addConsumer
argument_list|(
name|connectionContext
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|500
condition|;
name|j
operator|++
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|j
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|testObj
operator|.
name|removeConsumer
argument_list|(
name|connectionContext
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|finish
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|totalTime
init|=
name|finish
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total test time: {} seconds"
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|totalTime
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testObj
operator|.
name|getAdvisoryConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsNeeded
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup
name|AdvisoryBroker
name|testObj
init|=
operator|(
name|AdvisoryBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AdvisoryBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|ConnectionContext
name|connectionContext
init|=
operator|new
name|ConnectionContext
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|connectionContext
operator|.
name|setBroker
argument_list|(
name|brokerService
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|j
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|testObj
operator|.
name|addConsumer
argument_list|(
name|connectionContext
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|j
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|testObj
operator|.
name|removeConsumer
argument_list|(
name|connectionContext
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testObj
operator|.
name|getAdvisoryConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|done
parameter_list|()
block|{
if|if
condition|(
name|cycleDoneLatch
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|cycleDoneLatch
operator|.
name|getCount
argument_list|()
operator|==
literal|0
return|;
block|}
class|class
name|Consumer
implements|implements
name|MessageListener
block|{
name|Connection
name|connection
decl_stmt|;
name|Session
name|session
decl_stmt|;
name|Destination
name|destination
decl_stmt|;
name|MessageConsumer
name|consumer
decl_stmt|;
name|Consumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|DESTINATION
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{         }
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
name|connection
operator|=
literal|null
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
name|consumer
operator|=
literal|null
expr_stmt|;
block|}
block|}
class|class
name|FixedDelyConsumer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|CyclicBarrier
name|barrier
decl_stmt|;
specifier|private
specifier|final
name|int
name|sleepInterval
decl_stmt|;
specifier|public
name|FixedDelyConsumer
parameter_list|(
name|CyclicBarrier
name|barrier
parameter_list|)
block|{
name|this
operator|.
name|barrier
operator|=
name|barrier
expr_stmt|;
name|this
operator|.
name|sleepInterval
operator|=
literal|1000
expr_stmt|;
block|}
specifier|public
name|FixedDelyConsumer
parameter_list|(
name|CyclicBarrier
name|barrier
parameter_list|,
name|int
name|sleepInterval
parameter_list|)
block|{
name|this
operator|.
name|barrier
operator|=
name|barrier
expr_stmt|;
name|this
operator|.
name|sleepInterval
operator|=
name|sleepInterval
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|done
argument_list|()
condition|)
block|{
try|try
block|{
name|Consumer
name|consumer
init|=
operator|new
name|Consumer
argument_list|()
decl_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

