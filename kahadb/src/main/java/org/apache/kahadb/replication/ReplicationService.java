begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBClusterNodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBClusterNodeStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|store
operator|.
name|KahaDBStore
import|;
end_import

begin_comment
comment|/**  * Handles interfacing with the ClusterStateManager and handles activating the  * slave or master facets of the broker.  *   * @author chirino  * @org.apache.xbean.XBean element="kahadbReplication"  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationService
implements|implements
name|Service
implements|,
name|ClusterListener
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JOURNAL_PREFIX
init|=
literal|"journal-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|brokerURI
init|=
literal|"xbean:broker.xml"
decl_stmt|;
specifier|private
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|File
name|tempReplicationDir
decl_stmt|;
specifier|private
name|String
name|uri
decl_stmt|;
specifier|private
name|ClusterStateManager
name|cluster
decl_stmt|;
specifier|private
name|int
name|minimumReplicas
init|=
literal|1
decl_stmt|;
specifier|private
name|KahaDBStore
name|store
decl_stmt|;
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|ReplicationMaster
name|master
decl_stmt|;
specifier|private
name|ReplicationSlave
name|slave
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The cluster field has not been set."
argument_list|)
throw|;
block|}
comment|// The cluster will let us know about the cluster configuration,
comment|// which lets us decide if we are going to be a slave or a master.
name|getStore
argument_list|()
operator|.
name|open
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|addMember
argument_list|(
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setMemberStatus
argument_list|(
name|createStatus
argument_list|(
name|State
operator|.
name|SLAVE_UNCONNECTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PBClusterNodeStatus
name|createStatus
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PBClusterNodeStatus
name|status
init|=
operator|new
name|PBClusterNodeStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setConnectUri
argument_list|(
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLastUpdate
argument_list|(
name|ReplicationSupport
operator|.
name|convert
argument_list|(
name|getStore
argument_list|()
operator|.
name|getLastUpdatePosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stopMaster
argument_list|()
expr_stmt|;
name|stopSlave
argument_list|()
expr_stmt|;
name|getStore
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onClusterChange
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|this
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|cluster
init|)
block|{
if|if
condition|(
name|areWeTheSlave
argument_list|(
name|clusterState
argument_list|)
condition|)
block|{
comment|// If we were the master we need to stop the master
comment|// service..
name|stopMaster
argument_list|()
expr_stmt|;
comment|// If the slave service was not yet started.. start it up.
if|if
condition|(
name|clusterState
operator|.
name|getMaster
argument_list|()
operator|==
literal|null
condition|)
block|{
name|stopSlave
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startSlave
argument_list|()
expr_stmt|;
name|slave
operator|.
name|onClusterChange
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|areWeTheMaster
argument_list|(
name|clusterState
argument_list|)
condition|)
block|{
comment|// If we were the slave we need to stop the slave service..
name|stopSlave
argument_list|()
expr_stmt|;
comment|// If the master service was not yet started.. start it up.
name|startMaster
argument_list|()
expr_stmt|;
name|master
operator|.
name|onClusterChange
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We were not part of the configuration (not master nor
comment|// slave).
comment|// So we have to shutdown any running master or slave
comment|// services that may
comment|// have been running.
name|stopMaster
argument_list|()
expr_stmt|;
name|stopSlave
argument_list|()
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|setMemberStatus
argument_list|(
name|createStatus
argument_list|(
name|State
operator|.
name|SLAVE_UNCONNECTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected Error: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startMaster
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
if|if
condition|(
name|master
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting replication master."
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|setMemberStatus
argument_list|(
name|createStatus
argument_list|(
name|State
operator|.
name|MASTER
argument_list|)
argument_list|)
expr_stmt|;
name|brokerService
operator|=
name|createBrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|master
operator|=
operator|new
name|ReplicationMaster
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stopSlave
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|slave
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping replication slave."
argument_list|)
expr_stmt|;
name|slave
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slave
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startSlave
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|slave
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting replication slave."
argument_list|)
expr_stmt|;
name|slave
operator|=
operator|new
name|ReplicationSlave
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|slave
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stopMaster
parameter_list|()
throws|throws
name|Exception
throws|,
name|IOException
block|{
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping replication master."
argument_list|)
expr_stmt|;
name|master
operator|.
name|stop
argument_list|()
expr_stmt|;
name|master
operator|=
literal|null
expr_stmt|;
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|=
literal|null
expr_stmt|;
comment|// Stopping the broker service actually stops the store
comment|// too..
comment|// so we need to open it back up.
name|getStore
argument_list|()
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|BrokerService
name|getBrokerService
parameter_list|()
block|{
return|return
name|brokerService
return|;
block|}
specifier|private
name|BrokerService
name|createBrokerService
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|rc
init|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|brokerURI
argument_list|)
decl_stmt|;
name|rc
operator|.
name|setPersistenceAdapter
argument_list|(
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|ClusterState
name|getClusterState
parameter_list|()
block|{
return|return
name|clusterState
return|;
block|}
specifier|private
name|boolean
name|areWeTheSlave
parameter_list|(
name|ClusterState
name|config
parameter_list|)
block|{
return|return
name|config
operator|.
name|getSlaves
argument_list|()
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|areWeTheMaster
parameter_list|(
name|ClusterState
name|config
parameter_list|)
block|{
return|return
name|uri
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getMaster
argument_list|()
argument_list|)
return|;
block|}
comment|///////////////////////////////////////////////////////////////////
comment|// Accessors
comment|///////////////////////////////////////////////////////////////////
specifier|public
name|File
name|getReplicationFile
parameter_list|(
name|String
name|fn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fn
operator|.
name|equals
argument_list|(
literal|"database"
argument_list|)
condition|)
block|{
return|return
name|getStore
argument_list|()
operator|.
name|getPageFile
argument_list|()
operator|.
name|getFile
argument_list|()
return|;
block|}
if|if
condition|(
name|fn
operator|.
name|startsWith
argument_list|(
name|JOURNAL_PREFIX
argument_list|)
condition|)
block|{
name|int
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fn
operator|.
name|substring
argument_list|(
name|JOURNAL_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown replication file name: "
operator|+
name|fn
argument_list|)
throw|;
block|}
return|return
name|getStore
argument_list|()
operator|.
name|getJournal
argument_list|()
operator|.
name|getFile
argument_list|(
name|id
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown replication file name: "
operator|+
name|fn
argument_list|)
throw|;
block|}
block|}
specifier|public
name|File
name|getTempReplicationFile
parameter_list|(
name|String
name|fn
parameter_list|,
name|int
name|snapshotId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fn
operator|.
name|equals
argument_list|(
literal|"database"
argument_list|)
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getTempReplicationDir
argument_list|()
argument_list|,
literal|"database-"
operator|+
name|snapshotId
argument_list|)
return|;
block|}
if|if
condition|(
name|fn
operator|.
name|startsWith
argument_list|(
name|JOURNAL_PREFIX
argument_list|)
condition|)
block|{
name|int
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fn
operator|.
name|substring
argument_list|(
name|JOURNAL_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown replication file name: "
operator|+
name|fn
argument_list|)
throw|;
block|}
return|return
operator|new
name|File
argument_list|(
name|getTempReplicationDir
argument_list|()
argument_list|,
name|fn
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown replication file name: "
operator|+
name|fn
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
return|return
name|master
operator|!=
literal|null
return|;
block|}
specifier|public
name|File
name|getTempReplicationDir
parameter_list|()
block|{
if|if
condition|(
name|tempReplicationDir
operator|==
literal|null
condition|)
block|{
name|tempReplicationDir
operator|=
operator|new
name|File
argument_list|(
name|getStore
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|,
literal|"replication"
argument_list|)
expr_stmt|;
block|}
return|return
name|tempReplicationDir
return|;
block|}
specifier|public
name|void
name|setTempReplicationDir
parameter_list|(
name|File
name|tempReplicationDir
parameter_list|)
block|{
name|this
operator|.
name|tempReplicationDir
operator|=
name|tempReplicationDir
expr_stmt|;
block|}
specifier|public
name|KahaDBStore
name|getStore
parameter_list|()
block|{
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|store
operator|=
operator|new
name|KahaDBStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|public
name|void
name|setStore
parameter_list|(
name|KahaDBStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|String
name|getBrokerURI
parameter_list|()
block|{
return|return
name|brokerURI
return|;
block|}
specifier|public
name|void
name|setBrokerURI
parameter_list|(
name|String
name|brokerURI
parameter_list|)
block|{
name|this
operator|.
name|brokerURI
operator|=
name|brokerURI
expr_stmt|;
block|}
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|nodeId
expr_stmt|;
block|}
specifier|public
name|ClusterStateManager
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
specifier|public
name|void
name|setCluster
parameter_list|(
name|ClusterStateManager
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
specifier|public
name|int
name|getMinimumReplicas
parameter_list|()
block|{
return|return
name|minimumReplicas
return|;
block|}
specifier|public
name|void
name|setMinimumReplicas
parameter_list|(
name|int
name|minimumReplicas
parameter_list|)
block|{
name|this
operator|.
name|minimumReplicas
operator|=
name|minimumReplicas
expr_stmt|;
block|}
block|}
end_class

end_unit

