begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectConnectionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authc
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|env
operator|.
name|DefaultEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|AuthenticationFilterTest
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSetAuthenticationTokenFactory
parameter_list|()
block|{
name|AuthenticationTokenFactory
name|factory
init|=
operator|new
name|AuthenticationTokenFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AuthenticationToken
name|getAuthenticationToken
parameter_list|(
name|SubjectConnectionReference
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|filter
operator|.
name|setAuthenticationTokenFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|factory
argument_list|,
name|filter
operator|.
name|getAuthenticationTokenFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAuthenticationWithLogoutThrowable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|boolean
index|[]
name|invoked
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|Broker
name|broker
init|=
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
name|invoked
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
decl_stmt|;
name|DefaultEnvironment
name|env
init|=
operator|new
name|DefaultEnvironment
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setNext
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|SubjectAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|logout
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Simulated failure."
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|ctx
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|info
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|SubjectConnectionReference
name|conn
init|=
operator|new
name|SubjectConnectionReference
argument_list|(
name|ctx
argument_list|,
name|info
argument_list|,
name|env
argument_list|,
name|subject
argument_list|)
decl_stmt|;
name|SubjectSecurityContext
name|ssc
init|=
operator|new
name|SubjectSecurityContext
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setSecurityContext
argument_list|(
name|ssc
argument_list|)
expr_stmt|;
name|filter
operator|.
name|removeConnection
argument_list|(
name|ctx
argument_list|,
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|invoked
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

