begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|InitialDirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * class to create dynamic network connectors listed in an directory  * server using the LDAP v3 protocol as defined in RFC 2251, the  * entries listed in the directory server must implement the ipHost  * and ipService objectClasses as defined in RFC 2307.  *   * @author Trevor Pounds  * @see<a href="http://www.faqs.org/rfcs/rfc2251.html">RFC 2251</a>  * @see<a href="http://www.faqs.org/rfcs/rfc2307.html">RFC 2307</a>  *  * @org.apache.xbean.XBean element="ldapNetworkConnector"  */
end_comment

begin_class
specifier|public
class|class
name|LdapNetworkConnector
extends|extends
name|NetworkConnector
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LdapNetworkConnector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: future>> LDAP JNDI event handling to update connectors?
comment|// force returned entries to implement the ipHost and ipService objectClasses (RFC 2307)
specifier|private
specifier|static
specifier|final
name|String
name|REQUIRED_OBJECT_CLASS_FILTER
init|=
literal|"(&(objectClass=ipHost)(objectClass=ipService))"
decl_stmt|;
comment|// required
specifier|private
name|URI
name|ldapURI
decl_stmt|;
specifier|private
name|String
name|ldapBase
decl_stmt|;
specifier|private
name|String
name|ldapUser
decl_stmt|;
specifier|private
name|String
name|ldapPassword
decl_stmt|;
comment|// optional
specifier|private
name|int
name|ldapSearchScope
init|=
name|SearchControls
operator|.
name|OBJECT_SCOPE
decl_stmt|;
specifier|private
name|String
name|ldapSearchFilter
init|=
name|REQUIRED_OBJECT_CLASS_FILTER
decl_stmt|;
comment|// internal configurables
specifier|private
name|DirContext
name|ldapContext
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NetworkConnector
argument_list|>
name|connectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|NetworkConnector
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * default constructor      */
specifier|public
name|LdapNetworkConnector
parameter_list|()
block|{     }
comment|/**      * sets the LDAP server URI      *      * @param uri LDAP server URI      */
specifier|public
name|void
name|setUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|ldapURI
operator|=
name|uri
expr_stmt|;
block|}
comment|/**      * sets the base LDAP dn used for lookup operations      *      * @param base LDAP base dn      */
specifier|public
name|void
name|setBase
parameter_list|(
name|String
name|base
parameter_list|)
block|{
name|ldapBase
operator|=
name|base
expr_stmt|;
block|}
comment|/**      * sets the LDAP user for access credentials      *      * @param user LDAP dn of user      */
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|ldapUser
operator|=
name|user
expr_stmt|;
block|}
comment|/**      * sets the LDAP password for access credentials      *      * @param password user password      */
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|ldapPassword
operator|=
name|password
expr_stmt|;
block|}
comment|/**      * sets the LDAP search scope      *      * @param searchScope LDAP JNDI search scope      */
specifier|public
name|void
name|setSearchScope
parameter_list|(
name|String
name|searchScope
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|searchScope
operator|.
name|equals
argument_list|(
literal|"OBJECT_SCOPE"
argument_list|)
condition|)
block|{
name|ldapSearchScope
operator|=
name|SearchControls
operator|.
name|OBJECT_SCOPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchScope
operator|.
name|equals
argument_list|(
literal|"ONELEVEL_SCOPE"
argument_list|)
condition|)
block|{
name|ldapSearchScope
operator|=
name|SearchControls
operator|.
name|ONELEVEL_SCOPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchScope
operator|.
name|equals
argument_list|(
literal|"SUBTREE_SCOPE"
argument_list|)
condition|)
block|{
name|ldapSearchScope
operator|=
name|SearchControls
operator|.
name|SUBTREE_SCOPE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"ERR: unknown LDAP search scope specified: "
operator|+
name|searchScope
argument_list|)
throw|;
block|}
block|}
comment|/**      * sets the LDAP search filter as defined in RFC 2254      *      * @param searchFilter LDAP search filter      * @see<a href="http://www.faqs.org/rfcs/rfc2254.html">RFC 2254</a>      */
specifier|public
name|void
name|setSearchFilter
parameter_list|(
name|String
name|searchFilter
parameter_list|)
block|{
name|ldapSearchFilter
operator|=
literal|"(&"
operator|+
name|REQUIRED_OBJECT_CLASS_FILTER
operator|+
literal|"("
operator|+
name|searchFilter
operator|+
literal|"))"
expr_stmt|;
block|}
comment|/**      * start the connector      */
comment|// XXX: this method seems awfully redundant when looking through the
comment|//      call stack when used in NetworkConnector based objects. I don't
comment|//      see why derived classes shouldn't just override the start/stop methods
specifier|protected
name|void
name|handleStart
parameter_list|()
throws|throws
name|Exception
block|{
name|initLdapContext
argument_list|()
expr_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|getLdapUris
argument_list|()
control|)
block|{
name|NetworkConnector
name|connector
init|=
name|getBrokerService
argument_list|()
operator|.
name|addNetworkConnector
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|handleStart
argument_list|()
expr_stmt|;
block|}
comment|/**      * stop the connector      *      * @param stopper service stopper object      */
comment|// XXX: this method seems awfully redundant when looking through the
comment|//      call stack when used in NetworkConnector based objects. I don't
comment|//      see why derived classes shouldn't just override the start/stop methods
specifier|protected
name|void
name|handleStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|NetworkConnector
name|connector
range|:
name|connectors
control|)
block|{
name|getBrokerService
argument_list|()
operator|.
name|removeNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|ldapContext
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|handleStop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
block|}
comment|/**      * returns the name of the connector      *      * @return connector name      */
comment|// XXX: this should probably be fixed elsewhere for all
comment|//      NetworkConnector derivatives...this impl does not
comment|//      seem to be well thought out?
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|toString
argument_list|()
return|;
block|}
comment|/**      * initializes the LDAP JNDI context with the configured parameters      */
specifier|protected
name|void
name|initLdapContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Hashtable
name|env
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
literal|"com.sun.jndi.ldap.LdapCtxFactory"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|ldapURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|ldapUser
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|ldapPassword
argument_list|)
expr_stmt|;
name|ldapContext
operator|=
operator|new
name|InitialDirContext
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
comment|/**      * retrieves URIs matching the search filter via LDAP       * and creates network connectors based on the entries      *      * @returns list of retrieved URIs      */
specifier|protected
name|List
argument_list|<
name|URI
argument_list|>
name|getLdapUris
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchControls
name|controls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|controls
operator|.
name|setSearchScope
argument_list|(
name|ldapSearchScope
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ldapContext
operator|.
name|search
argument_list|(
name|ldapBase
argument_list|,
name|ldapSearchFilter
argument_list|,
name|controls
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|uriList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|Attributes
name|attributes
init|=
name|results
operator|.
name|next
argument_list|()
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|address
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"iphostnumber"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|port
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"ipserviceport"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|protocol
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"ipserviceprotocol"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"static:("
operator|+
name|protocol
operator|+
literal|"://"
operator|+
name|address
operator|+
literal|":"
operator|+
name|port
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Discovered URI "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|uriList
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uriList
return|;
block|}
block|}
end_class

end_unit

