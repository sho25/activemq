begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ws
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|BufferingResponseListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|WSTransportHttpTraceTest
extends|extends
name|WSTransportTest
block|{
specifier|private
name|String
name|enableTraceParam
decl_stmt|;
specifier|private
name|int
name|expectedStatus
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|//value is empty
block|{
literal|"http.enableTrace="
block|,
name|HttpStatus
operator|.
name|FORBIDDEN_403
block|}
block|,
comment|//default, trace method not specified
block|{
literal|null
block|,
name|HttpStatus
operator|.
name|FORBIDDEN_403
block|}
block|,
comment|// enable http trace method
block|{
literal|"http.enableTrace=true"
block|,
name|HttpStatus
operator|.
name|OK_200
block|}
block|,
comment|// disable trace method
block|{
literal|"http.enableTrace=false"
block|,
name|HttpStatus
operator|.
name|FORBIDDEN_403
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|WSTransportHttpTraceTest
parameter_list|(
specifier|final
name|String
name|enableTraceParam
parameter_list|,
specifier|final
name|int
name|expectedStatus
parameter_list|)
block|{
name|this
operator|.
name|enableTraceParam
operator|=
name|enableTraceParam
expr_stmt|;
name|this
operator|.
name|expectedStatus
operator|=
name|expectedStatus
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getWSConnectorURI
parameter_list|()
block|{
name|String
name|uri
init|=
literal|"ws://127.0.0.1:61623?websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001"
decl_stmt|;
name|uri
operator|=
name|enableTraceParam
operator|!=
literal|null
condition|?
name|uri
operator|+
literal|"&"
operator|+
name|enableTraceParam
else|:
name|uri
expr_stmt|;
return|return
name|uri
return|;
block|}
comment|/**      * This tests whether the TRACE method is enabled or not      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testHttpTraceEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Request
name|request
init|=
name|httpClient
operator|.
name|newRequest
argument_list|(
literal|"http://127.0.0.1:61623"
argument_list|)
operator|.
name|method
argument_list|(
name|HttpMethod
operator|.
name|TRACE
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|status
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|request
operator|.
name|send
argument_list|(
operator|new
name|BufferingResponseListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|status
operator|.
name|set
argument_list|(
name|result
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|status
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testBrokerStart
parameter_list|()
throws|throws
name|Exception
block|{     }
block|}
end_class

end_unit

