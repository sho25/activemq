begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XAConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XAQueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XASession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XATopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompTransportFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQXAConnectionFactoryTest
extends|extends
name|CombinationTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ActiveMQXAConnectionFactoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|txGenerator
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|JMSException
block|{
name|ActiveMQXAConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?"
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|copy
init|=
name|cf
operator|.
name|copy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be an ActiveMQXAConnectionFactory"
argument_list|,
name|copy
operator|instanceof
name|ActiveMQXAConnectionFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUseURIToSetOptionsOnConnectionFactory
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|JMSException
block|{
name|ActiveMQXAConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?jms.useAsyncSend=true"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cf
operator|.
name|isUseAsyncSend
argument_list|()
argument_list|)
expr_stmt|;
comment|// the broker url have been adjusted.
name|assertEquals
argument_list|(
literal|"vm://localhost"
argument_list|,
name|cf
operator|.
name|getBrokerURL
argument_list|()
argument_list|)
expr_stmt|;
name|cf
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?jms.useAsyncSend=false"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cf
operator|.
name|isUseAsyncSend
argument_list|()
argument_list|)
expr_stmt|;
comment|// the broker url have been adjusted.
name|assertEquals
argument_list|(
literal|"vm://localhost"
argument_list|,
name|cf
operator|.
name|getBrokerURL
argument_list|()
argument_list|)
expr_stmt|;
name|cf
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm:(broker:()/localhost)?jms.useAsyncSend=true"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf
operator|.
name|isUseAsyncSend
argument_list|()
argument_list|)
expr_stmt|;
comment|// the broker url have been adjusted.
name|assertEquals
argument_list|(
literal|"vm:(broker:()/localhost)"
argument_list|,
name|cf
operator|.
name|getBrokerURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateVMConnectionWithEmbdeddBroker
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|JMSException
block|{
name|ActiveMQXAConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
comment|// Make sure the broker is not created until the connection is
comment|// instantiated.
name|assertNull
argument_list|(
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
comment|// This should create the connection.
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// Verify the broker was created.
name|assertNotNull
argument_list|(
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify the broker was destroyed.
name|assertNull
argument_list|(
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetBrokerName
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|JMSException
block|{
name|ActiveMQXAConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|brokerName
init|=
name|connection
operator|.
name|getBrokerName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got broker name: "
operator|+
name|brokerName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No broker name available!"
argument_list|,
name|brokerName
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateTcpConnectionUsingAllocatedPort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCreateConnection
argument_list|(
literal|"tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateTcpConnectionUsingKnownPort
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCreateConnection
argument_list|(
literal|"tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsSameRM
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|JMSException
throws|,
name|XAException
block|{
name|ActiveMQXAConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
name|XAConnection
name|connection1
init|=
operator|(
name|XAConnection
operator|)
name|cf1
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|XASession
name|session1
init|=
name|connection1
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|XAResource
name|resource1
init|=
name|session1
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|ActiveMQXAConnectionFactory
name|cf2
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
name|XAConnection
name|connection2
init|=
operator|(
name|XAConnection
operator|)
name|cf2
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|XASession
name|session2
init|=
name|connection2
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|XAResource
name|resource2
init|=
name|session2
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resource1
operator|.
name|isSameRM
argument_list|(
name|resource2
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testVanilaTransactionalProduceReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQXAConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
name|XAConnection
name|connection1
init|=
operator|(
name|XAConnection
operator|)
name|cf1
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection1
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|session
init|=
name|connection1
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|XAResource
name|resource
init|=
name|session
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// publish a message
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection1
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|TextMessage
name|receivedMessage
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getName
argument_list|()
argument_list|,
name|receivedMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerCloseTransactionalSendReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQXAConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
name|XAConnection
name|connection1
init|=
operator|(
name|XAConnection
operator|)
name|cf1
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection1
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|session
init|=
name|connection1
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|XAResource
name|resource
init|=
name|session
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// publish a message
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection1
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|TextMessage
name|receivedMessage
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getName
argument_list|()
argument_list|,
name|receivedMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection1
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSessionCloseTransactionalSendReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQXAConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
name|XAConnection
name|connection1
init|=
operator|(
name|XAConnection
operator|)
name|cf1
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection1
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|session
init|=
name|connection1
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|XAResource
name|resource
init|=
name|session
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// publish a message
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection1
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|TextMessage
name|receivedMessage
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getName
argument_list|()
argument_list|,
name|receivedMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection1
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertCreateConnection
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Start up a broker with a tcp connector.
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|URI
name|temp
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
comment|// URI connectURI = connector.getServer().getConnectURI();
comment|// TODO this sometimes fails when using the actual local host name
name|URI
name|currentURI
init|=
name|connector
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
decl_stmt|;
comment|// sometimes the actual host name doesn't work in this test case
comment|// e.g. on OS X so lets use the original details but just use the actual
comment|// port
name|URI
name|connectURI
init|=
operator|new
name|URI
argument_list|(
name|temp
operator|.
name|getScheme
argument_list|()
argument_list|,
name|temp
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|temp
operator|.
name|getHost
argument_list|()
argument_list|,
name|currentURI
operator|.
name|getPort
argument_list|()
argument_list|,
name|temp
operator|.
name|getPath
argument_list|()
argument_list|,
name|temp
operator|.
name|getQuery
argument_list|()
argument_list|,
name|temp
operator|.
name|getFragment
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"connection URI is: "
operator|+
name|connectURI
argument_list|)
expr_stmt|;
comment|// This should create the connection.
name|ActiveMQXAConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectURI
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|assertXAConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createXAConnection
argument_list|()
expr_stmt|;
name|assertXAConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertXAConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Should be an XAConnection"
argument_list|,
name|connection
operator|instanceof
name|XAConnection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be an XATopicConnection"
argument_list|,
name|connection
operator|instanceof
name|XATopicConnection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be an XAQueueConnection"
argument_list|,
name|connection
operator|instanceof
name|XAQueueConnection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Xid
name|createXid
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|os
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
operator|++
name|txGenerator
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|bs
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|Xid
argument_list|()
block|{
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
literal|86
return|;
block|}
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

