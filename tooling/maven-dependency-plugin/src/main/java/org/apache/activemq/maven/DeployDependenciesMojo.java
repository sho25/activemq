begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|deployer
operator|.
name|ArtifactDeployer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|deployer
operator|.
name|ArtifactDeploymentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|DefaultArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_comment
comment|/**  * This is a useful little mojo that allows you to copy all the transitive  * dependencies to a specified deployment repository.  Great if you want to create  * a new repo for your project's dependencies.  *   * @goal deploy-dependencies  * @requiresDependencyResolution compile  * @phase process-sources  */
end_comment

begin_class
specifier|public
class|class
name|DeployDependenciesMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * @parameter expression="${project}"      * @readonly      * @required      */
specifier|private
name|MavenProject
name|project
decl_stmt|;
comment|/**      * @parameter expression="${reactorProjects}"      * @required      * @readonly      */
specifier|private
name|List
name|reactorProjects
decl_stmt|;
comment|/**      * @parameter expression="${component.org.apache.maven.artifact.deployer.ArtifactDeployer}"      * @required      * @readonly      */
specifier|private
name|ArtifactDeployer
name|deployer
decl_stmt|;
comment|/**      * @parameter expression="${localRepository}"      * @required      * @readonly      */
specifier|private
name|ArtifactRepository
name|localRepository
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|ArtifactRepository
name|deploymentRepository
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|String
name|deploymentRepositoryId
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|String
name|deploymentRepositoryUrl
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|ArtifactRepositoryLayout
name|deploymentRepositoryLayout
init|=
operator|new
name|DefaultRepositoryLayout
argument_list|()
decl_stmt|;
comment|/**      *       */
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|deploymentRepository
operator|==
literal|null
condition|)
block|{
name|deploymentRepository
operator|=
operator|new
name|DefaultArtifactRepository
argument_list|(
name|deploymentRepositoryId
argument_list|,
name|deploymentRepositoryUrl
argument_list|,
name|deploymentRepositoryLayout
argument_list|)
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"repo type="
operator|+
name|deploymentRepository
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|protocol
init|=
name|deploymentRepository
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
literal|"scp"
argument_list|)
condition|)
block|{
name|File
name|sshFile
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|".ssh"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sshFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|sshFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
name|dependencies
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|reactorProjects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MavenProject
name|p
init|=
operator|(
name|MavenProject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
name|dependencyArtifacts
init|=
name|p
operator|.
name|getTestArtifacts
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencyArtifacts
operator|!=
literal|null
condition|)
name|dependencies
operator|.
name|addAll
argument_list|(
name|dependencyArtifacts
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|deploy
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deploy
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Copying "
operator|+
name|artifact
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" to "
operator|+
name|deploymentRepository
argument_list|)
expr_stmt|;
name|deployer
operator|.
name|deploy
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|deploymentRepository
argument_list|,
name|localRepository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactDeploymentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

