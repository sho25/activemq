begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|jms
operator|.
name|exceptions
operator|.
name|IdConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|UnsignedLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AMQPMessageIdHelperTest
block|{
specifier|private
name|AMQPMessageIdHelper
name|messageIdHelper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|messageIdHelper
operator|=
operator|new
name|AMQPMessageIdHelper
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns null if given null      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithNull
parameter_list|()
block|{
name|String
name|nullString
init|=
literal|null
decl_stmt|;
name|assertNull
argument_list|(
literal|"null string should have been returned"
argument_list|,
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|nullString
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * throws an IAE if given an unexpected object type.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringThrowsIAEWithUnexpectedType
parameter_list|()
block|{
try|try
block|{
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns the given basic string unchanged      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithString
parameter_list|()
block|{
name|String
name|stringMessageId
init|=
literal|"myIdString"
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|stringMessageId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|stringMessageId
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns a string indicating an AMQP encoded string, when the given string      * happens to already begin with the      * {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForUUID
parameter_list|()
block|{
name|String
name|uuidStringMessageId
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_UUID_PREFIX
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_STRING_PREFIX
operator|+
name|uuidStringMessageId
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|uuidStringMessageId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|expected
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns a string indicating an AMQP encoded string, when the given string      * happens to already begin with the      * {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForLong
parameter_list|()
block|{
name|String
name|longStringMessageId
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_ULONG_PREFIX
operator|+
name|Long
operator|.
name|valueOf
argument_list|(
literal|123456789L
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_STRING_PREFIX
operator|+
name|longStringMessageId
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|longStringMessageId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|expected
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns a string indicating an AMQP encoded string, when the given string      * happens to already begin with the      * {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForBinary
parameter_list|()
block|{
name|String
name|binaryStringMessageId
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
literal|"0123456789ABCDEF"
decl_stmt|;
name|String
name|expected
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_STRING_PREFIX
operator|+
name|binaryStringMessageId
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|binaryStringMessageId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|expected
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns a string indicating an AMQP encoded string (effectively twice),      * when the given string happens to already begin with the      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForString
parameter_list|()
block|{
name|String
name|stringMessageId
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_STRING_PREFIX
operator|+
literal|"myStringId"
decl_stmt|;
name|String
name|expected
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_STRING_PREFIX
operator|+
name|stringMessageId
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|stringMessageId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|expected
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns a string indicating an AMQP encoded UUID when given a UUID      * object.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithUUID
parameter_list|()
block|{
name|UUID
name|uuidMessageId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_UUID_PREFIX
operator|+
name|uuidMessageId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|uuidMessageId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|expected
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns a string indicating an AMQP encoded ulong when given a      * UnsignedLong object.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithUnsignedLong
parameter_list|()
block|{
name|UnsignedLong
name|uLongMessageId
init|=
name|UnsignedLong
operator|.
name|valueOf
argument_list|(
literal|123456789L
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_ULONG_PREFIX
operator|+
name|uLongMessageId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|uLongMessageId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|expected
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}      * returns a string indicating an AMQP encoded binary when given a Binary      * object.      */
annotation|@
name|Test
specifier|public
name|void
name|testToBaseMessageIdStringWithBinary
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|Binary
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
literal|"00AB09FF"
decl_stmt|;
name|String
name|baseMessageIdString
init|=
name|messageIdHelper
operator|.
name|toBaseMessageIdString
argument_list|(
name|binary
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null string should not have been returned"
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected base id string was not returned"
argument_list|,
name|expected
argument_list|,
name|baseMessageIdString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns an      * UnsignedLong when given a string indicating an encoded AMQP ulong id.      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithEncodedUlong
parameter_list|()
throws|throws
name|Exception
block|{
name|UnsignedLong
name|longId
init|=
name|UnsignedLong
operator|.
name|valueOf
argument_list|(
literal|123456789L
argument_list|)
decl_stmt|;
name|String
name|provided
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_ULONG_PREFIX
operator|+
literal|"123456789"
decl_stmt|;
name|Object
name|idObject
init|=
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|provided
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null object should not have been returned"
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected id object was not returned"
argument_list|,
name|longId
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary      * when given a string indicating an encoded AMQP binary id, using upper      * case hex characters      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithEncodedBinaryUppercaseHexString
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
name|Binary
name|binaryId
init|=
operator|new
name|Binary
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|String
name|provided
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
literal|"00AB09FF"
decl_stmt|;
name|Object
name|idObject
init|=
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|provided
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null object should not have been returned"
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected id object was not returned"
argument_list|,
name|binaryId
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns null      * when given null.      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
literal|"null object should have been returned"
argument_list|,
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary      * when given a string indicating an encoded AMQP binary id, using lower      * case hex characters.      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithEncodedBinaryLowercaseHexString
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
name|Binary
name|binaryId
init|=
operator|new
name|Binary
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|String
name|provided
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
literal|"00ab09ff"
decl_stmt|;
name|Object
name|idObject
init|=
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|provided
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null object should not have been returned"
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected id object was not returned"
argument_list|,
name|binaryId
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a UUID      * when given a string indicating an encoded AMQP uuid id.      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithEncodedUuid
parameter_list|()
throws|throws
name|Exception
block|{
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|provided
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_UUID_PREFIX
operator|+
name|uuid
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|idObject
init|=
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|provided
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null object should not have been returned"
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected id object was not returned"
argument_list|,
name|uuid
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a string      * when given a string without any type encoding prefix.      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithStringContainingNoEncodingPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|stringId
init|=
literal|"myStringId"
decl_stmt|;
name|Object
name|idObject
init|=
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|stringId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null object should not have been returned"
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected id object was not returned"
argument_list|,
name|stringId
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns the      * remainder of the provided string after removing the      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithStringContainingStringEncodingPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|suffix
init|=
literal|"myStringSuffix"
decl_stmt|;
name|String
name|stringId
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_STRING_PREFIX
operator|+
name|suffix
decl_stmt|;
name|Object
name|idObject
init|=
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|stringId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null object should not have been returned"
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected id object was not returned"
argument_list|,
name|suffix
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that when given a string with with the      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix and then      * additionally the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}, the      * {@link AMQPMessageIdHelper#toIdObject(String)} method returns the      * remainder of the provided string after removing the      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.      *      * @throws Exception      *         if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithStringContainingStringEncodingPrefixAndThenUuidPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|encodedUuidString
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_UUID_PREFIX
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|stringId
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_STRING_PREFIX
operator|+
name|encodedUuidString
decl_stmt|;
name|Object
name|idObject
init|=
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|stringId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null object should not have been returned"
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected id object was not returned"
argument_list|,
name|encodedUuidString
argument_list|,
name|idObject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an      * {@link IdConversionException} when presented with an encoded binary hex      * string of uneven length (after the prefix) that thus can't be converted      * due to each byte using 2 characters      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithStringContainingBinaryHexThrowsWithUnevenLengthString
parameter_list|()
block|{
name|String
name|unevenHead
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
literal|"123"
decl_stmt|;
try|try
block|{
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|unevenHead
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an      * {@link IdConversionException} when presented with an encoded binary hex      * string (after the prefix) that contains characters other than 0-9 and A-F      * and a-f, and thus can't be converted      */
annotation|@
name|Test
specifier|public
name|void
name|testToIdObjectWithStringContainingBinaryHexThrowsWithNonHexCharacters
parameter_list|()
block|{
comment|// char before '0'
name|char
name|nonHexChar
init|=
literal|'/'
decl_stmt|;
name|String
name|nonHexString
init|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
name|nonHexChar
operator|+
name|nonHexChar
decl_stmt|;
try|try
block|{
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|nonHexString
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// char after '9', before 'A'
name|nonHexChar
operator|=
literal|':'
expr_stmt|;
name|nonHexString
operator|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
name|nonHexChar
operator|+
name|nonHexChar
expr_stmt|;
try|try
block|{
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|nonHexString
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// char after 'F', before 'a'
name|nonHexChar
operator|=
literal|'G'
expr_stmt|;
name|nonHexString
operator|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
name|nonHexChar
operator|+
name|nonHexChar
expr_stmt|;
try|try
block|{
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|nonHexString
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// char after 'f'
name|nonHexChar
operator|=
literal|'g'
expr_stmt|;
name|nonHexString
operator|=
name|AMQPMessageIdHelper
operator|.
name|AMQP_BINARY_PREFIX
operator|+
name|nonHexChar
operator|+
name|nonHexChar
expr_stmt|;
try|try
block|{
name|messageIdHelper
operator|.
name|toIdObject
argument_list|(
name|nonHexString
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

