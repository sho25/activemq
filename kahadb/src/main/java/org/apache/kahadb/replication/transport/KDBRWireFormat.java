begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|ReplicationFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBJournalLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBJournalUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBSlaveInit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBSlaveInitResponse
import|;
end_import

begin_class
specifier|public
class|class
name|KDBRWireFormat
implements|implements
name|WireFormat
block|{
specifier|private
name|int
name|version
decl_stmt|;
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|ByteSequence
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented."
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|ByteSequence
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
operator|(
name|OutputStream
operator|)
name|out
decl_stmt|;
name|ReplicationFrame
name|frame
init|=
operator|(
name|ReplicationFrame
operator|)
name|command
decl_stmt|;
name|PBHeader
name|header
init|=
name|frame
operator|.
name|getHeader
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FILE_TRANSFER_RESPONSE
case|:
block|{
comment|// Write the header..
name|header
operator|.
name|writeFramed
argument_list|(
name|os
argument_list|)
expr_stmt|;
comment|// Stream the Payload.
name|InputStream
name|is
init|=
operator|(
name|InputStream
operator|)
name|frame
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
name|long
name|remaining
init|=
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getPayloadSize
argument_list|()
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
operator|&&
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|data
operator|.
name|length
argument_list|)
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|remaining
operator|-=
name|c
expr_stmt|;
block|}
break|break;
block|}
default|default:
if|if
condition|(
name|frame
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
condition|)
block|{
name|header
operator|.
name|clearPayloadSize
argument_list|()
expr_stmt|;
name|header
operator|.
name|writeFramed
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// All other payloads types are PB messages
name|Message
name|message
init|=
operator|(
name|Message
operator|)
name|frame
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|header
operator|.
name|setPayloadSize
argument_list|(
name|message
operator|.
name|serializedSizeUnframed
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|writeFramed
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeUnframed
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
operator|(
name|InputStream
operator|)
name|in
decl_stmt|;
name|ReplicationFrame
name|frame
init|=
operator|new
name|ReplicationFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
name|PBHeader
operator|.
name|parseFramed
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FILE_TRANSFER_RESPONSE
case|:
name|frame
operator|.
name|setPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILE_TRANSFER
case|:
name|readPBPayload
argument_list|(
name|frame
argument_list|,
name|in
argument_list|,
operator|new
name|PBFileInfo
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOURNAL_UPDATE
case|:
name|readPBPayload
argument_list|(
name|frame
argument_list|,
name|in
argument_list|,
operator|new
name|PBJournalUpdate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOURNAL_UPDATE_ACK
case|:
name|readPBPayload
argument_list|(
name|frame
argument_list|,
name|in
argument_list|,
operator|new
name|PBJournalLocation
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SLAVE_INIT
case|:
name|readPBPayload
argument_list|(
name|frame
argument_list|,
name|in
argument_list|,
operator|new
name|PBSlaveInit
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SLAVE_INIT_RESPONSE
case|:
name|readPBPayload
argument_list|(
name|frame
argument_list|,
name|in
argument_list|,
operator|new
name|PBSlaveInitResponse
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|frame
return|;
block|}
specifier|private
name|void
name|readPBPayload
parameter_list|(
name|ReplicationFrame
name|frame
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|Message
name|pb
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidProtocolBufferException
block|{
name|long
name|payloadSize
init|=
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getPayloadSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|payload
decl_stmt|;
name|payload
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|payloadSize
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|pb
operator|.
name|mergeUnframed
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

