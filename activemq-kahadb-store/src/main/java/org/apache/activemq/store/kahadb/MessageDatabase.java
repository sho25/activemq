begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageAuditNoSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protobuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStoreStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAckMessageFileMapCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAddMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaCommitCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaPrepareCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaProducerAuditCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveDestinationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRollbackCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaSubscriptionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaTraceCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaTransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaUpdateMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
operator|.
name|BTreeIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
operator|.
name|BTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
operator|.
name|ListIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|DataFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Page
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LocationMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LongMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|SequenceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|StringMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|MessageDatabase
extends|extends
name|ServiceSupport
implements|implements
name|BrokerServiceAware
block|{
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOG_SLOW_ACCESS_TIME
init|=
literal|"org.apache.activemq.store.kahadb.LOG_SLOW_ACCESS_TIME"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOG_SLOW_ACCESS_TIME
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|PROPERTY_LOG_SLOW_ACCESS_TIME
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|File
name|DEFAULT_DIRECTORY
init|=
operator|new
name|File
argument_list|(
literal|"KahaDB"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Buffer
name|UNMATCHED
decl_stmt|;
static|static
block|{
name|UNMATCHED
operator|=
operator|new
name|Buffer
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MessageDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|CLOSED_STATE
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|OPEN_STATE
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|long
name|NOT_ACKED
init|=
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|6
decl_stmt|;
specifier|protected
class|class
name|Metadata
block|{
specifier|protected
name|Page
argument_list|<
name|Metadata
argument_list|>
name|page
decl_stmt|;
specifier|protected
name|int
name|state
decl_stmt|;
specifier|protected
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|destinations
decl_stmt|;
specifier|protected
name|Location
name|lastUpdate
decl_stmt|;
specifier|protected
name|Location
name|firstInProgressTransactionLocation
decl_stmt|;
specifier|protected
name|Location
name|producerSequenceIdTrackerLocation
init|=
literal|null
decl_stmt|;
specifier|protected
name|Location
name|ackMessageFileMapLocation
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|transient
name|ActiveMQMessageAuditNoSync
name|producerSequenceIdTracker
init|=
operator|new
name|ActiveMQMessageAuditNoSync
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|ackMessageFileMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|version
init|=
name|VERSION
decl_stmt|;
specifier|protected
name|int
name|openwireVersion
init|=
name|OpenWireFormat
operator|.
name|DEFAULT_STORE_VERSION
decl_stmt|;
specifier|public
name|void
name|read
parameter_list|(
name|DataInput
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|destinations
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|is
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|lastUpdate
operator|=
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastUpdate
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|firstInProgressTransactionLocation
operator|=
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstInProgressTransactionLocation
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|is
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|producerSequenceIdTrackerLocation
operator|=
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|producerSequenceIdTrackerLocation
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|expectedOnUpgrade
parameter_list|)
block|{             }
try|try
block|{
name|version
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|expectedOnUpgrade
parameter_list|)
block|{
name|version
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|5
operator|&&
name|is
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|ackMessageFileMapLocation
operator|=
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ackMessageFileMapLocation
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|openwireVersion
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|expectedOnUpgrade
parameter_list|)
block|{
name|openwireVersion
operator|=
name|OpenWireFormat
operator|.
name|DEFAULT_LEGACY_VERSION
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"KahaDB is version "
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|destinations
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastUpdate
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|lastUpdate
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstInProgressTransactionLocation
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|firstInProgressTransactionLocation
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producerSequenceIdTrackerLocation
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|producerSequenceIdTrackerLocation
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|writeInt
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|ackMessageFileMapLocation
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|ackMessageFileMapLocation
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|openwireVersion
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|MetadataMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|Metadata
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Metadata
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|rc
init|=
name|createMetadata
argument_list|()
decl_stmt|;
name|rc
operator|.
name|read
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|Metadata
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|PageFile
name|pageFile
decl_stmt|;
specifier|protected
name|Journal
name|journal
decl_stmt|;
specifier|protected
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
specifier|protected
name|MetadataMarshaller
name|metadataMarshaller
init|=
operator|new
name|MetadataMarshaller
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|failIfDatabaseIsLocked
decl_stmt|;
specifier|protected
name|boolean
name|deleteAllMessages
decl_stmt|;
specifier|protected
name|File
name|directory
init|=
name|DEFAULT_DIRECTORY
decl_stmt|;
specifier|protected
name|File
name|indexDirectory
init|=
literal|null
decl_stmt|;
specifier|protected
name|Thread
name|checkpointThread
decl_stmt|;
specifier|protected
name|boolean
name|enableJournalDiskSyncs
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|archiveDataLogs
decl_stmt|;
specifier|protected
name|File
name|directoryArchive
decl_stmt|;
specifier|protected
name|AtomicLong
name|journalSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|checkpointInterval
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
name|long
name|cleanupInterval
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
name|int
name|journalMaxFileLength
init|=
name|Journal
operator|.
name|DEFAULT_MAX_FILE_LENGTH
decl_stmt|;
name|int
name|journalMaxWriteBatchSize
init|=
name|Journal
operator|.
name|DEFAULT_MAX_WRITE_BATCH_SIZE
decl_stmt|;
name|boolean
name|enableIndexWriteAsync
init|=
literal|false
decl_stmt|;
name|int
name|setIndexWriteBatchSize
init|=
name|PageFile
operator|.
name|DEFAULT_WRITE_BATCH_SIZE
decl_stmt|;
specifier|private
name|String
name|preallocationScope
init|=
name|Journal
operator|.
name|PreallocationScope
operator|.
name|ENTIRE_JOURNAL
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|private
name|String
name|preallocationStrategy
init|=
name|Journal
operator|.
name|PreallocationStrategy
operator|.
name|SPARSE_FILE
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|opened
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|ignoreMissingJournalfiles
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|indexCacheSize
init|=
literal|10000
decl_stmt|;
specifier|private
name|boolean
name|checkForCorruptJournalFiles
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|checksumJournalFiles
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|forceRecoverIndex
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Object
name|checkpointThreadLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|archiveCorruptedIndex
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useIndexLFRUEviction
init|=
literal|false
decl_stmt|;
specifier|private
name|float
name|indexLFUEvictionFactor
init|=
literal|0.2f
decl_stmt|;
specifier|private
name|boolean
name|enableIndexDiskSyncs
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enableIndexRecoveryFile
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enableIndexPageCaching
init|=
literal|true
decl_stmt|;
name|ReentrantReadWriteLock
name|checkpointLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|load
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|unload
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadPageFile
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|PageFile
name|pageFile
init|=
name|getPageFile
argument_list|()
decl_stmt|;
name|pageFile
operator|.
name|load
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// First time this is created.. Initialize the metadata
name|Page
argument_list|<
name|Metadata
argument_list|>
name|page
init|=
name|tx
operator|.
name|allocate
argument_list|()
decl_stmt|;
assert|assert
name|page
operator|.
name|getPageId
argument_list|()
operator|==
literal|0
assert|;
name|page
operator|.
name|set
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|page
operator|=
name|page
expr_stmt|;
name|metadata
operator|.
name|state
operator|=
name|CLOSED_STATE
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Page
argument_list|<
name|Metadata
argument_list|>
name|page
init|=
name|tx
operator|.
name|load
argument_list|(
literal|0
argument_list|,
name|metadataMarshaller
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|page
operator|.
name|get
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
name|metadata
operator|.
name|destinations
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|StoredDestinationMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Load up all the destinations since we need to scan all the indexes to figure out which journal files can be deleted.
comment|// Perhaps we should just keep an index of file
name|storedDestinations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|>
name|iterator
init|=
name|metadata
operator|.
name|destinations
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|StoredDestination
name|sd
init|=
name|loadStoredDestination
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|subscriptions
operator|!=
literal|null
argument_list|)
decl_stmt|;
name|storedDestinations
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|sd
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkForCorruptJournalFiles
condition|)
block|{
comment|// sanity check the index also
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|locationIndex
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|orderIndex
operator|.
name|nextMessageId
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Detected uninitialized orderIndex nextMessageId with pending messages for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|pageFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startCheckpoint
parameter_list|()
block|{
if|if
condition|(
name|checkpointInterval
operator|==
literal|0
operator|&&
name|cleanupInterval
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart"
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|checkpointThreadLock
init|)
block|{
name|boolean
name|start
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|checkpointThread
operator|==
literal|null
condition|)
block|{
name|start
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkpointThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|start
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"KahaDB: Recovering checkpoint thread after death"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
condition|)
block|{
name|checkpointThread
operator|=
operator|new
name|Thread
argument_list|(
literal|"ActiveMQ Journal Checkpoint Worker"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|long
name|lastCleanup
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|lastCheckpoint
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Sleep for a short time so we can periodically check
comment|// to see if we need to exit this thread.
name|long
name|sleepTime
init|=
name|Math
operator|.
name|min
argument_list|(
name|checkpointInterval
operator|>
literal|0
condition|?
name|checkpointInterval
else|:
name|cleanupInterval
argument_list|,
literal|500
argument_list|)
decl_stmt|;
while|while
condition|(
name|opened
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|cleanupInterval
operator|>
literal|0
operator|&&
operator|(
name|now
operator|-
name|lastCleanup
operator|>=
name|cleanupInterval
operator|)
condition|)
block|{
name|checkpointCleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lastCleanup
operator|=
name|now
expr_stmt|;
name|lastCheckpoint
operator|=
name|now
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|checkpointInterval
operator|>
literal|0
operator|&&
operator|(
name|now
operator|-
name|lastCheckpoint
operator|>=
name|checkpointInterval
operator|)
condition|)
block|{
name|checkpointCleanup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lastCheckpoint
operator|=
name|now
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Looks like someone really wants us to exit this thread...
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Checkpoint failed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|handleIOException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|checkpointThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkpointThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|opened
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|getJournal
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|loadPageFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Index corrupted. Recovering the index through journal replay. Cause:"
operator|+
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Index load failure"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// try to recover index
try|try
block|{
name|pageFile
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
if|if
condition|(
name|archiveCorruptedIndex
condition|)
block|{
name|pageFile
operator|.
name|archive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pageFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|metadata
operator|=
name|createMetadata
argument_list|()
expr_stmt|;
name|pageFile
operator|=
literal|null
expr_stmt|;
name|loadPageFile
argument_list|()
expr_stmt|;
block|}
name|startCheckpoint
argument_list|()
expr_stmt|;
name|recover
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|deleteAllMessages
condition|)
block|{
name|getJournal
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|getJournal
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|getJournal
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|journal
operator|=
literal|null
expr_stmt|;
name|getPageFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Persistence store purged."
argument_list|)
expr_stmt|;
name|deleteAllMessages
operator|=
literal|false
expr_stmt|;
block|}
name|open
argument_list|()
expr_stmt|;
name|store
argument_list|(
operator|new
name|KahaTraceCommand
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"LOADED "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|opened
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|checkpointLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|metadata
operator|.
name|page
operator|!=
literal|null
condition|)
block|{
name|checkpointUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|pageFile
operator|.
name|unload
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|createMetadata
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|checkpointLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|checkpointThreadLock
init|)
block|{
if|if
condition|(
name|checkpointThread
operator|!=
literal|null
condition|)
block|{
name|checkpointThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|//clear the cache on shutdown of the store
name|storeCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unload
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|pageFile
operator|!=
literal|null
operator|&&
name|pageFile
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|state
operator|=
name|CLOSED_STATE
expr_stmt|;
name|metadata
operator|.
name|firstInProgressTransactionLocation
operator|=
name|getInProgressTxLocationRange
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|page
operator|!=
literal|null
condition|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
block|}
comment|// public for testing
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Location
index|[]
name|getInProgressTxLocationRange
parameter_list|()
block|{
name|Location
index|[]
name|range
init|=
operator|new
name|Location
index|[]
block|{
literal|null
block|,
literal|null
block|}
decl_stmt|;
synchronized|synchronized
init|(
name|inflightTransactions
init|)
block|{
if|if
condition|(
operator|!
name|inflightTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Operation
argument_list|>
name|ops
range|:
name|inflightTransactions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|trackMaxAndMin
argument_list|(
name|range
argument_list|,
name|ops
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|preparedTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Operation
argument_list|>
name|ops
range|:
name|preparedTransactions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|trackMaxAndMin
argument_list|(
name|range
argument_list|,
name|ops
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|range
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|trackMaxAndMin
parameter_list|(
name|Location
index|[]
name|range
parameter_list|,
name|List
argument_list|<
name|Operation
argument_list|>
name|ops
parameter_list|)
block|{
name|Location
name|t
init|=
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|t
operator|.
name|compareTo
argument_list|(
name|range
index|[
literal|0
index|]
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|range
index|[
literal|0
index|]
operator|=
name|t
expr_stmt|;
block|}
name|t
operator|=
name|ops
operator|.
name|get
argument_list|(
name|ops
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getLocation
argument_list|()
expr_stmt|;
if|if
condition|(
name|range
index|[
literal|1
index|]
operator|==
literal|null
operator|||
name|t
operator|.
name|compareTo
argument_list|(
name|range
index|[
literal|1
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|range
index|[
literal|1
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
class|class
name|TranInfo
block|{
name|TransactionId
name|id
decl_stmt|;
name|Location
name|location
decl_stmt|;
class|class
name|opCount
block|{
name|int
name|add
decl_stmt|;
name|int
name|remove
decl_stmt|;
block|}
name|HashMap
argument_list|<
name|KahaDestination
argument_list|,
name|opCount
argument_list|>
name|destinationOpCount
init|=
operator|new
name|HashMap
argument_list|<
name|KahaDestination
argument_list|,
name|opCount
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|void
name|track
parameter_list|(
name|Operation
name|operation
parameter_list|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|location
operator|=
name|operation
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
name|KahaDestination
name|destination
decl_stmt|;
name|boolean
name|isAdd
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|AddOperation
condition|)
block|{
name|AddOperation
name|add
init|=
operator|(
name|AddOperation
operator|)
name|operation
decl_stmt|;
name|destination
operator|=
name|add
operator|.
name|getCommand
argument_list|()
operator|.
name|getDestination
argument_list|()
expr_stmt|;
name|isAdd
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|RemoveOperation
name|removeOpperation
init|=
operator|(
name|RemoveOperation
operator|)
name|operation
decl_stmt|;
name|destination
operator|=
name|removeOpperation
operator|.
name|getCommand
argument_list|()
operator|.
name|getDestination
argument_list|()
expr_stmt|;
block|}
name|opCount
name|opCount
init|=
name|destinationOpCount
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|opCount
operator|==
literal|null
condition|)
block|{
name|opCount
operator|=
operator|new
name|opCount
argument_list|()
expr_stmt|;
name|destinationOpCount
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|opCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAdd
condition|)
block|{
name|opCount
operator|.
name|add
operator|++
expr_stmt|;
block|}
else|else
block|{
name|opCount
operator|.
name|remove
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|location
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|KahaDestination
argument_list|,
name|opCount
argument_list|>
name|op
range|:
name|destinationOpCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|op
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
operator|.
name|append
argument_list|(
name|op
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|op
operator|.
name|getValue
argument_list|()
operator|.
name|remove
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|String
name|getTransactions
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|TranInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<
name|TranInfo
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|inflightTransactions
init|)
block|{
if|if
condition|(
operator|!
name|inflightTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|entry
range|:
name|inflightTransactions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TranInfo
name|info
init|=
operator|new
name|TranInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|id
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|info
operator|.
name|track
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|preparedTransactions
init|)
block|{
if|if
condition|(
operator|!
name|preparedTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|entry
range|:
name|preparedTransactions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TranInfo
name|info
init|=
operator|new
name|TranInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|id
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|info
operator|.
name|track
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|infos
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Move all the messages that were in the journal into long term storage. We      * just replay and do a checkpoint.      *      * @throws IOException      * @throws IOException      * @throws IllegalStateException      */
specifier|private
name|void
name|recover
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Location
name|producerAuditPosition
init|=
name|recoverProducerAudit
argument_list|()
decl_stmt|;
name|Location
name|ackMessageFileLocation
init|=
name|recoverAckMessageFileMap
argument_list|()
decl_stmt|;
name|Location
name|lastIndoubtPosition
init|=
name|getRecoveryPosition
argument_list|()
decl_stmt|;
name|Location
name|recoveryPosition
init|=
name|minimum
argument_list|(
name|producerAuditPosition
argument_list|,
name|ackMessageFileLocation
argument_list|)
decl_stmt|;
name|recoveryPosition
operator|=
name|minimum
argument_list|(
name|recoveryPosition
argument_list|,
name|lastIndoubtPosition
argument_list|)
expr_stmt|;
if|if
condition|(
name|recoveryPosition
operator|!=
literal|null
condition|)
block|{
name|int
name|redoCounter
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering from the journal @"
operator|+
name|recoveryPosition
argument_list|)
expr_stmt|;
while|while
condition|(
name|recoveryPosition
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|message
init|=
name|load
argument_list|(
name|recoveryPosition
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|recoveryPosition
expr_stmt|;
name|process
argument_list|(
name|message
argument_list|,
name|recoveryPosition
argument_list|,
name|lastIndoubtPosition
argument_list|)
expr_stmt|;
name|redoCounter
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|failedRecovery
parameter_list|)
block|{
if|if
condition|(
name|isIgnoreMissingJournalfiles
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to recover data at position:"
operator|+
name|recoveryPosition
argument_list|,
name|failedRecovery
argument_list|)
expr_stmt|;
comment|// track this dud location
name|journal
operator|.
name|corruptRecoveryLocation
argument_list|(
name|recoveryPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to recover data at position:"
operator|+
name|recoveryPosition
argument_list|,
name|failedRecovery
argument_list|)
throw|;
block|}
block|}
name|recoveryPosition
operator|=
name|journal
operator|.
name|getNextLocation
argument_list|(
name|recoveryPosition
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
name|redoCounter
operator|%
literal|100000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"@"
operator|+
name|recoveryPosition
operator|+
literal|", "
operator|+
name|redoCounter
operator|+
literal|" entries recovered .."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovery replayed "
operator|+
name|redoCounter
operator|+
literal|" operations from the journal in "
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0f
operator|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We may have to undo some index updates.
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|recoverIndex
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// rollback any recovered inflight local transactions, and discard any inflight XA transactions.
name|Set
argument_list|<
name|TransactionId
argument_list|>
name|toRollback
init|=
operator|new
name|HashSet
argument_list|<
name|TransactionId
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TransactionId
argument_list|>
name|toDiscard
init|=
operator|new
name|HashSet
argument_list|<
name|TransactionId
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|inflightTransactions
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|TransactionId
argument_list|>
name|it
init|=
name|inflightTransactions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TransactionId
name|id
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isLocalTransaction
argument_list|()
condition|)
block|{
name|toRollback
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toDiscard
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TransactionId
name|tx
range|:
name|toRollback
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rolling back recovered indoubt local transaction "
operator|+
name|tx
argument_list|)
expr_stmt|;
block|}
name|store
argument_list|(
operator|new
name|KahaRollbackCommand
argument_list|()
operator|.
name|setTransactionInfo
argument_list|(
name|TransactionIdConversion
operator|.
name|convertToLocal
argument_list|(
name|tx
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TransactionId
name|tx
range|:
name|toDiscard
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"discarding recovered in-flight XA transaction "
operator|+
name|tx
argument_list|)
expr_stmt|;
block|}
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|preparedTransactions
init|)
block|{
for|for
control|(
name|TransactionId
name|txId
range|:
name|preparedTransactions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Recovered prepared XA TX: [{}]"
argument_list|,
name|txId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|KahaTransactionInfo
name|createLocalTransactionInfo
parameter_list|(
name|TransactionId
name|tx
parameter_list|)
block|{
return|return
name|TransactionIdConversion
operator|.
name|convertToLocal
argument_list|(
name|tx
argument_list|)
return|;
block|}
specifier|private
name|Location
name|minimum
parameter_list|(
name|Location
name|producerAuditPosition
parameter_list|,
name|Location
name|lastIndoubtPosition
parameter_list|)
block|{
name|Location
name|min
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|producerAuditPosition
operator|!=
literal|null
condition|)
block|{
name|min
operator|=
name|producerAuditPosition
expr_stmt|;
if|if
condition|(
name|lastIndoubtPosition
operator|!=
literal|null
operator|&&
name|lastIndoubtPosition
operator|.
name|compareTo
argument_list|(
name|producerAuditPosition
argument_list|)
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|lastIndoubtPosition
expr_stmt|;
block|}
block|}
else|else
block|{
name|min
operator|=
name|lastIndoubtPosition
expr_stmt|;
block|}
return|return
name|min
return|;
block|}
specifier|private
name|Location
name|recoverProducerAudit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
operator|!=
literal|null
condition|)
block|{
name|KahaProducerAuditCommand
name|audit
init|=
operator|(
name|KahaProducerAuditCommand
operator|)
name|load
argument_list|(
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectInputStream
name|objectIn
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|audit
operator|.
name|getAudit
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxNumProducers
init|=
name|getMaxFailoverProducersToTrack
argument_list|()
decl_stmt|;
name|int
name|maxAuditDepth
init|=
name|getFailoverProducersAuditDepth
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|producerSequenceIdTracker
operator|=
operator|(
name|ActiveMQMessageAuditNoSync
operator|)
name|objectIn
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|setAuditDepth
argument_list|(
name|maxAuditDepth
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|setMaximumNumberOfProducersToTrack
argument_list|(
name|maxNumProducers
argument_list|)
expr_stmt|;
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot recover message audit"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// got no audit stored so got to recreate via replay from start of the journal
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Location
name|recoverAckMessageFileMap
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|.
name|ackMessageFileMapLocation
operator|!=
literal|null
condition|)
block|{
name|KahaAckMessageFileMapCommand
name|audit
init|=
operator|(
name|KahaAckMessageFileMapCommand
operator|)
name|load
argument_list|(
name|metadata
operator|.
name|ackMessageFileMapLocation
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectInputStream
name|objectIn
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|audit
operator|.
name|getAckMessageFileMap
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|ackMessageFileMap
operator|=
operator|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
argument_list|>
operator|)
name|objectIn
operator|.
name|readObject
argument_list|()
expr_stmt|;
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
name|metadata
operator|.
name|ackMessageFileMapLocation
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot recover ackMessageFileMap"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// got no ackMessageFileMap stored so got to recreate via replay from start of the journal
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|recoverIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// It is possible index updates got applied before the journal updates..
comment|// in that case we need to removed references to messages that are not in the journal
specifier|final
name|Location
name|lastAppendLocation
init|=
name|journal
operator|.
name|getLastAppendLocation
argument_list|()
decl_stmt|;
name|long
name|undoCounter
init|=
literal|0
decl_stmt|;
comment|// Go through all the destinations to see if they have messages past the lastAppendLocation
for|for
control|(
name|String
name|key
range|:
name|storedDestinations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|StoredDestination
name|sd
init|=
name|storedDestinations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Find all the Locations that are>= than the last Append Location.
name|sd
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
operator|.
name|GTEVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|lastAppendLocation
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|matched
parameter_list|(
name|Location
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|sequenceId
range|:
name|matches
control|)
block|{
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
decl_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|rollback
argument_list|(
name|keys
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|undoCounter
operator|++
expr_stmt|;
name|decrementAndSubSizeToStoreStat
argument_list|(
name|key
argument_list|,
name|keys
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: do we need to modify the ack positions for the pub sub case?
block|}
block|}
if|if
condition|(
name|undoCounter
operator|>
literal|0
condition|)
block|{
comment|// The rolledback operations are basically in flight journal writes.  To avoid getting
comment|// these the end user should do sync writes to the journal.
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolled back "
operator|+
name|undoCounter
operator|+
literal|" messages from the index in "
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0f
operator|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
block|}
name|undoCounter
operator|=
literal|0
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Lets be extra paranoid here and verify that all the datafiles being referenced
comment|// by the indexes still exists.
specifier|final
name|SequenceSet
name|ss
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StoredDestination
name|sd
range|:
name|storedDestinations
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Use a visitor to cut down the number of pages that we load
name|sd
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Location
name|first
parameter_list|,
name|Location
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
operator|!
name|ss
operator|.
name|contains
argument_list|(
literal|0
argument_list|,
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|!
name|ss
operator|.
name|contains
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|List
argument_list|<
name|Location
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|Location
name|l
range|:
name|keys
control|)
block|{
name|int
name|fileId
init|=
name|l
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
name|fileId
condition|)
block|{
name|ss
operator|.
name|add
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
name|last
operator|=
name|fileId
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|missingJournalFiles
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|ss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|missingJournalFiles
operator|.
name|add
argument_list|(
operator|(
name|int
operator|)
name|ss
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|missingJournalFiles
operator|.
name|removeAll
argument_list|(
name|journal
operator|.
name|getFileMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|missingJournalFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Some journal files are missing: "
operator|+
name|missingJournalFiles
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|BTreeVisitor
operator|.
name|Predicate
argument_list|<
name|Location
argument_list|>
argument_list|>
name|missingPredicates
init|=
operator|new
name|ArrayList
argument_list|<
name|BTreeVisitor
operator|.
name|Predicate
argument_list|<
name|Location
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|missing
range|:
name|missingJournalFiles
control|)
block|{
name|missingPredicates
operator|.
name|add
argument_list|(
operator|new
name|BTreeVisitor
operator|.
name|BetweenVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
operator|new
name|Location
argument_list|(
name|missing
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|Location
argument_list|(
name|missing
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkForCorruptJournalFiles
condition|)
block|{
name|Collection
argument_list|<
name|DataFile
argument_list|>
name|dataFiles
init|=
name|journal
operator|.
name|getFileMap
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|DataFile
name|dataFile
range|:
name|dataFiles
control|)
block|{
name|int
name|id
init|=
name|dataFile
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
name|missingPredicates
operator|.
name|add
argument_list|(
operator|new
name|BTreeVisitor
operator|.
name|BetweenVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
operator|new
name|Location
argument_list|(
name|id
argument_list|,
name|dataFile
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Location
argument_list|(
name|id
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|dataFile
operator|.
name|getCorruptedBlocks
argument_list|()
operator|.
name|getHead
argument_list|()
decl_stmt|;
while|while
condition|(
name|seq
operator|!=
literal|null
condition|)
block|{
name|missingPredicates
operator|.
name|add
argument_list|(
operator|new
name|BTreeVisitor
operator|.
name|BetweenVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
operator|new
name|Location
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|seq
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Location
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|seq
operator|.
name|getLast
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|seq
operator|=
name|seq
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|missingPredicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|sdEntry
range|:
name|storedDestinations
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|StoredDestination
name|sd
init|=
name|sdEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
operator|.
name|OrVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|missingPredicates
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|matched
parameter_list|(
name|Location
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// If somes message references are affected by the missing data files...
if|if
condition|(
operator|!
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We either 'gracefully' recover dropping the missing messages or
comment|// we error out.
if|if
condition|(
name|ignoreMissingJournalfiles
condition|)
block|{
comment|// Update the index to remove the references to the missing data
for|for
control|(
name|Long
name|sequenceId
range|:
name|matches
control|)
block|{
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
decl_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|sdEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|"] dropped: "
operator|+
name|keys
operator|.
name|messageId
operator|+
literal|" at corrupt location: "
operator|+
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
name|undoCounter
operator|++
expr_stmt|;
name|decrementAndSubSizeToStoreStat
argument_list|(
name|sdEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|keys
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: do we need to modify the ack positions for the pub sub case?
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Detected missing/corrupt journal files. "
operator|+
name|matches
operator|.
name|size
argument_list|()
operator|+
literal|" messages affected."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|undoCounter
operator|>
literal|0
condition|)
block|{
comment|// The rolledback operations are basically in flight journal writes.  To avoid getting these the end user
comment|// should do sync writes to the journal.
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Detected missing/corrupt journal files.  Dropped "
operator|+
name|undoCounter
operator|+
literal|" messages from the index in "
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0f
operator|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Location
name|nextRecoveryPosition
decl_stmt|;
specifier|private
name|Location
name|lastRecoveryPosition
decl_stmt|;
specifier|public
name|void
name|incrementalRecover
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|nextRecoveryPosition
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lastRecoveryPosition
operator|==
literal|null
condition|)
block|{
name|nextRecoveryPosition
operator|=
name|getRecoveryPosition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nextRecoveryPosition
operator|=
name|journal
operator|.
name|getNextLocation
argument_list|(
name|lastRecoveryPosition
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|nextRecoveryPosition
operator|!=
literal|null
condition|)
block|{
name|lastRecoveryPosition
operator|=
name|nextRecoveryPosition
expr_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|lastRecoveryPosition
expr_stmt|;
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|message
init|=
name|load
argument_list|(
name|lastRecoveryPosition
argument_list|)
decl_stmt|;
name|process
argument_list|(
name|message
argument_list|,
name|lastRecoveryPosition
argument_list|,
operator|(
name|IndexAware
operator|)
literal|null
argument_list|)
expr_stmt|;
name|nextRecoveryPosition
operator|=
name|journal
operator|.
name|getNextLocation
argument_list|(
name|lastRecoveryPosition
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Location
name|getLastUpdatePosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|metadata
operator|.
name|lastUpdate
return|;
block|}
specifier|private
name|Location
name|getRecoveryPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|forceRecoverIndex
condition|)
block|{
comment|// If we need to recover the transactions..
if|if
condition|(
name|metadata
operator|.
name|firstInProgressTransactionLocation
operator|!=
literal|null
condition|)
block|{
return|return
name|metadata
operator|.
name|firstInProgressTransactionLocation
return|;
block|}
comment|// Perhaps there were no transactions...
if|if
condition|(
name|metadata
operator|.
name|lastUpdate
operator|!=
literal|null
condition|)
block|{
comment|// Start replay at the record after the last one recorded in the index file.
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
name|metadata
operator|.
name|lastUpdate
argument_list|)
return|;
block|}
block|}
comment|// This loads the first position.
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|void
name|checkpointCleanup
parameter_list|(
specifier|final
name|boolean
name|cleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
decl_stmt|;
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|opened
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|checkpointUpdate
argument_list|(
name|cleanup
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG_SLOW_ACCESS_TIME
operator|>
literal|0
operator|&&
name|end
operator|-
name|start
operator|>
name|LOG_SLOW_ACCESS_TIME
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Slow KahaDB access: cleanup took "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ByteSequence
name|toByteSequence
parameter_list|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|data
operator|.
name|serializedSizeFramed
argument_list|()
decl_stmt|;
name|DataByteArrayOutputStream
name|os
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|(
name|size
operator|+
literal|1
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|data
operator|.
name|type
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeFramed
argument_list|(
name|os
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteSequence
argument_list|()
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Methods call by the broker to update and query the store.
comment|// /////////////////////////////////////////////////////////////////
specifier|public
name|Location
name|store
parameter_list|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|store
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Location
name|store
parameter_list|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|data
parameter_list|,
name|Runnable
name|onJournalStoreComplete
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|store
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|onJournalStoreComplete
argument_list|)
return|;
block|}
specifier|public
name|Location
name|store
parameter_list|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|data
parameter_list|,
name|boolean
name|sync
parameter_list|,
name|IndexAware
name|before
parameter_list|,
name|Runnable
name|after
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|store
argument_list|(
name|data
argument_list|,
name|sync
argument_list|,
name|before
argument_list|,
name|after
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * All updated are are funneled through this method. The updates are converted      * to a JournalMessage which is logged to the journal and then the data from      * the JournalMessage is used to update the index just like it would be done      * during a recovery process.      */
specifier|public
name|Location
name|store
parameter_list|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|data
parameter_list|,
name|boolean
name|sync
parameter_list|,
name|IndexAware
name|before
parameter_list|,
name|Runnable
name|after
parameter_list|,
name|Runnable
name|onJournalStoreComplete
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ByteSequence
name|sequence
init|=
name|toByteSequence
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Location
name|location
decl_stmt|;
name|checkpointLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|location
operator|=
name|onJournalStoreComplete
operator|==
literal|null
condition|?
name|journal
operator|.
name|write
argument_list|(
name|sequence
argument_list|,
name|sync
argument_list|)
else|:
name|journal
operator|.
name|write
argument_list|(
name|sequence
argument_list|,
name|onJournalStoreComplete
argument_list|)
expr_stmt|;
name|long
name|start2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|process
argument_list|(
name|data
argument_list|,
name|location
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG_SLOW_ACCESS_TIME
operator|>
literal|0
operator|&&
name|end
operator|-
name|start
operator|>
name|LOG_SLOW_ACCESS_TIME
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Slow KahaDB access: Journal append took: "
operator|+
operator|(
name|start2
operator|-
name|start
operator|)
operator|+
literal|" ms, Index update took "
operator|+
operator|(
name|end
operator|-
name|start2
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|checkpointLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
name|after
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|checkpointThread
operator|!=
literal|null
operator|&&
operator|!
name|checkpointThread
operator|.
name|isAlive
argument_list|()
operator|&&
name|opened
operator|.
name|get
argument_list|()
condition|)
block|{
name|startCheckpoint
argument_list|()
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"KahaDB failed to store to Journal"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|handleIOException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|/**      * Loads a previously stored JournalMessage      *      * @param location      * @return      * @throws IOException      */
specifier|public
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|load
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ByteSequence
name|data
init|=
name|journal
operator|.
name|read
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG_SLOW_ACCESS_TIME
operator|>
literal|0
operator|&&
name|end
operator|-
name|start
operator|>
name|LOG_SLOW_ACCESS_TIME
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Slow KahaDB access: Journal read took: "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
block|}
name|DataByteArrayInputStream
name|is
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|byte
name|readByte
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|KahaEntryType
name|type
init|=
name|KahaEntryType
operator|.
name|valueOf
argument_list|(
name|readByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not load journal record. Invalid location: "
operator|+
name|location
argument_list|)
throw|;
block|}
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|message
init|=
operator|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
operator|)
name|type
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|mergeFramed
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
comment|/**      * do minimal recovery till we reach the last inDoubtLocation      * @param data      * @param location      * @param inDoubtlocation      * @throws IOException      */
name|void
name|process
parameter_list|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|data
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|,
specifier|final
name|Location
name|inDoubtlocation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inDoubtlocation
operator|!=
literal|null
operator|&&
name|location
operator|.
name|compareTo
argument_list|(
name|inDoubtlocation
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|data
operator|instanceof
name|KahaSubscriptionCommand
condition|)
block|{
name|KahaSubscriptionCommand
name|kahaSubscriptionCommand
init|=
operator|(
name|KahaSubscriptionCommand
operator|)
name|data
decl_stmt|;
if|if
condition|(
name|kahaSubscriptionCommand
operator|.
name|hasSubscriptionInfo
argument_list|()
condition|)
block|{
comment|// needs to be processed via activate and will be replayed on reconnect
name|LOG
operator|.
name|debug
argument_list|(
literal|"ignoring add sub command during recovery replay:"
operator|+
name|data
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|process
argument_list|(
name|data
argument_list|,
name|location
argument_list|,
operator|(
name|IndexAware
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// just recover producer audit
name|data
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaAddMessageCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|isDuplicate
argument_list|(
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Journaled record processing methods. Once the record is journaled,
comment|// these methods handle applying the index updates. These may be called
comment|// from the recovery method too so they need to be idempotent
comment|// /////////////////////////////////////////////////////////////////
name|void
name|process
parameter_list|(
name|JournalCommand
argument_list|<
name|?
argument_list|>
name|data
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|,
specifier|final
name|IndexAware
name|onSequenceAssignedCallback
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaAddMessageCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|,
name|onSequenceAssignedCallback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaRemoveMessageCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaPrepareCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaCommitCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|,
name|onSequenceAssignedCallback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaRollbackCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaRemoveDestinationCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaSubscriptionCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaProducerAuditCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|processLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaAckMessageFileMapCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|processLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaTraceCommand
name|command
parameter_list|)
block|{
name|processLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaUpdateMessageCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaAddMessageCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|,
specifier|final
name|IndexAware
name|runWithIndexLock
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|command
operator|.
name|hasTransactionInfo
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|getInflightTx
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|inflightTx
operator|.
name|add
argument_list|(
operator|new
name|AddOperation
argument_list|(
name|command
argument_list|,
name|location
argument_list|,
name|runWithIndexLock
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|assignedIndex
init|=
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|runWithIndexLock
operator|!=
literal|null
condition|)
block|{
name|runWithIndexLock
operator|.
name|sequenceAssignedWithIndexLocked
argument_list|(
name|assignedIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaUpdateMessageCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaRemoveMessageCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|command
operator|.
name|hasTransactionInfo
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|getInflightTx
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|inflightTx
operator|.
name|add
argument_list|(
operator|new
name|RemoveOperation
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaRemoveDestinationCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaSubscriptionCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processLocation
parameter_list|(
specifier|final
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|metadata
operator|.
name|lastUpdate
operator|=
name|location
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|void
name|process
parameter_list|(
name|KahaCommitCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|,
specifier|final
name|IndexAware
name|before
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionId
name|key
init|=
name|TransactionIdConversion
operator|.
name|convert
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|inflightTx
decl_stmt|;
synchronized|synchronized
init|(
name|inflightTransactions
init|)
block|{
name|inflightTx
operator|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|inflightTx
operator|==
literal|null
condition|)
block|{
name|inflightTx
operator|=
name|preparedTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inflightTx
operator|==
literal|null
condition|)
block|{
comment|// only non persistent messages in this tx
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
name|before
operator|.
name|sequenceAssignedWithIndexLocked
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|final
name|List
argument_list|<
name|Operation
argument_list|>
name|messagingTx
init|=
name|inflightTx
decl_stmt|;
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Operation
name|op
range|:
name|messagingTx
control|)
block|{
name|op
operator|.
name|execute
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|location
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|void
name|process
parameter_list|(
name|KahaPrepareCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|TransactionId
name|key
init|=
name|TransactionIdConversion
operator|.
name|convert
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|inflightTransactions
init|)
block|{
name|List
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
block|{
name|preparedTransactions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|void
name|process
parameter_list|(
name|KahaRollbackCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionId
name|key
init|=
name|TransactionIdConversion
operator|.
name|convert
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|updates
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|inflightTransactions
init|)
block|{
name|updates
operator|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|updates
operator|==
literal|null
condition|)
block|{
name|updates
operator|=
name|preparedTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// These methods do the actual index updates.
comment|// /////////////////////////////////////////////////////////////////
specifier|protected
specifier|final
name|ReentrantReadWriteLock
name|indexLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|journalFilesBeingReplicated
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaAddMessageCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
comment|// Skip adding the message to the index if this is a topic and there are
comment|// no subscriptions.
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
operator|&&
name|sd
operator|.
name|subscriptions
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// Add the message.
name|int
name|priority
init|=
name|command
operator|.
name|getPrioritySupported
argument_list|()
condition|?
name|command
operator|.
name|getPriority
argument_list|()
else|:
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_PRIORITY
decl_stmt|;
name|long
name|id
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|getNextMessageId
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|Long
name|previous
init|=
name|sd
operator|.
name|locationIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|location
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|incrementAndAddSizeToStoreStat
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|priority
argument_list|,
name|id
argument_list|,
operator|new
name|MessageKeys
argument_list|(
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
operator|&&
operator|!
name|sd
operator|.
name|subscriptions
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
name|addAckLocationForNewMessage
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|lastUpdate
operator|=
name|location
expr_stmt|;
block|}
else|else
block|{
name|MessageKeys
name|messageKeys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|previous
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageKeys
operator|!=
literal|null
operator|&&
name|messageKeys
operator|.
name|location
operator|.
name|compareTo
argument_list|(
name|location
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// If the message ID is indexed, then the broker asked us to store a duplicate before the message was dispatched and acked, we ignore this add attempt
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate message add attempt rejected. Destination: {}://{}, Message id: {}"
argument_list|,
name|command
operator|.
name|getDestination
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|command
operator|.
name|getDestination
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sd
operator|.
name|messageIdIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|id
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// restore the previous value.. Looks like this was a redo of a previously
comment|// added message. We don't want to assign it a new id as the other indexes would
comment|// be wrong..
name|sd
operator|.
name|locationIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|location
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|location
expr_stmt|;
comment|// remove ack positions
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
operator|&&
operator|!
name|sd
operator|.
name|subscriptions
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
argument_list|>
name|it
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// record this id in any event, initial send or recovery
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|isDuplicate
argument_list|(
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
name|void
name|trackPendingAdd
parameter_list|(
name|KahaDestination
name|destination
parameter_list|,
name|Long
name|seq
parameter_list|)
block|{
name|StoredDestination
name|sd
init|=
name|storedDestinations
operator|.
name|get
argument_list|(
name|key
argument_list|(
name|destination
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|trackPendingAdd
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|trackPendingAddComplete
parameter_list|(
name|KahaDestination
name|destination
parameter_list|,
name|Long
name|seq
parameter_list|)
block|{
name|StoredDestination
name|sd
init|=
name|storedDestinations
operator|.
name|get
argument_list|(
name|key
argument_list|(
name|destination
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|trackPendingAddComplete
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaUpdateMessageCommand
name|updateMessageCommand
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaAddMessageCommand
name|command
init|=
name|updateMessageCommand
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|id
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|MessageKeys
name|previousKeys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getPrioritySupported
argument_list|()
condition|?
name|command
operator|.
name|getPriority
argument_list|()
else|:
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
name|id
argument_list|,
operator|new
name|MessageKeys
argument_list|(
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|location
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|incrementAndAddSizeToStoreStat
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// on first update previous is original location, on recovery/replay it may be the updated location
if|if
condition|(
name|previousKeys
operator|!=
literal|null
operator|&&
operator|!
name|previousKeys
operator|.
name|location
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|previousKeys
operator|.
name|location
argument_list|)
expr_stmt|;
name|decrementAndSubSizeToStoreStat
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|previousKeys
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|lastUpdate
operator|=
name|location
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Non existent message update attempt rejected. Destination: {}://{}, Message id: {}"
argument_list|,
name|command
operator|.
name|getDestination
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|command
operator|.
name|getDestination
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaRemoveMessageCommand
name|command
parameter_list|,
name|Location
name|ackLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|command
operator|.
name|hasSubscriptionKey
argument_list|()
condition|)
block|{
comment|// In the queue case we just remove the message from the index..
name|Long
name|sequenceId
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequenceId
operator|!=
literal|null
condition|)
block|{
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
name|decrementAndSubSizeToStoreStat
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|keys
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|recordAckMessageReferenceLocation
argument_list|(
name|ackLocation
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|ackLocation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"message not found in order index: "
operator|+
name|sequenceId
operator|+
literal|" for: "
operator|+
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"message not found in sequence id index: "
operator|+
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// In the topic case we need remove the message once it's been acked
comment|// by all the subs
name|Long
name|sequence
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make sure it's a valid message id...
if|if
condition|(
name|sequence
operator|!=
literal|null
condition|)
block|{
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getAck
argument_list|()
operator|!=
name|UNMATCHED
condition|)
block|{
name|sd
operator|.
name|orderIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
name|byte
name|priority
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|lastGetPriority
argument_list|()
decl_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
operator|new
name|LastAck
argument_list|(
name|sequence
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|sequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|recordAckMessageReferenceLocation
argument_list|(
name|ackLocation
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
comment|// The following method handles deleting un-referenced messages.
name|removeAckLocation
argument_list|(
name|command
argument_list|,
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|ackLocation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"no message sequence exists for id: "
operator|+
name|command
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" and sub: "
operator|+
name|command
operator|.
name|getSubscriptionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|recordAckMessageReferenceLocation
parameter_list|(
name|Location
name|ackLocation
parameter_list|,
name|Location
name|messageLocation
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|referenceFileIds
init|=
name|metadata
operator|.
name|ackMessageFileMap
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|ackLocation
operator|.
name|getDataFileId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|referenceFileIds
operator|==
literal|null
condition|)
block|{
name|referenceFileIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|referenceFileIds
operator|.
name|add
argument_list|(
name|messageLocation
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|ackMessageFileMap
operator|.
name|put
argument_list|(
name|ackLocation
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|referenceFileIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|id
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|messageLocation
operator|.
name|getDataFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|referenceFileIds
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|referenceFileIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaRemoveDestinationCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|locationIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|messageIdIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|subscriptions
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptions
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|subscriptions
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|subscriptionAcks
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|ackPositions
operator|.
name|getHeadPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subLocations
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subLocations
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|subLocations
operator|.
name|getHeadPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|key
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|storedDestinations
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|clearStoreStats
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|storeCache
operator|.
name|remove
argument_list|(
name|key
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaSubscriptionCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
comment|// If set then we are creating it.. otherwise we are destroying the sub
if|if
condition|(
name|command
operator|.
name|hasSubscriptionInfo
argument_list|()
condition|)
block|{
name|sd
operator|.
name|subscriptions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subLocations
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|long
name|ackLocation
init|=
name|NOT_ACKED
decl_stmt|;
if|if
condition|(
operator|!
name|command
operator|.
name|getRetroactive
argument_list|()
condition|)
block|{
name|ackLocation
operator|=
name|sd
operator|.
name|orderIndex
operator|.
name|nextMessageId
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|addAckLocationForRetroactiveSub
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
name|sd
operator|.
name|subscriptionAcks
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
operator|new
name|LastAck
argument_list|(
name|ackLocation
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionCache
operator|.
name|add
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delete the sub...
name|sd
operator|.
name|subscriptions
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subLocations
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionCache
operator|.
name|remove
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
name|removeAckLocationsForSub
argument_list|(
name|command
argument_list|,
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
comment|// remove the stored destination
name|KahaRemoveDestinationCommand
name|removeDestinationCommand
init|=
operator|new
name|KahaRemoveDestinationCommand
argument_list|()
decl_stmt|;
name|removeDestinationCommand
operator|.
name|setDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|removeDestinationCommand
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|clearStoreStats
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkpointUpdate
parameter_list|(
specifier|final
name|boolean
name|cleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|checkpointLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|checkpointUpdate
argument_list|(
name|tx
argument_list|,
name|cleanup
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|checkpointLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @param tx      * @throws IOException      */
name|void
name|checkpointUpdate
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|boolean
name|cleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checkpoint started."
argument_list|)
expr_stmt|;
comment|// reflect last update exclusive of current checkpoint
name|Location
name|lastUpdate
init|=
name|metadata
operator|.
name|lastUpdate
decl_stmt|;
name|metadata
operator|.
name|state
operator|=
name|OPEN_STATE
expr_stmt|;
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
operator|=
name|checkpointProducerAudit
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|ackMessageFileMapLocation
operator|=
name|checkpointAckMessageFileMap
argument_list|()
expr_stmt|;
name|Location
index|[]
name|inProgressTxRange
init|=
name|getInProgressTxLocationRange
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|firstInProgressTransactionLocation
operator|=
name|inProgressTxRange
index|[
literal|0
index|]
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pageFile
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|cleanup
condition|)
block|{
specifier|final
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|completeFileSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|journal
operator|.
name|getFileMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|gcCandidateSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|completeFileSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Last update: "
operator|+
name|lastUpdate
operator|+
literal|", full gc candidates set: "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastUpdate
operator|!=
literal|null
condition|)
block|{
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|lastUpdate
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Don't GC files under replication
if|if
condition|(
name|journalFilesBeingReplicated
operator|!=
literal|null
condition|)
block|{
name|gcCandidateSet
operator|.
name|removeAll
argument_list|(
name|journalFilesBeingReplicated
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
operator|!=
literal|null
condition|)
block|{
name|int
name|dataFileId
init|=
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
if|if
condition|(
name|gcCandidateSet
operator|.
name|contains
argument_list|(
name|dataFileId
argument_list|)
operator|&&
name|gcCandidateSet
operator|.
name|first
argument_list|()
operator|==
name|dataFileId
condition|)
block|{
comment|// rewrite so we don't prevent gc
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"rewriting producerSequenceIdTracker:"
operator|+
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
argument_list|)
expr_stmt|;
block|}
block|}
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|dataFileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"gc candidates after producerSequenceIdTrackerLocation:"
operator|+
name|dataFileId
operator|+
literal|", "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metadata
operator|.
name|ackMessageFileMapLocation
operator|!=
literal|null
condition|)
block|{
name|int
name|dataFileId
init|=
name|metadata
operator|.
name|ackMessageFileMapLocation
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|dataFileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"gc candidates after ackMessageFileMapLocation:"
operator|+
name|dataFileId
operator|+
literal|", "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Don't GC files referenced by in-progress tx
if|if
condition|(
name|inProgressTxRange
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|pendingTx
init|=
name|inProgressTxRange
index|[
literal|0
index|]
operator|.
name|getDataFileId
argument_list|()
init|;
name|pendingTx
operator|<=
name|inProgressTxRange
index|[
literal|1
index|]
operator|.
name|getDataFileId
argument_list|()
condition|;
name|pendingTx
operator|++
control|)
block|{
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|pendingTx
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"gc candidates after tx range:"
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|inProgressTxRange
argument_list|)
operator|+
literal|", "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
comment|// Go through all the destinations to see if any of them can remove GC candidates.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|entry
range|:
name|storedDestinations
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|gcCandidateSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Use a visitor to cut down the number of pages that we load
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Location
name|first
parameter_list|,
name|Location
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|subset
init|=
name|gcCandidateSet
operator|.
name|headSet
argument_list|(
name|second
operator|.
name|getDataFileId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|last
argument_list|()
operator|==
name|second
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|subset
init|=
name|gcCandidateSet
operator|.
name|tailSet
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|first
argument_list|()
operator|==
name|first
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
else|else
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|subset
init|=
name|gcCandidateSet
operator|.
name|subSet
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|second
operator|.
name|getDataFileId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|first
argument_list|()
operator|==
name|first
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|last
argument_list|()
operator|==
name|second
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|List
argument_list|<
name|Location
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|Location
name|l
range|:
name|keys
control|)
block|{
name|int
name|fileId
init|=
name|l
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
name|fileId
condition|)
block|{
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
name|last
operator|=
name|fileId
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Durable Subscription
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|subLocations
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|iter
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|subLocations
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
name|subscription
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|dataFileId
init|=
name|subscription
operator|.
name|getValue
argument_list|()
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
comment|// Move subscription along if it has no outstanding messages that need ack'd
comment|// and its in the last log file in the journal.
if|if
condition|(
operator|!
name|gcCandidateSet
operator|.
name|isEmpty
argument_list|()
operator|&&
name|gcCandidateSet
operator|.
name|first
argument_list|()
operator|==
name|dataFileId
condition|)
block|{
specifier|final
name|StoredDestination
name|destination
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|subscriptionKey
init|=
name|subscription
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SequenceSet
name|pendingAcks
init|=
name|destination
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
comment|// When pending is size one that is the next message Id meaning there
comment|// are no pending messages currently.
if|if
condition|(
name|pendingAcks
operator|==
literal|null
operator|||
name|pendingAcks
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found candidate for rewrite: {} from file {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|dataFileId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|KahaSubscriptionCommand
name|kahaSub
init|=
name|destination
operator|.
name|subscriptions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
name|destination
operator|.
name|subLocations
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|checkpointSubscriptionCommand
argument_list|(
name|kahaSub
argument_list|)
argument_list|)
expr_stmt|;
comment|// Skips the remove from candidates if we rewrote the subscription
comment|// in order to prevent duplicate subscription commands on recover.
comment|// If another subscription is on the same file and isn't rewritten
comment|// than it will remove the file from the set.
continue|continue;
block|}
block|}
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|dataFileId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"gc candidates after dest:"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check we are not deleting file with ack for in-use journal files
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"gc candidates: "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|candidates
init|=
name|gcCandidateSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|candidates
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Integer
name|candidate
init|=
name|candidates
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|referencedFileIds
init|=
name|metadata
operator|.
name|ackMessageFileMap
operator|.
name|get
argument_list|(
name|candidate
argument_list|)
decl_stmt|;
if|if
condition|(
name|referencedFileIds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Integer
name|referencedFileId
range|:
name|referencedFileIds
control|)
block|{
if|if
condition|(
name|completeFileSet
operator|.
name|contains
argument_list|(
name|referencedFileId
argument_list|)
operator|&&
operator|!
name|gcCandidateSet
operator|.
name|contains
argument_list|(
name|referencedFileId
argument_list|)
condition|)
block|{
comment|// active file that is not targeted for deletion is referenced so don't delete
name|candidates
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|gcCandidateSet
operator|.
name|contains
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|ackMessageFileMap
operator|.
name|remove
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"not removing data file: "
operator|+
name|candidate
operator|+
literal|" as contained ack(s) refer to referenced file: "
operator|+
name|referencedFileIds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|gcCandidateSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleanup removing the data files: "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
name|journal
operator|.
name|removeDataFiles
argument_list|(
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checkpoint done."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Runnable
name|nullCompletionCallback
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{         }
block|}
decl_stmt|;
specifier|private
name|Location
name|checkpointProducerAudit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|.
name|producerSequenceIdTracker
operator|==
literal|null
operator|||
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|modified
argument_list|()
condition|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oout
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|oout
operator|.
name|writeObject
argument_list|(
name|metadata
operator|.
name|producerSequenceIdTracker
argument_list|)
expr_stmt|;
name|oout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oout
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// using completion callback allows a disk sync to be avoided when enableJournalDiskSyncs = false
name|Location
name|location
init|=
name|store
argument_list|(
operator|new
name|KahaProducerAuditCommand
argument_list|()
operator|.
name|setAudit
argument_list|(
operator|new
name|Buffer
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|nullCompletionCallback
argument_list|)
decl_stmt|;
try|try
block|{
name|location
operator|.
name|getLatch
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|location
return|;
block|}
return|return
name|metadata
operator|.
name|producerSequenceIdTrackerLocation
return|;
block|}
specifier|private
name|Location
name|checkpointAckMessageFileMap
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oout
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|oout
operator|.
name|writeObject
argument_list|(
name|metadata
operator|.
name|ackMessageFileMap
argument_list|)
expr_stmt|;
name|oout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oout
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// using completion callback allows a disk sync to be avoided when enableJournalDiskSyncs = false
name|Location
name|location
init|=
name|store
argument_list|(
operator|new
name|KahaAckMessageFileMapCommand
argument_list|()
operator|.
name|setAckMessageFileMap
argument_list|(
operator|new
name|Buffer
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|nullCompletionCallback
argument_list|)
decl_stmt|;
try|try
block|{
name|location
operator|.
name|getLatch
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|location
return|;
block|}
specifier|private
name|Location
name|checkpointSubscriptionCommand
parameter_list|(
name|KahaSubscriptionCommand
name|subscription
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteSequence
name|sequence
init|=
name|toByteSequence
argument_list|(
name|subscription
argument_list|)
decl_stmt|;
name|Location
name|location
init|=
name|journal
operator|.
name|write
argument_list|(
name|sequence
argument_list|,
name|nullCompletionCallback
argument_list|)
decl_stmt|;
try|try
block|{
name|location
operator|.
name|getLatch
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|location
return|;
block|}
specifier|public
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|getJournalFilesBeingReplicated
parameter_list|()
block|{
return|return
name|journalFilesBeingReplicated
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// StoredDestination related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|storedDestinations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
class|class
name|MessageKeys
block|{
specifier|final
name|String
name|messageId
decl_stmt|;
specifier|final
name|Location
name|location
decl_stmt|;
specifier|public
name|MessageKeys
parameter_list|(
name|String
name|messageId
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|messageId
operator|=
name|messageId
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|messageId
operator|+
literal|","
operator|+
name|location
operator|+
literal|"]"
return|;
block|}
block|}
specifier|static
specifier|protected
class|class
name|MessageKeysMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|MessageKeys
argument_list|>
block|{
specifier|static
specifier|final
name|MessageKeysMarshaller
name|INSTANCE
init|=
operator|new
name|MessageKeysMarshaller
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MessageKeys
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MessageKeys
argument_list|(
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|,
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|dataIn
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|MessageKeys
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|object
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|object
operator|.
name|location
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|LastAck
block|{
name|long
name|lastAckedSequence
decl_stmt|;
name|byte
name|priority
decl_stmt|;
specifier|public
name|LastAck
parameter_list|(
name|LastAck
name|source
parameter_list|)
block|{
name|this
operator|.
name|lastAckedSequence
operator|=
name|source
operator|.
name|lastAckedSequence
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|source
operator|.
name|priority
expr_stmt|;
block|}
specifier|public
name|LastAck
parameter_list|()
block|{
name|this
operator|.
name|priority
operator|=
name|MessageOrderIndex
operator|.
name|HI
expr_stmt|;
block|}
specifier|public
name|LastAck
parameter_list|(
name|long
name|ackLocation
parameter_list|)
block|{
name|this
operator|.
name|lastAckedSequence
operator|=
name|ackLocation
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|MessageOrderIndex
operator|.
name|LO
expr_stmt|;
block|}
specifier|public
name|LastAck
parameter_list|(
name|long
name|ackLocation
parameter_list|,
name|byte
name|priority
parameter_list|)
block|{
name|this
operator|.
name|lastAckedSequence
operator|=
name|ackLocation
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|lastAckedSequence
operator|+
literal|":"
operator|+
name|priority
operator|+
literal|"]"
return|;
block|}
block|}
specifier|protected
class|class
name|LastAckMarshaller
implements|implements
name|Marshaller
argument_list|<
name|LastAck
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|LastAck
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeLong
argument_list|(
name|object
operator|.
name|lastAckedSequence
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeByte
argument_list|(
name|object
operator|.
name|priority
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LastAck
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|LastAck
name|lastAcked
init|=
operator|new
name|LastAck
argument_list|()
decl_stmt|;
name|lastAcked
operator|.
name|lastAckedSequence
operator|=
name|dataIn
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|version
operator|>=
literal|3
condition|)
block|{
name|lastAcked
operator|.
name|priority
operator|=
name|dataIn
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
return|return
name|lastAcked
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFixedSize
parameter_list|()
block|{
return|return
literal|9
return|;
block|}
annotation|@
name|Override
specifier|public
name|LastAck
name|deepCopy
parameter_list|(
name|LastAck
name|source
parameter_list|)
block|{
return|return
operator|new
name|LastAck
argument_list|(
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDeepCopySupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
class|class
name|StoredDestination
block|{
name|MessageOrderIndex
name|orderIndex
init|=
operator|new
name|MessageOrderIndex
argument_list|()
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
name|locationIndex
decl_stmt|;
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|messageIdIndex
decl_stmt|;
comment|// These bits are only set for Topics
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
name|subscriptions
decl_stmt|;
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
name|subscriptionAcks
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|MessageOrderCursor
argument_list|>
name|subscriptionCursors
decl_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
name|ackPositions
decl_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
name|subLocations
decl_stmt|;
comment|// Transient data used to track which Messages are no longer needed.
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|messageReferences
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|subscriptionCache
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|trackPendingAdd
parameter_list|(
name|Long
name|seq
parameter_list|)
block|{
name|orderIndex
operator|.
name|trackPendingAdd
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|trackPendingAddComplete
parameter_list|(
name|Long
name|seq
parameter_list|)
block|{
name|orderIndex
operator|.
name|trackPendingAddComplete
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"nextSeq:"
operator|+
name|orderIndex
operator|.
name|nextMessageId
operator|+
literal|",lastRet:"
operator|+
name|orderIndex
operator|.
name|cursor
operator|+
literal|",pending:"
operator|+
name|orderIndex
operator|.
name|pendingAdditions
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|protected
class|class
name|StoredDestinationMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|StoredDestination
argument_list|>
block|{
specifier|final
name|MessageKeysMarshaller
name|messageKeysMarshaller
init|=
operator|new
name|MessageKeysMarshaller
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|StoredDestination
name|readPayload
parameter_list|(
specifier|final
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StoredDestination
name|value
init|=
operator|new
name|StoredDestination
argument_list|()
decl_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|defaultPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|locationIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|messageIdIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataIn
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|value
operator|.
name|subscriptions
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|subscriptionAcks
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|version
operator|>=
literal|4
condition|)
block|{
name|value
operator|.
name|ackPositions
operator|=
operator|new
name|ListIndex
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// upgrade
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
name|temp
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|version
operator|>=
literal|3
condition|)
block|{
comment|// migrate
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|oldAckPositions
init|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
decl_stmt|;
name|oldAckPositions
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|oldAckPositions
operator|.
name|setValueMarshaller
argument_list|(
name|HashSetStringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|oldAckPositions
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|// Do the initial build of the data in memory before writing into the store
comment|// based Ack Positions List to avoid a lot of disk thrashing.
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|oldAckPositions
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|subKey
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|SequenceSet
name|pendingAcks
init|=
name|temp
operator|.
name|get
argument_list|(
name|subKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|pendingAcks
operator|==
literal|null
condition|)
block|{
name|pendingAcks
operator|=
operator|new
name|SequenceSet
argument_list|()
expr_stmt|;
name|temp
operator|.
name|put
argument_list|(
name|subKey
argument_list|,
name|pendingAcks
argument_list|)
expr_stmt|;
block|}
name|pendingAcks
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now move the pending messages to ack data into the store backed
comment|// structure.
name|value
operator|.
name|ackPositions
operator|=
operator|new
name|ListIndex
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|ackPositions
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|value
operator|.
name|ackPositions
operator|.
name|setValueMarshaller
argument_list|(
name|SequenceSet
operator|.
name|Marshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|value
operator|.
name|ackPositions
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subscriptionKey
range|:
name|temp
operator|.
name|keySet
argument_list|()
control|)
block|{
name|value
operator|.
name|ackPositions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|temp
operator|.
name|get
argument_list|(
name|subscriptionKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|.
name|version
operator|>=
literal|5
condition|)
block|{
name|value
operator|.
name|subLocations
operator|=
operator|new
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// upgrade
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|value
operator|.
name|subLocations
operator|=
operator|new
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|subLocations
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|value
operator|.
name|subLocations
operator|.
name|setValueMarshaller
argument_list|(
name|LocationMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|value
operator|.
name|subLocations
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metadata
operator|.
name|version
operator|>=
literal|2
condition|)
block|{
name|value
operator|.
name|orderIndex
operator|.
name|lowPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|highPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// upgrade
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|value
operator|.
name|orderIndex
operator|.
name|lowPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|lowPriorityIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|lowPriorityIndex
operator|.
name|setValueMarshaller
argument_list|(
name|messageKeysMarshaller
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|lowPriorityIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|highPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|highPriorityIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|highPriorityIndex
operator|.
name|setValueMarshaller
argument_list|(
name|messageKeysMarshaller
argument_list|)
expr_stmt|;
name|value
operator|.
name|orderIndex
operator|.
name|highPriorityIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|StoredDestination
name|value
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|orderIndex
operator|.
name|defaultPriorityIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|locationIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|messageIdIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|subscriptions
operator|!=
literal|null
condition|)
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|subscriptions
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|subscriptionAcks
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|ackPositions
operator|.
name|getHeadPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|subLocations
operator|.
name|getHeadPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|orderIndex
operator|.
name|lowPriorityIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|orderIndex
operator|.
name|highPriorityIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|KahaSubscriptionCommandMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|KahaSubscriptionCommand
argument_list|>
block|{
specifier|final
specifier|static
name|KahaSubscriptionCommandMarshaller
name|INSTANCE
init|=
operator|new
name|KahaSubscriptionCommandMarshaller
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|KahaSubscriptionCommand
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaSubscriptionCommand
name|rc
init|=
operator|new
name|KahaSubscriptionCommand
argument_list|()
decl_stmt|;
name|rc
operator|.
name|mergeFramed
argument_list|(
operator|(
name|InputStream
operator|)
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|KahaSubscriptionCommand
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeFramed
argument_list|(
operator|(
name|OutputStream
operator|)
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|StoredDestination
name|getStoredDestination
parameter_list|(
name|KahaDestination
name|destination
parameter_list|,
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|key
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|StoredDestination
name|rc
init|=
name|storedDestinations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|boolean
name|topic
init|=
name|destination
operator|.
name|getType
argument_list|()
operator|==
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|TOPIC
operator|||
name|destination
operator|.
name|getType
argument_list|()
operator|==
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|TEMP_TOPIC
decl_stmt|;
name|rc
operator|=
name|loadStoredDestination
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// Cache it. We may want to remove/unload destinations from the
comment|// cache that are not used for a while
comment|// to reduce memory usage.
name|storedDestinations
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|protected
name|StoredDestination
name|getExistingStoredDestination
parameter_list|(
name|KahaDestination
name|destination
parameter_list|,
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|key
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|StoredDestination
name|rc
init|=
name|storedDestinations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
operator|&&
name|metadata
operator|.
name|destinations
operator|.
name|containsKey
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|rc
operator|=
name|getStoredDestination
argument_list|(
name|destination
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * @param tx      * @param key      * @param topic      * @return      * @throws IOException      */
specifier|private
name|StoredDestination
name|loadStoredDestination
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|topic
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Try to load the existing indexes..
name|StoredDestination
name|rc
init|=
name|metadata
operator|.
name|destinations
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// Brand new destination.. allocate indexes for it.
name|rc
operator|=
operator|new
name|StoredDestination
argument_list|()
expr_stmt|;
name|rc
operator|.
name|orderIndex
operator|.
name|allocate
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|locationIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|rc
operator|.
name|subscriptions
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|ackPositions
operator|=
operator|new
name|ListIndex
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subLocations
operator|=
operator|new
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|destinations
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
comment|// Configure the marshalers and load.
name|rc
operator|.
name|orderIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|// Figure out the next key using the last entry in the destination.
name|rc
operator|.
name|orderIndex
operator|.
name|configureLast
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|locationIndex
operator|.
name|setKeyMarshaller
argument_list|(
operator|new
name|LocationSizeMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|locationIndex
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|locationIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|//go through an upgrade old index if older than version 6
if|if
condition|(
name|metadata
operator|.
name|version
operator|<
literal|6
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|rc
operator|.
name|locationIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// modify so it is upgraded
name|rc
operator|.
name|locationIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If it was a topic...
if|if
condition|(
name|topic
condition|)
block|{
name|rc
operator|.
name|subscriptions
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptions
operator|.
name|setValueMarshaller
argument_list|(
name|KahaSubscriptionCommandMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptions
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|LastAckMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|ackPositions
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|ackPositions
operator|.
name|setValueMarshaller
argument_list|(
name|SequenceSet
operator|.
name|Marshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|ackPositions
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subLocations
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subLocations
operator|.
name|setValueMarshaller
argument_list|(
name|LocationMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subLocations
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionCursors
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MessageOrderCursor
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|version
operator|<
literal|3
condition|)
block|{
comment|// on upgrade need to fill ackLocation with available messages past last ack
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
argument_list|>
name|iterator
init|=
name|rc
operator|.
name|subscriptionAcks
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|orderIterator
init|=
name|rc
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
operator|new
name|MessageOrderCursor
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|lastAckedSequence
argument_list|)
argument_list|)
init|;
name|orderIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|sequence
init|=
name|orderIterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|addAckLocation
argument_list|(
name|tx
argument_list|,
name|rc
argument_list|,
name|sequence
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// modify so it is upgraded
name|rc
operator|.
name|subscriptionAcks
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Configure the message references index
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
argument_list|>
name|subscriptions
init|=
name|rc
operator|.
name|ackPositions
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|subscriptions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
name|subscription
init|=
name|subscriptions
operator|.
name|next
argument_list|()
decl_stmt|;
name|SequenceSet
name|pendingAcks
init|=
name|subscription
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|pendingAcks
operator|!=
literal|null
operator|&&
operator|!
name|pendingAcks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Long
name|lastPendingAck
init|=
name|pendingAcks
operator|.
name|getTail
argument_list|()
operator|.
name|getLast
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sequenceId
range|:
name|pendingAcks
control|)
block|{
name|Long
name|current
init|=
name|rc
operator|.
name|messageReferences
operator|.
name|get
argument_list|(
name|sequenceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|current
operator|=
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// We always add a trailing empty entry for the next position to start from
comment|// so we need to ensure we don't count that as a message reference on reload.
if|if
condition|(
operator|!
name|sequenceId
operator|.
name|equals
argument_list|(
name|lastPendingAck
argument_list|)
condition|)
block|{
name|current
operator|=
name|current
operator|.
name|longValue
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|messageReferences
operator|.
name|put
argument_list|(
name|sequenceId
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Configure the subscription cache
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
argument_list|>
name|iterator
init|=
name|rc
operator|.
name|subscriptionAcks
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|rc
operator|.
name|subscriptionCache
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|orderIndex
operator|.
name|nextMessageId
operator|==
literal|0
condition|)
block|{
comment|// check for existing durable sub all acked out - pull next seq from acks as messages are gone
if|if
condition|(
operator|!
name|rc
operator|.
name|subscriptionAcks
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
argument_list|>
name|iterator
init|=
name|rc
operator|.
name|subscriptionAcks
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|LastAck
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|rc
operator|.
name|orderIndex
operator|.
name|nextMessageId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rc
operator|.
name|orderIndex
operator|.
name|nextMessageId
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|lastAckedSequence
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// update based on ackPositions for unmatched, last entry is always the next
if|if
condition|(
operator|!
name|rc
operator|.
name|messageReferences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Long
name|nextMessageId
init|=
operator|(
name|Long
operator|)
name|rc
operator|.
name|messageReferences
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
name|rc
operator|.
name|messageReferences
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
decl_stmt|;
name|rc
operator|.
name|orderIndex
operator|.
name|nextMessageId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rc
operator|.
name|orderIndex
operator|.
name|nextMessageId
argument_list|,
name|nextMessageId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|metadata
operator|.
name|version
operator|<
name|VERSION
condition|)
block|{
comment|// store again after upgrade
name|metadata
operator|.
name|destinations
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Clear the counter for the destination, if one exists.      *      * @param kahaDestination      */
specifier|protected
name|void
name|clearStoreStats
parameter_list|(
name|KahaDestination
name|kahaDestination
parameter_list|)
block|{
name|MessageStoreStatistics
name|storeStats
init|=
name|getStoreStats
argument_list|(
name|key
argument_list|(
name|kahaDestination
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeStats
operator|!=
literal|null
condition|)
block|{
name|storeStats
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Update MessageStoreStatistics      *      * @param kahaDestination      * @param size      */
specifier|protected
name|void
name|incrementAndAddSizeToStoreStat
parameter_list|(
name|KahaDestination
name|kahaDestination
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|incrementAndAddSizeToStoreStat
argument_list|(
name|key
argument_list|(
name|kahaDestination
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|incrementAndAddSizeToStoreStat
parameter_list|(
name|String
name|kahaDestKey
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|MessageStoreStatistics
name|storeStats
init|=
name|getStoreStats
argument_list|(
name|kahaDestKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeStats
operator|!=
literal|null
condition|)
block|{
name|storeStats
operator|.
name|getMessageCount
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|storeStats
operator|.
name|getMessageSize
argument_list|()
operator|.
name|addSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|decrementAndSubSizeToStoreStat
parameter_list|(
name|KahaDestination
name|kahaDestination
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|decrementAndSubSizeToStoreStat
argument_list|(
name|key
argument_list|(
name|kahaDestination
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|decrementAndSubSizeToStoreStat
parameter_list|(
name|String
name|kahaDestKey
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|MessageStoreStatistics
name|storeStats
init|=
name|getStoreStats
argument_list|(
name|kahaDestKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeStats
operator|!=
literal|null
condition|)
block|{
name|storeStats
operator|.
name|getMessageCount
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|storeStats
operator|.
name|getMessageSize
argument_list|()
operator|.
name|addSize
argument_list|(
operator|-
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This is a map to cache DestinationStatistics for a specific      * KahaDestination key      */
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|MessageStore
argument_list|>
name|storeCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|MessageStore
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Locate the storeMessageSize counter for this KahaDestination      * @param kahaDestination      * @return      */
specifier|protected
name|MessageStoreStatistics
name|getStoreStats
parameter_list|(
name|String
name|kahaDestKey
parameter_list|)
block|{
name|MessageStoreStatistics
name|storeStats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MessageStore
name|messageStore
init|=
name|storeCache
operator|.
name|get
argument_list|(
name|kahaDestKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageStore
operator|!=
literal|null
condition|)
block|{
name|storeStats
operator|=
name|messageStore
operator|.
name|getMessageStoreStatistics
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Getting size counter of destination failed"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
return|return
name|storeStats
return|;
block|}
comment|/**      * Determine whether this Destination matches the DestinationType      *      * @param destination      * @param type      * @return      */
specifier|protected
name|boolean
name|matchType
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|KahaDestination
operator|.
name|DestinationType
name|type
parameter_list|)
block|{
if|if
condition|(
name|destination
operator|instanceof
name|Topic
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|TOPIC
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|instanceof
name|Queue
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|QUEUE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
class|class
name|LocationSizeMarshaller
implements|implements
name|Marshaller
argument_list|<
name|Location
argument_list|>
block|{
specifier|public
name|LocationSizeMarshaller
parameter_list|()
block|{          }
annotation|@
name|Override
specifier|public
name|Location
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|rc
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setDataFileId
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOffset
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|version
operator|>=
literal|6
condition|)
block|{
name|rc
operator|.
name|setSize
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|Location
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|object
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|object
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|object
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFixedSize
parameter_list|()
block|{
return|return
literal|12
return|;
block|}
annotation|@
name|Override
specifier|public
name|Location
name|deepCopy
parameter_list|(
name|Location
name|source
parameter_list|)
block|{
return|return
operator|new
name|Location
argument_list|(
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDeepCopySupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|void
name|addAckLocation
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|Long
name|messageSequence
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
throws|throws
name|IOException
block|{
name|SequenceSet
name|sequences
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequences
operator|==
literal|null
condition|)
block|{
name|sequences
operator|=
operator|new
name|SequenceSet
argument_list|()
expr_stmt|;
name|sequences
operator|.
name|add
argument_list|(
name|messageSequence
argument_list|)
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|add
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|sequences
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sequences
operator|.
name|add
argument_list|(
name|messageSequence
argument_list|)
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|sequences
argument_list|)
expr_stmt|;
block|}
name|Long
name|count
init|=
name|sd
operator|.
name|messageReferences
operator|.
name|get
argument_list|(
name|messageSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|count
operator|.
name|longValue
argument_list|()
operator|+
literal|1
expr_stmt|;
name|sd
operator|.
name|messageReferences
operator|.
name|put
argument_list|(
name|messageSequence
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// new sub is interested in potentially all existing messages
specifier|private
name|void
name|addAckLocationForRetroactiveSub
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
throws|throws
name|IOException
block|{
name|SequenceSet
name|allOutstanding
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SequenceSet
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SequenceSet
name|set
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|entry
range|:
name|set
control|)
block|{
name|allOutstanding
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|sd
operator|.
name|ackPositions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|allOutstanding
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|ackPosition
range|:
name|allOutstanding
control|)
block|{
name|Long
name|count
init|=
name|sd
operator|.
name|messageReferences
operator|.
name|get
argument_list|(
name|ackPosition
argument_list|)
decl_stmt|;
comment|// There might not be a reference if the ackLocation was the last
comment|// one which is a placeholder for the next incoming message and
comment|// no value was added to the message references table.
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|count
operator|=
name|count
operator|.
name|longValue
argument_list|()
operator|+
literal|1
expr_stmt|;
name|sd
operator|.
name|messageReferences
operator|.
name|put
argument_list|(
name|ackPosition
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// on a new message add, all existing subs are interested in this message
specifier|private
name|void
name|addAckLocationForNewMessage
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|Long
name|messageSequence
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|subscriptionKey
range|:
name|sd
operator|.
name|subscriptionCache
control|)
block|{
name|SequenceSet
name|sequences
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequences
operator|==
literal|null
condition|)
block|{
name|sequences
operator|=
operator|new
name|SequenceSet
argument_list|()
expr_stmt|;
name|sequences
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
name|messageSequence
argument_list|,
name|messageSequence
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|add
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|sequences
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sequences
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
name|messageSequence
argument_list|,
name|messageSequence
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|sequences
argument_list|)
expr_stmt|;
block|}
name|Long
name|count
init|=
name|sd
operator|.
name|messageReferences
operator|.
name|get
argument_list|(
name|messageSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|count
operator|.
name|longValue
argument_list|()
operator|+
literal|1
expr_stmt|;
name|sd
operator|.
name|messageReferences
operator|.
name|put
argument_list|(
name|messageSequence
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageReferences
operator|.
name|put
argument_list|(
name|messageSequence
operator|+
literal|1
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeAckLocationsForSub
parameter_list|(
name|KahaSubscriptionCommand
name|command
parameter_list|,
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|sd
operator|.
name|ackPositions
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
name|SequenceSet
name|sequences
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequences
operator|==
literal|null
operator|||
name|sequences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|unreferenced
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|sequenceId
range|:
name|sequences
control|)
block|{
name|Long
name|references
init|=
name|sd
operator|.
name|messageReferences
operator|.
name|get
argument_list|(
name|sequenceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
name|references
operator|=
name|references
operator|.
name|longValue
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|references
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sd
operator|.
name|messageReferences
operator|.
name|put
argument_list|(
name|sequenceId
argument_list|,
name|references
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sd
operator|.
name|messageReferences
operator|.
name|remove
argument_list|(
name|sequenceId
argument_list|)
expr_stmt|;
name|unreferenced
operator|.
name|add
argument_list|(
name|sequenceId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Long
name|sequenceId
range|:
name|unreferenced
control|)
block|{
comment|// Find all the entries that need to get deleted.
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|getDeleteList
argument_list|(
name|tx
argument_list|,
name|deletes
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
comment|// Do the actual deletes.
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
range|:
name|deletes
control|)
block|{
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|decrementAndSubSizeToStoreStat
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * @param tx      * @param sd      * @param subscriptionKey      * @param messageSequence      * @throws IOException      */
specifier|private
name|void
name|removeAckLocation
parameter_list|(
name|KahaRemoveMessageCommand
name|command
parameter_list|,
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|,
name|Long
name|messageSequence
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Remove the sub from the previous location set..
if|if
condition|(
name|messageSequence
operator|!=
literal|null
condition|)
block|{
name|SequenceSet
name|range
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
operator|&&
operator|!
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|range
operator|.
name|remove
argument_list|(
name|messageSequence
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sd
operator|.
name|ackPositions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sd
operator|.
name|ackPositions
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
comment|// Check if the message is reference by any other subscription.
name|Long
name|count
init|=
name|sd
operator|.
name|messageReferences
operator|.
name|get
argument_list|(
name|messageSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|long
name|references
init|=
name|count
operator|.
name|longValue
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|references
operator|>
literal|0
condition|)
block|{
name|sd
operator|.
name|messageReferences
operator|.
name|put
argument_list|(
name|messageSequence
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|references
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|sd
operator|.
name|messageReferences
operator|.
name|remove
argument_list|(
name|messageSequence
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Find all the entries that need to get deleted.
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|getDeleteList
argument_list|(
name|tx
argument_list|,
name|deletes
argument_list|,
name|messageSequence
argument_list|)
expr_stmt|;
comment|// Do the actual deletes.
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
range|:
name|deletes
control|)
block|{
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|decrementAndSubSizeToStoreStat
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|LastAck
name|getLastAck
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sd
operator|.
name|subscriptionAcks
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
return|;
block|}
specifier|public
name|long
name|getStoredMessageCount
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
throws|throws
name|IOException
block|{
name|SequenceSet
name|messageSequences
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageSequences
operator|!=
literal|null
condition|)
block|{
name|long
name|result
init|=
name|messageSequences
operator|.
name|rangeSize
argument_list|()
decl_stmt|;
comment|// if there's anything in the range the last value is always the nextMessage marker, so remove 1.
return|return
name|result
operator|>
literal|0
condition|?
name|result
operator|-
literal|1
else|:
literal|0
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|long
name|getStoredMessageSize
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
throws|throws
name|IOException
block|{
name|SequenceSet
name|messageSequences
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
name|long
name|locationSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|messageSequences
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Long
argument_list|>
name|sequences
init|=
name|messageSequences
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sequences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Long
name|sequenceId
init|=
name|sequences
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//the last item is the next marker
if|if
condition|(
operator|!
name|sequences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|locationIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
name|sequenceId
operator|-
literal|1
condition|)
block|{
name|locationSize
operator|+=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSize
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|locationSize
return|;
block|}
specifier|protected
name|String
name|key
parameter_list|(
name|KahaDestination
name|destination
parameter_list|)
block|{
return|return
name|destination
operator|.
name|getType
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|+
literal|":"
operator|+
name|destination
operator|.
name|getName
argument_list|()
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Transaction related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|inflightTransactions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|Operation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
specifier|final
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|preparedTransactions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|Operation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ackedAndPrepared
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|rolledBackAcks
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// messages that have prepared (pending) acks cannot be re-dispatched unless the outcome is rollback,
comment|// till then they are skipped by the store.
comment|// 'at most once' XA guarantee
specifier|public
name|void
name|trackRecoveredAcks
parameter_list|(
name|ArrayList
argument_list|<
name|MessageAck
argument_list|>
name|acks
parameter_list|)
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|MessageAck
name|ack
range|:
name|acks
control|)
block|{
name|ackedAndPrepared
operator|.
name|add
argument_list|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|toProducerKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|forgetRecoveredAcks
parameter_list|(
name|ArrayList
argument_list|<
name|MessageAck
argument_list|>
name|acks
parameter_list|,
name|boolean
name|rollback
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|acks
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|MessageAck
name|ack
range|:
name|acks
control|)
block|{
specifier|final
name|String
name|id
init|=
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|toProducerKey
argument_list|()
decl_stmt|;
name|ackedAndPrepared
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|rollback
condition|)
block|{
name|rolledBackAcks
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|getInflightTx
parameter_list|(
name|KahaTransactionInfo
name|info
parameter_list|)
block|{
name|TransactionId
name|key
init|=
name|TransactionIdConversion
operator|.
name|convert
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|tx
decl_stmt|;
synchronized|synchronized
init|(
name|inflightTransactions
init|)
block|{
name|tx
operator|=
name|inflightTransactions
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
name|tx
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|inflightTransactions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tx
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|TransactionId
name|key
parameter_list|(
name|KahaTransactionInfo
name|transactionInfo
parameter_list|)
block|{
return|return
name|TransactionIdConversion
operator|.
name|convert
argument_list|(
name|transactionInfo
argument_list|)
return|;
block|}
specifier|abstract
class|class
name|Operation
parameter_list|<
name|T
extends|extends
name|JournalCommand
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
specifier|final
name|T
name|command
decl_stmt|;
specifier|final
name|Location
name|location
decl_stmt|;
specifier|public
name|Operation
parameter_list|(
name|T
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|T
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
specifier|abstract
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
class|class
name|AddOperation
extends|extends
name|Operation
argument_list|<
name|KahaAddMessageCommand
argument_list|>
block|{
specifier|final
name|IndexAware
name|runWithIndexLock
decl_stmt|;
specifier|public
name|AddOperation
parameter_list|(
name|KahaAddMessageCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|,
name|IndexAware
name|runWithIndexLock
parameter_list|)
block|{
name|super
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|runWithIndexLock
operator|=
name|runWithIndexLock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|seq
init|=
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|runWithIndexLock
operator|!=
literal|null
condition|)
block|{
name|runWithIndexLock
operator|.
name|sequenceAssignedWithIndexLocked
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|RemoveOperation
extends|extends
name|Operation
argument_list|<
name|KahaRemoveMessageCommand
argument_list|>
block|{
specifier|public
name|RemoveOperation
parameter_list|(
name|KahaRemoveMessageCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|super
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Initialization related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|private
name|PageFile
name|createPageFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|indexDirectory
operator|==
literal|null
condition|)
block|{
name|indexDirectory
operator|=
name|directory
expr_stmt|;
block|}
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|indexDirectory
argument_list|)
expr_stmt|;
name|PageFile
name|index
init|=
operator|new
name|PageFile
argument_list|(
name|indexDirectory
argument_list|,
literal|"db"
argument_list|)
decl_stmt|;
name|index
operator|.
name|setEnableWriteThread
argument_list|(
name|isEnableIndexWriteAsync
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setWriteBatchSize
argument_list|(
name|getIndexWriteBatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setPageCacheSize
argument_list|(
name|indexCacheSize
argument_list|)
expr_stmt|;
name|index
operator|.
name|setUseLFRUEviction
argument_list|(
name|isUseIndexLFRUEviction
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setLFUEvictionFactor
argument_list|(
name|getIndexLFUEvictionFactor
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setEnableDiskSyncs
argument_list|(
name|isEnableIndexDiskSyncs
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setEnableRecoveryFile
argument_list|(
name|isEnableIndexRecoveryFile
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setEnablePageCaching
argument_list|(
name|isEnableIndexPageCaching
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
specifier|private
name|Journal
name|createJournal
parameter_list|()
throws|throws
name|IOException
block|{
name|Journal
name|manager
init|=
operator|new
name|Journal
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setMaxFileLength
argument_list|(
name|getJournalMaxFileLength
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setCheckForCorruptionOnStartup
argument_list|(
name|checkForCorruptJournalFiles
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setChecksum
argument_list|(
name|checksumJournalFiles
operator|||
name|checkForCorruptJournalFiles
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setWriteBatchSize
argument_list|(
name|getJournalMaxWriteBatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setArchiveDataLogs
argument_list|(
name|isArchiveDataLogs
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setSizeAccumulator
argument_list|(
name|journalSize
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setEnableAsyncDiskSync
argument_list|(
name|isEnableJournalDiskSyncs
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setPreallocationScope
argument_list|(
name|Journal
operator|.
name|PreallocationScope
operator|.
name|valueOf
argument_list|(
name|preallocationScope
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setPreallocationStrategy
argument_list|(
name|Journal
operator|.
name|PreallocationStrategy
operator|.
name|valueOf
argument_list|(
name|preallocationStrategy
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDirectoryArchive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|getDirectoryArchive
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDirectoryArchive
argument_list|(
name|getDirectoryArchive
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|manager
return|;
block|}
specifier|private
name|Metadata
name|createMetadata
parameter_list|()
block|{
name|Metadata
name|md
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|md
operator|.
name|producerSequenceIdTracker
operator|.
name|setAuditDepth
argument_list|(
name|getFailoverProducersAuditDepth
argument_list|()
argument_list|)
expr_stmt|;
name|md
operator|.
name|producerSequenceIdTracker
operator|.
name|setMaximumNumberOfProducersToTrack
argument_list|(
name|getMaxFailoverProducersToTrack
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|md
return|;
block|}
specifier|public
name|int
name|getJournalMaxWriteBatchSize
parameter_list|()
block|{
return|return
name|journalMaxWriteBatchSize
return|;
block|}
specifier|public
name|void
name|setJournalMaxWriteBatchSize
parameter_list|(
name|int
name|journalMaxWriteBatchSize
parameter_list|)
block|{
name|this
operator|.
name|journalMaxWriteBatchSize
operator|=
name|journalMaxWriteBatchSize
expr_stmt|;
block|}
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDeleteAllMessages
parameter_list|()
block|{
return|return
name|deleteAllMessages
return|;
block|}
specifier|public
name|void
name|setDeleteAllMessages
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|)
block|{
name|this
operator|.
name|deleteAllMessages
operator|=
name|deleteAllMessages
expr_stmt|;
block|}
specifier|public
name|void
name|setIndexWriteBatchSize
parameter_list|(
name|int
name|setIndexWriteBatchSize
parameter_list|)
block|{
name|this
operator|.
name|setIndexWriteBatchSize
operator|=
name|setIndexWriteBatchSize
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexWriteBatchSize
parameter_list|()
block|{
return|return
name|setIndexWriteBatchSize
return|;
block|}
specifier|public
name|void
name|setEnableIndexWriteAsync
parameter_list|(
name|boolean
name|enableIndexWriteAsync
parameter_list|)
block|{
name|this
operator|.
name|enableIndexWriteAsync
operator|=
name|enableIndexWriteAsync
expr_stmt|;
block|}
name|boolean
name|isEnableIndexWriteAsync
parameter_list|()
block|{
return|return
name|enableIndexWriteAsync
return|;
block|}
specifier|public
name|boolean
name|isEnableJournalDiskSyncs
parameter_list|()
block|{
return|return
name|enableJournalDiskSyncs
return|;
block|}
specifier|public
name|void
name|setEnableJournalDiskSyncs
parameter_list|(
name|boolean
name|syncWrites
parameter_list|)
block|{
name|this
operator|.
name|enableJournalDiskSyncs
operator|=
name|syncWrites
expr_stmt|;
block|}
specifier|public
name|long
name|getCheckpointInterval
parameter_list|()
block|{
return|return
name|checkpointInterval
return|;
block|}
specifier|public
name|void
name|setCheckpointInterval
parameter_list|(
name|long
name|checkpointInterval
parameter_list|)
block|{
name|this
operator|.
name|checkpointInterval
operator|=
name|checkpointInterval
expr_stmt|;
block|}
specifier|public
name|long
name|getCleanupInterval
parameter_list|()
block|{
return|return
name|cleanupInterval
return|;
block|}
specifier|public
name|void
name|setCleanupInterval
parameter_list|(
name|long
name|cleanupInterval
parameter_list|)
block|{
name|this
operator|.
name|cleanupInterval
operator|=
name|cleanupInterval
expr_stmt|;
block|}
specifier|public
name|void
name|setJournalMaxFileLength
parameter_list|(
name|int
name|journalMaxFileLength
parameter_list|)
block|{
name|this
operator|.
name|journalMaxFileLength
operator|=
name|journalMaxFileLength
expr_stmt|;
block|}
specifier|public
name|int
name|getJournalMaxFileLength
parameter_list|()
block|{
return|return
name|journalMaxFileLength
return|;
block|}
specifier|public
name|void
name|setMaxFailoverProducersToTrack
parameter_list|(
name|int
name|maxFailoverProducersToTrack
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|setMaximumNumberOfProducersToTrack
argument_list|(
name|maxFailoverProducersToTrack
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxFailoverProducersToTrack
parameter_list|()
block|{
return|return
name|this
operator|.
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|getMaximumNumberOfProducersToTrack
argument_list|()
return|;
block|}
specifier|public
name|void
name|setFailoverProducersAuditDepth
parameter_list|(
name|int
name|failoverProducersAuditDepth
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|setAuditDepth
argument_list|(
name|failoverProducersAuditDepth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getFailoverProducersAuditDepth
parameter_list|()
block|{
return|return
name|this
operator|.
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|getAuditDepth
argument_list|()
return|;
block|}
specifier|public
name|PageFile
name|getPageFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageFile
operator|==
literal|null
condition|)
block|{
name|pageFile
operator|=
name|createPageFile
argument_list|()
expr_stmt|;
block|}
return|return
name|pageFile
return|;
block|}
specifier|public
name|Journal
name|getJournal
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|journal
operator|==
literal|null
condition|)
block|{
name|journal
operator|=
name|createJournal
argument_list|()
expr_stmt|;
block|}
return|return
name|journal
return|;
block|}
specifier|public
name|boolean
name|isFailIfDatabaseIsLocked
parameter_list|()
block|{
return|return
name|failIfDatabaseIsLocked
return|;
block|}
specifier|public
name|void
name|setFailIfDatabaseIsLocked
parameter_list|(
name|boolean
name|failIfDatabaseIsLocked
parameter_list|)
block|{
name|this
operator|.
name|failIfDatabaseIsLocked
operator|=
name|failIfDatabaseIsLocked
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreMissingJournalfiles
parameter_list|()
block|{
return|return
name|ignoreMissingJournalfiles
return|;
block|}
specifier|public
name|void
name|setIgnoreMissingJournalfiles
parameter_list|(
name|boolean
name|ignoreMissingJournalfiles
parameter_list|)
block|{
name|this
operator|.
name|ignoreMissingJournalfiles
operator|=
name|ignoreMissingJournalfiles
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexCacheSize
parameter_list|()
block|{
return|return
name|indexCacheSize
return|;
block|}
specifier|public
name|void
name|setIndexCacheSize
parameter_list|(
name|int
name|indexCacheSize
parameter_list|)
block|{
name|this
operator|.
name|indexCacheSize
operator|=
name|indexCacheSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCheckForCorruptJournalFiles
parameter_list|()
block|{
return|return
name|checkForCorruptJournalFiles
return|;
block|}
specifier|public
name|void
name|setCheckForCorruptJournalFiles
parameter_list|(
name|boolean
name|checkForCorruptJournalFiles
parameter_list|)
block|{
name|this
operator|.
name|checkForCorruptJournalFiles
operator|=
name|checkForCorruptJournalFiles
expr_stmt|;
block|}
specifier|public
name|boolean
name|isChecksumJournalFiles
parameter_list|()
block|{
return|return
name|checksumJournalFiles
return|;
block|}
specifier|public
name|void
name|setChecksumJournalFiles
parameter_list|(
name|boolean
name|checksumJournalFiles
parameter_list|)
block|{
name|this
operator|.
name|checksumJournalFiles
operator|=
name|checksumJournalFiles
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
block|}
comment|/**      * @return the archiveDataLogs      */
specifier|public
name|boolean
name|isArchiveDataLogs
parameter_list|()
block|{
return|return
name|this
operator|.
name|archiveDataLogs
return|;
block|}
comment|/**      * @param archiveDataLogs the archiveDataLogs to set      */
specifier|public
name|void
name|setArchiveDataLogs
parameter_list|(
name|boolean
name|archiveDataLogs
parameter_list|)
block|{
name|this
operator|.
name|archiveDataLogs
operator|=
name|archiveDataLogs
expr_stmt|;
block|}
comment|/**      * @return the directoryArchive      */
specifier|public
name|File
name|getDirectoryArchive
parameter_list|()
block|{
return|return
name|this
operator|.
name|directoryArchive
return|;
block|}
comment|/**      * @param directoryArchive the directoryArchive to set      */
specifier|public
name|void
name|setDirectoryArchive
parameter_list|(
name|File
name|directoryArchive
parameter_list|)
block|{
name|this
operator|.
name|directoryArchive
operator|=
name|directoryArchive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isArchiveCorruptedIndex
parameter_list|()
block|{
return|return
name|archiveCorruptedIndex
return|;
block|}
specifier|public
name|void
name|setArchiveCorruptedIndex
parameter_list|(
name|boolean
name|archiveCorruptedIndex
parameter_list|)
block|{
name|this
operator|.
name|archiveCorruptedIndex
operator|=
name|archiveCorruptedIndex
expr_stmt|;
block|}
specifier|public
name|float
name|getIndexLFUEvictionFactor
parameter_list|()
block|{
return|return
name|indexLFUEvictionFactor
return|;
block|}
specifier|public
name|void
name|setIndexLFUEvictionFactor
parameter_list|(
name|float
name|indexLFUEvictionFactor
parameter_list|)
block|{
name|this
operator|.
name|indexLFUEvictionFactor
operator|=
name|indexLFUEvictionFactor
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseIndexLFRUEviction
parameter_list|()
block|{
return|return
name|useIndexLFRUEviction
return|;
block|}
specifier|public
name|void
name|setUseIndexLFRUEviction
parameter_list|(
name|boolean
name|useIndexLFRUEviction
parameter_list|)
block|{
name|this
operator|.
name|useIndexLFRUEviction
operator|=
name|useIndexLFRUEviction
expr_stmt|;
block|}
specifier|public
name|void
name|setEnableIndexDiskSyncs
parameter_list|(
name|boolean
name|enableIndexDiskSyncs
parameter_list|)
block|{
name|this
operator|.
name|enableIndexDiskSyncs
operator|=
name|enableIndexDiskSyncs
expr_stmt|;
block|}
specifier|public
name|void
name|setEnableIndexRecoveryFile
parameter_list|(
name|boolean
name|enableIndexRecoveryFile
parameter_list|)
block|{
name|this
operator|.
name|enableIndexRecoveryFile
operator|=
name|enableIndexRecoveryFile
expr_stmt|;
block|}
specifier|public
name|void
name|setEnableIndexPageCaching
parameter_list|(
name|boolean
name|enableIndexPageCaching
parameter_list|)
block|{
name|this
operator|.
name|enableIndexPageCaching
operator|=
name|enableIndexPageCaching
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnableIndexDiskSyncs
parameter_list|()
block|{
return|return
name|enableIndexDiskSyncs
return|;
block|}
specifier|public
name|boolean
name|isEnableIndexRecoveryFile
parameter_list|()
block|{
return|return
name|enableIndexRecoveryFile
return|;
block|}
specifier|public
name|boolean
name|isEnableIndexPageCaching
parameter_list|()
block|{
return|return
name|enableIndexPageCaching
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Internal conversion methods.
comment|// /////////////////////////////////////////////////////////////////
class|class
name|MessageOrderCursor
block|{
name|long
name|defaultCursorPosition
decl_stmt|;
name|long
name|lowPriorityCursorPosition
decl_stmt|;
name|long
name|highPriorityCursorPosition
decl_stmt|;
name|MessageOrderCursor
parameter_list|()
block|{         }
name|MessageOrderCursor
parameter_list|(
name|long
name|position
parameter_list|)
block|{
name|this
operator|.
name|defaultCursorPosition
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|lowPriorityCursorPosition
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|highPriorityCursorPosition
operator|=
name|position
expr_stmt|;
block|}
name|MessageOrderCursor
parameter_list|(
name|MessageOrderCursor
name|other
parameter_list|)
block|{
name|this
operator|.
name|defaultCursorPosition
operator|=
name|other
operator|.
name|defaultCursorPosition
expr_stmt|;
name|this
operator|.
name|lowPriorityCursorPosition
operator|=
name|other
operator|.
name|lowPriorityCursorPosition
expr_stmt|;
name|this
operator|.
name|highPriorityCursorPosition
operator|=
name|other
operator|.
name|highPriorityCursorPosition
expr_stmt|;
block|}
name|MessageOrderCursor
name|copy
parameter_list|()
block|{
return|return
operator|new
name|MessageOrderCursor
argument_list|(
name|this
argument_list|)
return|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|defaultCursorPosition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|highPriorityCursorPosition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|lowPriorityCursorPosition
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|increment
parameter_list|()
block|{
if|if
condition|(
name|defaultCursorPosition
operator|!=
literal|0
condition|)
block|{
name|defaultCursorPosition
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|highPriorityCursorPosition
operator|!=
literal|0
condition|)
block|{
name|highPriorityCursorPosition
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|lowPriorityCursorPosition
operator|!=
literal|0
condition|)
block|{
name|lowPriorityCursorPosition
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MessageOrderCursor:[def:"
operator|+
name|defaultCursorPosition
operator|+
literal|", low:"
operator|+
name|lowPriorityCursorPosition
operator|+
literal|", high:"
operator|+
name|highPriorityCursorPosition
operator|+
literal|"]"
return|;
block|}
specifier|public
name|void
name|sync
parameter_list|(
name|MessageOrderCursor
name|other
parameter_list|)
block|{
name|this
operator|.
name|defaultCursorPosition
operator|=
name|other
operator|.
name|defaultCursorPosition
expr_stmt|;
name|this
operator|.
name|lowPriorityCursorPosition
operator|=
name|other
operator|.
name|lowPriorityCursorPosition
expr_stmt|;
name|this
operator|.
name|highPriorityCursorPosition
operator|=
name|other
operator|.
name|highPriorityCursorPosition
expr_stmt|;
block|}
block|}
class|class
name|MessageOrderIndex
block|{
specifier|static
specifier|final
name|byte
name|HI
init|=
literal|9
decl_stmt|;
specifier|static
specifier|final
name|byte
name|LO
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|byte
name|DEF
init|=
literal|4
decl_stmt|;
name|long
name|nextMessageId
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|defaultPriorityIndex
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|lowPriorityIndex
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|highPriorityIndex
decl_stmt|;
specifier|final
name|MessageOrderCursor
name|cursor
init|=
operator|new
name|MessageOrderCursor
argument_list|()
decl_stmt|;
name|Long
name|lastDefaultKey
decl_stmt|;
name|Long
name|lastHighKey
decl_stmt|;
name|Long
name|lastLowKey
decl_stmt|;
name|byte
name|lastGetPriority
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|pendingAdditions
init|=
operator|new
name|LinkedList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|MessageKeys
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Long
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageKeys
name|result
init|=
name|defaultPriorityIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|highPriorityIndex
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|highPriorityIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|lowPriorityIndex
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|lowPriorityIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
name|void
name|load
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|defaultPriorityIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|defaultPriorityIndex
operator|.
name|setValueMarshaller
argument_list|(
name|MessageKeysMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|defaultPriorityIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|lowPriorityIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|lowPriorityIndex
operator|.
name|setValueMarshaller
argument_list|(
name|MessageKeysMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|lowPriorityIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|highPriorityIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|highPriorityIndex
operator|.
name|setValueMarshaller
argument_list|(
name|MessageKeysMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|highPriorityIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
name|void
name|allocate
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|defaultPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|version
operator|>=
literal|2
condition|)
block|{
name|lowPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|highPriorityIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|configureLast
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Figure out the next key using the last entry in the destination.
name|TreeSet
argument_list|<
name|Long
argument_list|>
name|orderedSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|addLast
argument_list|(
name|orderedSet
argument_list|,
name|highPriorityIndex
argument_list|,
name|tx
argument_list|)
expr_stmt|;
name|addLast
argument_list|(
name|orderedSet
argument_list|,
name|defaultPriorityIndex
argument_list|,
name|tx
argument_list|)
expr_stmt|;
name|addLast
argument_list|(
name|orderedSet
argument_list|,
name|lowPriorityIndex
argument_list|,
name|tx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|orderedSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nextMessageId
operator|=
name|orderedSet
operator|.
name|last
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addLast
parameter_list|(
name|TreeSet
argument_list|<
name|Long
argument_list|>
name|orderedSet
parameter_list|,
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|index
parameter_list|,
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|lastEntry
init|=
name|index
operator|.
name|getLast
argument_list|(
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastEntry
operator|!=
literal|null
condition|)
block|{
name|orderedSet
operator|.
name|add
argument_list|(
name|lastEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|clear
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|remove
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|this
operator|.
name|resetCursorPosition
argument_list|()
expr_stmt|;
name|this
operator|.
name|allocate
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|this
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|this
operator|.
name|configureLast
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
name|void
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|defaultPriorityIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|defaultPriorityIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|defaultPriorityIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lowPriorityIndex
operator|!=
literal|null
condition|)
block|{
name|lowPriorityIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|lowPriorityIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|lowPriorityIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highPriorityIndex
operator|!=
literal|null
condition|)
block|{
name|highPriorityIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|highPriorityIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|highPriorityIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|resetCursorPosition
parameter_list|()
block|{
name|this
operator|.
name|cursor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|lastDefaultKey
operator|=
literal|null
expr_stmt|;
name|lastHighKey
operator|=
literal|null
expr_stmt|;
name|lastLowKey
operator|=
literal|null
expr_stmt|;
block|}
name|void
name|setBatch
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Long
name|sequence
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sequence
operator|!=
literal|null
condition|)
block|{
name|Long
name|nextPosition
init|=
operator|new
name|Long
argument_list|(
name|sequence
operator|.
name|longValue
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|lastDefaultKey
operator|=
name|sequence
expr_stmt|;
name|cursor
operator|.
name|defaultCursorPosition
operator|=
name|nextPosition
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|lastHighKey
operator|=
name|sequence
expr_stmt|;
name|cursor
operator|.
name|highPriorityCursorPosition
operator|=
name|nextPosition
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|lastLowKey
operator|=
name|sequence
expr_stmt|;
name|cursor
operator|.
name|lowPriorityCursorPosition
operator|=
name|nextPosition
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|setBatch
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|LastAck
name|last
parameter_list|)
throws|throws
name|IOException
block|{
name|setBatch
argument_list|(
name|tx
argument_list|,
name|last
operator|.
name|lastAckedSequence
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|defaultCursorPosition
operator|==
literal|0
operator|&&
name|cursor
operator|.
name|highPriorityCursorPosition
operator|==
literal|0
operator|&&
name|cursor
operator|.
name|lowPriorityCursorPosition
operator|==
literal|0
condition|)
block|{
name|long
name|next
init|=
name|last
operator|.
name|lastAckedSequence
operator|+
literal|1
decl_stmt|;
switch|switch
condition|(
name|last
operator|.
name|priority
condition|)
block|{
case|case
name|DEF
case|:
name|cursor
operator|.
name|defaultCursorPosition
operator|=
name|next
expr_stmt|;
name|cursor
operator|.
name|highPriorityCursorPosition
operator|=
name|next
expr_stmt|;
break|break;
case|case
name|HI
case|:
name|cursor
operator|.
name|highPriorityCursorPosition
operator|=
name|next
expr_stmt|;
break|break;
case|case
name|LO
case|:
name|cursor
operator|.
name|lowPriorityCursorPosition
operator|=
name|next
expr_stmt|;
name|cursor
operator|.
name|defaultCursorPosition
operator|=
name|next
expr_stmt|;
name|cursor
operator|.
name|highPriorityCursorPosition
operator|=
name|next
expr_stmt|;
break|break;
block|}
block|}
block|}
name|void
name|stoppedIterating
parameter_list|()
block|{
if|if
condition|(
name|lastDefaultKey
operator|!=
literal|null
condition|)
block|{
name|cursor
operator|.
name|defaultCursorPosition
operator|=
name|lastDefaultKey
operator|.
name|longValue
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|lastHighKey
operator|!=
literal|null
condition|)
block|{
name|cursor
operator|.
name|highPriorityCursorPosition
operator|=
name|lastHighKey
operator|.
name|longValue
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|lastLowKey
operator|!=
literal|null
condition|)
block|{
name|cursor
operator|.
name|lowPriorityCursorPosition
operator|=
name|lastLowKey
operator|.
name|longValue
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
name|lastDefaultKey
operator|=
literal|null
expr_stmt|;
name|lastHighKey
operator|=
literal|null
expr_stmt|;
name|lastLowKey
operator|=
literal|null
expr_stmt|;
block|}
name|void
name|getDeleteList
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|deletes
parameter_list|,
name|Long
name|sequenceId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|defaultPriorityIndex
operator|.
name|containsKey
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
condition|)
block|{
name|getDeleteList
argument_list|(
name|tx
argument_list|,
name|deletes
argument_list|,
name|defaultPriorityIndex
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|highPriorityIndex
operator|!=
literal|null
operator|&&
name|highPriorityIndex
operator|.
name|containsKey
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
condition|)
block|{
name|getDeleteList
argument_list|(
name|tx
argument_list|,
name|deletes
argument_list|,
name|highPriorityIndex
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lowPriorityIndex
operator|!=
literal|null
operator|&&
name|lowPriorityIndex
operator|.
name|containsKey
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
condition|)
block|{
name|getDeleteList
argument_list|(
name|tx
argument_list|,
name|deletes
argument_list|,
name|lowPriorityIndex
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|getDeleteList
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|deletes
parameter_list|,
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|index
parameter_list|,
name|Long
name|sequenceId
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|getNextMessageId
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
return|return
name|nextMessageId
operator|++
return|;
block|}
name|MessageKeys
name|get
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Long
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageKeys
name|result
init|=
name|defaultPriorityIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|highPriorityIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|lowPriorityIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|lastGetPriority
operator|=
name|LO
expr_stmt|;
block|}
else|else
block|{
name|lastGetPriority
operator|=
name|HI
expr_stmt|;
block|}
block|}
else|else
block|{
name|lastGetPriority
operator|=
name|DEF
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|MessageKeys
name|put
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|priority
parameter_list|,
name|Long
name|key
parameter_list|,
name|MessageKeys
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|priority
operator|==
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_PRIORITY
condition|)
block|{
return|return
name|defaultPriorityIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|priority
operator|>
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_PRIORITY
condition|)
block|{
return|return
name|highPriorityIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|lowPriorityIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MessageOrderIterator
argument_list|(
name|tx
argument_list|,
name|cursor
argument_list|,
name|this
argument_list|)
return|;
block|}
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|MessageOrderCursor
name|m
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MessageOrderIterator
argument_list|(
name|tx
argument_list|,
name|m
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|byte
name|lastGetPriority
parameter_list|()
block|{
return|return
name|lastGetPriority
return|;
block|}
specifier|public
name|boolean
name|alreadyDispatched
parameter_list|(
name|Long
name|sequence
parameter_list|)
block|{
return|return
operator|(
name|cursor
operator|.
name|highPriorityCursorPosition
operator|>
literal|0
operator|&&
name|cursor
operator|.
name|highPriorityCursorPosition
operator|>=
name|sequence
operator|)
operator|||
operator|(
name|cursor
operator|.
name|defaultCursorPosition
operator|>
literal|0
operator|&&
name|cursor
operator|.
name|defaultCursorPosition
operator|>=
name|sequence
operator|)
operator|||
operator|(
name|cursor
operator|.
name|lowPriorityCursorPosition
operator|>
literal|0
operator|&&
name|cursor
operator|.
name|lowPriorityCursorPosition
operator|>=
name|sequence
operator|)
return|;
block|}
specifier|public
name|void
name|trackPendingAdd
parameter_list|(
name|Long
name|seq
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pendingAdditions
init|)
block|{
name|pendingAdditions
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|trackPendingAddComplete
parameter_list|(
name|Long
name|seq
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pendingAdditions
init|)
block|{
name|pendingAdditions
operator|.
name|remove
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|minPendingAdd
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pendingAdditions
init|)
block|{
if|if
condition|(
operator|!
name|pendingAdditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|pendingAdditions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
class|class
name|MessageOrderIterator
implements|implements
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|currentIterator
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|highIterator
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|defaultIterator
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|lowIterator
decl_stmt|;
name|MessageOrderIterator
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|MessageOrderCursor
name|m
parameter_list|,
name|MessageOrderIndex
name|messageOrderIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|pendingAddLimiter
init|=
name|messageOrderIndex
operator|.
name|minPendingAdd
argument_list|()
decl_stmt|;
name|this
operator|.
name|defaultIterator
operator|=
name|defaultPriorityIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|m
operator|.
name|defaultCursorPosition
argument_list|,
name|pendingAddLimiter
argument_list|)
expr_stmt|;
if|if
condition|(
name|highPriorityIndex
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|highIterator
operator|=
name|highPriorityIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|m
operator|.
name|highPriorityCursorPosition
argument_list|,
name|pendingAddLimiter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|highIterator
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|lowPriorityIndex
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lowIterator
operator|=
name|lowPriorityIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|m
operator|.
name|lowPriorityCursorPosition
argument_list|,
name|pendingAddLimiter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lowIterator
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|currentIterator
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|highIterator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|highIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|highIterator
expr_stmt|;
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
if|if
condition|(
name|defaultIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|defaultIterator
expr_stmt|;
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
if|if
condition|(
name|lowIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|lowIterator
expr_stmt|;
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|currentIterator
operator|=
name|defaultIterator
expr_stmt|;
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|highIterator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|currentIterator
operator|==
name|highIterator
condition|)
block|{
if|if
condition|(
name|defaultIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|defaultIterator
expr_stmt|;
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
if|if
condition|(
name|lowIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|lowIterator
expr_stmt|;
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|currentIterator
operator|==
name|defaultIterator
condition|)
block|{
if|if
condition|(
name|lowIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|lowIterator
expr_stmt|;
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|next
parameter_list|()
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|result
init|=
name|currentIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|Long
name|key
init|=
name|result
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|highIterator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentIterator
operator|==
name|defaultIterator
condition|)
block|{
name|lastDefaultKey
operator|=
name|key
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentIterator
operator|==
name|highIterator
condition|)
block|{
name|lastHighKey
operator|=
name|key
expr_stmt|;
block|}
else|else
block|{
name|lastLowKey
operator|=
name|key
expr_stmt|;
block|}
block|}
else|else
block|{
name|lastDefaultKey
operator|=
name|key
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|HashSetStringMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
specifier|final
specifier|static
name|HashSetStringMarshaller
name|INSTANCE
init|=
operator|new
name|HashSetStringMarshaller
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|HashSet
argument_list|<
name|String
argument_list|>
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oout
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|oout
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|oout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oout
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|HashSet
argument_list|<
name|String
argument_list|>
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|dataLen
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
name|dataIn
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|ObjectInputStream
name|oin
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|HashSet
argument_list|<
name|String
argument_list|>
operator|)
name|oin
operator|.
name|readObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cfe
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"Failed to read HashSet<String>: "
operator|+
name|cfe
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|cfe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
specifier|public
name|File
name|getIndexDirectory
parameter_list|()
block|{
return|return
name|indexDirectory
return|;
block|}
specifier|public
name|void
name|setIndexDirectory
parameter_list|(
name|File
name|indexDirectory
parameter_list|)
block|{
name|this
operator|.
name|indexDirectory
operator|=
name|indexDirectory
expr_stmt|;
block|}
interface|interface
name|IndexAware
block|{
specifier|public
name|void
name|sequenceAssignedWithIndexLocked
parameter_list|(
name|long
name|index
parameter_list|)
function_decl|;
block|}
specifier|public
name|String
name|getPreallocationScope
parameter_list|()
block|{
return|return
name|preallocationScope
return|;
block|}
specifier|public
name|void
name|setPreallocationScope
parameter_list|(
name|String
name|preallocationScope
parameter_list|)
block|{
name|this
operator|.
name|preallocationScope
operator|=
name|preallocationScope
expr_stmt|;
block|}
specifier|public
name|String
name|getPreallocationStrategy
parameter_list|()
block|{
return|return
name|preallocationStrategy
return|;
block|}
specifier|public
name|void
name|setPreallocationStrategy
parameter_list|(
name|String
name|preallocationStrategy
parameter_list|)
block|{
name|this
operator|.
name|preallocationStrategy
operator|=
name|preallocationStrategy
expr_stmt|;
block|}
block|}
end_class

end_unit

