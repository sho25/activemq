begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utilities for determining the values for the bits in the headers of the  * outgoing TCP/IP packets that indicate Traffic Class for use in Quality of  * Service forwarding policies.  */
end_comment

begin_class
specifier|public
class|class
name|QualityOfServiceUtils
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DIFF_SERV
init|=
literal|63
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_DIFF_SERV
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|DIFF_SERV_NAMES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Common names used for Differentiated Services values. */
static|static
block|{
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"EF"
argument_list|,
literal|46
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF11"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF12"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF13"
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF21"
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF22"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF23"
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF31"
argument_list|,
literal|26
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF32"
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF33"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF41"
argument_list|,
literal|34
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF42"
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|DIFF_SERV_NAMES
operator|.
name|put
argument_list|(
literal|"AF43"
argument_list|,
literal|38
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TOS
init|=
literal|255
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_TOS
init|=
literal|0
decl_stmt|;
comment|/**      * @param value A potential value to be used for Differentiated Services.      * @return The corresponding Differentiated Services Code Point (DSCP).      * @throws IllegalArgumentException if the value does not correspond to a      *         Differentiated Services Code Point or setting the DSCP is not      *         supported.      */
specifier|public
specifier|static
name|int
name|getDSCP
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|int
name|intValue
init|=
operator|-
literal|1
decl_stmt|;
comment|// Check the names first.
if|if
condition|(
name|DIFF_SERV_NAMES
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|intValue
operator|=
name|DIFF_SERV_NAMES
operator|.
name|get
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|intValue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|intValue
operator|>
name|MAX_DIFF_SERV
operator|||
name|intValue
operator|<
name|MIN_DIFF_SERV
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Differentiated Services"
operator|+
literal|" value: "
operator|+
name|intValue
operator|+
literal|" not in legal range ["
operator|+
name|MIN_DIFF_SERV
operator|+
literal|", "
operator|+
name|MAX_DIFF_SERV
operator|+
literal|"]."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// value must have been a malformed name.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No such Differentiated "
operator|+
literal|"Services name: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
return|return
name|adjustDSCPForECN
argument_list|(
name|intValue
argument_list|)
return|;
block|}
comment|/**      * @param value A potential value to be used for Type of Service.      * @return A valid value that can be used to set the Type of Service in the      *         packet headers.      * @throws IllegalArgumentException if the value is not a legal Type of      *         Service value.      */
specifier|public
specifier|static
name|int
name|getToS
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|value
operator|>
name|MAX_TOS
operator|||
name|value
operator|<
name|MIN_TOS
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type of Service value: "
operator|+
name|value
operator|+
literal|" not in legal range ["
operator|+
name|MIN_TOS
operator|+
literal|", "
operator|+
name|MAX_TOS
operator|+
literal|"."
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * The Differentiated Services values use only 6 of the 8 bits in the field      * in the TCP/IP packet header. Make sure any values the system has set for      * the other two bits (the ECN bits) are maintained.      *      * @param dscp The Differentiated Services Code Point.      * @return A Differentiated Services Code Point that respects the ECN bits      *         set on the system.      * @throws IllegalArgumentException if setting Differentiated Services is      *         not supported.      */
specifier|private
specifier|static
name|int
name|adjustDSCPForECN
parameter_list|(
name|int
name|dscp
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// The only way to see if there are any values set for the ECN is to
comment|// read the traffic class automatically set by the system and isolate
comment|// the ECN bits.
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|systemTrafficClass
init|=
name|socket
operator|.
name|getTrafficClass
argument_list|()
decl_stmt|;
comment|// The 1st and 2nd bits of the system traffic class are the ECN
comment|// bits.
return|return
operator|(
name|dscp
operator|<<
literal|2
operator|)
operator||
operator|(
name|systemTrafficClass
operator|&
literal|3
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Setting Differentiated Services"
operator|+
literal|" not supported: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

