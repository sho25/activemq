begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  https://issues.apache.org/jira/browse/AMQ-5898  */
end_comment

begin_class
specifier|public
class|class
name|MultipleCompositeToPhysicalQueueTest
block|{
specifier|private
specifier|final
name|ActiveMQQueue
name|SUB1
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"SUB1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CompositeQueue
name|PUB_BROADCAST
init|=
name|newCompositeQueue
argument_list|(
literal|"PUB.ALL"
argument_list|,
name|SUB1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CompositeQueue
name|PUB_INDIVIDUAL
init|=
name|newCompositeQueue
argument_list|(
literal|"PUB.SUB1"
argument_list|,
name|SUB1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
empty_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|virtualDestinationInterceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|virtualDestinationInterceptor
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|PUB_BROADCAST
block|,
name|PUB_INDIVIDUAL
block|}
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{
name|virtualDestinationInterceptor
block|}
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|url
operator|=
name|broker
operator|.
name|getConnectorByName
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testManyToOne
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|consumerSession
init|=
name|buildSession
argument_list|(
literal|"Consumer"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|createSubscriber
argument_list|(
name|consumerSession
argument_list|,
name|SUB1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Producer
name|Session
name|publisherSession
init|=
name|buildSession
argument_list|(
literal|"Producer"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|createPublisher
argument_list|(
name|publisherSession
argument_list|,
name|PUB_BROADCAST
operator|.
name|getVirtualDestination
argument_list|()
argument_list|)
operator|.
name|send
argument_list|(
name|publisherSession
operator|.
name|createTextMessage
argument_list|(
literal|"BROADCAST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BROADCAST"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|createPublisher
argument_list|(
name|publisherSession
argument_list|,
name|PUB_INDIVIDUAL
operator|.
name|getVirtualDestination
argument_list|()
argument_list|)
operator|.
name|send
argument_list|(
name|publisherSession
operator|.
name|createTextMessage
argument_list|(
literal|"INDIVIDUAL"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"INDIVIDUAL"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|persistent
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"TestBroker"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
name|persistent
argument_list|)
expr_stmt|;
name|TransportConnector
name|connector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
empty_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|private
name|MessageConsumer
name|createSubscriber
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|MessageListener
name|messageListener
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
specifier|private
name|MessageProducer
name|createPublisher
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
return|return
name|producer
return|;
block|}
specifier|private
name|Session
name|buildSession
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setClientIDPrefix
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|session
return|;
block|}
specifier|private
name|CompositeQueue
name|newCompositeQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|ActiveMQDestination
name|forwardTo
parameter_list|)
block|{
name|CompositeQueue
name|queue
init|=
operator|new
name|CompositeQueue
argument_list|()
decl_stmt|;
name|queue
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|queue
operator|.
name|setForwardTo
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|forwardTo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|queue
return|;
block|}
block|}
end_class

end_unit

