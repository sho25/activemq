begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XASession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQXAConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQXAConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerRestartTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransactionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|XATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
operator|.
name|FailoverTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test for AMQ-4950.  * Simulates an error during XA prepare call.  */
end_comment

begin_class
specifier|public
class|class
name|AMQ4950Test
extends|extends
name|BrokerRestartTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4950Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|simulatedExceptionMessage
init|=
literal|"Simulating error inside tx prepare()."
decl_stmt|;
specifier|public
name|boolean
name|prioritySupport
init|=
literal|false
decl_stmt|;
specifier|protected
name|String
name|connectionUri
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|prepareTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Exception
block|{
name|getNext
argument_list|()
operator|.
name|prepareTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"BrokerPlugin.prepareTransaction() will throw an exception."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XAException
argument_list|(
name|simulatedExceptionMessage
argument_list|)
throw|;
block|}
expr|@
name|Override
specifier|public
name|void
name|commitTransaction
argument_list|(
name|ConnectionContext
name|context
argument_list|,
name|TransactionId
name|xid
argument_list|,
name|boolean
name|onePhase
argument_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"BrokerPlugin.commitTransaction()."
argument_list|)
argument_list|;
name|super
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|,
name|onePhase
argument_list|)
argument_list|;
block|}
block|}
end_class

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Creates XA transaction and invokes XA prepare().      * Due to registered BrokerFilter prepare will be handled by broker      * but then throw an exception.      * Prior to fixing AMQ-4950, this resulted in a ClassCastException      * in ConnectionStateTracker.PrepareReadonlyTransactionAction.onResponse()      * causing the failover transport to reconnect and replay the XA prepare().      */
end_comment

begin_function
unit|public
name|void
name|testXAPrepareFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
name|ActiveMQXAConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|connectionUri
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|ActiveMQXAConnection
name|xaConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|xaConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|session
init|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|XAResource
name|resource
init|=
name|session
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Sample Message"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calling XA prepare(), expecting an exception"
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|resource
operator|.
name|prepare
argument_list|(
name|tid
argument_list|)
decl_stmt|;
if|if
condition|(
name|XAResource
operator|.
name|XA_OK
operator|==
name|ret
condition|)
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XAException
name|xae
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received excpected XAException: {}"
argument_list|,
name|xae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling back transaction {}"
argument_list|,
name|tid
argument_list|)
expr_stmt|;
comment|// with bug AMQ-4950 the thrown error reads "Cannot call prepare now"
comment|// we check that we receive the original exception message as
comment|// thrown by the BrokerPlugin
name|assertEquals
argument_list|(
name|simulatedExceptionMessage
argument_list|,
name|xae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|rollback
argument_list|(
name|tid
argument_list|)
expr_stmt|;
block|}
comment|// couple of assertions
name|assertTransactionGoneFromBroker
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|assertTransactionGoneFromConnection
argument_list|(
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|xaConnection
operator|.
name|getClientID
argument_list|()
argument_list|,
name|xaConnection
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|assertTransactionGoneFromFailoverState
argument_list|(
name|xaConnection
argument_list|,
name|tid
argument_list|)
expr_stmt|;
comment|//cleanup
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|xaConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"testXAPrepareFailure() finished."
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|Xid
name|createXid
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|os
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
operator|++
name|txGenerator
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|bs
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|Xid
argument_list|()
block|{
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
literal|86
return|;
block|}
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
block|}
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|assertTransactionGoneFromFailoverState
parameter_list|(
name|ActiveMQXAConnection
name|connection1
parameter_list|,
name|Xid
name|tid
parameter_list|)
throws|throws
name|Exception
block|{
name|FailoverTransport
name|transport
init|=
operator|(
name|FailoverTransport
operator|)
name|connection1
operator|.
name|getTransport
argument_list|()
operator|.
name|narrow
argument_list|(
name|FailoverTransport
operator|.
name|class
argument_list|)
decl_stmt|;
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connection1
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|,
operator|new
name|XATransactionId
argument_list|(
name|tid
argument_list|)
argument_list|,
name|TransactionInfo
operator|.
name|COMMIT_ONE_PHASE
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"transaction should not exist in the state tracker"
argument_list|,
name|transport
operator|.
name|getStateTracker
argument_list|()
operator|.
name|processCommitTransactionOnePhase
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|assertTransactionGoneFromBroker
parameter_list|(
name|Xid
name|tid
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|TransactionBroker
name|transactionBroker
init|=
operator|(
name|TransactionBroker
operator|)
name|broker
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|TransactionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|transactionBroker
operator|.
name|getTransaction
argument_list|(
literal|null
argument_list|,
operator|new
name|XATransactionId
argument_list|(
name|tid
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception on tx not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XAException
name|expectedOnNotFound
parameter_list|)
block|{         }
block|}
end_function

begin_function
specifier|private
name|void
name|assertTransactionGoneFromConnection
parameter_list|(
name|String
name|brokerName
parameter_list|,
name|String
name|clientId
parameter_list|,
name|ConnectionId
name|connectionId
parameter_list|,
name|Xid
name|tid
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|lookup
argument_list|(
name|brokerName
argument_list|)
decl_stmt|;
name|CopyOnWriteArrayList
argument_list|<
name|TransportConnection
argument_list|>
name|connections
init|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
decl_stmt|;
for|for
control|(
name|TransportConnection
name|connection
range|:
name|connections
control|)
block|{
if|if
condition|(
name|connection
operator|.
name|getConnectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|clientId
argument_list|)
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|processPrepareTransaction
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionId
argument_list|,
operator|new
name|XATransactionId
argument_list|(
name|tid
argument_list|)
argument_list|,
name|TransactionInfo
operator|.
name|PREPARE
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected excepton on missing transaction, it must be still there in error!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expectedOnNoTransaction
parameter_list|)
block|{                 }
block|}
block|}
block|}
end_function

unit|}
end_unit

