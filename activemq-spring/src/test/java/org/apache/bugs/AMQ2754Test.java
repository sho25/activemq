begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_comment
comment|//import org.apache.activemq.pool.PooledConnectionFactory;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2754Test
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testNetworkOfBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService1
init|=
literal|null
decl_stmt|;
name|BrokerService
name|brokerService2
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|100
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|total
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|conduitSubscriptions
init|=
literal|true
decl_stmt|;
try|try
block|{
block|{
name|brokerService1
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService1
operator|.
name|setBrokerName
argument_list|(
literal|"consumer"
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|MemoryPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:61616"
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|{
name|brokerService2
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService2
operator|.
name|setBrokerName
argument_list|(
literal|"producer"
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|MemoryPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:51515"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|network2
init|=
name|brokerService2
operator|.
name|addNetworkConnector
argument_list|(
literal|"static:(tcp://localhost:61616)"
argument_list|)
decl_stmt|;
name|network2
operator|.
name|setName
argument_list|(
literal|"network1"
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setDynamicOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setConduitSubscriptions
argument_list|(
name|conduitSubscriptions
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setNetworkTTL
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory1
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:(tcp://localhost:61616)"
argument_list|)
decl_stmt|;
name|connectionFactory1
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|DefaultMessageListenerContainer
name|container
init|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory1
argument_list|)
expr_stmt|;
name|container
operator|.
name|setMaxConcurrentConsumers
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|container
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|container
operator|.
name|setCacheLevel
argument_list|(
name|DefaultMessageListenerContainer
operator|.
name|CACHE_CONSUMER
argument_list|)
expr_stmt|;
name|container
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testingqueue"
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|container
operator|.
name|setMaxMessagesPerTask
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|int
name|batch
init|=
literal|10
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory2
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:(tcp://localhost:51515)"
argument_list|)
decl_stmt|;
name|PooledConnectionFactory
name|pooledConnectionFactory
init|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|connectionFactory2
argument_list|)
decl_stmt|;
name|connectionFactory2
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JmsTemplate
name|template
init|=
operator|new
name|JmsTemplate
argument_list|(
name|pooledConnectionFactory
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testingqueue"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|batch
condition|;
name|b
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|total
operator|/
name|batch
operator|)
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|id
init|=
literal|":batch="
operator|+
name|b
operator|+
literal|"i="
operator|+
name|i
decl_stmt|;
name|template
operator|.
name|send
argument_list|(
name|queue
argument_list|,
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Hello World!"
operator|+
name|id
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// give spring time to scale back again
while|while
condition|(
name|container
operator|.
name|getActiveConsumerCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"active consumer count:"
operator|+
name|container
operator|.
name|getActiveConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"concurrent consumer count: "
operator|+
name|container
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
comment|//pooledConnectionFactory.stop();
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// give it 20 seconds
while|while
condition|(
operator|!
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|&&
name|count
operator|++
operator|<
literal|20
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"count "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|brokerService1
operator|!=
literal|null
condition|)
block|{
name|brokerService1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|brokerService2
operator|!=
literal|null
condition|)
block|{
name|brokerService2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|latch
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"latch should have gone down to 0 but was "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

