begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * callback when the index is updated, allows ordered work to be seen by destinations  */
end_comment

begin_interface
specifier|public
interface|interface
name|IndexListener
block|{
specifier|final
class|class
name|MessageContext
block|{
specifier|public
name|Message
name|message
decl_stmt|;
specifier|public
name|ConnectionContext
name|context
decl_stmt|;
specifier|public
name|Runnable
name|onCompletion
decl_stmt|;
specifier|public
name|boolean
name|duplicate
decl_stmt|;
specifier|public
name|MessageContext
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|,
name|Runnable
name|onCompletion
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|onCompletion
operator|=
name|onCompletion
expr_stmt|;
block|}
block|}
comment|/**      *  called with some global index lock held so that a listener can do order      *  dependent work      *  non null MessageContext.onCompletion called when work is done      */
specifier|public
name|void
name|onAdd
parameter_list|(
name|MessageContext
name|messageContext
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

