begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|RetainedMessageSubscriptionRecoveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapterSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTProtocolConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTProtocolConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|CONNECTION_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MQTTFrame
name|PING_RESP_FRAME
init|=
operator|new
name|PINGRESP
argument_list|()
operator|.
name|encode
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|MQTT_KEEP_ALIVE_GRACE_PERIOD
init|=
literal|0.5
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_SIZE
init|=
literal|5000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|SUBSCRIBE_ERROR
init|=
operator|(
name|byte
operator|)
literal|0x80
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|CONNECTION_ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionId
name|sessionId
init|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
name|sessionId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|publisherIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
name|resposeHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|MQTTSubscription
argument_list|>
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|MQTTSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|UTF8Buffer
argument_list|,
name|MQTTSubscription
argument_list|>
name|mqttSubscriptionByTopic
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|UTF8Buffer
argument_list|,
name|MQTTSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UTF8Buffer
argument_list|,
name|ActiveMQTopic
argument_list|>
name|activeMQTopicMap
init|=
operator|new
name|LRUCache
argument_list|<
name|UTF8Buffer
argument_list|,
name|ActiveMQTopic
argument_list|>
argument_list|(
name|DEFAULT_CACHE_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Destination
argument_list|,
name|UTF8Buffer
argument_list|>
name|mqttTopicMap
init|=
operator|new
name|LRUCache
argument_list|<
name|Destination
argument_list|,
name|UTF8Buffer
argument_list|>
argument_list|(
name|DEFAULT_CACHE_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Short
argument_list|,
name|MessageAck
argument_list|>
name|consumerAcks
init|=
operator|new
name|LRUCache
argument_list|<
name|Short
argument_list|,
name|MessageAck
argument_list|>
argument_list|(
name|DEFAULT_CACHE_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Short
argument_list|,
name|PUBREC
argument_list|>
name|publisherRecs
init|=
operator|new
name|LRUCache
argument_list|<
name|Short
argument_list|,
name|PUBREC
argument_list|>
argument_list|(
name|DEFAULT_CACHE_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MQTTTransport
name|mqttTransport
decl_stmt|;
specifier|private
specifier|final
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|final
name|Object
name|commnadIdMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastCommandId
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|connected
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConnectionInfo
name|connectionInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
specifier|private
name|CONNECT
name|connect
decl_stmt|;
specifier|private
name|String
name|clientId
decl_stmt|;
specifier|private
name|long
name|defaultKeepAlive
decl_stmt|;
specifier|private
name|int
name|activeMQSubscriptionPrefetch
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|QOS_PROPERTY_NAME
init|=
literal|"ActiveMQ.MQTT.QoS"
decl_stmt|;
specifier|private
specifier|final
name|MQTTPacketIdGenerator
name|packetIdGenerator
decl_stmt|;
specifier|public
name|MQTTProtocolConverter
parameter_list|(
name|MQTTTransport
name|mqttTransport
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|mqttTransport
operator|=
name|mqttTransport
expr_stmt|;
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
name|this
operator|.
name|packetIdGenerator
operator|=
name|MQTTPacketIdGenerator
operator|.
name|getMQTTPacketIdGenerator
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultKeepAlive
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|generateCommandId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commnadIdMutex
init|)
block|{
return|return
name|lastCommandId
operator|++
return|;
block|}
block|}
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|,
name|ResponseHandler
name|handler
parameter_list|)
block|{
comment|// Lets intercept message send requests..
if|if
condition|(
name|command
operator|instanceof
name|ActiveMQMessage
condition|)
block|{
name|ActiveMQMessage
name|msg
init|=
operator|(
name|ActiveMQMessage
operator|)
name|command
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
comment|// We don't allow users to send to $ prefixed topics to avoid failing MQTT 3.1.1 spec requirements
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|handler
operator|.
name|onResponse
argument_list|(
name|this
argument_list|,
operator|new
name|Response
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
name|command
operator|.
name|setCommandId
argument_list|(
name|generateCommandId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resposeHandlers
operator|.
name|put
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|getMQTTTransport
argument_list|()
operator|.
name|sendToActiveMQ
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|void
name|sendToMQTT
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
try|try
block|{
name|mqttTransport
operator|.
name|sendToMQTT
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to send frame "
operator|+
name|frame
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert a MQTT command      */
specifier|public
name|void
name|onMQTTCommand
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
switch|switch
condition|(
name|frame
operator|.
name|messageType
argument_list|()
condition|)
block|{
case|case
name|PINGREQ
operator|.
name|TYPE
case|:
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received a ping from client: "
operator|+
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToMQTT
argument_list|(
name|PING_RESP_FRAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sent Ping Response to "
operator|+
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CONNECT
operator|.
name|TYPE
case|:
block|{
name|CONNECT
name|connect
init|=
operator|new
name|CONNECT
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|onMQTTConnect
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"MQTT Client {} connected. (version: {})"
argument_list|,
name|getClientId
argument_list|()
argument_list|,
name|connect
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DISCONNECT
operator|.
name|TYPE
case|:
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MQTT Client {} disconnecting"
argument_list|,
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|onMQTTDisconnect
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|SUBSCRIBE
operator|.
name|TYPE
case|:
block|{
name|onSubscribe
argument_list|(
operator|new
name|SUBSCRIBE
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UNSUBSCRIBE
operator|.
name|TYPE
case|:
block|{
name|onUnSubscribe
argument_list|(
operator|new
name|UNSUBSCRIBE
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PUBLISH
operator|.
name|TYPE
case|:
block|{
name|onMQTTPublish
argument_list|(
operator|new
name|PUBLISH
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PUBACK
operator|.
name|TYPE
case|:
block|{
name|onMQTTPubAck
argument_list|(
operator|new
name|PUBACK
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PUBREC
operator|.
name|TYPE
case|:
block|{
name|onMQTTPubRec
argument_list|(
operator|new
name|PUBREC
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PUBREL
operator|.
name|TYPE
case|:
block|{
name|onMQTTPubRel
argument_list|(
operator|new
name|PUBREL
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PUBCOMP
operator|.
name|TYPE
case|:
block|{
name|onMQTTPubComp
argument_list|(
operator|new
name|PUBCOMP
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|handleException
argument_list|(
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Unknown MQTTFrame type: "
operator|+
name|frame
operator|.
name|messageType
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|onMQTTConnect
parameter_list|(
specifier|final
name|CONNECT
name|connect
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
if|if
condition|(
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Already connected."
argument_list|)
throw|;
block|}
name|this
operator|.
name|connect
operator|=
name|connect
expr_stmt|;
name|String
name|clientId
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|connect
operator|.
name|clientId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clientId
operator|=
name|connect
operator|.
name|clientId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|userName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|connect
operator|.
name|userName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|connect
operator|.
name|userName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|passswd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|connect
operator|.
name|password
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|passswd
operator|=
name|connect
operator|.
name|password
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|configureInactivityMonitor
argument_list|(
name|connect
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
operator|&&
operator|!
name|clientId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Clean Session MUST be set for 0 length Client Id
if|if
condition|(
operator|!
name|connect
operator|.
name|cleanSession
argument_list|()
condition|)
block|{
name|CONNACK
name|ack
init|=
operator|new
name|CONNACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|code
argument_list|(
name|CONNACK
operator|.
name|Code
operator|.
name|CONNECTION_REFUSED_IDENTIFIER_REJECTED
argument_list|)
expr_stmt|;
try|try
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Invalid Client ID"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|""
operator|+
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connectionInfo
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setPassword
argument_list|(
name|passswd
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setTransportContext
argument_list|(
name|mqttTransport
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|connectionInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// If the connection attempt fails we close the socket.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|//let the client know
name|CONNACK
name|ack
init|=
operator|new
name|CONNACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|code
argument_list|(
name|CONNACK
operator|.
name|Code
operator|.
name|CONNECTION_REFUSED_SERVER_UNAVAILABLE
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SessionInfo
name|sessionInfo
init|=
operator|new
name|SessionInfo
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|sessionInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|ProducerInfo
name|producerInfo
init|=
operator|new
name|ProducerInfo
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|producerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// If the connection attempt fails we close the socket.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|CONNACK
name|ack
init|=
operator|new
name|CONNACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|code
argument_list|(
name|CONNACK
operator|.
name|Code
operator|.
name|CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|CONNACK
name|ack
init|=
operator|new
name|CONNACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|code
argument_list|(
name|CONNACK
operator|.
name|Code
operator|.
name|CONNECTION_ACCEPTED
argument_list|)
expr_stmt|;
name|connected
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subs
init|=
name|PersistenceAdapterSupport
operator|.
name|listSubscriptions
argument_list|(
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getClientId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|connect
operator|.
name|cleanSession
argument_list|()
condition|)
block|{
name|packetIdGenerator
operator|.
name|stopClientSession
argument_list|(
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteDurableSubs
argument_list|(
name|subs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|packetIdGenerator
operator|.
name|startClientSession
argument_list|(
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|restoreDurableSubs
argument_list|(
name|subs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteDurableSubs
parameter_list|(
name|List
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subs
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|SubscriptionInfo
name|sub
range|:
name|subs
control|)
block|{
name|RemoveSubscriptionInfo
name|rsi
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|rsi
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setSubscriptionName
argument_list|(
name|sub
operator|.
name|getSubcriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setClientId
argument_list|(
name|sub
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|rsi
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ignore failures..
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not delete the MQTT durable subs."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|restoreDurableSubs
parameter_list|(
name|List
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subs
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|SubscriptionInfo
name|sub
range|:
name|subs
control|)
block|{
name|String
name|name
init|=
name|sub
operator|.
name|getSubcriptionName
argument_list|()
decl_stmt|;
name|String
index|[]
name|split
init|=
name|name
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QoS
name|qoS
init|=
name|QoS
operator|.
name|valueOf
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|onSubscribe
argument_list|(
operator|new
name|Topic
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|,
name|qoS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not restore the MQTT durable subs."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|onMQTTDisconnect
parameter_list|()
throws|throws
name|MQTTProtocolException
block|{
if|if
condition|(
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
name|connected
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|connectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|stopTransport
argument_list|()
expr_stmt|;
block|}
name|void
name|onSubscribe
parameter_list|(
name|SUBSCRIBE
name|command
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
name|command
operator|.
name|topics
argument_list|()
decl_stmt|;
if|if
condition|(
name|topics
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|qos
init|=
operator|new
name|byte
index|[
name|topics
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topics
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qos
index|[
name|i
index|]
operator|=
name|onSubscribe
argument_list|(
name|topics
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|SUBACK
name|ack
init|=
operator|new
name|SUBACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|messageId
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|grantedQos
argument_list|(
name|qos
argument_list|)
expr_stmt|;
try|try
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't send SUBACK for "
operator|+
name|command
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No topics defined for Subscription "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
name|onSubscribe
parameter_list|(
specifier|final
name|Topic
name|topic
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
specifier|final
name|UTF8Buffer
name|topicName
init|=
name|topic
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|final
name|QoS
name|topicQoS
init|=
name|topic
operator|.
name|qos
argument_list|()
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|convertMQTTToActiveMQ
argument_list|(
name|topicName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mqttSubscriptionByTopic
operator|.
name|containsKey
argument_list|(
name|topicName
argument_list|)
condition|)
block|{
specifier|final
name|MQTTSubscription
name|mqttSubscription
init|=
name|mqttSubscriptionByTopic
operator|.
name|get
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
if|if
condition|(
name|topicQoS
operator|!=
name|mqttSubscription
operator|.
name|qos
argument_list|()
condition|)
block|{
comment|// remove old subscription as the QoS has changed
name|onUnSubscribe
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// duplicate SUBSCRIBE packet, find all matching topics and resend retained messages
name|resendRetainedMessages
argument_list|(
name|topicName
argument_list|,
name|destination
argument_list|,
name|mqttSubscription
argument_list|)
expr_stmt|;
return|return
operator|(
name|byte
operator|)
name|topicQoS
operator|.
name|ordinal
argument_list|()
return|;
block|}
name|onUnSubscribe
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
block|}
name|ConsumerId
name|id
init|=
operator|new
name|ConsumerId
argument_list|(
name|sessionId
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
operator|new
name|ConsumerInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|getActiveMQSubscriptionPrefetch
argument_list|()
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setDispatchAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// create durable subscriptions only when cleansession is false
if|if
condition|(
operator|!
name|connect
operator|.
name|cleanSession
argument_list|()
operator|&&
name|connect
operator|.
name|clientId
argument_list|()
operator|!=
literal|null
operator|&&
name|topicQoS
operator|.
name|ordinal
argument_list|()
operator|>=
name|QoS
operator|.
name|AT_LEAST_ONCE
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
name|topicQoS
operator|+
literal|":"
operator|+
name|topicName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MQTTSubscription
name|mqttSubscription
init|=
operator|new
name|MQTTSubscription
argument_list|(
name|this
argument_list|,
name|topicQoS
argument_list|,
name|consumerInfo
argument_list|)
decl_stmt|;
comment|// optimistic add to local maps first to be able to handle commands in onActiveMQCommand
name|subscriptionsByConsumerId
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|mqttSubscription
argument_list|)
expr_stmt|;
name|mqttSubscriptionByTopic
operator|.
name|put
argument_list|(
name|topicName
argument_list|,
name|mqttSubscription
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|qos
init|=
block|{
operator|-
literal|1
block|}
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|consumerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// validate subscription request
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
specifier|final
name|Throwable
name|throwable
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error subscribing to "
operator|+
name|topicName
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
name|qos
index|[
literal|0
index|]
operator|=
name|SUBSCRIBE_ERROR
expr_stmt|;
block|}
else|else
block|{
name|qos
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|topicQoS
operator|.
name|ordinal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|qos
index|[
literal|0
index|]
operator|==
name|SUBSCRIBE_ERROR
condition|)
block|{
comment|// remove from local maps if subscribe failed
name|subscriptionsByConsumerId
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|mqttSubscriptionByTopic
operator|.
name|remove
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
block|}
return|return
name|qos
index|[
literal|0
index|]
return|;
block|}
specifier|private
name|void
name|resendRetainedMessages
parameter_list|(
name|UTF8Buffer
name|topicName
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|MQTTSubscription
name|mqttSubscription
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
comment|// get TopicRegion
name|RegionBroker
name|regionBroker
decl_stmt|;
try|try
block|{
name|regionBroker
operator|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Error subscribing to "
operator|+
name|topicName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|TopicRegion
name|topicRegion
init|=
operator|(
name|TopicRegion
operator|)
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
decl_stmt|;
specifier|final
name|ConsumerInfo
name|consumerInfo
init|=
name|mqttSubscription
operator|.
name|getConsumerInfo
argument_list|()
decl_stmt|;
specifier|final
name|ConsumerId
name|consumerId
init|=
name|consumerInfo
operator|.
name|getConsumerId
argument_list|()
decl_stmt|;
comment|// use actual client id used to create connection to lookup connection context
specifier|final
name|String
name|connectionInfoClientId
init|=
name|connectionInfo
operator|.
name|getClientId
argument_list|()
decl_stmt|;
specifier|final
name|ConnectionContext
name|connectionContext
init|=
name|regionBroker
operator|.
name|getConnectionContext
argument_list|(
name|connectionInfoClientId
argument_list|)
decl_stmt|;
comment|// get all matching Topics
specifier|final
name|Set
argument_list|<
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
argument_list|>
name|matchingDestinations
init|=
name|topicRegion
operator|.
name|getDestinations
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
name|dest
range|:
name|matchingDestinations
control|)
block|{
comment|// recover retroactive messages for matching subscription
for|for
control|(
name|Subscription
name|subscription
range|:
name|dest
operator|.
name|getConsumers
argument_list|()
control|)
block|{
if|if
condition|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
operator|)
name|dest
operator|)
operator|.
name|recoverRetroactiveMessages
argument_list|(
name|connectionContext
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Error recovering retained messages for "
operator|+
name|dest
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|e
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
block|}
block|}
name|void
name|onUnSubscribe
parameter_list|(
name|UNSUBSCRIBE
name|command
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|UTF8Buffer
index|[]
name|topics
init|=
name|command
operator|.
name|topics
argument_list|()
decl_stmt|;
if|if
condition|(
name|topics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UTF8Buffer
name|topic
range|:
name|topics
control|)
block|{
name|onUnSubscribe
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
block|}
name|UNSUBACK
name|ack
init|=
operator|new
name|UNSUBACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|messageId
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|onUnSubscribe
parameter_list|(
name|UTF8Buffer
name|topicName
parameter_list|)
block|{
name|MQTTSubscription
name|subs
init|=
name|mqttSubscriptionByTopic
operator|.
name|remove
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
block|{
name|ConsumerInfo
name|info
init|=
name|subs
operator|.
name|getConsumerInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|subscriptionsByConsumerId
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RemoveInfo
name|removeInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|removeInfo
operator|=
name|info
operator|.
name|createRemoveCommand
argument_list|()
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
name|removeInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// check if the durable sub also needs to be removed
if|if
condition|(
name|subs
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RemoveSubscriptionInfo
name|rsi
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|rsi
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setSubscriptionName
argument_list|(
name|subs
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setClientId
argument_list|(
name|connectionInfo
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|rsi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Dispatch an ActiveMQ command      */
specifier|public
name|void
name|onActiveMQCommand
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|ResponseHandler
name|rh
init|=
name|resposeHandlers
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rh
operator|!=
literal|null
condition|)
block|{
name|rh
operator|.
name|onResponse
argument_list|(
name|this
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pass down any unexpected errors. Should this close the connection?
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|MQTTSubscription
name|sub
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|MessageAck
name|ack
init|=
name|sub
operator|.
name|createMessageAck
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|PUBLISH
name|publish
init|=
name|sub
operator|.
name|createPublish
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|publish
operator|.
name|qos
argument_list|()
condition|)
block|{
case|case
name|AT_LEAST_ONCE
case|:
case|case
name|EXACTLY_ONCE
case|:
name|publish
operator|.
name|dup
argument_list|(
name|publish
operator|.
name|dup
argument_list|()
condition|?
literal|true
else|:
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|isRedelivered
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|AT_MOST_ONCE
case|:
block|}
if|if
condition|(
name|ack
operator|!=
literal|null
operator|&&
name|sub
operator|.
name|expectAck
argument_list|(
name|publish
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|consumerAcks
init|)
block|{
name|consumerAcks
operator|.
name|put
argument_list|(
name|publish
operator|.
name|messageId
argument_list|()
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|publish
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ack
operator|!=
literal|null
operator|&&
operator|!
name|sub
operator|.
name|expectAck
argument_list|(
name|publish
argument_list|)
condition|)
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ConnectionError
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
comment|// Pass down any unexpected async errors. Should this close the connection?
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ConnectionError
operator|)
name|command
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
comment|//ignore
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Do not know how to process ActiveMQ Command "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|onMQTTPublish
parameter_list|(
name|PUBLISH
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
name|convertMessage
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|message
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
name|message
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|message
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|onMQTTPubAck
parameter_list|(
name|PUBACK
name|command
parameter_list|)
block|{
name|short
name|messageId
init|=
name|command
operator|.
name|messageId
argument_list|()
decl_stmt|;
name|packetIdGenerator
operator|.
name|ackPacketId
argument_list|(
name|getClientId
argument_list|()
argument_list|,
name|messageId
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
decl_stmt|;
synchronized|synchronized
init|(
name|consumerAcks
init|)
block|{
name|ack
operator|=
name|consumerAcks
operator|.
name|remove
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|onMQTTPubRec
parameter_list|(
name|PUBREC
name|commnand
parameter_list|)
block|{
comment|//from a subscriber - send a PUBREL in response
name|PUBREL
name|pubrel
init|=
operator|new
name|PUBREL
argument_list|()
decl_stmt|;
name|pubrel
operator|.
name|messageId
argument_list|(
name|commnand
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToMQTT
argument_list|(
name|pubrel
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|onMQTTPubRel
parameter_list|(
name|PUBREL
name|command
parameter_list|)
block|{
name|PUBREC
name|ack
decl_stmt|;
synchronized|synchronized
init|(
name|publisherRecs
init|)
block|{
name|ack
operator|=
name|publisherRecs
operator|.
name|remove
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ack
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown PUBREL: "
operator|+
name|command
operator|.
name|messageId
argument_list|()
operator|+
literal|" received"
argument_list|)
expr_stmt|;
block|}
name|PUBCOMP
name|pubcomp
init|=
operator|new
name|PUBCOMP
argument_list|()
decl_stmt|;
name|pubcomp
operator|.
name|messageId
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToMQTT
argument_list|(
name|pubcomp
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|onMQTTPubComp
parameter_list|(
name|PUBCOMP
name|command
parameter_list|)
block|{
name|short
name|messageId
init|=
name|command
operator|.
name|messageId
argument_list|()
decl_stmt|;
name|packetIdGenerator
operator|.
name|ackPacketId
argument_list|(
name|getClientId
argument_list|()
argument_list|,
name|messageId
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
decl_stmt|;
synchronized|synchronized
init|(
name|consumerAcks
init|)
block|{
name|ack
operator|=
name|consumerAcks
operator|.
name|remove
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
name|ActiveMQMessage
name|convertMessage
parameter_list|(
name|PUBLISH
name|command
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQBytesMessage
name|msg
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
name|MessageId
name|id
init|=
operator|new
name|MessageId
argument_list|(
name|producerId
argument_list|,
name|publisherIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPriority
argument_list|(
operator|(
name|byte
operator|)
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setPersistent
argument_list|(
name|command
operator|.
name|qos
argument_list|()
operator|!=
name|QoS
operator|.
name|AT_MOST_ONCE
operator|&&
operator|!
name|command
operator|.
name|retain
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setIntProperty
argument_list|(
name|QOS_PROPERTY_NAME
argument_list|,
name|command
operator|.
name|qos
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|retain
argument_list|()
condition|)
block|{
name|msg
operator|.
name|setBooleanProperty
argument_list|(
name|RetainedMessageSubscriptionRecoveryPolicy
operator|.
name|RETAIN_PROPERTY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ActiveMQTopic
name|topic
decl_stmt|;
synchronized|synchronized
init|(
name|activeMQTopicMap
init|)
block|{
name|topic
operator|=
name|activeMQTopicMap
operator|.
name|get
argument_list|(
name|command
operator|.
name|topicName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
operator|==
literal|null
condition|)
block|{
name|String
name|topicName
init|=
name|convertMQTTToActiveMQ
argument_list|(
name|command
operator|.
name|topicName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|topic
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
name|activeMQTopicMap
operator|.
name|put
argument_list|(
name|command
operator|.
name|topicName
argument_list|()
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
operator|.
name|setJMSDestination
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|msg
operator|.
name|writeBytes
argument_list|(
name|command
operator|.
name|payload
argument_list|()
operator|.
name|data
argument_list|,
name|command
operator|.
name|payload
argument_list|()
operator|.
name|offset
argument_list|,
name|command
operator|.
name|payload
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
name|PUBLISH
name|convertMessage
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
throws|,
name|DataFormatException
block|{
name|PUBLISH
name|result
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
comment|// packet id is set in MQTTSubscription
name|QoS
name|qoS
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|propertyExists
argument_list|(
name|QOS_PROPERTY_NAME
argument_list|)
condition|)
block|{
name|int
name|ordinal
init|=
name|message
operator|.
name|getIntProperty
argument_list|(
name|QOS_PROPERTY_NAME
argument_list|)
decl_stmt|;
name|qoS
operator|=
name|QoS
operator|.
name|values
argument_list|()
index|[
name|ordinal
index|]
expr_stmt|;
block|}
else|else
block|{
name|qoS
operator|=
name|message
operator|.
name|isPersistent
argument_list|()
condition|?
name|QoS
operator|.
name|AT_MOST_ONCE
else|:
name|QoS
operator|.
name|AT_LEAST_ONCE
expr_stmt|;
block|}
name|result
operator|.
name|qos
argument_list|(
name|qoS
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getBooleanProperty
argument_list|(
name|RetainedMessageSubscriptionRecoveryPolicy
operator|.
name|RETAINED_PROPERTY
argument_list|)
condition|)
block|{
name|result
operator|.
name|retain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|UTF8Buffer
name|topicName
decl_stmt|;
synchronized|synchronized
init|(
name|mqttTopicMap
init|)
block|{
name|topicName
operator|=
name|mqttTopicMap
operator|.
name|get
argument_list|(
name|message
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topicName
operator|==
literal|null
condition|)
block|{
name|topicName
operator|=
operator|new
name|UTF8Buffer
argument_list|(
name|convertActiveMQToMQTT
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mqttTopicMap
operator|.
name|put
argument_list|(
name|message
operator|.
name|getJMSDestination
argument_list|()
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|topicName
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ActiveMQTextMessage
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
name|ActiveMQTextMessage
name|msg
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
operator|.
name|copy
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|messageText
init|=
name|msg
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageText
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|messageText
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|message
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ActiveMQBytesMessage
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
name|ActiveMQBytesMessage
name|msg
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|message
operator|.
name|copy
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|msg
operator|.
name|getBodyLength
argument_list|()
index|]
decl_stmt|;
name|msg
operator|.
name|readBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|result
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ActiveMQMapMessage
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|(
name|ActiveMQMapMessage
operator|)
name|message
operator|.
name|copy
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|msg
operator|.
name|getContentMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|map
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ByteSequence
name|byteSequence
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteSequence
operator|!=
literal|null
operator|&&
name|byteSequence
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|()
decl_stmt|;
name|inflater
operator|.
name|setInput
argument_list|(
name|byteSequence
operator|.
name|data
argument_list|,
name|byteSequence
operator|.
name|offset
argument_list|,
name|byteSequence
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|inflater
operator|.
name|inflate
argument_list|(
name|data
argument_list|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|bytesOut
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|byteSequence
operator|=
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
expr_stmt|;
name|bytesOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|byteSequence
operator|.
name|data
argument_list|,
name|byteSequence
operator|.
name|offset
argument_list|,
name|byteSequence
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|convertActiveMQToMQTT
parameter_list|(
name|String
name|physicalName
parameter_list|)
block|{
return|return
name|physicalName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
specifier|public
name|MQTTTransport
name|getMQTTTransport
parameter_list|()
block|{
return|return
name|mqttTransport
return|;
block|}
name|boolean
name|willSent
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|onTransportError
parameter_list|()
block|{
if|if
condition|(
name|connect
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|connect
operator|.
name|willTopic
argument_list|()
operator|!=
literal|null
operator|&&
name|connect
operator|.
name|willMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|willSent
condition|)
block|{
name|willSent
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|PUBLISH
name|publish
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
name|publish
operator|.
name|topicName
argument_list|(
name|connect
operator|.
name|willTopic
argument_list|()
argument_list|)
expr_stmt|;
name|publish
operator|.
name|qos
argument_list|(
name|connect
operator|.
name|willQos
argument_list|()
argument_list|)
expr_stmt|;
name|publish
operator|.
name|messageId
argument_list|(
name|packetIdGenerator
operator|.
name|getNextSequenceId
argument_list|(
name|getClientId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|publish
operator|.
name|payload
argument_list|(
name|connect
operator|.
name|willMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
name|convertMessage
argument_list|(
name|publish
argument_list|)
decl_stmt|;
name|message
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
name|message
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to publish Will Message "
operator|+
name|connect
operator|.
name|willMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove connection info
name|sendToActiveMQ
argument_list|(
name|connectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|configureInactivityMonitor
parameter_list|(
name|short
name|keepAliveSeconds
parameter_list|)
block|{
name|MQTTInactivityMonitor
name|monitor
init|=
name|getMQTTTransport
argument_list|()
operator|.
name|getInactivityMonitor
argument_list|()
decl_stmt|;
comment|// If the user specifically shuts off the InactivityMonitor with transport.useInactivityMonitor=false,
comment|// then ignore configuring it because it won't exist
if|if
condition|(
name|monitor
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|long
name|keepAliveMS
init|=
name|keepAliveSeconds
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MQTT Client "
operator|+
name|getClientId
argument_list|()
operator|+
literal|" requests heart beat of  "
operator|+
name|keepAliveMS
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// if we have a default keep-alive value, and the client is trying to turn off keep-alive,
comment|// we'll observe the server-side configured default value (note, no grace period)
if|if
condition|(
name|keepAliveMS
operator|==
literal|0
operator|&&
name|defaultKeepAlive
operator|>
literal|0
condition|)
block|{
name|keepAliveMS
operator|=
name|defaultKeepAlive
expr_stmt|;
block|}
name|long
name|readGracePeriod
init|=
call|(
name|long
call|)
argument_list|(
name|keepAliveMS
operator|*
name|MQTT_KEEP_ALIVE_GRACE_PERIOD
argument_list|)
decl_stmt|;
name|monitor
operator|.
name|setProtocolConverter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setReadKeepAliveTime
argument_list|(
name|keepAliveMS
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setReadGraceTime
argument_list|(
name|readGracePeriod
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|startMonitorThread
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MQTT Client "
operator|+
name|getClientId
argument_list|()
operator|+
literal|" established heart beat of  "
operator|+
name|keepAliveMS
operator|+
literal|" ms ("
operator|+
name|keepAliveMS
operator|+
literal|"ms + "
operator|+
name|readGracePeriod
operator|+
literal|"ms grace period)"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to start MQTT InactivityMonitor "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|,
name|MQTTFrame
name|command
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred processing: \n"
operator|+
name|command
operator|+
literal|": "
operator|+
name|exception
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception detail"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connected
operator|.
name|get
argument_list|()
operator|&&
name|connectionInfo
operator|!=
literal|null
condition|)
block|{
name|connected
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|connectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|stopTransport
argument_list|()
expr_stmt|;
block|}
name|void
name|checkConnected
parameter_list|()
throws|throws
name|MQTTProtocolException
block|{
if|if
condition|(
operator|!
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Not connected."
argument_list|)
throw|;
block|}
block|}
name|String
name|getClientId
parameter_list|()
block|{
if|if
condition|(
name|clientId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|connect
operator|!=
literal|null
operator|&&
name|connect
operator|.
name|clientId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clientId
operator|=
name|connect
operator|.
name|clientId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clientId
operator|=
literal|""
expr_stmt|;
block|}
block|}
return|return
name|clientId
return|;
block|}
specifier|private
name|void
name|stopTransport
parameter_list|()
block|{
try|try
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to stop MQTT transport "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|ResponseHandler
name|createResponseHandler
parameter_list|(
specifier|final
name|PUBLISH
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|command
operator|.
name|qos
argument_list|()
condition|)
block|{
case|case
name|AT_LEAST_ONCE
case|:
return|return
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to send MQTT Publish: "
argument_list|,
name|command
argument_list|,
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PUBACK
name|ack
init|=
operator|new
name|PUBACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|messageId
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|converter
operator|.
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|EXACTLY_ONCE
case|:
return|return
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to send MQTT Publish: "
argument_list|,
name|command
argument_list|,
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PUBREC
name|ack
init|=
operator|new
name|PUBREC
argument_list|()
decl_stmt|;
name|ack
operator|.
name|messageId
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|publisherRecs
init|)
block|{
name|publisherRecs
operator|.
name|put
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
name|converter
operator|.
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|AT_MOST_ONCE
case|:
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|convertMQTTToActiveMQ
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|char
index|[]
name|chars
init|=
name|name
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|chars
index|[
name|i
index|]
condition|)
block|{
case|case
literal|'#'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'>'
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'#'
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'*'
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'+'
expr_stmt|;
break|break;
case|case
literal|'/'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'.'
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'/'
expr_stmt|;
break|break;
block|}
block|}
name|String
name|rc
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|long
name|getDefaultKeepAlive
parameter_list|()
block|{
return|return
name|defaultKeepAlive
return|;
block|}
comment|/**      * Set the default keep alive time (in milliseconds) that would be used if configured on server side      * and the client sends a keep-alive value of 0 (zero) on a CONNECT frame      * @param keepAlive the keepAlive in milliseconds      */
specifier|public
name|void
name|setDefaultKeepAlive
parameter_list|(
name|long
name|keepAlive
parameter_list|)
block|{
name|this
operator|.
name|defaultKeepAlive
operator|=
name|keepAlive
expr_stmt|;
block|}
specifier|public
name|int
name|getActiveMQSubscriptionPrefetch
parameter_list|()
block|{
return|return
name|activeMQSubscriptionPrefetch
return|;
block|}
comment|/**      * set the default prefetch size when mapping the MQTT subscription to an ActiveMQ one      * The default = 1      * @param activeMQSubscriptionPrefetch set the prefetch for the corresponding ActiveMQ subscription      */
specifier|public
name|void
name|setActiveMQSubscriptionPrefetch
parameter_list|(
name|int
name|activeMQSubscriptionPrefetch
parameter_list|)
block|{
name|this
operator|.
name|activeMQSubscriptionPrefetch
operator|=
name|activeMQSubscriptionPrefetch
expr_stmt|;
block|}
specifier|public
name|MQTTPacketIdGenerator
name|getPacketIdGenerator
parameter_list|()
block|{
return|return
name|packetIdGenerator
return|;
block|}
block|}
end_class

end_unit

