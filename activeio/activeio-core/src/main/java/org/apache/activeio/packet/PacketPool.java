begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Provides a simple pool of Packet objects.  When the packets that this pool produces are disposed,  * they are returned to the pool.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|PacketPool
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_POOL_SIZE
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.activeio.journal.active.DefaultPoolSize"
argument_list|,
literal|""
operator|+
operator|(
literal|5
operator|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PACKET_SIZE
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.activeio.journal.active.DefaultPacketSize"
argument_list|,
literal|""
operator|+
operator|(
literal|1024
operator|*
literal|1024
operator|*
literal|4
operator|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
name|pool
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxPackets
decl_stmt|;
specifier|private
name|int
name|currentPoolSize
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|public
class|class
name|PooledPacket
extends|extends
name|FilterPacket
block|{
specifier|private
specifier|final
name|AtomicInteger
name|referenceCounter
decl_stmt|;
specifier|public
name|PooledPacket
parameter_list|(
name|Packet
name|next
parameter_list|)
block|{
name|this
argument_list|(
name|next
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PooledPacket
parameter_list|(
name|Packet
name|next
parameter_list|,
name|AtomicInteger
name|referenceCounter
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|referenceCounter
operator|=
name|referenceCounter
expr_stmt|;
name|this
operator|.
name|referenceCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Packet
name|filter
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
return|return
operator|new
name|PooledPacket
argument_list|(
name|next
argument_list|,
name|referenceCounter
argument_list|)
return|;
block|}
name|int
name|getReferenceCounter
parameter_list|()
block|{
return|return
name|referenceCounter
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|referenceCounter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|returnPacket
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * @param maxPackets the number of buffers that will be in the pool. 	 */
specifier|public
name|PacketPool
parameter_list|(
name|int
name|maxPackets
parameter_list|)
block|{
name|this
operator|.
name|maxPackets
operator|=
name|maxPackets
expr_stmt|;
block|}
comment|/** 	 * Blocks until a ByteBuffer can be retreived from the pool. 	 *  	 * @return 	 * @throws InterruptedException 	 */
specifier|public
name|Packet
name|getPacket
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Packet
name|answer
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|disposed
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|pool
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|answer
operator|=
operator|(
name|Packet
operator|)
name|pool
operator|.
name|remove
argument_list|(
name|pool
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentPoolSize
operator|<
name|maxPackets
condition|)
block|{
name|answer
operator|=
name|allocateNewPacket
argument_list|()
expr_stmt|;
name|currentPoolSize
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|PooledPacket
argument_list|(
name|answer
argument_list|)
return|;
block|}
comment|/** 	 * Returns a ByteBuffer to the pool. 	 *  	 * @param packet 	 */
specifier|private
name|void
name|returnPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
name|packet
operator|.
name|clear
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|pool
operator|.
name|add
argument_list|(
name|packet
argument_list|)
expr_stmt|;
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|disposed
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|currentPoolSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|pool
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentPoolSize
operator|-=
name|pool
operator|.
name|size
argument_list|()
expr_stmt|;
name|pool
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|waitForPacketsToReturn
parameter_list|()
block|{
while|while
condition|(
name|currentPoolSize
operator|!=
name|pool
operator|.
name|size
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
comment|/**      * @return      */
specifier|abstract
specifier|protected
name|Packet
name|allocateNewPacket
parameter_list|()
function_decl|;
block|}
end_class

end_unit

