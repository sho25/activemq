begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|DynamicNetworkTestSupport
block|{
specifier|protected
name|Connection
name|localConnection
decl_stmt|;
specifier|protected
name|Connection
name|remoteConnection
decl_stmt|;
specifier|protected
name|BrokerService
name|localBroker
decl_stmt|;
specifier|protected
name|BrokerService
name|remoteBroker
decl_stmt|;
specifier|protected
name|Session
name|localSession
decl_stmt|;
specifier|protected
name|Session
name|remoteSession
decl_stmt|;
specifier|protected
name|ActiveMQTopic
name|included
decl_stmt|;
specifier|protected
name|ActiveMQTopic
name|excluded
decl_stmt|;
specifier|protected
name|String
name|testTopicName
init|=
literal|"include.test.bar"
decl_stmt|;
specifier|protected
name|String
name|excludeTopicName
init|=
literal|"exclude.test.bar"
decl_stmt|;
specifier|protected
name|String
name|clientId
init|=
literal|"clientId"
decl_stmt|;
specifier|protected
name|String
name|subName
init|=
literal|"subId"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|doTearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stopLocalBroker
argument_list|()
expr_stmt|;
name|stopRemoteBroker
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|stopLocalBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|localConnection
operator|!=
literal|null
condition|)
block|{
name|localConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|localBroker
operator|!=
literal|null
condition|)
block|{
name|localBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|stopRemoteBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|remoteConnection
operator|!=
literal|null
condition|)
block|{
name|remoteConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remoteBroker
operator|!=
literal|null
condition|)
block|{
name|remoteBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertBridgeStarted
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|localBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
literal|10000
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RemoveSubscriptionInfo
name|getRemoveSubscriptionInfo
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|Exception
block|{
name|RemoveSubscriptionInfo
name|info
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSubcriptionName
argument_list|(
name|subName
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|brokerService
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|void
name|waitForConsumerCount
parameter_list|(
specifier|final
name|DestinationStatistics
name|destinationStatistics
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
comment|//should only be 1 for the composite destination creation
return|return
name|count
operator|==
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForDispatchFromLocalBroker
parameter_list|(
specifier|final
name|DestinationStatistics
name|destinationStatistics
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|count
operator|==
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|&&
name|count
operator|==
name|destinationStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|&&
name|count
operator|==
name|destinationStatistics
operator|.
name|getForwards
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertLocalBrokerStatistics
parameter_list|(
specifier|final
name|DestinationStatistics
name|localStatistics
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"local broker dest stat dispatched"
argument_list|,
name|count
argument_list|,
name|localStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"local broker dest stat dequeues"
argument_list|,
name|count
argument_list|,
name|localStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"local broker dest stat forwards"
argument_list|,
name|count
argument_list|,
name|localStatistics
operator|.
name|getForwards
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
interface|interface
name|ConsumerCreator
block|{
name|MessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
block|}
specifier|protected
name|void
name|assertNCDurableSubsCount
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|count
operator|==
name|getNCDurableSubs
argument_list|(
name|brokerService
argument_list|,
name|dest
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10000
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertConsumersCount
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|count
operator|==
name|getConsumers
argument_list|(
name|brokerService
argument_list|,
name|dest
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10000
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|Subscription
argument_list|>
name|getConsumers
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|Topic
name|destination
init|=
operator|(
name|Topic
operator|)
name|brokerService
operator|.
name|getDestination
argument_list|(
name|dest
argument_list|)
decl_stmt|;
return|return
name|destination
operator|.
name|getConsumers
argument_list|()
return|;
block|}
specifier|protected
name|List
argument_list|<
name|DurableTopicSubscription
argument_list|>
name|getSubscriptions
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DurableTopicSubscription
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Topic
name|destination
init|=
operator|(
name|Topic
operator|)
name|brokerService
operator|.
name|getDestination
argument_list|(
name|dest
argument_list|)
decl_stmt|;
for|for
control|(
name|SubscriptionKey
name|key
range|:
name|destination
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|getSubscriptionName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|DemandForwardingBridge
operator|.
name|DURABLE_SUB_PREFIX
argument_list|)
condition|)
block|{
name|DurableTopicSubscription
name|sub
init|=
name|destination
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subs
return|;
block|}
specifier|protected
name|List
argument_list|<
name|DurableTopicSubscription
argument_list|>
name|getNCDurableSubs
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DurableTopicSubscription
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Destination
name|d
init|=
name|brokerService
operator|.
name|getDestination
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Topic
name|destination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|d
operator|instanceof
name|DestinationFilter
condition|)
block|{
name|destination
operator|=
operator|(
operator|(
name|DestinationFilter
operator|)
name|d
operator|)
operator|.
name|getAdaptor
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
operator|(
name|Topic
operator|)
name|d
expr_stmt|;
block|}
for|for
control|(
name|SubscriptionKey
name|key
range|:
name|destination
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|getSubscriptionName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|DemandForwardingBridge
operator|.
name|DURABLE_SUB_PREFIX
argument_list|)
condition|)
block|{
name|DurableTopicSubscription
name|sub
init|=
name|destination
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subs
return|;
block|}
specifier|protected
name|void
name|removeSubscription
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|topic
parameter_list|,
specifier|final
name|String
name|subName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|RemoveSubscriptionInfo
name|info
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSubscriptionName
argument_list|(
name|subName
argument_list|)
expr_stmt|;
specifier|final
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|brokerService
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertSubscriptionsCount
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|count
operator|==
name|getSubscriptions
argument_list|(
name|brokerService
argument_list|,
name|dest
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10000
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertSubscriptionMapCounts
parameter_list|(
name|NetworkBridge
name|networkBridge
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|networkBridge
argument_list|)
expr_stmt|;
name|DemandForwardingBridgeSupport
name|bridge
init|=
operator|(
name|DemandForwardingBridgeSupport
operator|)
name|networkBridge
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|bridge
operator|.
name|subscriptionMapByLocalId
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|bridge
operator|.
name|subscriptionMapByRemoteId
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DemandForwardingBridge
name|findDuplexBridge
parameter_list|(
specifier|final
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|connector
argument_list|)
expr_stmt|;
for|for
control|(
name|TransportConnection
name|tc
range|:
name|connector
operator|.
name|getConnections
argument_list|()
control|)
block|{
if|if
condition|(
name|tc
operator|.
name|getConnectionId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"networkConnector_"
argument_list|)
condition|)
block|{
specifier|final
name|Field
name|bridgeField
init|=
name|TransportConnection
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"duplexBridge"
argument_list|)
decl_stmt|;
name|bridgeField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|DemandForwardingBridge
operator|)
name|bridgeField
operator|.
name|get
argument_list|(
name|tc
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

