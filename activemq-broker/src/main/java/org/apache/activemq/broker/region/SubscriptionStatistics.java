begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
operator|.
name|CountStatisticImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
operator|.
name|StatsImpl
import|;
end_import

begin_comment
comment|/**  * The J2EE Statistics for a Subsription.  */
end_comment

begin_class
specifier|public
class|class
name|SubscriptionStatistics
extends|extends
name|StatsImpl
block|{
specifier|protected
name|CountStatisticImpl
name|consumedCount
decl_stmt|;
specifier|protected
name|CountStatisticImpl
name|enqueues
decl_stmt|;
specifier|protected
name|CountStatisticImpl
name|dequeues
decl_stmt|;
specifier|protected
name|CountStatisticImpl
name|dispatched
decl_stmt|;
specifier|public
name|SubscriptionStatistics
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SubscriptionStatistics
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|consumedCount
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"consumedCount"
argument_list|,
literal|"The number of messages that have been consumed by the subscription"
argument_list|)
expr_stmt|;
name|enqueues
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"enqueues"
argument_list|,
literal|"The number of messages that have been sent to the subscription"
argument_list|)
expr_stmt|;
name|dispatched
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"dispatched"
argument_list|,
literal|"The number of messages that have been dispatched from the subscription"
argument_list|)
expr_stmt|;
name|dequeues
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"dequeues"
argument_list|,
literal|"The number of messages that have been acknowledged from the subscription"
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"consumedCount"
argument_list|,
name|consumedCount
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"enqueues"
argument_list|,
name|enqueues
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"dispatched"
argument_list|,
name|dispatched
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"dequeues"
argument_list|,
name|dequeues
argument_list|)
expr_stmt|;
name|this
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CountStatisticImpl
name|getConsumedCount
parameter_list|()
block|{
return|return
name|consumedCount
return|;
block|}
specifier|public
name|CountStatisticImpl
name|getEnqueues
parameter_list|()
block|{
return|return
name|enqueues
return|;
block|}
specifier|public
name|CountStatisticImpl
name|getDequeues
parameter_list|()
block|{
return|return
name|dequeues
return|;
block|}
specifier|public
name|CountStatisticImpl
name|getDispatched
parameter_list|()
block|{
return|return
name|dispatched
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isDoReset
argument_list|()
condition|)
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumedCount
operator|.
name|reset
argument_list|()
expr_stmt|;
name|enqueues
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dequeues
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dispatched
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|super
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|consumedCount
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|enqueues
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|dispatched
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|dequeues
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|SubscriptionStatistics
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|consumedCount
operator|.
name|setParent
argument_list|(
name|parent
operator|.
name|consumedCount
argument_list|)
expr_stmt|;
name|enqueues
operator|.
name|setParent
argument_list|(
name|parent
operator|.
name|enqueues
argument_list|)
expr_stmt|;
name|dispatched
operator|.
name|setParent
argument_list|(
name|parent
operator|.
name|dispatched
argument_list|)
expr_stmt|;
name|dequeues
operator|.
name|setParent
argument_list|(
name|parent
operator|.
name|dequeues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumedCount
operator|.
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|enqueues
operator|.
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dispatched
operator|.
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dequeues
operator|.
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

