begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanOperationInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanParameterInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
operator|.
name|AuditLogEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
operator|.
name|AuditLogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
operator|.
name|JMXAuditLogEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * MBean that looks for method/parameter descriptions in the Info annotation.  */
end_comment

begin_class
specifier|public
class|class
name|AnnotatedMBean
extends|extends
name|StandardMBean
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|primitives
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.activemq.audit"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|OFF
init|=
literal|0b00
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|ENTRY
init|=
literal|0b01
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|EXIT
init|=
literal|0b10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|ALL
init|=
literal|0b11
decl_stmt|;
specifier|private
specifier|static
name|byte
name|audit
init|=
name|OFF
decl_stmt|;
specifier|private
specifier|static
name|AuditLogService
name|auditLog
decl_stmt|;
static|static
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|p
init|=
block|{
name|byte
operator|.
name|class
block|,
name|short
operator|.
name|class
block|,
name|int
operator|.
name|class
block|,
name|long
operator|.
name|class
block|,
name|float
operator|.
name|class
block|,
name|double
operator|.
name|class
block|,
name|char
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|, }
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|p
control|)
block|{
name|primitives
operator|.
name|put
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|audit
operator|=
name|byteFromProperty
argument_list|(
literal|"org.apache.activemq.audit"
argument_list|)
expr_stmt|;
if|if
condition|(
name|audit
operator|!=
name|OFF
condition|)
block|{
name|auditLog
operator|=
name|AuditLogService
operator|.
name|getAuditLog
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|ObjectName
name|objectName
decl_stmt|;
specifier|private
specifier|static
name|byte
name|byteFromProperty
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|byte
name|val
init|=
name|OFF
decl_stmt|;
name|String
name|config
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|s
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|config
argument_list|)
operator|||
literal|"entry"
operator|.
name|equals
argument_list|(
name|config
argument_list|)
condition|)
block|{
name|val
operator|=
name|ENTRY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"exit"
operator|.
name|equals
argument_list|(
name|config
argument_list|)
condition|)
block|{
name|val
operator|=
name|EXIT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|config
argument_list|)
condition|)
block|{
name|val
operator|=
name|ALL
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
specifier|static
name|void
name|registerMBean
parameter_list|(
name|ManagementContext
name|context
parameter_list|,
name|Object
name|object
parameter_list|,
name|ObjectName
name|objectName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|mbeanName
init|=
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"MBean"
decl_stmt|;
for|for
control|(
name|Class
name|c
range|:
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
if|if
condition|(
name|mbeanName
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|registerMBean
argument_list|(
operator|new
name|AnnotatedMBean
argument_list|(
name|object
argument_list|,
name|c
argument_list|,
name|objectName
argument_list|)
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|.
name|registerMBean
argument_list|(
name|object
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
comment|/** Instance where the MBean interface is implemented by another object. */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|AnnotatedMBean
parameter_list|(
name|T
name|impl
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|mbeanInterface
parameter_list|,
name|ObjectName
name|objectName
parameter_list|)
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|impl
argument_list|,
name|mbeanInterface
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectName
operator|=
name|objectName
expr_stmt|;
block|}
comment|/** Instance where the MBean interface is implemented by this object. */
specifier|protected
name|AnnotatedMBean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mbeanInterface
parameter_list|,
name|ObjectName
name|objectName
parameter_list|)
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|mbeanInterface
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectName
operator|=
name|objectName
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|(
name|MBeanAttributeInfo
name|info
parameter_list|)
block|{
name|String
name|descr
init|=
name|info
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
name|getMethod
argument_list|(
name|getMBeanInterface
argument_list|()
argument_list|,
literal|"get"
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
name|m
operator|=
name|getMethod
argument_list|(
name|getMBeanInterface
argument_list|()
argument_list|,
literal|"is"
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
name|m
operator|=
name|getMethod
argument_list|(
name|getMBeanInterface
argument_list|()
argument_list|,
literal|"does"
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|MBeanInfo
name|d
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
name|descr
operator|=
name|d
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|descr
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|protected
name|String
name|getDescription
parameter_list|(
name|MBeanOperationInfo
name|op
parameter_list|)
block|{
name|String
name|descr
init|=
name|op
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
name|getMethod
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|MBeanInfo
name|d
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
name|descr
operator|=
name|d
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|descr
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|protected
name|String
name|getParameterName
parameter_list|(
name|MBeanOperationInfo
name|op
parameter_list|,
name|MBeanParameterInfo
name|param
parameter_list|,
name|int
name|paramNo
parameter_list|)
block|{
name|String
name|name
init|=
name|param
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
name|getMethod
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|a
range|:
name|m
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|paramNo
index|]
control|)
block|{
if|if
condition|(
name|MBeanInfo
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|a
argument_list|)
condition|)
name|name
operator|=
name|MBeanInfo
operator|.
name|class
operator|.
name|cast
argument_list|(
name|a
argument_list|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
block|}
comment|/**      * Extracts the Method from the MBeanOperationInfo      *      * @param op      *      * @return a Method      */
specifier|private
name|Method
name|getMethod
parameter_list|(
name|MBeanOperationInfo
name|op
parameter_list|)
block|{
specifier|final
name|MBeanParameterInfo
index|[]
name|params
init|=
name|op
operator|.
name|getSignature
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|paramTypes
init|=
operator|new
name|String
index|[
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|paramTypes
index|[
name|i
index|]
operator|=
name|params
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
expr_stmt|;
return|return
name|getMethod
argument_list|(
name|getMBeanInterface
argument_list|()
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|paramTypes
argument_list|)
return|;
block|}
comment|/**      * Returns the Method with the specified name and parameter types for the      * given class, null if it doesn't exist.      *      * @param mbean      * @param method      * @param params      *      * @return a Method      */
specifier|private
specifier|static
name|Method
name|getMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mbean
parameter_list|,
name|String
name|method
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ClassLoader
name|loader
init|=
name|mbean
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paramClasses
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
name|params
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paramClasses
index|[
name|i
index|]
operator|=
name|primitives
operator|.
name|get
argument_list|(
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramClasses
index|[
name|i
index|]
operator|==
literal|null
condition|)
name|paramClasses
index|[
name|i
index|]
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
return|return
name|mbean
operator|.
name|getMethod
argument_list|(
name|method
argument_list|,
name|paramClasses
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|String
name|s
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|,
name|String
index|[]
name|strings
parameter_list|)
throws|throws
name|MBeanException
throws|,
name|ReflectionException
block|{
name|JMXAuditLogEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|audit
operator|!=
name|OFF
condition|)
block|{
name|Subject
name|subject
init|=
name|Subject
operator|.
name|getSubject
argument_list|(
name|AccessController
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|caller
init|=
literal|"anonymous"
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|caller
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
name|caller
operator|+=
name|principal
operator|.
name|getName
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
block|}
name|entry
operator|=
operator|new
name|JMXAuditLogEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setUser
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setTarget
argument_list|(
name|extractTargetTypeProperty
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setOperation
argument_list|(
name|this
operator|.
name|getMBeanInfo
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|+
literal|"."
operator|+
name|s
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|objects
operator|.
name|length
operator|==
name|strings
operator|.
name|length
condition|)
block|{
name|Method
name|m
init|=
name|getMBeanMethod
argument_list|(
name|this
operator|.
name|getImplementationClass
argument_list|()
argument_list|,
name|s
argument_list|,
name|strings
argument_list|)
decl_stmt|;
name|entry
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"arguments"
argument_list|,
name|AuditLogEntry
operator|.
name|sanitizeArguments
argument_list|(
name|objects
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Supplied Method Signature and Arguments do not match.  Set all supplied Arguments in Log Entry.  To diagnose user error.
name|entry
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"arguments"
argument_list|,
name|objects
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
comment|// Method or Class not found, set all supplied arguments.  Set all supplied Arguments in Log Entry.  To diagnose user error.
name|entry
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"arguments"
argument_list|,
name|objects
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|audit
operator|&
name|ENTRY
operator|)
operator|==
name|ENTRY
condition|)
block|{
name|auditLog
operator|.
name|log
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|result
init|=
name|super
operator|.
name|invoke
argument_list|(
name|s
argument_list|,
name|objects
argument_list|,
name|strings
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|audit
operator|&
name|EXIT
operator|)
operator|==
name|EXIT
condition|)
block|{
name|entry
operator|.
name|complete
argument_list|()
expr_stmt|;
name|auditLog
operator|.
name|log
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// keep brokerName last b/c objectNames include the brokerName
specifier|final
specifier|static
name|String
index|[]
name|targetPropertiesCandidates
init|=
operator|new
name|String
index|[]
block|{
literal|"destinationName"
block|,
literal|"networkConnectorName"
block|,
literal|"connectorName"
block|,
literal|"connectionName"
block|,
literal|"brokerName"
block|}
decl_stmt|;
specifier|private
name|String
name|extractTargetTypeProperty
parameter_list|(
name|ObjectName
name|objectName
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|attr
range|:
name|targetPropertiesCandidates
control|)
block|{
try|try
block|{
name|result
operator|=
name|objectName
operator|.
name|getKeyProperty
argument_list|(
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ok
parameter_list|)
block|{}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Method
name|getMBeanMethod
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|ReflectiveOperationException
block|{
name|Class
index|[]
name|parameterTypes
init|=
operator|new
name|Class
index|[
name|signature
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|signature
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parameterTypes
index|[
name|i
index|]
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|signature
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

