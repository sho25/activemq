begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|BlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|FtpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|FtpServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|ftplet
operator|.
name|AuthorizationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|ftplet
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|ftplet
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|listener
operator|.
name|ListenerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ftpserver
operator|.
name|usermanager
operator|.
name|UsernamePasswordAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|Expectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|Mockery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|api
operator|.
name|Invocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|lib
operator|.
name|action
operator|.
name|CustomAction
import|;
end_import

begin_comment
comment|/**  * To start this test make sure an ftp server is running with user: activemq and  * password: activemq  */
end_comment

begin_class
specifier|public
class|class
name|FTPBlobTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ftpServerListenerName
init|=
literal|"default"
decl_stmt|;
specifier|private
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|private
name|FtpServer
name|server
decl_stmt|;
specifier|final
specifier|static
name|String
name|userNamePass
init|=
literal|"activemq"
decl_stmt|;
name|Mockery
name|context
init|=
literal|null
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|File
name|ftpHomeDirFile
init|=
operator|new
name|File
argument_list|(
literal|"target/FTPBlobTest/ftptest"
argument_list|)
decl_stmt|;
name|ftpHomeDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ftpHomeDirFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FtpServerFactory
name|serverFactory
init|=
operator|new
name|FtpServerFactory
argument_list|()
decl_stmt|;
name|ListenerFactory
name|factory
init|=
operator|new
name|ListenerFactory
argument_list|()
decl_stmt|;
comment|// mock up a user manager to validate user activemq:activemq and provide
comment|// home dir options
name|context
operator|=
operator|new
name|Mockery
argument_list|()
expr_stmt|;
specifier|final
name|UserManager
name|userManager
init|=
name|context
operator|.
name|mock
argument_list|(
name|UserManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user
init|=
name|context
operator|.
name|mock
argument_list|(
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|checking
argument_list|(
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|atLeast
argument_list|(
literal|1
argument_list|)
operator|.
name|of
argument_list|(
name|userManager
argument_list|)
operator|.
name|authenticate
argument_list|(
name|with
argument_list|(
name|any
argument_list|(
name|UsernamePasswordAuthentication
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|atLeast
argument_list|(
literal|1
argument_list|)
operator|.
name|of
argument_list|(
name|userManager
argument_list|)
operator|.
name|getUserByName
argument_list|(
name|userNamePass
argument_list|)
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|atLeast
argument_list|(
literal|1
argument_list|)
operator|.
name|of
argument_list|(
name|user
argument_list|)
operator|.
name|getHomeDirectory
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|ftpHomeDirFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|atLeast
argument_list|(
literal|1
argument_list|)
operator|.
name|of
argument_list|(
name|user
argument_list|)
operator|.
name|getMaxIdleTime
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
name|atLeast
argument_list|(
literal|1
argument_list|)
operator|.
name|of
argument_list|(
name|user
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|userNamePass
argument_list|)
argument_list|)
expr_stmt|;
name|atLeast
argument_list|(
literal|1
argument_list|)
operator|.
name|of
argument_list|(
name|user
argument_list|)
operator|.
name|authorize
argument_list|(
name|with
argument_list|(
name|any
argument_list|(
name|AuthorizationRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|will
argument_list|(
operator|new
name|CustomAction
argument_list|(
literal|"return first passed in param"
argument_list|)
block|{
specifier|public
name|Object
name|invoke
parameter_list|(
name|Invocation
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|invocation
operator|.
name|getParameter
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|setUserManager
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|serverFactory
operator|.
name|addListener
argument_list|(
name|ftpServerListenerName
argument_list|,
name|factory
operator|.
name|createListener
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
name|serverFactory
operator|.
name|createServer
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|ftpPort
init|=
name|serverFactory
operator|.
name|getListener
argument_list|(
name|ftpServerListenerName
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|bindAddress
operator|=
literal|"vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=ftp://"
operator|+
name|userNamePass
operator|+
literal|":"
operator|+
name|userNamePass
operator|+
literal|"@localhost:"
operator|+
name|ftpPort
operator|+
literal|"/ftptest/"
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testBlobFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first create Message
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"amq-data-file-"
argument_list|,
literal|".dat"
argument_list|)
decl_stmt|;
comment|// lets write some data
name|String
name|content
init|=
literal|"hello world "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ActiveMQSession
name|session
init|=
operator|(
name|ActiveMQSession
operator|)
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|BlobMessage
name|message
init|=
name|session
operator|.
name|createBlobMessage
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// check message send
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|msg
operator|instanceof
name|ActiveMQBlobMessage
argument_list|)
expr_stmt|;
name|InputStream
name|input
init|=
operator|(
operator|(
name|ActiveMQBlobMessage
operator|)
name|msg
operator|)
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|input
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|content
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

