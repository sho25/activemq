begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|SubQueueSelectorCacheBrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ4899Test
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4899Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_NAME
init|=
literal|"AMQ4899TestQueue"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONSUMER_QUEUE
init|=
literal|"Consumer.Orders.VirtualOrders."
operator|+
name|QUEUE_NAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRODUCER_DESTINATION_NAME
init|=
literal|"VirtualOrders."
operator|+
name|QUEUE_NAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Integer
name|MESSAGE_LIMIT
init|=
literal|20
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONSUMER_A_SELECTOR
init|=
literal|"Order< "
operator|+
literal|10
decl_stmt|;
specifier|public
specifier|static
name|String
name|CONSUMER_B_SELECTOR
init|=
literal|"Order>= "
operator|+
literal|10
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|consumersStarted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|consumerAtoConsumeCount
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|consumerBtoConsumeCount
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|setupBroker
argument_list|(
literal|"broker://()/localhost?"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testVirtualTopicMultipleSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|consumerQueue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|CONSUMER_QUEUE
argument_list|)
decl_stmt|;
name|MessageListener
name|listenerA
init|=
operator|new
name|AMQ4899Listener
argument_list|(
literal|"A"
argument_list|,
name|consumersStarted
argument_list|,
name|consumerAtoConsumeCount
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumerA
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|consumerQueue
argument_list|,
name|CONSUMER_A_SELECTOR
argument_list|)
decl_stmt|;
name|consumerA
operator|.
name|setMessageListener
argument_list|(
name|listenerA
argument_list|)
expr_stmt|;
name|MessageListener
name|listenerB
init|=
operator|new
name|AMQ4899Listener
argument_list|(
literal|"B"
argument_list|,
name|consumersStarted
argument_list|,
name|consumerBtoConsumeCount
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumerB
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|consumerQueue
argument_list|,
name|CONSUMER_B_SELECTOR
argument_list|)
decl_stmt|;
name|consumerB
operator|.
name|setMessageListener
argument_list|(
name|listenerB
argument_list|)
expr_stmt|;
name|consumersStarted
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not all consumers started in time"
argument_list|,
literal|0
argument_list|,
name|consumersStarted
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Destination
name|producerDestination
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|PRODUCER_DESTINATION_NAME
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|producerDestination
argument_list|)
decl_stmt|;
name|int
name|messageIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_LIMIT
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping consumerA"
argument_list|)
expr_stmt|;
name|consumerA
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|14
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping consumer B"
argument_list|)
expr_stmt|;
name|consumerB
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|messageText
init|=
literal|"hello "
operator|+
name|messageIndex
operator|++
operator|+
literal|" sent at "
operator|+
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|messageText
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"Order"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending message [{}]"
argument_list|,
name|messageText
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// restart consumerA
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restarting consumerA"
argument_list|)
expr_stmt|;
name|consumerA
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|consumerQueue
argument_list|,
name|CONSUMER_A_SELECTOR
argument_list|)
expr_stmt|;
name|consumerA
operator|.
name|setMessageListener
argument_list|(
name|listenerA
argument_list|)
expr_stmt|;
comment|// restart consumerB
name|LOG
operator|.
name|debug
argument_list|(
literal|"restarting consumerB"
argument_list|)
expr_stmt|;
name|consumerB
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|consumerQueue
argument_list|,
name|CONSUMER_B_SELECTOR
argument_list|)
expr_stmt|;
name|consumerB
operator|.
name|setMessageListener
argument_list|(
name|listenerB
argument_list|)
expr_stmt|;
name|consumerAtoConsumeCount
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|consumerBtoConsumeCount
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unconsumed messages for consumerA {} consumerB {}"
argument_list|,
name|consumerAtoConsumeCount
operator|.
name|getCount
argument_list|()
argument_list|,
name|consumerBtoConsumeCount
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Consumer A did not consume all messages"
argument_list|,
literal|0
argument_list|,
name|consumerAtoConsumeCount
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Consumer B did not consume all messages"
argument_list|,
literal|0
argument_list|,
name|consumerBtoConsumeCount
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Setup broker with VirtualTopic configured      */
specifier|private
name|void
name|setupBroker
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|interceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|VirtualTopic
name|virtualTopic
init|=
operator|new
name|VirtualTopic
argument_list|()
decl_stmt|;
name|virtualTopic
operator|.
name|setName
argument_list|(
literal|"VirtualOrders.>"
argument_list|)
expr_stmt|;
name|virtualTopic
operator|.
name|setSelectorAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|VirtualDestination
index|[]
name|virtualDestinations
init|=
block|{
name|virtualTopic
block|}
decl_stmt|;
name|interceptor
operator|.
name|setVirtualDestinations
argument_list|(
name|virtualDestinations
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{
name|interceptor
block|}
argument_list|)
expr_stmt|;
name|SubQueueSelectorCacheBrokerPlugin
name|subQueueSelectorCacheBrokerPlugin
init|=
operator|new
name|SubQueueSelectorCacheBrokerPlugin
argument_list|()
decl_stmt|;
name|BrokerPlugin
index|[]
name|updatedPlugins
init|=
block|{
name|subQueueSelectorCacheBrokerPlugin
block|}
decl_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
name|updatedPlugins
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed creating broker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
class|class
name|AMQ4899Listener
implements|implements
name|MessageListener
block|{
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4899Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|CountDownLatch
name|toConsume
decl_stmt|;
name|String
name|id
decl_stmt|;
specifier|public
name|AMQ4899Listener
parameter_list|(
name|String
name|id
parameter_list|,
name|CountDownLatch
name|started
parameter_list|,
name|CountDownLatch
name|toConsume
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|toConsume
operator|=
name|toConsume
expr_stmt|;
name|started
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|toConsume
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Listener {} received [{}]"
argument_list|,
name|id
argument_list|,
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener {} Expected a TextMessage, got {}"
argument_list|,
name|id
argument_list|,
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected JMSException in Listener "
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

