begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_comment
comment|/**  * A simple tool for consuming messages  *   *   */
end_comment

begin_class
specifier|public
class|class
name|ConsumerTool
extends|extends
name|Thread
implements|implements
name|MessageListener
implements|,
name|ExceptionListener
block|{
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|Destination
name|destination
decl_stmt|;
specifier|private
name|MessageProducer
name|replyProducer
decl_stmt|;
specifier|private
name|boolean
name|pauseBeforeShutdown
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|verbose
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxiumMessages
decl_stmt|;
specifier|private
specifier|static
name|int
name|parallelThreads
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|subject
init|=
literal|"TOOL.DEFAULT"
decl_stmt|;
specifier|private
name|boolean
name|topic
decl_stmt|;
specifier|private
name|String
name|user
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_USER
decl_stmt|;
specifier|private
name|String
name|password
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_PASSWORD
decl_stmt|;
specifier|private
name|String
name|url
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_BROKER_URL
decl_stmt|;
specifier|private
name|boolean
name|transacted
decl_stmt|;
specifier|private
name|boolean
name|durable
decl_stmt|;
specifier|private
name|String
name|clientId
decl_stmt|;
specifier|private
name|int
name|ackMode
init|=
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
decl_stmt|;
specifier|private
name|String
name|consumerName
init|=
literal|"James"
decl_stmt|;
specifier|private
name|long
name|sleepTime
decl_stmt|;
specifier|private
name|long
name|receiveTimeOut
decl_stmt|;
specifier|private
name|long
name|batch
init|=
literal|10
decl_stmt|;
comment|// Default batch size for CLIENT_ACKNOWLEDGEMENT or SESSION_TRANSACTED
specifier|private
name|long
name|messagesReceived
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ConsumerTool
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ConsumerTool
name|consumerTool
init|=
operator|new
name|ConsumerTool
argument_list|()
decl_stmt|;
name|String
index|[]
name|unknown
init|=
name|CommandLineSupport
operator|.
name|setOptions
argument_list|(
name|consumerTool
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|unknown
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown options: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|unknown
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|consumerTool
operator|.
name|showParameters
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|threadCount
init|=
literal|1
init|;
name|threadCount
operator|<=
name|parallelThreads
condition|;
name|threadCount
operator|++
control|)
block|{
name|consumerTool
operator|=
operator|new
name|ConsumerTool
argument_list|()
expr_stmt|;
name|CommandLineSupport
operator|.
name|setOptions
argument_list|(
name|consumerTool
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|consumerTool
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|consumerTool
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|Iterator
argument_list|<
name|ConsumerTool
argument_list|>
name|itr
init|=
name|threads
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|running
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ConsumerTool
name|thread
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|thread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|running
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|running
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"All threads completed their work"
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
name|Iterator
argument_list|<
name|ConsumerTool
argument_list|>
name|itr
init|=
name|threads
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ConsumerTool
name|thread
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
block|}
block|}
specifier|public
name|void
name|showParameters
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connecting to URL: "
operator|+
name|url
operator|+
literal|" ("
operator|+
name|user
operator|+
literal|":"
operator|+
name|password
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Consuming "
operator|+
operator|(
name|topic
condition|?
literal|"topic"
else|:
literal|"queue"
operator|)
operator|+
literal|": "
operator|+
name|subject
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using a "
operator|+
operator|(
name|durable
condition|?
literal|"durable"
else|:
literal|"non-durable"
operator|)
operator|+
literal|" subscription"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running "
operator|+
name|parallelThreads
operator|+
literal|" parallel threads"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|durable
operator|&&
name|clientId
operator|!=
literal|null
operator|&&
name|clientId
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
literal|"null"
operator|.
name|equals
argument_list|(
name|clientId
argument_list|)
condition|)
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|setExceptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|ackMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
name|replyProducer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|replyProducer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|durable
operator|&&
name|topic
condition|)
block|{
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|consumerName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxiumMessages
operator|>
literal|0
condition|)
block|{
name|consumeMessagesAndClose
argument_list|(
name|connection
argument_list|,
name|session
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|receiveTimeOut
operator|==
literal|0
condition|)
block|{
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumeMessagesAndClose
argument_list|(
name|connection
argument_list|,
name|session
argument_list|,
name|consumer
argument_list|,
name|receiveTimeOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|messagesReceived
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|txtMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|String
name|msg
init|=
name|txtMsg
operator|.
name|getText
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|msg
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|50
condition|)
block|{
name|msg
operator|=
name|msg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
operator|+
literal|"..."
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Received: '"
operator|+
name|msg
operator|+
literal|"' (length "
operator|+
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Received: '"
operator|+
name|message
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|message
operator|.
name|getJMSReplyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|replyProducer
operator|.
name|send
argument_list|(
name|message
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Reply: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transacted
condition|)
block|{
if|if
condition|(
operator|(
name|messagesReceived
operator|%
name|batch
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Commiting transaction for last "
operator|+
name|batch
operator|+
literal|" messages; messages so far = "
operator|+
name|messagesReceived
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ackMode
operator|==
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
condition|)
block|{
if|if
condition|(
operator|(
name|messagesReceived
operator|%
name|batch
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Acknowledging last "
operator|+
name|batch
operator|+
literal|" messages; messages so far = "
operator|+
name|messagesReceived
argument_list|)
expr_stmt|;
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|sleepTime
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|onException
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] JMS Exception occured.  Shutting down client."
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
specifier|protected
name|void
name|consumeMessagesAndClose
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Session
name|session
parameter_list|,
name|MessageConsumer
name|consumer
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] We are about to wait until we consume: "
operator|+
name|maxiumMessages
operator|+
literal|" message(s) then we will shutdown"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxiumMessages
operator|&&
name|isRunning
argument_list|()
condition|;
control|)
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Closing connection"
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|pauseBeforeShutdown
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Press return to shut down"
argument_list|)
expr_stmt|;
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|consumeMessagesAndClose
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Session
name|session
parameter_list|,
name|MessageConsumer
name|consumer
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] We will consume messages while they continue to be delivered within: "
operator|+
name|timeout
operator|+
literal|" ms, and then we will shutdown"
argument_list|)
expr_stmt|;
name|Message
name|message
decl_stmt|;
while|while
condition|(
operator|(
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Closing connection"
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|pauseBeforeShutdown
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"] Press return to shut down"
argument_list|)
expr_stmt|;
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAckMode
parameter_list|(
name|String
name|ackMode
parameter_list|)
block|{
if|if
condition|(
literal|"CLIENT_ACKNOWLEDGE"
operator|.
name|equals
argument_list|(
name|ackMode
argument_list|)
condition|)
block|{
name|this
operator|.
name|ackMode
operator|=
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
expr_stmt|;
block|}
if|if
condition|(
literal|"AUTO_ACKNOWLEDGE"
operator|.
name|equals
argument_list|(
name|ackMode
argument_list|)
condition|)
block|{
name|this
operator|.
name|ackMode
operator|=
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
expr_stmt|;
block|}
if|if
condition|(
literal|"DUPS_OK_ACKNOWLEDGE"
operator|.
name|equals
argument_list|(
name|ackMode
argument_list|)
condition|)
block|{
name|this
operator|.
name|ackMode
operator|=
name|Session
operator|.
name|DUPS_OK_ACKNOWLEDGE
expr_stmt|;
block|}
if|if
condition|(
literal|"SESSION_TRANSACTED"
operator|.
name|equals
argument_list|(
name|ackMode
argument_list|)
condition|)
block|{
name|this
operator|.
name|ackMode
operator|=
name|Session
operator|.
name|SESSION_TRANSACTED
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientID
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientID
expr_stmt|;
block|}
specifier|public
name|void
name|setConsumerName
parameter_list|(
name|String
name|consumerName
parameter_list|)
block|{
name|this
operator|.
name|consumerName
operator|=
name|consumerName
expr_stmt|;
block|}
specifier|public
name|void
name|setDurable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|this
operator|.
name|durable
operator|=
name|durable
expr_stmt|;
block|}
specifier|public
name|void
name|setMaxiumMessages
parameter_list|(
name|int
name|maxiumMessages
parameter_list|)
block|{
name|this
operator|.
name|maxiumMessages
operator|=
name|maxiumMessages
expr_stmt|;
block|}
specifier|public
name|void
name|setPauseBeforeShutdown
parameter_list|(
name|boolean
name|pauseBeforeShutdown
parameter_list|)
block|{
name|this
operator|.
name|pauseBeforeShutdown
operator|=
name|pauseBeforeShutdown
expr_stmt|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|pwd
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|pwd
expr_stmt|;
block|}
specifier|public
name|void
name|setReceiveTimeOut
parameter_list|(
name|long
name|receiveTimeOut
parameter_list|)
block|{
name|this
operator|.
name|receiveTimeOut
operator|=
name|receiveTimeOut
expr_stmt|;
block|}
specifier|public
name|void
name|setSleepTime
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
name|this
operator|.
name|sleepTime
operator|=
name|sleepTime
expr_stmt|;
block|}
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
specifier|public
name|void
name|setParallelThreads
parameter_list|(
name|int
name|parallelThreads
parameter_list|)
block|{
if|if
condition|(
name|parallelThreads
operator|<
literal|1
condition|)
block|{
name|parallelThreads
operator|=
literal|1
expr_stmt|;
block|}
name|this
operator|.
name|parallelThreads
operator|=
name|parallelThreads
expr_stmt|;
block|}
specifier|public
name|void
name|setTopic
parameter_list|(
name|boolean
name|topic
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
block|}
specifier|public
name|void
name|setQueue
parameter_list|(
name|boolean
name|queue
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
operator|!
name|queue
expr_stmt|;
block|}
specifier|public
name|void
name|setTransacted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
block|{
name|this
operator|.
name|transacted
operator|=
name|transacted
expr_stmt|;
block|}
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
specifier|public
name|void
name|setBatch
parameter_list|(
name|long
name|batch
parameter_list|)
block|{
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
block|}
block|}
end_class

end_unit

