begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameClassPair
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ApplyLdifFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|FrameworkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|ldap
operator|.
name|LdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_comment
comment|/**  * This test assumes setup like in file 'AMQauth.ldif'. Contents of this file is attached below in comments.  *  * @author ngcutura  *  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|FrameworkRunner
operator|.
name|class
argument_list|)
annotation|@
name|CreateLdapServer
argument_list|(
name|transports
operator|=
block|{
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAP"
argument_list|)
block|}
argument_list|)
annotation|@
name|ApplyLdifFiles
argument_list|(
literal|"org/apache/activemq/security/AMQauth.ldif"
argument_list|)
specifier|public
class|class
name|LDAPAuthorizationMapTest
extends|extends
name|AbstractLdapTestUnit
block|{
specifier|private
specifier|static
name|LDAPAuthorizationMap
name|authMap
decl_stmt|;
specifier|public
specifier|static
name|LdapServer
name|ldapServer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|authMap
operator|=
operator|new
name|LDAPAuthorizationMap
argument_list|()
expr_stmt|;
name|authMap
operator|.
name|setConnectionURL
argument_list|(
literal|"ldap://localhost:"
operator|+
name|getLdapServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|authMap
operator|.
name|setTopicSearchMatchingFormat
argument_list|(
operator|new
name|MessageFormat
argument_list|(
literal|"uid={0},ou=topics,ou=destinations,o=ActiveMQ,ou=system"
argument_list|)
argument_list|)
expr_stmt|;
name|authMap
operator|.
name|setQueueSearchMatchingFormat
argument_list|(
operator|new
name|MessageFormat
argument_list|(
literal|"uid={0},ou=queues,ou=destinations,o=ActiveMQ,ou=system"
argument_list|)
argument_list|)
expr_stmt|;
name|authMap
operator|.
name|setAdvisorySearchBase
argument_list|(
literal|"uid=ActiveMQ.Advisory,ou=topics,ou=destinations,o=ActiveMQ,ou=system"
argument_list|)
expr_stmt|;
name|authMap
operator|.
name|setTempSearchBase
argument_list|(
literal|"uid=ActiveMQ.Temp,ou=topics,ou=destinations,o=ActiveMQ,ou=system"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|DirContext
name|ctx
init|=
name|authMap
operator|.
name|open
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NamingEnumeration
argument_list|<
name|NameClassPair
argument_list|>
name|list
init|=
name|ctx
operator|.
name|list
argument_list|(
literal|"ou=destinations,o=ActiveMQ,ou=system"
argument_list|)
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|NameClassPair
name|ncp
init|=
name|list
operator|.
name|next
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ncp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"ou=topics"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|"ou=queues"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getAdminACLs(ActiveMQDestination)'      */
annotation|@
name|Test
specifier|public
name|void
name|testGetAdminACLs
parameter_list|()
block|{
name|ActiveMQDestination
name|q1
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|aclsq1
init|=
name|authMap
operator|.
name|getAdminACLs
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aclsq1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclsq1
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|t1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"topic1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|aclst1
init|=
name|authMap
operator|.
name|getAdminACLs
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aclst1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclst1
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getReadACLs(ActiveMQDestination)'      */
annotation|@
name|Test
specifier|public
name|void
name|testGetReadACLs
parameter_list|()
block|{
name|ActiveMQDestination
name|q1
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|aclsq1
init|=
name|authMap
operator|.
name|getReadACLs
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aclsq1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclsq1
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|t1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"topic1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|aclst1
init|=
name|authMap
operator|.
name|getReadACLs
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aclst1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclst1
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.activemq.security.LDAPAuthorizationMap.getWriteACLs(ActiveMQDestination)'      */
annotation|@
name|Test
specifier|public
name|void
name|testGetWriteACLs
parameter_list|()
block|{
name|ActiveMQDestination
name|q1
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|aclsq1
init|=
name|authMap
operator|.
name|getWriteACLs
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aclsq1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclsq1
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclsq1
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|t1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"topic1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|aclst1
init|=
name|authMap
operator|.
name|getWriteACLs
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aclst1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclst1
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComposite
parameter_list|()
block|{
name|ActiveMQDestination
name|q1
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue1,topic://topic1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|aclsq1
init|=
name|authMap
operator|.
name|getWriteACLs
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aclsq1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdvisory
parameter_list|()
block|{
name|ActiveMQDestination
name|dest
init|=
name|AdvisorySupport
operator|.
name|getConnectionAdvisoryTopic
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|acls
init|=
name|authMap
operator|.
name|getWriteACLs
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTemp
parameter_list|()
block|{
name|Set
argument_list|<
name|GroupPrincipal
argument_list|>
name|acls
init|=
name|authMap
operator|.
name|getTempDestinationAdminACLs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|contains
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

