begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_comment
comment|/**  * An eviction strategy which evicts the oldest message with the lowest priority first.  *   * @org.apache.xbean.XBean  *   * @version $Revision$messageEvictionStrategy  */
end_comment

begin_class
specifier|public
class|class
name|OldestMessageWithLowestPriorityEvictionStrategy
extends|extends
name|MessageEvictionStrategySupport
block|{
specifier|public
name|MessageReference
index|[]
name|evictMessages
parameter_list|(
name|LinkedList
name|messages
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|lowestPriority
init|=
name|Byte
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|pivot
init|=
literal|0
decl_stmt|;
name|Iterator
name|iter
init|=
name|messages
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MessageReference
name|reference
init|=
operator|(
name|MessageReference
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
name|priority
init|=
name|reference
operator|.
name|getMessage
argument_list|()
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|priority
operator|<
name|lowestPriority
condition|)
block|{
name|lowestPriority
operator|=
name|priority
expr_stmt|;
name|pivot
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MessageReference
index|[]
block|{
operator|(
name|MessageReference
operator|)
name|messages
operator|.
name|remove
argument_list|(
name|pivot
argument_list|)
block|}
return|;
block|}
block|}
end_class

end_unit

