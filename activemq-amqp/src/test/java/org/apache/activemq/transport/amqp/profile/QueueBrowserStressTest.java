begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|JMSClientTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test that creates a large number of QueueBrowser and Session instances over time.  *  * There is a pause at the end of the test to allow for heap dumps or post run analysis.  */
end_comment

begin_class
specifier|public
class|class
name|QueueBrowserStressTest
extends|extends
name|JMSClientTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueBrowserStressTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|NUM_ITERATIONS
init|=
literal|1000
decl_stmt|;
annotation|@
name|Ignore
argument_list|(
literal|"Used for profiling broker memory usage."
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testBrowserLeak
parameter_list|()
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_ITERATIONS
condition|;
operator|++
name|i
control|)
block|{
comment|// When recreating session, memory leak does occurs on the client but memory leak still occurs on the server
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|queue
argument_list|,
literal|"JMSXGroupSeq=0"
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|1
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|enums
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|enums
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No messages in {}"
argument_list|,
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
name|message
init|=
operator|(
name|Message
operator|)
name|enums
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received {} message : {} from {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|j
operator|++
block|,
name|message
block|,
name|queue
operator|.
name|getQueueName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|browser
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"close browser for {}"
argument_list|,
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|browser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on browser close: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|browser
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"close session for {}"
argument_list|,
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on session close: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|session
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Task complete, capture heap dump now"
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

