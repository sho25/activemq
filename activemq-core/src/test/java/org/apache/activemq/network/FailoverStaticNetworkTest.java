begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|SslBrokerServiceTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FailoverStaticNetworkTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FailoverStaticNetworkTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DESTINATION_NAME
init|=
literal|"testQ"
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerA
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerB
decl_stmt|;
specifier|private
name|SslContext
name|sslContext
decl_stmt|;
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|listenPort
parameter_list|,
name|String
index|[]
name|networkToPorts
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"Broker_"
operator|+
name|listenPort
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|scheme
operator|+
literal|"://localhost:"
operator|+
name|listenPort
argument_list|)
expr_stmt|;
if|if
condition|(
name|networkToPorts
operator|!=
literal|null
operator|&&
name|networkToPorts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"static:(failover:("
operator|+
name|scheme
operator|+
literal|"://localhost:"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|networkToPorts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|networkToPorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
operator|+
name|scheme
operator|+
literal|"://localhost:"
operator|+
name|networkToPorts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")?randomize=false)"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addNetworkConnector
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|broker
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyManager
index|[]
name|km
init|=
name|SslBrokerServiceTest
operator|.
name|getKeyManager
argument_list|()
decl_stmt|;
name|TrustManager
index|[]
name|tm
init|=
name|SslBrokerServiceTest
operator|.
name|getTrustManager
argument_list|()
decl_stmt|;
name|sslContext
operator|=
operator|new
name|SslContext
argument_list|(
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerB
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerB
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendReceiveAfterReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"restarting brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendReceiveFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"63617"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"restarting brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"63617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
block|}
comment|/**      * networked broker started after target so first connect attempt succeeds      * start order is important      */
annotation|@
name|Test
specifier|public
name|void
name|testSendReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"1111"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendReceiveSsl
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"ssl"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"ssl"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"1111"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doTestNetworkSendReceive
parameter_list|()
throws|throws
name|Exception
throws|,
name|JMSException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Consumer on the networked brokerA ..."
argument_list|)
expr_stmt|;
name|SslContext
operator|.
name|setCurrentSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
comment|// Create a consumer on brokerA
name|ConnectionFactory
name|consFactory
init|=
name|createConnectionFactory
argument_list|(
name|brokerA
argument_list|)
decl_stmt|;
name|Connection
name|consConn
init|=
name|consFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consSession
init|=
name|consConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|(
name|ActiveMQDestination
operator|)
name|consSession
operator|.
name|createQueue
argument_list|(
name|DESTINATION_NAME
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|consSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"publishing to brokerB"
argument_list|)
expr_stmt|;
name|sendMessageTo
argument_list|(
name|destination
argument_list|,
name|brokerB
argument_list|)
expr_stmt|;
name|boolean
name|gotMessage
init|=
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|consConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ignored
parameter_list|)
block|{         }
name|assertTrue
argument_list|(
literal|"consumer on A got message"
argument_list|,
name|gotMessage
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendMessageTo
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|(
name|brokerService
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hi"
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|(
specifier|final
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
operator|(
operator|(
name|TransportConnector
operator|)
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setOptimizedMessageDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setUseAsyncSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setOptimizeAcknowledge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|connectionFactory
return|;
block|}
block|}
end_class

end_unit

