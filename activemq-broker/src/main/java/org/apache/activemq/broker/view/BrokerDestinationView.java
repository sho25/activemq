begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|view
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_class
specifier|public
class|class
name|BrokerDestinationView
block|{
specifier|private
specifier|final
name|Destination
name|destination
decl_stmt|;
name|BrokerDestinationView
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
comment|/**      * @return the name of the DestinationView      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages enqueued by this destination      */
specifier|public
name|long
name|getEnqueueCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages dequeued (dispatched and removed) by this destination      */
specifier|public
name|long
name|getDequeueCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages dispatched by this destination      */
specifier|public
name|long
name|getDispatchCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages inflight (dispatched by not acknowledged) by this destination      */
specifier|public
name|long
name|getInFlightCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages expired by this destination      */
specifier|public
name|long
name|getExpiredCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getExpired
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of active consumers on this destination      */
specifier|public
name|int
name|getConsumerCount
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of active consumers on this destination      */
specifier|public
name|int
name|getProducerCount
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getProducers
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the depth of the Destination      */
specifier|public
name|long
name|getQueueSize
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages cached in memory by this destination      */
specifier|public
name|long
name|getMessagesCached
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessagesCached
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the memory usage as a percentage for this Destination      */
specifier|public
name|int
name|getMemoryPercentUsage
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
return|;
block|}
comment|/**      * @return the memory used by this destination in bytes      */
specifier|public
name|long
name|getMemoryUsageByteCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
return|;
block|}
comment|/**      * @return  the memory limit for this destination in bytes      */
specifier|public
name|long
name|getMemoryLimit
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
return|;
block|}
comment|/**      * @return the average time it takes to store a message on this destination (ms)      */
specifier|public
name|double
name|getAverageEnqueueTime
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getAverageTime
argument_list|()
return|;
block|}
comment|/**      * @return the maximum time it takes to store a message on this destination (ms)      */
specifier|public
name|long
name|getMaxEnqueueTime
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getMaxTime
argument_list|()
return|;
block|}
comment|/**      * @return the minimum time it takes to store a message on this destination (ms)      */
specifier|public
name|long
name|getMinEnqueueTime
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getMinTime
argument_list|()
return|;
block|}
comment|/**      * @return true if the destination is a Dead Letter Queue      */
specifier|public
name|boolean
name|isDLQ
parameter_list|()
block|{
return|return
name|destination
operator|.
name|isDLQ
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages blocked waiting for dispatch (indication of slow consumption if greater than zero)      */
specifier|public
name|long
name|getBlockedSends
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getBlockedSends
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the average time(ms) messages are  blocked waiting for dispatch (indication of slow consumption if greater than zero)      */
specifier|public
name|double
name|getAverageBlockedTime
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getBlockedTime
argument_list|()
operator|.
name|getAverageTime
argument_list|()
return|;
block|}
comment|/**      * @return the total time(ms) messages are  blocked waiting for dispatch (indication of slow consumption if greater than zero)      */
specifier|public
name|long
name|getTotalBlockedTime
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getBlockedTime
argument_list|()
operator|.
name|getTotalTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

