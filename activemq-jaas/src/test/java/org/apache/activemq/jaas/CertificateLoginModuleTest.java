begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_class
specifier|public
class|class
name|CertificateLoginModuleTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|String
name|userName
init|=
literal|"testUser"
decl_stmt|;
specifier|private
specifier|final
name|List
name|groupNames
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|StubCertificateLoginModule
name|loginModule
decl_stmt|;
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|public
name|CertificateLoginModuleTest
parameter_list|()
block|{
name|groupNames
operator|.
name|add
argument_list|(
literal|"testGroup1"
argument_list|)
expr_stmt|;
name|groupNames
operator|.
name|add
argument_list|(
literal|"testGroup2"
argument_list|)
expr_stmt|;
name|groupNames
operator|.
name|add
argument_list|(
literal|"testGroup3"
argument_list|)
expr_stmt|;
name|groupNames
operator|.
name|add
argument_list|(
literal|"testGroup4"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|subject
operator|=
operator|new
name|Subject
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|private
name|void
name|loginWithCredentials
parameter_list|(
name|String
name|userName
parameter_list|,
name|Set
name|groupNames
parameter_list|)
throws|throws
name|LoginException
block|{
name|loginModule
operator|=
operator|new
name|StubCertificateLoginModule
argument_list|(
name|userName
argument_list|,
operator|new
name|HashSet
argument_list|(
name|groupNames
argument_list|)
argument_list|)
expr_stmt|;
name|JaasCertificateCallbackHandler
name|callbackHandler
init|=
operator|new
name|JaasCertificateCallbackHandler
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|callbackHandler
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
name|loginModule
operator|.
name|login
argument_list|()
expr_stmt|;
name|loginModule
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkPrincipalsMatch
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|boolean
name|nameFound
init|=
literal|false
decl_stmt|;
name|boolean
name|groupsFound
index|[]
init|=
operator|new
name|boolean
index|[
name|groupNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupsFound
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|groupsFound
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Principal
name|currentPrincipal
init|=
operator|(
name|Principal
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentPrincipal
operator|instanceof
name|UserPrincipal
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|UserPrincipal
operator|)
name|currentPrincipal
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
if|if
condition|(
name|nameFound
operator|==
literal|false
condition|)
block|{
name|nameFound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"UserPrincipal found twice."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unknown UserPrincipal found."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentPrincipal
operator|instanceof
name|GroupPrincipal
condition|)
block|{
name|int
name|principalIdx
init|=
name|groupNames
operator|.
name|indexOf
argument_list|(
operator|(
operator|(
name|GroupPrincipal
operator|)
name|currentPrincipal
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalIdx
operator|<
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Unknown GroupPrincipal found."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupsFound
index|[
name|principalIdx
index|]
operator|==
literal|false
condition|)
block|{
name|groupsFound
index|[
name|principalIdx
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"GroupPrincipal found twice."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unknown Principal type found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testLoginSuccess
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|loginWithCredentials
argument_list|(
name|userName
argument_list|,
operator|new
name|HashSet
argument_list|(
name|groupNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to login: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkPrincipalsMatch
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLoginFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|loginFailed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|loginWithCredentials
argument_list|(
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
name|loginFailed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|loginFailed
condition|)
block|{
name|fail
argument_list|(
literal|"Logged in with unknown certificate."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLogOut
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|loginWithCredentials
argument_list|(
name|userName
argument_list|,
operator|new
name|HashSet
argument_list|(
name|groupNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to login: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|loginModule
operator|.
name|logout
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"logout should have cleared Subject principals."
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

