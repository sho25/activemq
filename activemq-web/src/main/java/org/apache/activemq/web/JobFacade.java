begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_class
specifier|public
class|class
name|JobFacade
block|{
specifier|private
specifier|final
name|CompositeData
name|data
decl_stmt|;
specifier|public
name|JobFacade
parameter_list|(
name|CompositeData
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|String
name|getCronEntry
parameter_list|()
block|{
return|return
name|data
operator|.
name|get
argument_list|(
literal|"cronEntry"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getJobId
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|data
operator|.
name|get
argument_list|(
literal|"jobId"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNextExecutionTime
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|data
operator|.
name|get
argument_list|(
literal|"next"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
name|Long
name|result
init|=
operator|(
name|Long
operator|)
name|data
operator|.
name|get
argument_list|(
literal|"delay"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|longValue
argument_list|()
return|;
block|}
return|return
literal|0l
return|;
block|}
specifier|public
name|long
name|getPeriod
parameter_list|()
block|{
name|Long
name|result
init|=
operator|(
name|Long
operator|)
name|data
operator|.
name|get
argument_list|(
literal|"period"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|longValue
argument_list|()
return|;
block|}
return|return
literal|0l
return|;
block|}
specifier|public
name|int
name|getRepeat
parameter_list|()
block|{
name|Integer
name|result
init|=
operator|(
name|Integer
operator|)
name|data
operator|.
name|get
argument_list|(
literal|"repeat"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|intValue
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|getStart
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|data
operator|.
name|get
argument_list|(
literal|"start"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|object
operator|!=
literal|null
condition|?
name|object
operator|.
name|toString
argument_list|()
else|:
literal|""
return|;
block|}
block|}
end_class

end_unit

