begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JmsProducerProperties
extends|extends
name|JmsClientProperties
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReflectionUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIME_BASED_SENDING
init|=
literal|"time"
decl_stmt|;
comment|// Produce messages base on a time interval
specifier|public
specifier|static
specifier|final
name|String
name|COUNT_BASED_SENDING
init|=
literal|"count"
decl_stmt|;
comment|// Produce a specific count of messages
specifier|public
specifier|static
specifier|final
name|String
name|DELIVERY_MODE_PERSISTENT
init|=
literal|"persistent"
decl_stmt|;
comment|// Persistent message delivery
specifier|public
specifier|static
specifier|final
name|String
name|DELIVERY_MODE_NON_PERSISTENT
init|=
literal|"nonpersistent"
decl_stmt|;
comment|// Non-persistent message delivery
specifier|protected
name|String
name|deliveryMode
init|=
name|DELIVERY_MODE_NON_PERSISTENT
decl_stmt|;
comment|// Message delivery mode
specifier|protected
name|int
name|messageSize
init|=
literal|1024
decl_stmt|;
comment|// Send 1kb messages by default
specifier|protected
name|long
name|sendCount
init|=
literal|1000000
decl_stmt|;
comment|// Send a million messages by default
specifier|protected
name|long
name|sendDuration
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// Send for 5 mins by default
specifier|protected
name|String
name|sendType
init|=
name|TIME_BASED_SENDING
decl_stmt|;
specifier|protected
name|long
name|sendDelay
init|=
literal|0
decl_stmt|;
comment|// delay in milliseconds between each producer send
specifier|protected
name|String
name|msgFileName
init|=
literal|null
decl_stmt|;
comment|// for sending a particular msg from a file
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headerMap
init|=
literal|null
decl_stmt|;
comment|// If true, create a different message on each send, otherwise reuse.
specifier|protected
name|boolean
name|createNewMsg
decl_stmt|;
specifier|public
name|JmsProducerProperties
parameter_list|()
block|{
name|this
operator|.
name|headerMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getDeliveryMode
parameter_list|()
block|{
return|return
name|deliveryMode
return|;
block|}
specifier|public
name|void
name|setDeliveryMode
parameter_list|(
name|String
name|deliveryMode
parameter_list|)
block|{
name|this
operator|.
name|deliveryMode
operator|=
name|deliveryMode
expr_stmt|;
block|}
specifier|public
name|int
name|getMessageSize
parameter_list|()
block|{
return|return
name|messageSize
return|;
block|}
specifier|public
name|void
name|setMessageSize
parameter_list|(
name|int
name|messageSize
parameter_list|)
block|{
name|this
operator|.
name|messageSize
operator|=
name|messageSize
expr_stmt|;
block|}
specifier|public
name|long
name|getSendCount
parameter_list|()
block|{
return|return
name|sendCount
return|;
block|}
specifier|public
name|void
name|setSendCount
parameter_list|(
name|long
name|sendCount
parameter_list|)
block|{
name|this
operator|.
name|sendCount
operator|=
name|sendCount
expr_stmt|;
block|}
specifier|public
name|long
name|getSendDuration
parameter_list|()
block|{
return|return
name|sendDuration
return|;
block|}
specifier|public
name|void
name|setSendDuration
parameter_list|(
name|long
name|sendDuration
parameter_list|)
block|{
name|this
operator|.
name|sendDuration
operator|=
name|sendDuration
expr_stmt|;
block|}
specifier|public
name|String
name|getSendType
parameter_list|()
block|{
return|return
name|sendType
return|;
block|}
specifier|public
name|void
name|setSendType
parameter_list|(
name|String
name|sendType
parameter_list|)
block|{
name|this
operator|.
name|sendType
operator|=
name|sendType
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCreateNewMsg
parameter_list|()
block|{
return|return
name|createNewMsg
return|;
block|}
specifier|public
name|void
name|setCreateNewMsg
parameter_list|(
name|boolean
name|createNewMsg
parameter_list|)
block|{
name|this
operator|.
name|createNewMsg
operator|=
name|createNewMsg
expr_stmt|;
block|}
specifier|public
name|void
name|setSendDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|sendDelay
operator|=
name|delay
expr_stmt|;
block|}
specifier|public
name|long
name|getSendDelay
parameter_list|()
block|{
return|return
name|this
operator|.
name|sendDelay
return|;
block|}
comment|/* Operations for supporting message headers */
comment|/**      * Method for setting a message header.       * @param encodedHeader - the header is encoded as a string using this syntax:      * encodedHeader = [headerkey '=' headervalue ':' ]*      * E.g. an encodedHeader could read "JMSType=car", or      * "JMSType=car:MyHeader=MyValue"      *      * That implies neither the header key nor the value       * can contain any of the characters ':' and '='.      */
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|encodedHeader
parameter_list|)
block|{
comment|// remove any trailing ':' characters
if|if
condition|(
name|encodedHeader
operator|.
name|endsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|encodedHeader
operator|=
name|encodedHeader
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|encodedHeader
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// split headers
name|String
name|headers
index|[]
init|=
name|encodedHeader
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|h
range|:
name|headers
control|)
block|{
comment|// split into header name and value
name|String
name|tokens
index|[]
init|=
name|h
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
comment|// sanity check, don't allow empty string for header names
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
operator|||
name|tokens
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|tokens
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error parsing message headers. Header: \""
operator|+
name|h
operator|+
literal|"\". This header will be ignored."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|headerMap
operator|.
name|put
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|,
name|tokens
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHeaderKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|headerMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getHeaderValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|headerMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|clearHeaders
parameter_list|()
block|{
name|this
operator|.
name|headerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setMsgFileName
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\"producer.msgFileName\" specified. "
operator|+
literal|"Will ignore setting \"producer.messageSize\"."
argument_list|)
expr_stmt|;
name|this
operator|.
name|msgFileName
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|String
name|getMsgFileName
parameter_list|()
block|{
return|return
name|this
operator|.
name|msgFileName
return|;
block|}
block|}
end_class

end_unit

