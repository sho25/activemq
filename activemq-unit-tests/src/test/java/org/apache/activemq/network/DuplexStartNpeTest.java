begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|DuplexStartNpeTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DuplexStartNpeTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQQueue
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"QQ"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|BrokerService
argument_list|>
name|brokerServices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|final
specifier|static
name|String
name|urlString
init|=
literal|"tcp://localhost:"
operator|+
name|TestUtils
operator|.
name|findOpenPort
argument_list|()
decl_stmt|;
specifier|final
specifier|static
name|int
name|NUM_MESSAGES
init|=
literal|10
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|reproduceNpe
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker0
init|=
name|createBroker
argument_list|()
decl_stmt|;
name|NetworkConnector
name|networkConnector
init|=
name|broker0
operator|.
name|addNetworkConnector
argument_list|(
literal|"masterslave:("
operator|+
name|urlString
operator|+
literal|","
operator|+
name|urlString
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|networkConnector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setStaticBridge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// ensure there is demand on start
name|networkConnector
operator|.
name|setStaticallyIncludedDestinations
argument_list|(
name|Arrays
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|asList
argument_list|(
operator|new
name|ActiveMQQueue
index|[]
block|{
name|dest
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|broker0
operator|.
name|start
argument_list|()
expr_stmt|;
name|publish
argument_list|(
name|broker0
operator|.
name|getVmConnectorURI
argument_list|()
argument_list|)
expr_stmt|;
name|BrokerService
name|broker1
init|=
name|createBroker
argument_list|()
decl_stmt|;
name|broker1
operator|.
name|addConnector
argument_list|(
name|urlString
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getClientId
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getClientId
argument_list|()
operator|.
name|contains
argument_list|(
literal|"_duplex_"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New connection for broker1: "
operator|+
name|info
argument_list|)
expr_stmt|;
comment|// snooz on return to simulate stall
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|broker1
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// get the message over the bridge
end_comment

begin_expr_stmt
name|consume
argument_list|(
operator|new
name|URI
argument_list|(
name|urlString
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
name|void
name|consume
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageConsumer
name|messageConsumer
init|=
name|connectionFactory
argument_list|(
name|uri
argument_list|)
operator|.
name|createConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"got message: "
operator|+
name|i
argument_list|,
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|publish
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageProducer
name|messageProducer
init|=
name|connectionFactory
argument_list|(
name|uri
argument_list|)
operator|.
name|createConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|messageProducer
operator|.
name|send
argument_list|(
operator|new
name|ActiveMQTextMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|JMSException
block|{
name|Connection
name|connection
init|=
name|super
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// auto start!
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
decl_stmt|;
name|connectionFactory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|connectionFactory
return|;
block|}
end_function

begin_function
specifier|private
name|BrokerService
name|createBroker
parameter_list|()
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"B"
operator|+
name|brokerServices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setBrokerId
argument_list|(
name|brokerService
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerServices
operator|.
name|add
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
end_function

begin_function
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Connection
name|connection
range|:
name|connections
control|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
block|}
name|connections
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|BrokerService
name|brokerService
range|:
name|brokerServices
control|)
block|{
try|try
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
block|}
name|brokerServices
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

