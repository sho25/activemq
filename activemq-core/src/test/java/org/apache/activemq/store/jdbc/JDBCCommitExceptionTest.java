begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
operator|.
name|DefaultJDBCAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|// https://issues.apache.org/activemq/browse/AMQ-2880
end_comment

begin_class
specifier|public
class|class
name|JDBCCommitExceptionTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCCommitExceptionTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|messagesExpected
init|=
literal|10
decl_stmt|;
specifier|protected
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"tcp://localhost:61616?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="
operator|+
name|messagesExpected
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|EmbeddedDataSource
name|dataSource
decl_stmt|;
specifier|protected
name|java
operator|.
name|sql
operator|.
name|Connection
name|dbConnection
decl_stmt|;
specifier|protected
name|BrokenPersistenceAdapter
name|jdbc
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSqlException
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSqlException
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doTestSqlException
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessages
argument_list|(
name|messagesExpected
argument_list|)
expr_stmt|;
name|int
name|messagesReceived
init|=
name|receiveMessages
argument_list|(
name|messagesExpected
argument_list|)
decl_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Messages expected doesn't equal messages received"
argument_list|,
name|messagesExpected
argument_list|,
name|messagesReceived
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|dumpMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Connection
name|conn
init|=
operator|(
operator|(
name|JDBCPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|statement
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT ID, MSG FROM ACTIVEMQ_MSGS"
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|statement
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Messages left in broker after test"
argument_list|)
expr_stmt|;
while|while
condition|(
name|result
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|id
init|=
name|result
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
name|message
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteSequence
argument_list|(
name|result
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"id: "
operator|+
name|id
operator|+
literal|", message SeqId: "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|getBrokerSequenceId
argument_list|()
operator|+
literal|", MSG: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|receiveMessages
parameter_list|(
name|int
name|messagesExpected
parameter_list|)
throws|throws
name|Exception
block|{
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|jdbc
operator|.
name|setShouldBreak
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// first try and receive these messages, they'll continually fail
name|receiveMessages
argument_list|(
name|messagesExpected
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setShouldBreak
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// now that the store is sane, try and get all the messages sent
return|return
name|receiveMessages
argument_list|(
name|messagesExpected
argument_list|,
name|session
argument_list|)
return|;
block|}
specifier|protected
name|int
name|receiveMessages
parameter_list|(
name|int
name|messagesExpected
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|messagesReceived
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesExpected
condition|;
name|i
operator|++
control|)
block|{
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Receiving message "
operator|+
operator|(
name|messagesReceived
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|messagesReceived
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception "
operator|+
name|e
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|messagesReceived
return|;
block|}
specifier|protected
name|void
name|sendMessages
parameter_list|(
name|int
name|messagesExpected
parameter_list|)
throws|throws
name|Exception
block|{
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesExpected
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending message "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test message "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|jdbc
operator|=
operator|new
name|BrokenPersistenceAdapter
argument_list|()
expr_stmt|;
name|dataSource
operator|=
operator|new
name|EmbeddedDataSource
argument_list|()
expr_stmt|;
name|dataSource
operator|.
name|setDatabaseName
argument_list|(
literal|"target/derbyDb"
argument_list|)
expr_stmt|;
name|dataSource
operator|.
name|setCreateDatabase
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setUseLock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|jdbc
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
end_class

end_unit

