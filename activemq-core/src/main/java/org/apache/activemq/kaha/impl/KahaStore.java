begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|IndexTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|ListContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|MapContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|RuntimeStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
operator|.
name|BaseContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
operator|.
name|ListContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
operator|.
name|MapContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|DataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|RedoListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|RedoStoreIndexItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Store Implementation  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|KahaStore
implements|implements
name|Store
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOCK_FILE_NAME
init|=
literal|"store.lock"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CONTAINER_NAME
init|=
literal|"kaha"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PROPERTY_PREFIX
init|=
literal|"org.apache.activemq.kaha.Store"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|boolean
name|brokenFileLock
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_PREFIX
operator|+
literal|".broken"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|boolean
name|disableLocking
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_PREFIX
operator|+
literal|"DisableLocking"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Set
name|lockSet
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|KahaStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
name|IndexRootContainer
name|mapsContainer
decl_stmt|;
specifier|private
name|IndexRootContainer
name|listsContainer
decl_stmt|;
specifier|private
name|Map
name|lists
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|maps
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|dataManagers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|indexManagers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|IndexManager
name|rootIndexManager
decl_stmt|;
comment|// contains all the root indexes
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|mode
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|boolean
name|logIndexChanges
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useAsyncWriter
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|maxDataFileLength
init|=
name|DataManager
operator|.
name|MAX_FILE_LENGTH
decl_stmt|;
specifier|private
name|FileLock
name|lock
decl_stmt|;
specifier|private
name|String
name|indexType
init|=
name|IndexTypes
operator|.
name|DISK_INDEX
decl_stmt|;
specifier|public
name|KahaStore
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|directory
operator|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|directory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|initialized
condition|)
block|{
name|unlock
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|indexManagers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IndexManager
name|im
init|=
operator|(
name|IndexManager
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|im
operator|.
name|close
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|dataManagers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DataManager
name|dm
init|=
operator|(
name|DataManager
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|dm
operator|.
name|close
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|force
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|indexManagers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IndexManager
name|im
init|=
operator|(
name|IndexManager
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|im
operator|.
name|force
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|dataManagers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DataManager
name|dm
init|=
operator|(
name|DataManager
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|dm
operator|.
name|force
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mapsContainer
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ContainerId
name|id
init|=
operator|(
name|ContainerId
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|MapContainer
name|container
init|=
name|getMapContainer
argument_list|(
name|id
operator|.
name|getKey
argument_list|()
argument_list|,
name|id
operator|.
name|getDataContainerName
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|listsContainer
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ContainerId
name|id
init|=
operator|(
name|ContainerId
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ListContainer
name|container
init|=
name|getListContainer
argument_list|(
name|id
operator|.
name|getKey
argument_list|()
argument_list|,
name|id
operator|.
name|getDataContainerName
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|initialized
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|indexManagers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IndexManager
name|im
init|=
operator|(
name|IndexManager
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|&=
name|im
operator|.
name|delete
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|dataManagers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DataManager
name|dm
init|=
operator|(
name|DataManager
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|&=
name|dm
operator|.
name|delete
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|!=
literal|null
operator|&&
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|&=
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|str
init|=
name|result
condition|?
literal|"successfully deleted"
else|:
literal|"failed to delete"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Kaha Store "
operator|+
name|str
operator|+
literal|" data directory "
operator|+
name|directory
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|initialized
return|;
block|}
specifier|public
name|boolean
name|doesMapContainerExist
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doesMapContainerExist
argument_list|(
name|id
argument_list|,
name|DEFAULT_CONTAINER_NAME
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|doesMapContainerExist
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
operator|new
name|ContainerId
argument_list|()
decl_stmt|;
name|containerId
operator|.
name|setKey
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerId
operator|.
name|setDataContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
return|return
name|maps
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
operator|||
name|mapsContainer
operator|.
name|doesRootExist
argument_list|(
name|containerId
argument_list|)
return|;
block|}
specifier|public
name|MapContainer
name|getMapContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMapContainer
argument_list|(
name|id
argument_list|,
name|DEFAULT_CONTAINER_NAME
argument_list|)
return|;
block|}
specifier|public
name|MapContainer
name|getMapContainer
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMapContainer
argument_list|(
name|id
argument_list|,
name|containerName
argument_list|,
name|indexType
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|MapContainer
name|getMapContainer
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|,
name|String
name|indexType
parameter_list|)
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
operator|new
name|ContainerId
argument_list|()
decl_stmt|;
name|containerId
operator|.
name|setKey
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerId
operator|.
name|setDataContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|MapContainerImpl
name|result
init|=
operator|(
name|MapContainerImpl
operator|)
name|maps
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|DataManager
name|dm
init|=
name|getDataManager
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|IndexManager
name|im
init|=
name|getIndexManager
argument_list|(
name|dm
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|IndexItem
name|root
init|=
name|mapsContainer
operator|.
name|getRoot
argument_list|(
name|im
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|mapsContainer
operator|.
name|addRoot
argument_list|(
name|im
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|MapContainerImpl
argument_list|(
name|containerId
argument_list|,
name|root
argument_list|,
name|im
argument_list|,
name|dm
argument_list|,
name|indexType
argument_list|)
expr_stmt|;
name|maps
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|deleteMapContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteMapContainer
argument_list|(
name|id
argument_list|,
name|DEFAULT_CONTAINER_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|deleteMapContainer
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
operator|new
name|ContainerId
argument_list|()
decl_stmt|;
name|containerId
operator|.
name|setKey
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerId
operator|.
name|setDataContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|MapContainerImpl
name|container
init|=
operator|(
name|MapContainerImpl
operator|)
name|maps
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mapsContainer
operator|.
name|removeRoot
argument_list|(
name|container
operator|.
name|getIndexManager
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|Set
name|getMapContainerIds
parameter_list|()
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|Set
name|set
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mapsContainer
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ContainerId
name|id
init|=
operator|(
name|ContainerId
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|id
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
specifier|public
name|boolean
name|doesListContainerExist
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doesListContainerExist
argument_list|(
name|id
argument_list|,
name|DEFAULT_CONTAINER_NAME
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|doesListContainerExist
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
operator|new
name|ContainerId
argument_list|()
decl_stmt|;
name|containerId
operator|.
name|setKey
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerId
operator|.
name|setDataContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
return|return
name|lists
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
operator|||
name|listsContainer
operator|.
name|doesRootExist
argument_list|(
name|containerId
argument_list|)
return|;
block|}
specifier|public
name|ListContainer
name|getListContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getListContainer
argument_list|(
name|id
argument_list|,
name|DEFAULT_CONTAINER_NAME
argument_list|)
return|;
block|}
specifier|public
name|ListContainer
name|getListContainer
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getListContainer
argument_list|(
name|id
argument_list|,
name|containerName
argument_list|,
name|indexType
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|ListContainer
name|getListContainer
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|,
name|String
name|indexType
parameter_list|)
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
operator|new
name|ContainerId
argument_list|()
decl_stmt|;
name|containerId
operator|.
name|setKey
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerId
operator|.
name|setDataContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|ListContainerImpl
name|result
init|=
operator|(
name|ListContainerImpl
operator|)
name|lists
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|DataManager
name|dm
init|=
name|getDataManager
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|IndexManager
name|im
init|=
name|getIndexManager
argument_list|(
name|dm
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|IndexItem
name|root
init|=
name|listsContainer
operator|.
name|getRoot
argument_list|(
name|im
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|listsContainer
operator|.
name|addRoot
argument_list|(
name|im
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|ListContainerImpl
argument_list|(
name|containerId
argument_list|,
name|root
argument_list|,
name|im
argument_list|,
name|dm
argument_list|,
name|indexType
argument_list|)
expr_stmt|;
name|lists
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|deleteListContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteListContainer
argument_list|(
name|id
argument_list|,
name|DEFAULT_CONTAINER_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|deleteListContainer
parameter_list|(
name|Object
name|id
parameter_list|,
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
operator|new
name|ContainerId
argument_list|()
decl_stmt|;
name|containerId
operator|.
name|setKey
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerId
operator|.
name|setDataContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|ListContainerImpl
name|container
init|=
operator|(
name|ListContainerImpl
operator|)
name|lists
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|listsContainer
operator|.
name|removeRoot
argument_list|(
name|container
operator|.
name|getIndexManager
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|Set
name|getListContainerIds
parameter_list|()
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
name|Set
name|set
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|listsContainer
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ContainerId
name|id
init|=
operator|(
name|ContainerId
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|id
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
comment|/**      * @return the listsContainer      */
specifier|public
name|IndexRootContainer
name|getListsContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|listsContainer
return|;
block|}
comment|/**      * @return the mapsContainer      */
specifier|public
name|IndexRootContainer
name|getMapsContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|mapsContainer
return|;
block|}
specifier|public
specifier|synchronized
name|DataManager
name|getDataManager
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|DataManager
name|dm
init|=
operator|(
name|DataManager
operator|)
name|dataManagers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dm
operator|==
literal|null
condition|)
block|{
name|dm
operator|=
operator|new
name|DataManager
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|dm
operator|.
name|setMaxFileLength
argument_list|(
name|maxDataFileLength
argument_list|)
expr_stmt|;
name|dm
operator|.
name|setUseAsyncWriter
argument_list|(
name|isUseAsyncWriter
argument_list|()
argument_list|)
expr_stmt|;
name|recover
argument_list|(
name|dm
argument_list|)
expr_stmt|;
name|dataManagers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|dm
argument_list|)
expr_stmt|;
block|}
return|return
name|dm
return|;
block|}
specifier|public
specifier|synchronized
name|IndexManager
name|getIndexManager
parameter_list|(
name|DataManager
name|dm
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexManager
name|im
init|=
operator|(
name|IndexManager
operator|)
name|indexManagers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|im
operator|==
literal|null
condition|)
block|{
name|im
operator|=
operator|new
name|IndexManager
argument_list|(
name|directory
argument_list|,
name|name
argument_list|,
name|mode
argument_list|,
name|logIndexChanges
condition|?
name|dm
else|:
literal|null
argument_list|)
expr_stmt|;
name|indexManagers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|im
argument_list|)
expr_stmt|;
block|}
return|return
name|im
return|;
block|}
specifier|private
name|void
name|recover
parameter_list|(
specifier|final
name|DataManager
name|dm
parameter_list|)
throws|throws
name|IOException
block|{
name|dm
operator|.
name|recoverRedoItems
argument_list|(
operator|new
name|RedoListener
argument_list|()
block|{
specifier|public
name|void
name|onRedoItem
parameter_list|(
name|StoreLocation
name|item
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|Exception
block|{
name|RedoStoreIndexItem
name|redo
init|=
operator|(
name|RedoStoreIndexItem
operator|)
name|o
decl_stmt|;
comment|// IndexManager im = getIndexManager(dm, redo.getIndexName());
name|IndexManager
name|im
init|=
name|getIndexManager
argument_list|(
name|dm
argument_list|,
name|dm
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|im
operator|.
name|redo
argument_list|(
name|redo
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isLogIndexChanges
parameter_list|()
block|{
return|return
name|logIndexChanges
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setLogIndexChanges
parameter_list|(
name|boolean
name|logIndexChanges
parameter_list|)
block|{
name|this
operator|.
name|logIndexChanges
operator|=
name|logIndexChanges
expr_stmt|;
block|}
comment|/**      * @return the maxDataFileLength      */
specifier|public
specifier|synchronized
name|long
name|getMaxDataFileLength
parameter_list|()
block|{
return|return
name|maxDataFileLength
return|;
block|}
comment|/**      * @param maxDataFileLength      *            the maxDataFileLength to set      */
specifier|public
specifier|synchronized
name|void
name|setMaxDataFileLength
parameter_list|(
name|long
name|maxDataFileLength
parameter_list|)
block|{
name|this
operator|.
name|maxDataFileLength
operator|=
name|maxDataFileLength
expr_stmt|;
block|}
comment|/**      * @see org.apache.activemq.kaha.IndexTypes      * @return the default index type      */
specifier|public
specifier|synchronized
name|String
name|getIndexType
parameter_list|()
block|{
return|return
name|indexType
return|;
block|}
comment|/**      * Set the default index type      *       * @param type      * @see org.apache.activemq.kaha.IndexTypes      */
specifier|public
specifier|synchronized
name|void
name|setIndexType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|IndexTypes
operator|.
name|DISK_INDEX
argument_list|)
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|IndexTypes
operator|.
name|IN_MEMORY_INDEX
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown IndexType: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Store has been closed."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Kaha Store using data directory "
operator|+
name|directory
argument_list|)
expr_stmt|;
name|DataManager
name|defaultDM
init|=
name|getDataManager
argument_list|(
name|DEFAULT_CONTAINER_NAME
argument_list|)
decl_stmt|;
name|rootIndexManager
operator|=
name|getIndexManager
argument_list|(
name|defaultDM
argument_list|,
name|DEFAULT_CONTAINER_NAME
argument_list|)
expr_stmt|;
name|IndexItem
name|mapRoot
init|=
operator|new
name|IndexItem
argument_list|()
decl_stmt|;
name|IndexItem
name|listRoot
init|=
operator|new
name|IndexItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootIndexManager
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapRoot
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rootIndexManager
operator|.
name|storeIndex
argument_list|(
name|mapRoot
argument_list|)
expr_stmt|;
name|listRoot
operator|.
name|setOffset
argument_list|(
name|IndexItem
operator|.
name|INDEX_SIZE
argument_list|)
expr_stmt|;
name|rootIndexManager
operator|.
name|storeIndex
argument_list|(
name|listRoot
argument_list|)
expr_stmt|;
name|rootIndexManager
operator|.
name|setLength
argument_list|(
name|IndexItem
operator|.
name|INDEX_SIZE
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapRoot
operator|=
name|rootIndexManager
operator|.
name|getIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|listRoot
operator|=
name|rootIndexManager
operator|.
name|getIndex
argument_list|(
name|IndexItem
operator|.
name|INDEX_SIZE
argument_list|)
expr_stmt|;
block|}
name|lock
argument_list|()
expr_stmt|;
name|mapsContainer
operator|=
operator|new
name|IndexRootContainer
argument_list|(
name|mapRoot
argument_list|,
name|rootIndexManager
argument_list|,
name|defaultDM
argument_list|)
expr_stmt|;
name|listsContainer
operator|=
operator|new
name|IndexRootContainer
argument_list|(
name|listRoot
argument_list|,
name|rootIndexManager
argument_list|,
name|defaultDM
argument_list|)
expr_stmt|;
comment|/**              * Add interest in data files - then consolidate them              */
name|generateInterestInMapDataFiles
argument_list|()
expr_stmt|;
name|generateInterestInListDataFiles
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dataManagers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DataManager
name|dm
init|=
operator|(
name|DataManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|dm
operator|.
name|consolidateDataFiles
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|lock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|disableLocking
operator|&&
name|directory
operator|!=
literal|null
operator|&&
name|lock
operator|==
literal|null
condition|)
block|{
name|Set
name|set
init|=
name|getVmLockSet
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|set
init|)
block|{
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|set
operator|.
name|add
argument_list|(
name|directory
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|StoreLockedExcpetion
argument_list|(
literal|"Kaha Store "
operator|+
name|directory
operator|.
name|getName
argument_list|()
operator|+
literal|" is already opened by this application."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|brokenFileLock
condition|)
block|{
name|lock
operator|=
name|rootIndexManager
operator|.
name|getLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|set
operator|.
name|remove
argument_list|(
name|directory
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoreLockedExcpetion
argument_list|(
literal|"Kaha Store "
operator|+
name|directory
operator|.
name|getName
argument_list|()
operator|+
literal|"  is already opened by another application"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|unlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|disableLocking
operator|&&
name|directory
operator|!=
literal|null
condition|)
block|{
name|Set
name|set
init|=
name|getVmLockSet
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|set
init|)
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|remove
argument_list|(
name|directory
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|lock
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
literal|"The store is closed"
argument_list|)
throw|;
block|}
block|}
specifier|static
specifier|private
name|Set
name|getVmLockSet
parameter_list|()
block|{
if|if
condition|(
name|lockSet
operator|==
literal|null
condition|)
block|{
name|Properties
name|properties
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|properties
init|)
block|{
name|lockSet
operator|=
operator|(
name|Set
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"org.apache.activemq.kaha.impl.KahaStore"
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockSet
operator|==
literal|null
condition|)
block|{
name|lockSet
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_PREFIX
argument_list|,
name|lockSet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lockSet
return|;
block|}
comment|/**      * scans the directory and builds up the IndexManager and DataManager      * @throws IOException       */
specifier|private
name|void
name|generateInterestInListDataFiles
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|listsContainer
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ContainerId
name|id
init|=
operator|(
name|ContainerId
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DataManager
name|dm
init|=
name|getDataManager
argument_list|(
name|id
operator|.
name|getDataContainerName
argument_list|()
argument_list|)
decl_stmt|;
name|IndexManager
name|im
init|=
name|getIndexManager
argument_list|(
name|dm
argument_list|,
name|id
operator|.
name|getDataContainerName
argument_list|()
argument_list|)
decl_stmt|;
name|IndexItem
name|theRoot
init|=
name|listsContainer
operator|.
name|getRoot
argument_list|(
name|im
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|long
name|nextItem
init|=
name|theRoot
operator|.
name|getNextItem
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextItem
operator|!=
name|Item
operator|.
name|POSITION_NOT_SET
condition|)
block|{
name|IndexItem
name|item
init|=
name|im
operator|.
name|getIndex
argument_list|(
name|nextItem
argument_list|)
decl_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|nextItem
argument_list|)
expr_stmt|;
name|dm
operator|.
name|addInterestInFile
argument_list|(
name|item
operator|.
name|getKeyFile
argument_list|()
argument_list|)
expr_stmt|;
name|dm
operator|.
name|addInterestInFile
argument_list|(
name|item
operator|.
name|getValueFile
argument_list|()
argument_list|)
expr_stmt|;
name|nextItem
operator|=
name|item
operator|.
name|getNextItem
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * scans the directory and builds up the IndexManager and DataManager      *       * @throws IOException      */
specifier|private
name|void
name|generateInterestInMapDataFiles
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|mapsContainer
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ContainerId
name|id
init|=
operator|(
name|ContainerId
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DataManager
name|dm
init|=
name|getDataManager
argument_list|(
name|id
operator|.
name|getDataContainerName
argument_list|()
argument_list|)
decl_stmt|;
name|IndexManager
name|im
init|=
name|getIndexManager
argument_list|(
name|dm
argument_list|,
name|id
operator|.
name|getDataContainerName
argument_list|()
argument_list|)
decl_stmt|;
name|IndexItem
name|theRoot
init|=
name|mapsContainer
operator|.
name|getRoot
argument_list|(
name|im
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|long
name|nextItem
init|=
name|theRoot
operator|.
name|getNextItem
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextItem
operator|!=
name|Item
operator|.
name|POSITION_NOT_SET
condition|)
block|{
name|IndexItem
name|item
init|=
name|im
operator|.
name|getIndex
argument_list|(
name|nextItem
argument_list|)
decl_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|nextItem
argument_list|)
expr_stmt|;
name|dm
operator|.
name|addInterestInFile
argument_list|(
name|item
operator|.
name|getKeyFile
argument_list|()
argument_list|)
expr_stmt|;
name|dm
operator|.
name|addInterestInFile
argument_list|(
name|item
operator|.
name|getValueFile
argument_list|()
argument_list|)
expr_stmt|;
name|nextItem
operator|=
name|item
operator|.
name|getNextItem
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|isUseAsyncWriter
parameter_list|()
block|{
return|return
name|useAsyncWriter
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setUseAsyncWriter
parameter_list|(
name|boolean
name|useAsyncWriter
parameter_list|)
block|{
name|this
operator|.
name|useAsyncWriter
operator|=
name|useAsyncWriter
expr_stmt|;
block|}
block|}
end_class

end_unit

