begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerInvocationHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|TopicView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|TopicViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|util
operator|.
name|JmxMBeansUtil
import|;
end_import

begin_class
specifier|public
class|class
name|DstatCommand
extends|extends
name|AbstractJmxCommand
block|{
specifier|private
specifier|static
specifier|final
name|String
name|queryString
init|=
literal|"type=Broker,brokerName=*,destinationType=%1,destinationName=*,*"
decl_stmt|;
specifier|protected
name|String
index|[]
name|helpFile
init|=
operator|new
name|String
index|[]
block|{
literal|"Task Usage: activemq-admin dstat [dstat-options] [destination-type]"
block|,
literal|"Description: Performs a predefined query that displays useful statistics regarding the specified ."
block|,
literal|"             destination type (Queues or Topics) and displays those results in a tabular format."
block|,
literal|"             If no broker name is specified, it will try and select from all registered brokers."
block|,
literal|""
block|,
literal|"dstat Options:"
block|,
literal|"    --jmxurl<url>                Set the JMX URL to connect to."
block|,
literal|"    --pid<pid>                   Set the pid to connect to (only on Sun JVM)."
block|,
literal|"    --jmxuser<user>              Set the JMX user used for authenticating."
block|,
literal|"    --jmxpassword<password>      Set the JMX password used for authenticating."
block|,
literal|"    --jmxlocal                    Use the local JMX server instead of a remote one."
block|,
literal|"    --version                     Display the version information."
block|,
literal|"    -h,-?,--help                  Display the query broker help information."
block|,
literal|""
block|,
literal|"Examples:"
block|,
literal|"    activemq-admin dstat queues"
block|,
literal|"        - Display a tabular summary of statistics for the queues on the broker."
block|,
literal|"    activemq-admin dstat topics"
block|,
literal|"        - Display a tabular summary of statistics for the queues on the broker."
block|}
decl_stmt|;
comment|/**      * Execute the dstat command, which allows you to display information for topics or queue in      * a tabular format.      *      * @param tokens - command arguments      * @throws Exception      */
annotation|@
name|Override
specifier|protected
name|void
name|runTask
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|tokens
operator|.
name|contains
argument_list|(
literal|"topics"
argument_list|)
condition|)
block|{
name|displayTopicStats
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokens
operator|.
name|contains
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|displayQueueStats
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|displayAllDestinations
argument_list|()
expr_stmt|;
block|}
comment|// Iterate through the queue names
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|printException
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to execute dstat task. Reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|displayAllDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
name|JmxMBeansUtil
operator|.
name|createQueryString
argument_list|(
name|queryString
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|List
name|queueList
init|=
name|JmxMBeansUtil
operator|.
name|queryMBeans
argument_list|(
name|createJmxConnection
argument_list|()
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
name|header
init|=
literal|"%-50s  %10s  %10s  %10s  %10s  %10s  %10s"
decl_stmt|;
specifier|final
name|String
name|tableRow
init|=
literal|"%-50s  %10d  %10d  %10d  %10d  %10d  %10d"
decl_stmt|;
comment|// sort list so the names is A..Z
name|Collections
operator|.
name|sort
argument_list|(
name|queueList
argument_list|,
operator|new
name|ObjectInstanceComparator
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|header
argument_list|,
literal|"Name"
argument_list|,
literal|"Queue Size"
argument_list|,
literal|"Producer #"
argument_list|,
literal|"Consumer #"
argument_list|,
literal|"Enqueue #"
argument_list|,
literal|"Dequeue #"
argument_list|,
literal|"Forward #"
argument_list|,
literal|"Memory %"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Iterate through the queue result
for|for
control|(
name|Object
name|view
range|:
name|queueList
control|)
block|{
name|ObjectInstance
name|obj
init|=
operator|(
name|ObjectInstance
operator|)
name|view
decl_stmt|;
if|if
condition|(
operator|!
name|filterMBeans
argument_list|(
name|obj
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ObjectName
name|queueName
init|=
name|obj
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|QueueViewMBean
name|queueView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|createJmxConnection
argument_list|()
argument_list|,
name|queueName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|context
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|tableRow
argument_list|,
name|queueView
operator|.
name|getName
argument_list|()
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|,
name|queueView
operator|.
name|getProducerCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getConsumerCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getDequeueCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getForwardCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|displayQueueStats
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
name|JmxMBeansUtil
operator|.
name|createQueryString
argument_list|(
name|queryString
argument_list|,
literal|"Queue"
argument_list|)
decl_stmt|;
name|List
name|queueList
init|=
name|JmxMBeansUtil
operator|.
name|queryMBeans
argument_list|(
name|createJmxConnection
argument_list|()
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
name|header
init|=
literal|"%-50s  %10s  %10s  %10s  %10s  %10s  %10s"
decl_stmt|;
specifier|final
name|String
name|tableRow
init|=
literal|"%-50s  %10d  %10d  %10d  %10d  %10d  %10d"
decl_stmt|;
name|context
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|header
argument_list|,
literal|"Name"
argument_list|,
literal|"Queue Size"
argument_list|,
literal|"Producer #"
argument_list|,
literal|"Consumer #"
argument_list|,
literal|"Enqueue #"
argument_list|,
literal|"Dequeue #"
argument_list|,
literal|"Forward #"
argument_list|,
literal|"Memory %"
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|queueList
argument_list|,
operator|new
name|ObjectInstanceComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Iterate through the queue result
for|for
control|(
name|Object
name|view
range|:
name|queueList
control|)
block|{
name|ObjectInstance
name|obj
init|=
operator|(
name|ObjectInstance
operator|)
name|view
decl_stmt|;
if|if
condition|(
operator|!
name|filterMBeans
argument_list|(
name|obj
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ObjectName
name|queueName
init|=
name|obj
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|QueueViewMBean
name|queueView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|createJmxConnection
argument_list|()
argument_list|,
name|queueName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|context
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|tableRow
argument_list|,
name|queueView
operator|.
name|getName
argument_list|()
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|,
name|queueView
operator|.
name|getProducerCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getConsumerCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getDequeueCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getForwardCount
argument_list|()
argument_list|,
name|queueView
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|displayTopicStats
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
name|JmxMBeansUtil
operator|.
name|createQueryString
argument_list|(
name|queryString
argument_list|,
literal|"Topic"
argument_list|)
decl_stmt|;
name|List
name|topicsList
init|=
name|JmxMBeansUtil
operator|.
name|queryMBeans
argument_list|(
name|createJmxConnection
argument_list|()
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
name|header
init|=
literal|"%-50s  %10s  %10s  %10s  %10s  %10s  %10s"
decl_stmt|;
specifier|final
name|String
name|tableRow
init|=
literal|"%-50s  %10d  %10d  %10d  %10d  %10d  %10d"
decl_stmt|;
comment|// sort list so the names is A..Z
name|Collections
operator|.
name|sort
argument_list|(
name|topicsList
argument_list|,
operator|new
name|ObjectInstanceComparator
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|header
argument_list|,
literal|"Name"
argument_list|,
literal|"Queue Size"
argument_list|,
literal|"Producer #"
argument_list|,
literal|"Consumer #"
argument_list|,
literal|"Enqueue #"
argument_list|,
literal|"Dequeue #"
argument_list|,
literal|"Forward #"
argument_list|,
literal|"Memory %"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Iterate through the topics result
for|for
control|(
name|Object
name|view
range|:
name|topicsList
control|)
block|{
name|ObjectInstance
name|obj
init|=
operator|(
name|ObjectInstance
operator|)
name|view
decl_stmt|;
if|if
condition|(
operator|!
name|filterMBeans
argument_list|(
name|obj
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ObjectName
name|topicName
init|=
name|obj
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|TopicViewMBean
name|topicView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|createJmxConnection
argument_list|()
argument_list|,
name|topicName
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|context
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|tableRow
argument_list|,
name|topicView
operator|.
name|getName
argument_list|()
argument_list|,
name|topicView
operator|.
name|getQueueSize
argument_list|()
argument_list|,
name|topicView
operator|.
name|getProducerCount
argument_list|()
argument_list|,
name|topicView
operator|.
name|getConsumerCount
argument_list|()
argument_list|,
name|topicView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|,
name|topicView
operator|.
name|getDequeueCount
argument_list|()
argument_list|,
name|topicView
operator|.
name|getForwardCount
argument_list|()
argument_list|,
name|topicView
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"dstat"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOneLineDescription
parameter_list|()
block|{
return|return
literal|"Performs a predefined query that displays useful tabular statistics regarding the specified destination type"
return|;
block|}
comment|/**      * Print the help messages for this command      */
annotation|@
name|Override
specifier|protected
name|void
name|printHelp
parameter_list|()
block|{
name|context
operator|.
name|printHelp
argument_list|(
name|helpFile
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|filterMBeans
parameter_list|(
name|ObjectInstance
name|obj
parameter_list|)
block|{
name|String
name|className
init|=
name|obj
operator|.
name|getClassName
argument_list|()
decl_stmt|;
return|return
name|className
operator|.
name|equals
argument_list|(
name|QueueView
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|TopicView
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ObjectInstanceComparator
implements|implements
name|Comparator
argument_list|<
name|ObjectInstance
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ObjectInstance
name|o1
parameter_list|,
name|ObjectInstance
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getObjectName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getObjectName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

