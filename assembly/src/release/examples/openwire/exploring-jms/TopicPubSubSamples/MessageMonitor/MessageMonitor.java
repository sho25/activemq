begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * © 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.   Sample Application  Writing a Basic JMS Application Using     Subscribe  When you run this program, it will subscribe to any group of messages specified in a properties file. [See comments in MessageMonitor.properties for information on this file.]  Every message topic being monitored will be displayed to a Java window.  Usage:   java MessageMonitor  Suggested demonstration:   - Start one instance of this application:         java MessageMonitor   - Run one or more Chat and/or DurableChat window(s).   - Enter messages on the various chat windows.   - Watch the MessageMonitor display the messages. */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Highlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|DefaultHighlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|CompoundBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|EmptyBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|BevelBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|SoftBevelBorder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
specifier|public
class|class
name|MessageMonitor
extends|extends
name|JFrame
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PROPERTIES_FILE
init|=
literal|"MessageMonitor.properties"
decl_stmt|;
name|String
name|propertiesFile
init|=
name|DEFAULT_PROPERTIES_FILE
decl_stmt|;
name|String
name|brokerHostPort
init|=
literal|"localhost"
decl_stmt|;
name|String
name|connectID
init|=
literal|"MessageMonitor"
decl_stmt|;
name|String
name|userID
init|=
literal|"Administrator"
decl_stmt|;
name|String
name|subscriptionTopics
init|=
literal|"jms.samples.chat"
decl_stmt|;
name|String
name|textFontName
init|=
literal|"Dialog"
decl_stmt|;
name|String
name|textFontStyle
init|=
literal|"PLAIN"
decl_stmt|;
name|String
name|textFontSize
init|=
literal|"12"
decl_stmt|;
name|String
name|title
init|=
literal|"MessageMonitor"
decl_stmt|;
name|JTextArea
name|textArea
init|=
operator|new
name|JTextArea
argument_list|()
decl_stmt|;
name|JScrollPane
name|scrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|textArea
argument_list|)
decl_stmt|;
name|JButton
name|clearButton
init|=
operator|new
name|JButton
argument_list|(
literal|"Clear"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|user
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_USER
decl_stmt|;
specifier|private
name|String
name|password
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_PASSWORD
decl_stmt|;
specifier|private
name|String
name|url
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_BROKER_URL
decl_stmt|;
comment|/** Constructor for MessageMonitor window. */
specifier|public
name|MessageMonitor
parameter_list|()
block|{
name|loadProperties
argument_list|()
expr_stmt|;
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
comment|// Connect to Message Broker
try|try
block|{
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
name|factory
decl_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|(
name|userID
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot connect to Broker"
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Subscribe to Topics
name|StringTokenizer
name|topics
init|=
operator|new
name|StringTokenizer
argument_list|(
name|subscriptionTopics
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|topics
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|topicName
init|=
name|topics
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Subscribing to: "
operator|+
name|topicName
argument_list|)
expr_stmt|;
operator|new
name|Subscription
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Set up the viewing area.
name|textArea
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setBorder
argument_list|(
operator|new
name|CompoundBorder
argument_list|(
operator|new
name|EmptyBorder
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|,
operator|new
name|SoftBevelBorder
argument_list|(
name|BevelBorder
operator|.
name|LOWERED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|scrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|clearButton
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|clearButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|OnClear
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start the connection so that we can now receive messages.
try|try
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot start connection"
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Class to handle the subsciption to messages. */
specifier|public
class|class
name|Subscription
implements|implements
name|javax
operator|.
name|jms
operator|.
name|MessageListener
block|{
specifier|public
name|Subscription
parameter_list|(
name|Topic
name|topic
parameter_list|)
block|{
try|try
block|{
name|topicSubscriber
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|topicSubscriber
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**         * Handle the text message         * (as specified in the javax.jms.MessageListener interface).         */
specifier|public
name|void
name|onMessage
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
parameter_list|)
block|{
name|String
name|msgBody
init|=
literal|null
decl_stmt|;
name|String
name|msgClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|javax
operator|.
name|jms
operator|.
name|TextMessage
condition|)
block|{
name|msgClass
operator|=
literal|"javax.jms.TextMessage"
expr_stmt|;
try|try
block|{
name|msgBody
operator|=
operator|(
operator|(
name|javax
operator|.
name|jms
operator|.
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|msgBody
operator|=
literal|""
expr_stmt|;
block|}
block|}
else|else
block|{
return|return;
block|}
try|try
block|{
name|textArea
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|textArea
operator|.
name|append
argument_list|(
literal|"-----------------------------------------------------------------------------------------------------\n"
argument_list|)
expr_stmt|;
comment|// textArea.append("Class: " + msgClass + "\n");
name|textArea
operator|.
name|append
argument_list|(
literal|"The following message, received on topic "
operator|+
operator|(
operator|(
name|Topic
operator|)
name|message
operator|.
name|getJMSDestination
argument_list|()
operator|)
operator|.
name|getTopicName
argument_list|()
operator|+
literal|", was sent by\n"
argument_list|)
expr_stmt|;
comment|//textArea.append("\n");
name|textArea
operator|.
name|append
argument_list|(
name|msgBody
argument_list|)
expr_stmt|;
comment|// Ensure Appended Text is Visible
name|Rectangle
name|area
init|=
name|textArea
operator|.
name|modelToView
argument_list|(
name|textArea
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|!=
literal|null
condition|)
name|textArea
operator|.
name|scrollRectToVisible
argument_list|(
name|area
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|ble
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|MessageConsumer
name|topicSubscriber
init|=
literal|null
decl_stmt|;
block|}
comment|//
comment|// NOTE: the remainder of this sample deals with reading arguments
comment|// and does not utilize any JMS classes or code.
comment|//
comment|/** Main program entry point. */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// There should be no arguments to this program.
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|MessageMonitor
name|messageMonitor
init|=
operator|new
name|MessageMonitor
argument_list|()
decl_stmt|;
name|messageMonitor
operator|.
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Dimension
name|screenSize
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getScreenSize
argument_list|()
decl_stmt|;
name|screenSize
operator|.
name|height
operator|=
name|screenSize
operator|.
name|height
operator|/
literal|2
expr_stmt|;
name|screenSize
operator|.
name|width
operator|=
name|screenSize
operator|.
name|width
operator|/
literal|2
expr_stmt|;
name|messageMonitor
operator|.
name|setSize
argument_list|(
name|screenSize
argument_list|)
expr_stmt|;
name|messageMonitor
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Prints the usage. */
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|StringBuffer
name|use
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"\nusage: MessageMonitor\n\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"Properties for this sample can be set in a properties file.\n"
argument_list|)
expr_stmt|;
name|String
name|dfltFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"propertiesFile"
argument_list|,
name|DEFAULT_PROPERTIES_FILE
argument_list|)
decl_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"[Default file: "
operator|+
name|dfltFile
operator|+
literal|"]\n\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|use
argument_list|)
expr_stmt|;
block|}
comment|/** Load the window and JMS properties from a file. */
specifier|private
name|void
name|loadProperties
parameter_list|()
block|{
try|try
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|propertiesFile
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"propertiesFile"
argument_list|,
name|propertiesFile
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|propertiesFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connection Properties
name|brokerHostPort
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"brokerHostPort"
argument_list|,
name|brokerHostPort
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|connectID
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"connectID"
argument_list|,
name|connectID
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|userID
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"userID"
argument_list|,
name|userID
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|password
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Subscription Properties
name|subscriptionTopics
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"subscriptionTopics"
argument_list|,
name|subscriptionTopics
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Text Properties
name|textFontName
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"textFontName"
argument_list|,
name|textFontName
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|textFontStyle
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"textFontSize"
argument_list|,
name|textFontStyle
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|textFontSize
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"textFontSize"
argument_list|,
name|textFontSize
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Window Properties
name|title
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|propertiesFile
operator|+
literal|" not found: using defaults"
argument_list|)
expr_stmt|;
comment|// Use Defaults
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Class to handle the "Clear" button action. */
specifier|public
class|class
name|OnClear
implements|implements
name|ActionListener
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
name|textArea
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

