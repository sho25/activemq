begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|FunctionCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_comment
comment|/**  * Filter function that creates a list with each argument being one element in the list.  * For example:  *<p/>  *<p style="margin-left: 4em">  * MAKELIST( '1', '2', '3' )  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|makeListFunction
implements|implements
name|FilterFunction
block|{
comment|/**      * Check whether the given expression is a valid call of this function.  Any number of arguments is accepted.      *      * @param    expr - the expression consisting of a call to this function.      * @return true - if the expression is valid; false - otherwise.      */
specifier|public
name|boolean
name|isValid
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Indicate that this function never evaluates to a Boolean result.      *      * @param    expr - the expression consisting of a call to this function.      * @return false - this Filter Function never evaluates to a Boolean.      */
specifier|public
name|boolean
name|returnsBoolean
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Evalutate the given expression, which consists of a call to this function, in the context given.  Creates      * a list containing the evaluated results of its argument expressions.      *      * @param    expr - the expression consisting of a call to this function.      * @param    message_ctx - the context in which the call is being evaluated.      * @return java.util.List - the result of the evaluation.      */
specifier|public
name|Object
name|evaluate
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|,
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|javax
operator|.
name|jms
operator|.
name|JMSException
block|{
name|java
operator|.
name|util
operator|.
name|ArrayList
name|ele_arr
decl_stmt|;
name|int
name|num_arg
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|num_arg
operator|=
name|expr
operator|.
name|getNumArguments
argument_list|()
expr_stmt|;
name|ele_arr
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|(
name|num_arg
argument_list|)
expr_stmt|;
name|cur
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|cur
operator|<
name|num_arg
condition|)
block|{
name|ele_arr
operator|.
name|add
argument_list|(
name|expr
operator|.
name|getArgument
argument_list|(
name|cur
argument_list|)
operator|.
name|evaluate
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|cur
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|java
operator|.
name|util
operator|.
name|List
operator|)
name|ele_arr
return|;
block|}
block|}
end_class

end_unit

