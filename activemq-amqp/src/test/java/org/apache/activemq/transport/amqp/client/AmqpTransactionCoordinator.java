begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TransactionRolledBackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|AsyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Rejected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Coordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Declare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Declared
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Discharge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|TxnCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|DeliveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ReceiverSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|SenderSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Delivery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents the AMQP Transaction coordinator link used by the transaction context  * of a session to control the lifetime of a given transaction.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpTransactionCoordinator
extends|extends
name|AmqpAbstractResource
argument_list|<
name|Sender
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpTransactionCoordinator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|OUTBOUND_BUFFER
init|=
operator|new
name|byte
index|[
literal|64
index|]
decl_stmt|;
specifier|private
specifier|final
name|AmqpSession
name|session
decl_stmt|;
specifier|private
specifier|final
name|AmqpTransferTagGenerator
name|tagGenerator
init|=
operator|new
name|AmqpTransferTagGenerator
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Delivery
argument_list|>
name|pendingDeliveries
init|=
operator|new
name|LinkedList
argument_list|<
name|Delivery
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|AmqpTransactionId
argument_list|,
name|AsyncResult
argument_list|>
name|pendingRequests
init|=
operator|new
name|HashMap
argument_list|<
name|AmqpTransactionId
argument_list|,
name|AsyncResult
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AmqpTransactionCoordinator
parameter_list|(
name|AmqpSession
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processDeliveryUpdates
parameter_list|(
name|AmqpConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Iterator
argument_list|<
name|Delivery
argument_list|>
name|deliveries
init|=
name|pendingDeliveries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|deliveries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Delivery
name|pendingDelivery
init|=
name|deliveries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pendingDelivery
operator|.
name|remotelySettled
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|DeliveryState
name|state
init|=
name|pendingDelivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
name|AmqpTransactionId
name|txId
init|=
operator|(
name|AmqpTransactionId
operator|)
name|pendingDelivery
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|AsyncResult
name|pendingRequest
init|=
name|pendingRequests
operator|.
name|get
argument_list|(
name|txId
argument_list|)
decl_stmt|;
if|if
condition|(
name|pendingRequest
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Pending tx operation with no pending request"
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|instanceof
name|Declared
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New TX started: {}"
argument_list|,
name|txId
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
name|Declared
name|declared
init|=
operator|(
name|Declared
operator|)
name|state
decl_stmt|;
name|txId
operator|.
name|setRemoteTxId
argument_list|(
name|declared
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
name|pendingRequest
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Rejected
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Last TX request failed: {}"
argument_list|,
name|txId
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
name|Rejected
name|rejected
init|=
operator|(
name|Rejected
operator|)
name|state
decl_stmt|;
name|Exception
name|cause
init|=
name|AmqpSupport
operator|.
name|convertToException
argument_list|(
name|rejected
operator|.
name|getError
argument_list|()
argument_list|)
decl_stmt|;
name|JMSException
name|failureCause
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|txId
operator|.
name|isCommit
argument_list|()
condition|)
block|{
name|failureCause
operator|=
operator|new
name|TransactionRolledBackException
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failureCause
operator|=
operator|new
name|JMSException
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pendingRequest
operator|.
name|onFailure
argument_list|(
name|failureCause
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Last TX request succeeded: {}"
argument_list|,
name|txId
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
name|pendingRequest
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
comment|// Clear state data
name|pendingDelivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|pendingRequests
operator|.
name|remove
argument_list|(
name|txId
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
name|deliveries
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|processDeliveryUpdates
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|declare
parameter_list|(
name|AmqpTransactionId
name|txId
parameter_list|,
name|AsyncResult
name|request
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|txId
operator|.
name|getRemoteTxId
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Declar called while a TX is still Active."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|request
operator|.
name|onFailure
argument_list|(
operator|new
name|JMSException
argument_list|(
literal|"Cannot start new transaction: Coordinator remotely closed"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|Declare
name|declare
init|=
operator|new
name|Declare
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|declare
argument_list|)
argument_list|)
expr_stmt|;
name|Delivery
name|pendingDelivery
init|=
name|getEndpoint
argument_list|()
operator|.
name|delivery
argument_list|(
name|tagGenerator
operator|.
name|getNextTag
argument_list|()
argument_list|)
decl_stmt|;
name|pendingDelivery
operator|.
name|setContext
argument_list|(
name|txId
argument_list|)
expr_stmt|;
comment|// Store away for completion
name|pendingDeliveries
operator|.
name|add
argument_list|(
name|pendingDelivery
argument_list|)
expr_stmt|;
name|pendingRequests
operator|.
name|put
argument_list|(
name|txId
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|sendTxCommand
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|discharge
parameter_list|(
name|AmqpTransactionId
name|txId
parameter_list|,
name|AsyncResult
name|request
parameter_list|,
name|boolean
name|commit
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
name|Exception
name|failureCause
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commit
condition|)
block|{
name|failureCause
operator|=
operator|new
name|TransactionRolledBackException
argument_list|(
literal|"Transaction inbout: Coordinator remotely closed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failureCause
operator|=
operator|new
name|JMSException
argument_list|(
literal|"Rollback cannot complete: Coordinator remotely closed"
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|onFailure
argument_list|(
name|failureCause
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Store the context of this action in the transaction ID for later completion.
name|txId
operator|.
name|setState
argument_list|(
name|commit
condition|?
name|AmqpTransactionId
operator|.
name|COMMIT_MARKER
else|:
name|AmqpTransactionId
operator|.
name|ROLLBACK_MARKER
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|Discharge
name|discharge
init|=
operator|new
name|Discharge
argument_list|()
decl_stmt|;
name|discharge
operator|.
name|setFail
argument_list|(
operator|!
name|commit
argument_list|)
expr_stmt|;
name|discharge
operator|.
name|setTxnId
argument_list|(
operator|(
name|Binary
operator|)
name|txId
operator|.
name|getRemoteTxId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|discharge
argument_list|)
argument_list|)
expr_stmt|;
name|Delivery
name|pendingDelivery
init|=
name|getEndpoint
argument_list|()
operator|.
name|delivery
argument_list|(
name|tagGenerator
operator|.
name|getNextTag
argument_list|()
argument_list|)
decl_stmt|;
name|pendingDelivery
operator|.
name|setContext
argument_list|(
name|txId
argument_list|)
expr_stmt|;
comment|// Store away for completion
name|pendingDeliveries
operator|.
name|add
argument_list|(
name|pendingDelivery
argument_list|)
expr_stmt|;
name|pendingRequests
operator|.
name|put
argument_list|(
name|txId
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|sendTxCommand
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|//----- Base class overrides ---------------------------------------------//
annotation|@
name|Override
specifier|public
name|void
name|remotelyClosed
parameter_list|(
name|AmqpConnection
name|connection
parameter_list|)
block|{
name|Exception
name|txnError
init|=
name|AmqpSupport
operator|.
name|convertToException
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getRemoteCondition
argument_list|()
argument_list|)
decl_stmt|;
comment|// Alert any pending operation that the link failed to complete the pending
comment|// begin / commit / rollback operation.
for|for
control|(
name|AsyncResult
name|pendingRequest
range|:
name|pendingRequests
operator|.
name|values
argument_list|()
control|)
block|{
name|pendingRequest
operator|.
name|onFailure
argument_list|(
name|txnError
argument_list|)
expr_stmt|;
block|}
comment|// Purge linkages to pending operations.
name|pendingDeliveries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Override the base class version because we do not want to propagate
comment|// an error up to the client if remote close happens as that is an
comment|// acceptable way for the remote to indicate the discharge could not
comment|// be applied.
if|if
condition|(
name|getEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transaction Coordinator link {} was remotely closed"
argument_list|,
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//----- Internal implementation ------------------------------------------//
specifier|private
name|void
name|sendTxCommand
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|encodedSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|OUTBOUND_BUFFER
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|encodedSize
operator|=
name|message
operator|.
name|encode
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|BufferOverflowException
name|e
parameter_list|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|length
operator|*
literal|2
index|]
expr_stmt|;
block|}
block|}
name|Sender
name|sender
init|=
name|getEndpoint
argument_list|()
decl_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|encodedSize
argument_list|)
expr_stmt|;
name|sender
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOpen
parameter_list|()
block|{
name|Coordinator
name|coordinator
init|=
operator|new
name|Coordinator
argument_list|()
decl_stmt|;
name|coordinator
operator|.
name|setCapabilities
argument_list|(
name|TxnCapability
operator|.
name|LOCAL_TXN
argument_list|)
expr_stmt|;
name|Source
name|source
init|=
operator|new
name|Source
argument_list|()
decl_stmt|;
name|String
name|coordinatorName
init|=
literal|"qpid-jms:coordinator:"
operator|+
name|session
operator|.
name|getConnection
argument_list|()
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
name|Sender
name|sender
init|=
name|session
operator|.
name|getEndpoint
argument_list|()
operator|.
name|sender
argument_list|(
name|coordinatorName
argument_list|)
decl_stmt|;
name|sender
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setTarget
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setSenderSettleMode
argument_list|(
name|SenderSettleMode
operator|.
name|UNSETTLED
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setReceiverSettleMode
argument_list|(
name|ReceiverSettleMode
operator|.
name|FIRST
argument_list|)
expr_stmt|;
name|setEndpoint
argument_list|(
name|sender
argument_list|)
expr_stmt|;
name|super
operator|.
name|doOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOpenInspection
parameter_list|()
block|{
comment|// TODO
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doClosedInspection
parameter_list|()
block|{
comment|// TODO
block|}
block|}
end_class

end_unit

