begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|https
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|http
operator|.
name|HttpClientTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|util
operator|.
name|TextWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|RegistryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|HttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|socket
operator|.
name|ConnectionSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|DefaultHostnameVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|SSLConnectionSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingHttpClientConnectionManager
import|;
end_import

begin_class
specifier|public
class|class
name|HttpsClientTransport
extends|extends
name|HttpClientTransport
block|{
specifier|public
name|HttpsClientTransport
parameter_list|(
name|TextWireFormat
name|wireFormat
parameter_list|,
name|URI
name|remoteUrl
parameter_list|)
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|remoteUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|HttpClientConnectionManager
name|createClientConnectionManager
parameter_list|()
block|{
return|return
operator|new
name|PoolingHttpClientConnectionManager
argument_list|(
name|createRegistry
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Registry
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|createRegistry
parameter_list|()
block|{
name|RegistryBuilder
argument_list|<
name|ConnectionSocketFactory
argument_list|>
name|registryBuilder
init|=
name|RegistryBuilder
operator|.
expr|<
name|ConnectionSocketFactory
operator|>
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|SSLConnectionSocketFactory
name|sslConnectionFactory
init|=
operator|new
name|SSLConnectionSocketFactory
argument_list|(
name|createSocketFactory
argument_list|()
argument_list|,
operator|new
name|DefaultHostnameVerifier
argument_list|()
argument_list|)
decl_stmt|;
name|registryBuilder
operator|.
name|register
argument_list|(
literal|"https"
argument_list|,
name|sslConnectionFactory
argument_list|)
expr_stmt|;
return|return
name|registryBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failure trying to create scheme registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a new SSL SocketFactory. The given factory will use user-provided      * key and trust managers (if the user provided them).      *      * @return Newly created (Ssl)SocketFactory.      * @throws IOException      */
specifier|protected
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
name|createSocketFactory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|SslContext
operator|.
name|getCurrentSslContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SslContext
name|ctx
init|=
name|SslContext
operator|.
name|getCurrentSslContext
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|ctx
operator|.
name|getSSLContext
argument_list|()
operator|.
name|getSocketFactory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
operator|)
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getSystemPropertyPrefix
parameter_list|()
block|{
return|return
literal|"https."
return|;
block|}
block|}
end_class

end_unit

