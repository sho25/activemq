begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|MemConsumer
extends|extends
name|MemMessageIdList
implements|implements
name|MessageListener
block|{
specifier|static
name|long
name|ctr
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|long
name|counter
decl_stmt|;
specifier|protected
name|boolean
name|isParent
decl_stmt|;
specifier|protected
name|boolean
name|inOrder
init|=
literal|true
decl_stmt|;
specifier|public
name|MemConsumer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MemConsumer
parameter_list|(
name|ConnectionFactory
name|fac
parameter_list|,
name|Destination
name|dest
parameter_list|,
name|String
name|consumerName
parameter_list|)
throws|throws
name|JMSException
block|{
name|connection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|instanceof
name|Topic
operator|&&
name|consumerName
operator|!=
literal|null
operator|&&
name|consumerName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|consumer
operator|=
name|s
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|dest
argument_list|,
name|consumerName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|=
name|s
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MemConsumer
parameter_list|(
name|ConnectionFactory
name|fac
parameter_list|,
name|Destination
name|dest
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
argument_list|(
name|fac
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|JMSException
block|{
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|shutDown
parameter_list|()
throws|throws
name|JMSException
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Message
name|receive
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|consumer
operator|.
name|receive
argument_list|()
return|;
block|}
specifier|public
name|Message
name|receive
parameter_list|(
name|long
name|wait
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|consumer
operator|.
name|receive
argument_list|(
name|wait
argument_list|)
return|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|super
operator|.
name|onMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|isParent
condition|)
block|{
try|try
block|{
name|long
name|ctr
init|=
name|msg
operator|.
name|getLongProperty
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
name|ctr
condition|)
block|{
name|inOrder
operator|=
literal|false
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isInOrder
parameter_list|()
block|{
return|return
name|inOrder
return|;
block|}
specifier|public
name|void
name|setAsParent
parameter_list|(
name|boolean
name|isParent
parameter_list|)
block|{
name|this
operator|.
name|isParent
operator|=
name|isParent
expr_stmt|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|()
block|{
return|return
name|this
operator|.
name|isParent
return|;
block|}
block|}
end_class

end_unit

