begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|plist
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PListTest
block|{
specifier|private
name|PListStore
name|store
decl_stmt|;
specifier|private
name|PList
name|plist
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAddLast
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|plist
operator|.
name|size
argument_list|()
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteSequence
name|bs
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|origStr
init|=
operator|new
name|String
argument_list|(
name|bs
operator|.
name|getData
argument_list|()
argument_list|,
name|bs
operator|.
name|getOffset
argument_list|()
argument_list|,
name|bs
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|PListEntry
name|entry
init|=
name|plist
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|String
name|plistString
init|=
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|origStr
argument_list|,
name|plistString
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFirst
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addFirst
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|plist
operator|.
name|size
argument_list|()
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|plist
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ByteSequence
name|bs
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|origStr
init|=
operator|new
name|String
argument_list|(
name|bs
operator|.
name|getData
argument_list|()
argument_list|,
name|bs
operator|.
name|getOffset
argument_list|()
argument_list|,
name|bs
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|PListEntry
name|entry
init|=
name|plist
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|String
name|plistString
init|=
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|origStr
argument_list|,
name|plistString
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestRemove
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doTestRemove
parameter_list|(
specifier|final
name|int
name|COUNT
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|plist
operator|.
name|size
argument_list|()
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|PListEntry
name|entry
init|=
name|plist
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|plist
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|=
name|plist
operator|.
name|getFirst
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDestroy
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRemove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|plist
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDestroyNonEmpty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|plist
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"no first entry"
argument_list|,
name|plist
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSecond
parameter_list|()
throws|throws
name|Exception
block|{
name|plist
operator|.
name|addLast
argument_list|(
literal|"First"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"A"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
literal|"Second"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"B"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|"Second"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|"First"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|"doesNotExist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSecondPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|plist
operator|.
name|addLast
argument_list|(
literal|"First"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"A"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
literal|"Second"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"B"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|1024
operator|*
literal|5
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ByteSequence
name|payload
init|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|Vector
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|numLists
init|=
literal|10
decl_stmt|;
specifier|final
name|PList
index|[]
name|lists
init|=
operator|new
name|PList
index|[
name|numLists
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
name|lists
index|[
name|i
index|]
operator|=
name|store
operator|.
name|getPList
argument_list|(
literal|"List"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|100
argument_list|)
decl_stmt|;
class|class
name|A
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|PList
name|candidate
init|=
name|lists
index|[
name|i
operator|%
name|numLists
index|]
decl_stmt|;
name|candidate
operator|.
name|addLast
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|PListEntry
name|entry
init|=
name|candidate
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|candidate
operator|.
name|remove
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
class|class
name|B
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|PList
name|candidate
init|=
name|lists
index|[
name|i
operator|%
name|numLists
index|]
decl_stmt|;
name|candidate
operator|.
name|addLast
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|PListEntry
name|entry
init|=
name|candidate
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|candidate
operator|.
name|remove
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions"
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
literal|"target/test/PlistDB"
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|startStore
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startStore
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|plist
operator|=
name|store
operator|.
name|getPList
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

