begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * The SimpleQueueReceiver class consists only of a main method,  * which fetches one or more messages from a queue using  * synchronous message delivery.  Run this program in conjunction  * with SimpleQueueSender.  Specify a queue name on the command  * line when you run the program.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|demo
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueReceiver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleQueueReceiver
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
name|log
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimpleQueueReceiver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Main method.      *      * @param args the queue used by the example      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|queueName
init|=
literal|null
decl_stmt|;
name|Context
name|jndiContext
init|=
literal|null
decl_stmt|;
name|QueueConnectionFactory
name|queueConnectionFactory
init|=
literal|null
decl_stmt|;
name|QueueConnection
name|queueConnection
init|=
literal|null
decl_stmt|;
name|QueueSession
name|queueSession
init|=
literal|null
decl_stmt|;
name|Queue
name|queue
init|=
literal|null
decl_stmt|;
name|QueueReceiver
name|queueReceiver
init|=
literal|null
decl_stmt|;
name|TextMessage
name|message
init|=
literal|null
decl_stmt|;
comment|/*          * Read queue name from command line and display it.          */
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Usage: java "
operator|+
literal|"SimpleQueueReceiver<queue-name>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|queueName
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Queue name is "
operator|+
name|queueName
argument_list|)
expr_stmt|;
comment|/*          * Create a JNDI API InitialContext object if none exists          * yet.          */
try|try
block|{
name|jndiContext
operator|=
operator|new
name|InitialContext
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Could not create JNDI API "
operator|+
literal|"context: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*          * Look up connection factory and queue.  If either does          * not exist, exit.          */
try|try
block|{
name|queueConnectionFactory
operator|=
operator|(
name|QueueConnectionFactory
operator|)
name|jndiContext
operator|.
name|lookup
argument_list|(
literal|"QueueConnectionFactory"
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|(
name|Queue
operator|)
name|jndiContext
operator|.
name|lookup
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"JNDI API lookup failed: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*          * Create connection.          * Create session from connection; false means session is          * not transacted.          * Create receiver, then start message delivery.          * Receive all text messages from queue until          * a non-text message is received indicating end of          * message stream.          * Close connection.          */
try|try
block|{
name|queueConnection
operator|=
name|queueConnectionFactory
operator|.
name|createQueueConnection
argument_list|()
expr_stmt|;
name|queueSession
operator|=
name|queueConnection
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|queueReceiver
operator|=
name|queueSession
operator|.
name|createReceiver
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|queueConnection
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Message
name|m
init|=
name|queueReceiver
operator|.
name|receive
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|TextMessage
condition|)
block|{
name|message
operator|=
operator|(
name|TextMessage
operator|)
name|m
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Reading message: "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Exception occurred: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|queueConnection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|queueConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{                 }
block|}
block|}
block|}
block|}
end_class

end_unit

