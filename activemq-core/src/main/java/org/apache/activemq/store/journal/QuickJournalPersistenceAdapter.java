begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|InvalidRecordLocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|JournalEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|RecordLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalQueueAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalTopicAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|journal
operator|.
name|QuickJournalTransactionStore
operator|.
name|Tx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|journal
operator|.
name|QuickJournalTransactionStore
operator|.
name|TxOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link PersistenceAdapter} designed for use with a  * {@link Journal} and then check pointing asynchronously on a timeout with some  * other long term persistent storage.  *   * @org.apache.xbean.XBean  *   * @version $Revision: 1.17 $  */
end_comment

begin_class
specifier|public
class|class
name|QuickJournalPersistenceAdapter
implements|implements
name|PersistenceAdapter
implements|,
name|JournalEventListener
implements|,
name|UsageListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QuickJournalPersistenceAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Journal
name|journal
decl_stmt|;
specifier|private
specifier|final
name|PersistenceAdapter
name|longTermPersistence
decl_stmt|;
specifier|final
name|UsageManager
name|usageManager
decl_stmt|;
specifier|private
specifier|final
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
name|queues
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
name|topics
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|long
name|checkpointInterval
init|=
literal|1000
operator|*
literal|60
operator|*
literal|5
decl_stmt|;
specifier|private
name|long
name|lastCheckpointRequest
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lastCleanup
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxCheckpointWorkers
init|=
literal|10
decl_stmt|;
specifier|private
name|int
name|maxCheckpointMessageAddSize
init|=
literal|5000
decl_stmt|;
specifier|private
name|QuickJournalTransactionStore
name|transactionStore
init|=
operator|new
name|QuickJournalTransactionStore
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|checkpointExecutor
decl_stmt|;
specifier|private
name|TaskRunner
name|checkpointTask
decl_stmt|;
specifier|private
name|CountDownLatch
name|nextCheckpointCountDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|fullCheckPoint
decl_stmt|;
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|periodicCheckpointTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|lastCheckpointRequest
operator|+
name|checkpointInterval
condition|)
block|{
name|checkpoint
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
name|QuickJournalPersistenceAdapter
parameter_list|(
name|Journal
name|journal
parameter_list|,
name|PersistenceAdapter
name|longTermPersistence
parameter_list|,
name|UsageManager
name|memManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|journal
operator|=
name|journal
expr_stmt|;
name|journal
operator|.
name|setJournalEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|checkpointTask
operator|=
name|taskRunnerFactory
operator|.
name|createTaskRunner
argument_list|(
operator|new
name|Task
argument_list|()
block|{
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
return|return
name|doCheckpoint
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|longTermPersistence
operator|=
name|longTermPersistence
expr_stmt|;
name|this
operator|.
name|usageManager
operator|=
name|memManager
expr_stmt|;
block|}
specifier|public
name|Set
name|getDestinations
parameter_list|()
block|{
name|Set
name|destinations
init|=
name|longTermPersistence
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
name|destinations
operator|.
name|addAll
argument_list|(
name|queues
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|addAll
argument_list|(
name|topics
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinations
return|;
block|}
specifier|private
name|MessageStore
name|createMessageStore
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
return|return
name|createQueueMessageStore
argument_list|(
operator|(
name|ActiveMQQueue
operator|)
name|destination
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createTopicMessageStore
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|destination
argument_list|)
return|;
block|}
block|}
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|QuickJournalMessageStore
name|store
init|=
operator|(
name|QuickJournalMessageStore
operator|)
name|queues
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|MessageStore
name|checkpointStore
init|=
name|longTermPersistence
operator|.
name|createQueueMessageStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|QuickJournalMessageStore
argument_list|(
name|this
argument_list|,
name|checkpointStore
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destinationName
parameter_list|)
throws|throws
name|IOException
block|{
name|QuickJournalTopicMessageStore
name|store
init|=
operator|(
name|QuickJournalTopicMessageStore
operator|)
name|topics
operator|.
name|get
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|TopicMessageStore
name|checkpointStore
init|=
name|longTermPersistence
operator|.
name|createTopicMessageStore
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|QuickJournalTopicMessageStore
argument_list|(
name|this
argument_list|,
name|checkpointStore
argument_list|,
name|destinationName
argument_list|)
expr_stmt|;
name|topics
operator|.
name|put
argument_list|(
name|destinationName
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|public
name|TransactionStore
name|createTransactionStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|transactionStore
return|;
block|}
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|longTermPersistence
operator|.
name|getLastMessageBrokerSequenceId
argument_list|()
return|;
block|}
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|longTermPersistence
operator|.
name|beginTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|longTermPersistence
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|longTermPersistence
operator|.
name|rollbackTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
return|return;
name|longTermPersistence
operator|.
name|setUseExternalMessageReferences
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkpointExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|maxCheckpointWorkers
argument_list|,
name|maxCheckpointWorkers
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runable
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|runable
argument_list|,
literal|"Journal checkpoint worker"
argument_list|)
decl_stmt|;
name|t
operator|.
name|setPriority
argument_list|(
literal|7
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|checkpointExecutor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|usageManager
operator|.
name|addUsageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|longTermPersistence
operator|instanceof
name|JDBCPersistenceAdapter
condition|)
block|{
comment|// Disabled periodic clean up as it deadlocks with the checkpoint
comment|// operations.
operator|(
operator|(
name|JDBCPersistenceAdapter
operator|)
name|longTermPersistence
operator|)
operator|.
name|setCleanupPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|longTermPersistence
operator|.
name|start
argument_list|()
expr_stmt|;
name|createTransactionStore
argument_list|()
expr_stmt|;
name|recover
argument_list|()
expr_stmt|;
comment|// Do a checkpoint periodically.
name|Scheduler
operator|.
name|executePeriodically
argument_list|(
name|periodicCheckpointTask
argument_list|,
name|checkpointInterval
operator|/
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
return|return;
name|Scheduler
operator|.
name|cancel
argument_list|(
name|periodicCheckpointTask
argument_list|)
expr_stmt|;
comment|// Take one final checkpoint and stop checkpoint processing.
name|checkpoint
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkpointTask
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|checkpointExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|queues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|topics
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IOException
name|firstException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|firstException
operator|=
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to close journals: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|longTermPersistence
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|firstException
throw|;
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|PersistenceAdapter
name|getLongTermPersistence
parameter_list|()
block|{
return|return
name|longTermPersistence
return|;
block|}
comment|/**      * @return Returns the wireFormat.      */
specifier|public
name|WireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|wireFormat
return|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * The Journal give us a call back so that we can move old data out of the      * journal. Taking a checkpoint does this for us.      *       * @see org.apache.activemq.journal.JournalEventListener#overflowNotification(org.apache.activemq.journal.RecordLocation)      */
specifier|public
name|void
name|overflowNotification
parameter_list|(
name|RecordLocation
name|safeLocation
parameter_list|)
block|{
name|checkpoint
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * When we checkpoint we move all the journalled data to long term storage.      * @param stopping       *       * @param b      */
specifier|public
name|void
name|checkpoint
parameter_list|(
name|boolean
name|sync
parameter_list|,
name|boolean
name|fullCheckpoint
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|journal
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Journal is closed."
argument_list|)
throw|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|latch
operator|=
name|nextCheckpointCountDownLatch
expr_stmt|;
name|lastCheckpointRequest
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|fullCheckpoint
condition|)
block|{
name|this
operator|.
name|fullCheckPoint
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|checkpointTask
operator|.
name|wakeup
argument_list|()
expr_stmt|;
if|if
condition|(
name|sync
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Waking for checkpoint to complete."
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Request to start checkpoint failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This does the actual checkpoint.      * @return       */
specifier|public
name|boolean
name|doCheckpoint
parameter_list|()
block|{
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
name|boolean
name|fullCheckpoint
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|latch
operator|=
name|nextCheckpointCountDownLatch
expr_stmt|;
name|nextCheckpointCountDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fullCheckpoint
operator|=
name|this
operator|.
name|fullCheckPoint
expr_stmt|;
name|this
operator|.
name|fullCheckPoint
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Checkpoint started."
argument_list|)
expr_stmt|;
name|RecordLocation
name|newMark
init|=
literal|null
decl_stmt|;
name|ArrayList
name|futureTasks
init|=
operator|new
name|ArrayList
argument_list|(
name|queues
operator|.
name|size
argument_list|()
operator|+
name|topics
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//
comment|// We do many partial checkpoints (fullCheckpoint==false) to move topic messages
comment|// to long term store as soon as possible.
comment|//
comment|// We want to avoid doing that for queue messages since removes the come in the same
comment|// checkpoint cycle will nullify the previous message add.  Therefore, we only
comment|// checkpoint queues on the fullCheckpoint cycles.
comment|//
if|if
condition|(
name|fullCheckpoint
condition|)
block|{
name|Iterator
name|iterator
init|=
name|queues
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|QuickJournalMessageStore
name|ms
init|=
operator|(
name|QuickJournalMessageStore
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|FutureTask
name|task
init|=
operator|new
name|FutureTask
argument_list|(
operator|new
name|Callable
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ms
operator|.
name|checkpoint
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|futureTasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|checkpointExecutor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to checkpoint a message store: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
name|iterator
init|=
name|topics
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|QuickJournalTopicMessageStore
name|ms
init|=
operator|(
name|QuickJournalTopicMessageStore
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|FutureTask
name|task
init|=
operator|new
name|FutureTask
argument_list|(
operator|new
name|Callable
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ms
operator|.
name|checkpoint
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|futureTasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|checkpointExecutor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to checkpoint a message store: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|futureTasks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FutureTask
name|ft
init|=
operator|(
name|FutureTask
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|RecordLocation
name|mark
init|=
operator|(
name|RecordLocation
operator|)
name|ft
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// We only set a newMark on full checkpoints.
if|if
condition|(
name|fullCheckpoint
condition|)
block|{
if|if
condition|(
name|mark
operator|!=
literal|null
operator|&&
operator|(
name|newMark
operator|==
literal|null
operator|||
name|newMark
operator|.
name|compareTo
argument_list|(
name|mark
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|newMark
operator|=
name|mark
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to checkpoint a message store: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fullCheckpoint
condition|)
block|{
try|try
block|{
if|if
condition|(
name|newMark
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Marking journal at: "
operator|+
name|newMark
argument_list|)
expr_stmt|;
name|journal
operator|.
name|setMark
argument_list|(
name|newMark
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to mark the Journal: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|longTermPersistence
operator|instanceof
name|JDBCPersistenceAdapter
condition|)
block|{
comment|// We may be check pointing more often than the checkpointInterval if under high use
comment|// But we don't want to clean up the db that often.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|lastCleanup
operator|+
name|checkpointInterval
condition|)
block|{
name|lastCleanup
operator|=
name|now
expr_stmt|;
operator|(
operator|(
name|JDBCPersistenceAdapter
operator|)
name|longTermPersistence
operator|)
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Checkpoint done."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
return|return
name|this
operator|.
name|fullCheckPoint
return|;
block|}
block|}
comment|/**      * @param location      * @return      * @throws IOException      */
specifier|public
name|DataStructure
name|readCommand
parameter_list|(
name|RecordLocation
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|org
operator|.
name|activeio
operator|.
name|Packet
name|data
init|=
name|journal
operator|.
name|read
argument_list|(
name|location
argument_list|)
decl_stmt|;
return|return
operator|(
name|DataStructure
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidRecordLocationException
name|e
parameter_list|)
block|{
throw|throw
name|createReadException
argument_list|(
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|createReadException
argument_list|(
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Move all the messages that were in the journal into long term storage. We      * just replay and do a checkpoint.      *       * @throws IOException      * @throws IOException      * @throws InvalidRecordLocationException      * @throws IllegalStateException      */
specifier|private
name|void
name|recover
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|InvalidRecordLocationException
throws|,
name|IOException
throws|,
name|IOException
block|{
name|RecordLocation
name|pos
init|=
literal|null
decl_stmt|;
name|int
name|transactionCounter
init|=
literal|0
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Journal Recovery Started."
argument_list|)
expr_stmt|;
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
comment|// While we have records in the journal.
while|while
condition|(
operator|(
name|pos
operator|=
name|journal
operator|.
name|getNextRecordLocation
argument_list|(
name|pos
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|activeio
operator|.
name|Packet
name|data
init|=
name|journal
operator|.
name|read
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|DataStructure
name|c
init|=
operator|(
name|DataStructure
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|Message
condition|)
block|{
name|Message
name|message
init|=
operator|(
name|Message
operator|)
name|c
decl_stmt|;
name|QuickJournalMessageStore
name|store
init|=
operator|(
name|QuickJournalMessageStore
operator|)
name|createMessageStore
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|transactionStore
operator|.
name|addMessage
argument_list|(
name|store
argument_list|,
name|message
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|replayAddMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|transactionCounter
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|c
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|JournalQueueAck
operator|.
name|DATA_STRUCTURE_TYPE
case|:
block|{
name|JournalQueueAck
name|command
init|=
operator|(
name|JournalQueueAck
operator|)
name|c
decl_stmt|;
name|QuickJournalMessageStore
name|store
init|=
operator|(
name|QuickJournalMessageStore
operator|)
name|createMessageStore
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getMessageAck
argument_list|()
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|transactionStore
operator|.
name|removeMessage
argument_list|(
name|store
argument_list|,
name|command
operator|.
name|getMessageAck
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|replayRemoveMessage
argument_list|(
name|context
argument_list|,
name|command
operator|.
name|getMessageAck
argument_list|()
argument_list|)
expr_stmt|;
name|transactionCounter
operator|++
expr_stmt|;
block|}
block|}
break|break;
case|case
name|JournalTopicAck
operator|.
name|DATA_STRUCTURE_TYPE
case|:
block|{
name|JournalTopicAck
name|command
init|=
operator|(
name|JournalTopicAck
operator|)
name|c
decl_stmt|;
name|QuickJournalTopicMessageStore
name|store
init|=
operator|(
name|QuickJournalTopicMessageStore
operator|)
name|createMessageStore
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getTransactionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|transactionStore
operator|.
name|acknowledge
argument_list|(
name|store
argument_list|,
name|command
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|replayAcknowledge
argument_list|(
name|context
argument_list|,
name|command
operator|.
name|getClientId
argument_list|()
argument_list|,
name|command
operator|.
name|getSubscritionName
argument_list|()
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|transactionCounter
operator|++
expr_stmt|;
block|}
block|}
break|break;
case|case
name|JournalTransaction
operator|.
name|DATA_STRUCTURE_TYPE
case|:
block|{
name|JournalTransaction
name|command
init|=
operator|(
name|JournalTransaction
operator|)
name|c
decl_stmt|;
try|try
block|{
comment|// Try to replay the packet.
switch|switch
condition|(
name|command
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|JournalTransaction
operator|.
name|XA_PREPARE
case|:
name|transactionStore
operator|.
name|replayPrepare
argument_list|(
name|command
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JournalTransaction
operator|.
name|XA_COMMIT
case|:
case|case
name|JournalTransaction
operator|.
name|LOCAL_COMMIT
case|:
name|Tx
name|tx
init|=
name|transactionStore
operator|.
name|replayCommit
argument_list|(
name|command
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|command
operator|.
name|getWasPrepared
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
break|break;
comment|// We may be trying to replay a commit that
comment|// was already committed.
comment|// Replay the committed operations.
for|for
control|(
name|Iterator
name|iter
init|=
name|tx
operator|.
name|getOperations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TxOperation
name|op
init|=
operator|(
name|TxOperation
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|operationType
operator|==
name|TxOperation
operator|.
name|ADD_OPERATION_TYPE
condition|)
block|{
name|op
operator|.
name|store
operator|.
name|replayAddMessage
argument_list|(
name|context
argument_list|,
operator|(
name|Message
operator|)
name|op
operator|.
name|data
argument_list|,
name|op
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|operationType
operator|==
name|TxOperation
operator|.
name|REMOVE_OPERATION_TYPE
condition|)
block|{
name|op
operator|.
name|store
operator|.
name|replayRemoveMessage
argument_list|(
name|context
argument_list|,
operator|(
name|MessageAck
operator|)
name|op
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|operationType
operator|==
name|TxOperation
operator|.
name|ACK_OPERATION_TYPE
condition|)
block|{
name|JournalTopicAck
name|ack
init|=
operator|(
name|JournalTopicAck
operator|)
name|op
operator|.
name|data
decl_stmt|;
operator|(
operator|(
name|QuickJournalTopicMessageStore
operator|)
name|op
operator|.
name|store
operator|)
operator|.
name|replayAcknowledge
argument_list|(
name|context
argument_list|,
name|ack
operator|.
name|getClientId
argument_list|()
argument_list|,
name|ack
operator|.
name|getSubscritionName
argument_list|()
argument_list|,
name|ack
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|transactionCounter
operator|++
expr_stmt|;
break|break;
case|case
name|JournalTransaction
operator|.
name|LOCAL_ROLLBACK
case|:
case|case
name|JournalTransaction
operator|.
name|XA_ROLLBACK
case|:
name|transactionStore
operator|.
name|replayRollback
argument_list|(
name|command
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Recovery Failure: Could not replay: "
operator|+
name|c
operator|+
literal|", reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|JournalTrace
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|JournalTrace
name|trace
init|=
operator|(
name|JournalTrace
operator|)
name|c
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"TRACE Entry: "
operator|+
name|trace
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|log
operator|.
name|error
argument_list|(
literal|"Unknown type of record in transaction log which will be discarded: "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|RecordLocation
name|location
init|=
name|writeTraceMessage
argument_list|(
literal|"RECOVERED"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|journal
operator|.
name|setMark
argument_list|(
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Journal Recovered: "
operator|+
name|transactionCounter
operator|+
literal|" message(s) in transactions recovered."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IOException
name|createReadException
parameter_list|(
name|RecordLocation
name|location
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to read to journal for: "
operator|+
name|location
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|protected
name|IOException
name|createWriteException
parameter_list|(
name|DataStructure
name|packet
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to write to journal for: "
operator|+
name|packet
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|protected
name|IOException
name|createWriteException
parameter_list|(
name|String
name|command
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to write to journal for command: "
operator|+
name|command
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|protected
name|IOException
name|createRecoveryFailedException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to recover from journal. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|/**      *       * @param command      * @param sync      * @return      * @throws IOException      */
specifier|public
name|RecordLocation
name|writeCommand
parameter_list|(
name|DataStructure
name|command
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
return|return
name|journal
operator|.
name|write
argument_list|(
name|wireFormat
operator|.
name|marshal
argument_list|(
name|command
argument_list|)
argument_list|,
name|sync
argument_list|)
return|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"closed"
argument_list|)
throw|;
block|}
specifier|private
name|RecordLocation
name|writeTraceMessage
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|JournalTrace
name|trace
init|=
operator|new
name|JournalTrace
argument_list|()
decl_stmt|;
name|trace
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|writeCommand
argument_list|(
name|trace
argument_list|,
name|sync
argument_list|)
return|;
block|}
specifier|public
name|void
name|onMemoryUseChanged
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|int
name|oldPercentUsage
parameter_list|,
name|int
name|newPercentUsage
parameter_list|)
block|{
if|if
condition|(
name|newPercentUsage
operator|>
literal|80
operator|&&
name|oldPercentUsage
operator|<
name|newPercentUsage
condition|)
block|{
name|checkpoint
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|QuickJournalTransactionStore
name|getTransactionStore
parameter_list|()
block|{
return|return
name|transactionStore
return|;
block|}
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|JournalTrace
name|trace
init|=
operator|new
name|JournalTrace
argument_list|()
decl_stmt|;
name|trace
operator|.
name|setMessage
argument_list|(
literal|"DELETED"
argument_list|)
expr_stmt|;
name|RecordLocation
name|location
init|=
name|journal
operator|.
name|write
argument_list|(
name|wireFormat
operator|.
name|marshal
argument_list|(
name|trace
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|journal
operator|.
name|setMark
argument_list|(
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Journal deleted: "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|longTermPersistence
operator|.
name|setUseExternalMessageReferences
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|longTermPersistence
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
specifier|public
name|UsageManager
name|getUsageManager
parameter_list|()
block|{
return|return
name|usageManager
return|;
block|}
specifier|public
name|int
name|getMaxCheckpointMessageAddSize
parameter_list|()
block|{
return|return
name|maxCheckpointMessageAddSize
return|;
block|}
specifier|public
name|void
name|setMaxCheckpointMessageAddSize
parameter_list|(
name|int
name|maxCheckpointMessageAddSize
parameter_list|)
block|{
name|this
operator|.
name|maxCheckpointMessageAddSize
operator|=
name|maxCheckpointMessageAddSize
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxCheckpointWorkers
parameter_list|()
block|{
return|return
name|maxCheckpointWorkers
return|;
block|}
specifier|public
name|void
name|setMaxCheckpointWorkers
parameter_list|(
name|int
name|maxCheckpointWorkers
parameter_list|)
block|{
name|this
operator|.
name|maxCheckpointWorkers
operator|=
name|maxCheckpointWorkers
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseExternalMessageReferences
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setUseExternalMessageReferences
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The journal does not support message references."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

