begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryMessageStoreQueueCursorTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MemoryMessageStoreQueueCursorTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue-"
operator|+
name|MemoryMessageStoreQueueCursorTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
specifier|final
specifier|static
name|String
name|mesageIdRoot
init|=
literal|"11111:22222:0:"
decl_stmt|;
specifier|final
name|int
name|messageBytesSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|String
name|text
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
name|messageBytesSize
index|]
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|BrokerService
argument_list|()
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testRecoverNextMessages2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MemoryMessageStore
name|queueMessageStore
init|=
operator|new
name|MemoryMessageStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
operator|new
name|DestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|Queue
name|queue
init|=
operator|new
name|Queue
argument_list|(
name|brokerService
argument_list|,
name|destination
argument_list|,
name|queueMessageStore
argument_list|,
name|destinationStatistics
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|queueMessageStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|queueMessageStore
operator|.
name|registerIndexListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|QueueStorePrefetch
name|myCursor
init|=
operator|new
name|QueueStorePrefetch
argument_list|(
name|queue
argument_list|,
name|brokerService
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
name|SystemUsage
name|systemUsage
init|=
operator|new
name|SystemUsage
argument_list|()
decl_stmt|;
comment|// ensure memory limit is reached
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
name|messageBytesSize
operator|*
literal|5
argument_list|)
expr_stmt|;
name|myCursor
operator|.
name|setSystemUsage
argument_list|(
name|systemUsage
argument_list|)
expr_stmt|;
name|myCursor
operator|.
name|setEnableAudit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|myCursor
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cache enabled"
argument_list|,
name|myCursor
operator|.
name|isUseCache
argument_list|()
operator|&&
name|myCursor
operator|.
name|isCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQTextMessage
name|msg0
init|=
name|getMessage
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|msg0
operator|.
name|setMemoryUsage
argument_list|(
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
name|queueMessageStore
operator|.
name|addMessage
argument_list|(
literal|null
argument_list|,
name|msg0
argument_list|)
expr_stmt|;
name|myCursor
operator|.
name|addMessageLast
argument_list|(
name|msg0
argument_list|)
expr_stmt|;
name|msg0
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|myCursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageReference
name|ref
init|=
name|myCursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received message: {} with body: ({})"
argument_list|,
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|,
operator|(
operator|(
name|ActiveMQTextMessage
operator|)
name|ref
operator|.
name|getMessage
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|//simulate send ack to store to remove message
name|myCursor
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|queueMessageStore
operator|.
name|removeMessage
argument_list|(
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// simulate full memory (from other resources) such that caching stops
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|increaseUsage
argument_list|(
name|messageBytesSize
operator|*
literal|10
argument_list|)
expr_stmt|;
name|ActiveMQTextMessage
name|msg1
init|=
name|getMessage
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|msg1
operator|.
name|setMemoryUsage
argument_list|(
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
name|queueMessageStore
operator|.
name|addMessage
argument_list|(
literal|null
argument_list|,
name|msg1
argument_list|)
expr_stmt|;
name|myCursor
operator|.
name|addMessageLast
argument_list|(
name|msg1
argument_list|)
expr_stmt|;
name|msg1
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
name|boolean
name|b
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|b
condition|)
block|{
if|if
condition|(
name|myCursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageReference
name|ref
init|=
name|myCursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received message: {} with body: ({})"
argument_list|,
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|,
operator|(
operator|(
name|ActiveMQTextMessage
operator|)
name|ref
operator|.
name|getMessage
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|//simulate send ack to store to remove message
name|myCursor
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|queueMessageStore
operator|.
name|removeMessage
argument_list|(
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|b
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ActiveMQTextMessage
name|getMessage
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|MessageId
name|id
init|=
operator|new
name|MessageId
argument_list|(
name|mesageIdRoot
operator|+
name|i
argument_list|)
decl_stmt|;
name|id
operator|.
name|setBrokerSequenceId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|id
operator|.
name|setProducerSequenceId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Msg:"
operator|+
name|i
operator|+
literal|" "
operator|+
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

