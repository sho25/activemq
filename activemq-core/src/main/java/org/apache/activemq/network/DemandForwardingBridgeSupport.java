begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|KeepAliveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|NetworkBridgeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|DefaultTransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|FutureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportDisposedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MarshallingSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A useful base class for implementing demand forwarding bridges.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DemandForwardingBridgeSupport
implements|implements
name|NetworkBridge
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DemandForwardingBridge
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadPoolExecutor
name|ASYNC_TASKS
decl_stmt|;
specifier|protected
specifier|final
name|Transport
name|localBroker
decl_stmt|;
specifier|protected
specifier|final
name|Transport
name|remoteBroker
decl_stmt|;
specifier|protected
specifier|final
name|IdGenerator
name|idGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|protected
name|ConnectionInfo
name|localConnectionInfo
decl_stmt|;
specifier|protected
name|ConnectionInfo
name|remoteConnectionInfo
decl_stmt|;
specifier|protected
name|SessionInfo
name|localSessionInfo
decl_stmt|;
specifier|protected
name|ProducerInfo
name|producerInfo
decl_stmt|;
specifier|protected
name|String
name|remoteBrokerName
init|=
literal|"Unknown"
decl_stmt|;
specifier|protected
name|String
name|localClientId
decl_stmt|;
specifier|protected
name|ConsumerInfo
name|demandConsumerInfo
decl_stmt|;
specifier|protected
name|int
name|demandConsumerDispatched
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|localBridgeStarted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|remoteBridgeStarted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|disposed
decl_stmt|;
specifier|protected
name|BrokerId
name|localBrokerId
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|excludedDestinations
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|dynamicallyIncludedDestinations
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|staticallyIncludedDestinations
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|durableDestinations
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|DemandSubscription
argument_list|>
name|subscriptionMapByLocalId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|DemandSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|DemandSubscription
argument_list|>
name|subscriptionMapByRemoteId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|DemandSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|BrokerId
name|localBrokerPath
index|[]
init|=
operator|new
name|BrokerId
index|[]
block|{
literal|null
block|}
decl_stmt|;
specifier|protected
name|CountDownLatch
name|startedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|CountDownLatch
name|localStartedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|protected
name|CountDownLatch
name|remoteBrokerNameKnownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|remoteInterupted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|lastConnectSucceeded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|NetworkBridgeConfiguration
name|configuration
decl_stmt|;
specifier|final
name|AtomicLong
name|enqueueCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|dequeueCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|NetworkBridgeListener
name|networkBridgeListener
decl_stmt|;
specifier|private
name|boolean
name|createdByDuplex
decl_stmt|;
specifier|private
name|BrokerInfo
name|localBrokerInfo
decl_stmt|;
specifier|private
name|BrokerInfo
name|remoteBrokerInfo
decl_stmt|;
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|TransportConnection
name|duplexInitiatingConnection
decl_stmt|;
specifier|public
name|DemandForwardingBridgeSupport
parameter_list|(
name|NetworkBridgeConfiguration
name|configuration
parameter_list|,
name|Transport
name|localBroker
parameter_list|,
name|Transport
name|remoteBroker
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|localBroker
operator|=
name|localBroker
expr_stmt|;
name|this
operator|.
name|remoteBroker
operator|=
name|remoteBroker
expr_stmt|;
block|}
specifier|public
name|void
name|duplexStart
parameter_list|(
name|TransportConnection
name|connection
parameter_list|,
name|BrokerInfo
name|localBrokerInfo
parameter_list|,
name|BrokerInfo
name|remoteBrokerInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|localBrokerInfo
operator|=
name|localBrokerInfo
expr_stmt|;
name|this
operator|.
name|remoteBrokerInfo
operator|=
name|remoteBrokerInfo
expr_stmt|;
name|this
operator|.
name|duplexInitiatingConnection
operator|=
name|connection
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|serviceRemoteCommand
argument_list|(
name|remoteBrokerInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|localBroker
operator|.
name|setTransportListener
argument_list|(
operator|new
name|DefaultTransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
name|serviceLocalCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|serviceLocalException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
name|serviceRemoteCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|serviceRemoteException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{
comment|// clear any subscriptions - to try and prevent the bridge
comment|// from stalling the broker
if|if
condition|(
name|remoteInterupted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Outbound transport to "
operator|+
name|remoteBrokerName
operator|+
literal|" interrupted."
argument_list|)
expr_stmt|;
if|if
condition|(
name|localBridgeStarted
operator|.
name|get
argument_list|()
condition|)
block|{
name|clearDownSubscriptions
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|DemandForwardingBridgeSupport
operator|.
name|this
init|)
block|{
try|try
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
name|localConnectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportDisposedIOException
name|td
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"local broker is now disposed"
argument_list|,
name|td
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception from local start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|localBridgeStarted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBridgeStarted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|startedLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|localStartedLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{
if|if
condition|(
name|remoteInterupted
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// We want to slow down false connects so that we don't
comment|// get in a busy loop.
comment|// False connects can occurr if you using SSH tunnels.
if|if
condition|(
operator|!
name|lastConnectSucceeded
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Previous connection was never fully established. Sleeping for second to avoid busy loop."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|lastConnectSucceeded
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|startLocalBridge
argument_list|()
expr_stmt|;
name|remoteBridgeStarted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Outbound transport to "
operator|+
name|remoteBrokerName
operator|+
literal|" resumed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception  from local start in resume transport"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isDuplex
argument_list|()
operator|&&
name|duplexInitiatingConnection
operator|==
literal|null
condition|)
block|{
comment|// initiator side of duplex network
name|remoteBrokerNameKnownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|triggerRemoteStartBridge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception from remote start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|NetworkBridgeListener
name|l
init|=
name|this
operator|.
name|networkBridgeListener
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|onStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|triggerLocalStartBridge
parameter_list|()
throws|throws
name|IOException
block|{
name|ASYNC_TASKS
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|originalName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"StartLocalBridge: localBroker="
operator|+
name|localBroker
argument_list|)
expr_stmt|;
try|try
block|{
name|startLocalBridge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|serviceLocalException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|originalName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|triggerRemoteStartBridge
parameter_list|()
throws|throws
name|IOException
block|{
name|ASYNC_TASKS
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|originalName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"StartRemotelBridge: localBroker="
operator|+
name|localBroker
argument_list|)
expr_stmt|;
try|try
block|{
name|startRemoteBridge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|serviceRemoteException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|originalName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startLocalBridge
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|localBridgeStarted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"starting local Bridge, localBroker="
operator|+
name|localBroker
argument_list|)
expr_stmt|;
name|remoteBrokerNameKnownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|localConnectionInfo
operator|=
operator|new
name|ConnectionInfo
argument_list|()
expr_stmt|;
name|localConnectionInfo
operator|.
name|setConnectionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|localClientId
operator|=
literal|"NC_"
operator|+
name|remoteBrokerName
operator|+
literal|"_inbound"
operator|+
name|configuration
operator|.
name|getBrokerName
argument_list|()
expr_stmt|;
name|localConnectionInfo
operator|.
name|setClientId
argument_list|(
name|localClientId
argument_list|)
expr_stmt|;
name|localConnectionInfo
operator|.
name|setUserName
argument_list|(
name|configuration
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|localConnectionInfo
operator|.
name|setPassword
argument_list|(
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|localConnectionInfo
argument_list|)
expr_stmt|;
name|localSessionInfo
operator|=
operator|new
name|SessionInfo
argument_list|(
name|localConnectionInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|localSessionInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|"("
operator|+
name|remoteBrokerName
operator|+
literal|") has been established."
argument_list|)
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|localStartedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|setupStaticDestinations
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|startRemoteBridge
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|remoteBridgeStarted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"starting remote Bridge, localBroker="
operator|+
name|localBroker
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|isCreatedByDuplex
argument_list|()
condition|)
block|{
name|BrokerInfo
name|brokerInfo
init|=
operator|new
name|BrokerInfo
argument_list|()
decl_stmt|;
name|brokerInfo
operator|.
name|setBrokerName
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|brokerInfo
operator|.
name|setNetworkConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerInfo
operator|.
name|setDuplexConnection
argument_list|(
name|configuration
operator|.
name|isDuplex
argument_list|()
argument_list|)
expr_stmt|;
comment|// set our properties
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|configuration
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|MarshallingSupport
operator|.
name|propertiesToString
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|brokerInfo
operator|.
name|setNetworkProperties
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|brokerInfo
operator|.
name|setBrokerId
argument_list|(
name|this
operator|.
name|localBrokerId
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|brokerInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteConnectionInfo
operator|!=
literal|null
condition|)
block|{
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|remoteConnectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|remoteConnectionInfo
operator|=
operator|new
name|ConnectionInfo
argument_list|()
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setConnectionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setClientId
argument_list|(
literal|"NC_"
operator|+
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|"_outbound"
argument_list|)
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setUserName
argument_list|(
name|configuration
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setPassword
argument_list|(
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|remoteConnectionInfo
argument_list|)
expr_stmt|;
name|SessionInfo
name|remoteSessionInfo
init|=
operator|new
name|SessionInfo
argument_list|(
name|remoteConnectionInfo
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|remoteSessionInfo
argument_list|)
expr_stmt|;
name|producerInfo
operator|=
operator|new
name|ProducerInfo
argument_list|(
name|remoteSessionInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producerInfo
operator|.
name|setResponseRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// Listen to consumer advisory messages on the remote broker to
comment|// determine demand.
name|demandConsumerInfo
operator|=
operator|new
name|ConsumerInfo
argument_list|(
name|remoteSessionInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|demandConsumerInfo
operator|.
name|setDispatchAsync
argument_list|(
name|configuration
operator|.
name|isDispatchAsync
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|advisoryTopic
init|=
name|AdvisorySupport
operator|.
name|CONSUMER_ADVISORY_TOPIC_PREFIX
operator|+
name|configuration
operator|.
name|getDestinationFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isBridgeTempDestinations
argument_list|()
condition|)
block|{
name|advisoryTopic
operator|+=
literal|","
operator|+
name|AdvisorySupport
operator|.
name|TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC
expr_stmt|;
block|}
name|demandConsumerInfo
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|advisoryTopic
argument_list|)
argument_list|)
expr_stmt|;
name|demandConsumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|configuration
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|demandConsumerInfo
argument_list|)
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
name|triggerLocalStartBridge
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" stopping "
operator|+
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" bridge to "
operator|+
name|remoteBrokerName
operator|+
literal|" is disposed already ? "
operator|+
name|disposed
argument_list|)
expr_stmt|;
name|boolean
name|wasDisposedAlready
init|=
name|disposed
decl_stmt|;
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
name|NetworkBridgeListener
name|l
init|=
name|this
operator|.
name|networkBridgeListener
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|onStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|disposed
operator|=
literal|true
expr_stmt|;
name|remoteBridgeStarted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|sendShutdown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ASYNC_TASKS
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception sending shutdown"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sendShutdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sendShutdown
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Network Could not shutdown in a timely manner"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ServiceStopper
name|ss
init|=
operator|new
name|ServiceStopper
argument_list|()
decl_stmt|;
name|ss
operator|.
name|stop
argument_list|(
name|localBroker
argument_list|)
expr_stmt|;
name|ss
operator|.
name|stop
argument_list|(
name|remoteBroker
argument_list|)
expr_stmt|;
comment|// Release the started Latch since another thread could be
comment|// stuck waiting for it to start up.
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|localStartedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|ss
operator|.
name|throwFirstException
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wasDisposedAlready
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" bridge to "
operator|+
name|remoteBrokerName
operator|+
literal|" stopped"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" bridge to "
operator|+
name|remoteBrokerName
operator|+
literal|" stopped"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|serviceRemoteException
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
if|if
condition|(
name|error
operator|instanceof
name|SecurityException
operator|||
name|error
operator|instanceof
name|GeneralSecurityException
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|" shutdown due to a remote error: "
operator|+
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|" shutdown due to a remote error: "
operator|+
name|error
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"The remote Exception was: "
operator|+
name|error
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|ASYNC_TASKS
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|getControllingService
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fireBridgeFailed
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|serviceRemoteCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
try|try
block|{
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|waitStarted
argument_list|()
expr_stmt|;
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|serviceRemoteConsumerAdvisory
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|demandConsumerDispatched
operator|++
expr_stmt|;
if|if
condition|(
name|demandConsumerDispatched
operator|>
operator|(
name|demandConsumerInfo
operator|.
name|getPrefetchSize
argument_list|()
operator|*
literal|.75
operator|)
condition|)
block|{
name|remoteBroker
operator|.
name|oneway
argument_list|(
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
name|demandConsumerDispatched
argument_list|)
argument_list|)
expr_stmt|;
name|demandConsumerDispatched
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
name|lastConnectSucceeded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|remoteBrokerInfo
operator|=
operator|(
name|BrokerInfo
operator|)
name|command
expr_stmt|;
name|serviceRemoteBrokerInfo
argument_list|(
name|command
argument_list|)
expr_stmt|;
comment|// Let the local broker know the remote broker's ID.
name|localBroker
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|==
name|ConnectionError
operator|.
name|class
condition|)
block|{
name|ConnectionError
name|ce
init|=
operator|(
name|ConnectionError
operator|)
name|command
decl_stmt|;
name|serviceRemoteException
argument_list|(
name|ce
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isDuplex
argument_list|()
condition|)
block|{
if|if
condition|(
name|command
operator|.
name|isMessage
argument_list|()
condition|)
block|{
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|command
decl_stmt|;
if|if
condition|(
name|AdvisorySupport
operator|.
name|isConsumerAdvisoryTopic
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|serviceRemoteConsumerAdvisory
argument_list|(
name|message
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|message
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
name|Response
name|reply
init|=
operator|new
name|Response
argument_list|()
decl_stmt|;
name|reply
operator|.
name|setCorrelationId
argument_list|(
name|message
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|ConnectionInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
case|case
name|SessionInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
case|case
name|ProducerInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|localBroker
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConsumerInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|localStartedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|addConsumerInfo
argument_list|(
operator|(
name|ConsumerInfo
operator|)
name|command
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring ConsumerInfo: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding ConsumerInfo: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// received a subscription whilst stopping
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stopping - ignoring ConsumerInfo: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring remote command: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|KeepAliveInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
case|case
name|WireFormatInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
case|case
name|ShutdownInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected remote command: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception processing remote command: "
operator|+
name|command
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|serviceRemoteException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|serviceRemoteConsumerAdvisory
parameter_list|(
name|DataStructure
name|data
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|networkTTL
init|=
name|configuration
operator|.
name|getNetworkTTL
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getClass
argument_list|()
operator|==
name|ConsumerInfo
operator|.
name|class
condition|)
block|{
comment|// Create a new local subscription
name|ConsumerInfo
name|info
init|=
operator|(
name|ConsumerInfo
operator|)
name|data
decl_stmt|;
name|BrokerId
index|[]
name|path
init|=
name|info
operator|.
name|getBrokerPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
operator|>=
name|networkTTL
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Ignoring Subscription "
operator|+
name|info
operator|+
literal|" restricted to "
operator|+
name|networkTTL
operator|+
literal|" network hops only"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|contains
argument_list|(
name|info
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|localBrokerPath
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Ignore this consumer as it's a consumer we locally sent to
comment|// the broker.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Ignoring sub "
operator|+
name|info
operator|+
literal|" already routed through this broker once"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|isPermissableDestination
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
comment|// ignore if not in the permited or in the excluded list
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Ignoring sub "
operator|+
name|info
operator|+
literal|" destination "
operator|+
name|info
operator|.
name|getDestination
argument_list|()
operator|+
literal|" is not permiited"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|addConsumerInfo
argument_list|(
name|info
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Forwarding sub on "
operator|+
name|localBroker
operator|+
literal|" from "
operator|+
name|remoteBrokerName
operator|+
literal|" :  "
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Ignoring sub "
operator|+
name|info
operator|+
literal|" already subscribed to matching destination"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|getClass
argument_list|()
operator|==
name|DestinationInfo
operator|.
name|class
condition|)
block|{
comment|// It's a destination info - we want to pass up
comment|// information about temporary destinations
name|DestinationInfo
name|destInfo
init|=
operator|(
name|DestinationInfo
operator|)
name|data
decl_stmt|;
name|BrokerId
index|[]
name|path
init|=
name|destInfo
operator|.
name|getBrokerPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
operator|>=
name|networkTTL
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring Subscription "
operator|+
name|destInfo
operator|+
literal|" restricted to "
operator|+
name|networkTTL
operator|+
literal|" network hops only"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|contains
argument_list|(
name|destInfo
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|localBrokerPath
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Ignore this consumer as it's a consumer we locally sent to
comment|// the broker.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring sub "
operator|+
name|destInfo
operator|+
literal|" already routed through this broker once"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|destInfo
operator|.
name|setConnectionId
argument_list|(
name|localConnectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|destInfo
operator|.
name|getDestination
argument_list|()
operator|instanceof
name|ActiveMQTempDestination
condition|)
block|{
comment|// re-set connection id so comes from here
name|ActiveMQTempDestination
name|tempDest
init|=
operator|(
name|ActiveMQTempDestination
operator|)
name|destInfo
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|tempDest
operator|.
name|setConnectionId
argument_list|(
name|localSessionInfo
operator|.
name|getSessionId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|destInfo
operator|.
name|setBrokerPath
argument_list|(
name|appendToBrokerPath
argument_list|(
name|destInfo
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|getRemoteBrokerPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replying destination control command: "
operator|+
name|destInfo
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|destInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|getClass
argument_list|()
operator|==
name|RemoveInfo
operator|.
name|class
condition|)
block|{
name|ConsumerId
name|id
init|=
call|(
name|ConsumerId
call|)
argument_list|(
operator|(
name|RemoveInfo
operator|)
name|data
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|removeDemandSubscription
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|serviceLocalException
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|" shutdown due to a local error: "
operator|+
name|error
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The local Exception was:"
operator|+
name|error
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|ASYNC_TASKS
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|getControllingService
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fireBridgeFailed
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Service
name|getControllingService
parameter_list|()
block|{
return|return
name|duplexInitiatingConnection
operator|!=
literal|null
condition|?
name|duplexInitiatingConnection
else|:
name|DemandForwardingBridgeSupport
operator|.
name|this
return|;
block|}
specifier|protected
name|void
name|addSubscription
parameter_list|(
name|DemandSubscription
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeSubscription
parameter_list|(
name|DemandSubscription
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|subscriptionMapByLocalId
operator|.
name|remove
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|DemandSubscription
name|getDemandSubscription
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
return|return
name|subscriptionMapByLocalId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Message
name|configureMessage
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
name|Message
name|message
init|=
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// Update the packet to show where it came from.
name|message
operator|.
name|setBrokerPath
argument_list|(
name|appendToBrokerPath
argument_list|(
name|message
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|localBrokerPath
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setProducerId
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|md
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getOriginalTransactionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setOriginalTransactionId
argument_list|(
name|message
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setTransactionId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|protected
name|void
name|serviceLocalCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
specifier|final
name|boolean
name|trace
init|=
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|enqueueCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|//localStartedLatch.await();
specifier|final
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|DemandSubscription
name|sub
init|=
name|subscriptionMapByLocalId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
operator|&&
name|md
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// See if this consumer's brokerPath tells us it came from the broker at the other end
comment|// of the bridge. I think we should be making this decision based on the message's
comment|// broker bread crumbs and not the consumer's? However, the message's broker bread
comment|// crumbs are null, which is another matter.
name|boolean
name|cameFromRemote
init|=
literal|false
decl_stmt|;
name|Object
name|consumerInfo
init|=
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumerInfo
operator|!=
literal|null
operator|&&
operator|(
name|consumerInfo
operator|instanceof
name|ConsumerInfo
operator|)
condition|)
name|cameFromRemote
operator|=
name|contains
argument_list|(
operator|(
operator|(
name|ConsumerInfo
operator|)
name|consumerInfo
operator|)
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|remoteBrokerInfo
operator|.
name|getBrokerId
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|configureMessage
argument_list|(
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"bridging "
operator|+
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" -> "
operator|+
name|remoteBrokerName
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"cameFromRemote = "
operator|+
name|cameFromRemote
operator|+
literal|", repsonseRequired = "
operator|+
name|message
operator|.
name|isResponseRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|message
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
comment|// If the message was originally sent using async
comment|// send, we will preserve that QOS
comment|// by bridging it using an async send (small chance
comment|// of message loss).
comment|// Don't send it off to the remote if it originally came from the remote.
if|if
condition|(
operator|!
name|cameFromRemote
condition|)
block|{
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Message not forwarded on to remote, because message came from remote"
argument_list|)
expr_stmt|;
block|}
name|localBroker
operator|.
name|oneway
argument_list|(
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|INDIVIDUAL_ACK_TYPE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|dequeueCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// The message was not sent using async send, so we
comment|// should only ack the local
comment|// broker when we get confirmation that the remote
comment|// broker has received the message.
name|ResponseCallback
name|callback
init|=
operator|new
name|ResponseCallback
argument_list|()
block|{
specifier|public
name|void
name|onCompletion
parameter_list|(
name|FutureResponse
name|future
parameter_list|)
block|{
try|try
block|{
name|Response
name|response
init|=
name|future
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|er
init|=
operator|(
name|ExceptionResponse
operator|)
name|response
decl_stmt|;
name|serviceLocalException
argument_list|(
name|er
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|INDIVIDUAL_ACK_TYPE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|dequeueCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|serviceLocalException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|remoteBroker
operator|.
name|asyncRequest
argument_list|(
name|message
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|trace
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"No subscription registered with this network bridge for consumerId "
operator|+
name|md
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|" for message: "
operator|+
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
name|localBrokerInfo
operator|=
operator|(
name|BrokerInfo
operator|)
name|command
expr_stmt|;
name|serviceLocalBrokerInfo
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isShutdownInfo
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Shutting down"
argument_list|)
expr_stmt|;
comment|// Don't shut down the whole connector if the remote side
comment|// was interrupted.
comment|// the local transport is just shutting down temporarily
comment|// until the remote side
comment|// is restored.
if|if
condition|(
operator|!
name|remoteInterupted
operator|.
name|get
argument_list|()
condition|)
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|==
name|ConnectionError
operator|.
name|class
condition|)
block|{
name|ConnectionError
name|ce
init|=
operator|(
name|ConnectionError
operator|)
name|command
decl_stmt|;
name|serviceLocalException
argument_list|(
name|ce
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|WireFormatInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected local command: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught an exception processing local command"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|serviceLocalException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return Returns the dynamicallyIncludedDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getDynamicallyIncludedDestinations
parameter_list|()
block|{
return|return
name|dynamicallyIncludedDestinations
return|;
block|}
comment|/**      * @param dynamicallyIncludedDestinations The      *                dynamicallyIncludedDestinations to set.      */
specifier|public
name|void
name|setDynamicallyIncludedDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|dynamicallyIncludedDestinations
parameter_list|)
block|{
name|this
operator|.
name|dynamicallyIncludedDestinations
operator|=
name|dynamicallyIncludedDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the excludedDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getExcludedDestinations
parameter_list|()
block|{
return|return
name|excludedDestinations
return|;
block|}
comment|/**      * @param excludedDestinations The excludedDestinations to set.      */
specifier|public
name|void
name|setExcludedDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|excludedDestinations
parameter_list|)
block|{
name|this
operator|.
name|excludedDestinations
operator|=
name|excludedDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the staticallyIncludedDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getStaticallyIncludedDestinations
parameter_list|()
block|{
return|return
name|staticallyIncludedDestinations
return|;
block|}
comment|/**      * @param staticallyIncludedDestinations The staticallyIncludedDestinations      *                to set.      */
specifier|public
name|void
name|setStaticallyIncludedDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|staticallyIncludedDestinations
parameter_list|)
block|{
name|this
operator|.
name|staticallyIncludedDestinations
operator|=
name|staticallyIncludedDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the durableDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getDurableDestinations
parameter_list|()
block|{
return|return
name|durableDestinations
return|;
block|}
comment|/**      * @param durableDestinations The durableDestinations to set.      */
specifier|public
name|void
name|setDurableDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|durableDestinations
parameter_list|)
block|{
name|this
operator|.
name|durableDestinations
operator|=
name|durableDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the localBroker.      */
specifier|public
name|Transport
name|getLocalBroker
parameter_list|()
block|{
return|return
name|localBroker
return|;
block|}
comment|/**      * @return Returns the remoteBroker.      */
specifier|public
name|Transport
name|getRemoteBroker
parameter_list|()
block|{
return|return
name|remoteBroker
return|;
block|}
comment|/**      * @return the createdByDuplex      */
specifier|public
name|boolean
name|isCreatedByDuplex
parameter_list|()
block|{
return|return
name|this
operator|.
name|createdByDuplex
return|;
block|}
comment|/**      * @param createdByDuplex the createdByDuplex to set      */
specifier|public
name|void
name|setCreatedByDuplex
parameter_list|(
name|boolean
name|createdByDuplex
parameter_list|)
block|{
name|this
operator|.
name|createdByDuplex
operator|=
name|createdByDuplex
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|BrokerId
index|[]
name|brokerPath
parameter_list|,
name|BrokerId
name|brokerId
parameter_list|)
block|{
if|if
condition|(
name|brokerPath
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|brokerPath
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|brokerId
operator|.
name|equals
argument_list|(
name|brokerPath
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|BrokerId
index|[]
name|appendToBrokerPath
parameter_list|(
name|BrokerId
index|[]
name|brokerPath
parameter_list|,
name|BrokerId
index|[]
name|pathsToAppend
parameter_list|)
block|{
if|if
condition|(
name|brokerPath
operator|==
literal|null
operator|||
name|brokerPath
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|pathsToAppend
return|;
block|}
name|BrokerId
name|rc
index|[]
init|=
operator|new
name|BrokerId
index|[
name|brokerPath
operator|.
name|length
operator|+
name|pathsToAppend
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|brokerPath
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|,
literal|0
argument_list|,
name|brokerPath
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pathsToAppend
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|,
name|brokerPath
operator|.
name|length
argument_list|,
name|pathsToAppend
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|protected
name|BrokerId
index|[]
name|appendToBrokerPath
parameter_list|(
name|BrokerId
index|[]
name|brokerPath
parameter_list|,
name|BrokerId
name|idToAppend
parameter_list|)
block|{
if|if
condition|(
name|brokerPath
operator|==
literal|null
operator|||
name|brokerPath
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|BrokerId
index|[]
block|{
name|idToAppend
block|}
return|;
block|}
name|BrokerId
name|rc
index|[]
init|=
operator|new
name|BrokerId
index|[
name|brokerPath
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|brokerPath
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|,
literal|0
argument_list|,
name|brokerPath
operator|.
name|length
argument_list|)
expr_stmt|;
name|rc
index|[
name|brokerPath
operator|.
name|length
index|]
operator|=
name|idToAppend
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|protected
name|boolean
name|isPermissableDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
comment|// Are we not bridging temp destinations?
if|if
condition|(
name|destination
operator|.
name|isTemporary
argument_list|()
operator|&&
operator|!
name|configuration
operator|.
name|isBridgeTempDestinations
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DestinationFilter
name|filter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|ActiveMQDestination
index|[]
name|dests
init|=
name|excludedDestinations
decl_stmt|;
if|if
condition|(
name|dests
operator|!=
literal|null
operator|&&
name|dests
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQDestination
name|match
init|=
name|dests
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|filter
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|SimpleDestinationFilter
condition|)
block|{
name|DestinationFilter
name|newFilter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|match
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|newFilter
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|SimpleDestinationFilter
operator|)
condition|)
block|{
name|filter
operator|=
name|newFilter
expr_stmt|;
name|match
operator|=
name|destination
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|matches
argument_list|(
name|match
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|dests
operator|=
name|dynamicallyIncludedDestinations
expr_stmt|;
if|if
condition|(
name|dests
operator|!=
literal|null
operator|&&
name|dests
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQDestination
name|match
init|=
name|dests
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|filter
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|SimpleDestinationFilter
condition|)
block|{
name|DestinationFilter
name|newFilter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|match
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|newFilter
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|SimpleDestinationFilter
operator|)
condition|)
block|{
name|filter
operator|=
name|newFilter
expr_stmt|;
name|match
operator|=
name|destination
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|matches
argument_list|(
name|match
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Subscriptions for these desitnations are always created      */
specifier|protected
name|void
name|setupStaticDestinations
parameter_list|()
block|{
name|ActiveMQDestination
index|[]
name|dests
init|=
name|staticallyIncludedDestinations
decl_stmt|;
if|if
condition|(
name|dests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQDestination
name|dest
init|=
name|dests
index|[
name|i
index|]
decl_stmt|;
name|DemandSubscription
name|sub
init|=
name|createDemandSubscription
argument_list|(
name|dest
argument_list|)
decl_stmt|;
try|try
block|{
name|addSubscription
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add static destination "
operator|+
name|dest
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Forwarding messages for static destination: "
operator|+
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|boolean
name|addConsumerInfo
parameter_list|(
specifier|final
name|ConsumerInfo
name|consumerInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|ConsumerInfo
name|info
init|=
name|consumerInfo
operator|.
name|copy
argument_list|()
decl_stmt|;
name|addRemoteBrokerToBrokerPath
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|DemandSubscription
name|sub
init|=
name|createDemandSubscription
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|addSubscription
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|DemandSubscription
name|createDemandSubscription
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|//add our original id to ourselves
name|info
operator|.
name|addNetworkConsumerId
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|doCreateDemandSubscription
argument_list|(
name|info
argument_list|)
return|;
block|}
specifier|protected
name|DemandSubscription
name|doCreateDemandSubscription
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|DemandSubscription
name|result
init|=
operator|new
name|DemandSubscription
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|result
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setConsumerId
argument_list|(
operator|new
name|ConsumerId
argument_list|(
name|localSessionInfo
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
comment|// reset the local connection Id
name|ActiveMQTempDestination
name|dest
init|=
operator|(
name|ActiveMQTempDestination
operator|)
name|result
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|dest
operator|.
name|setConnectionId
argument_list|(
name|localConnectionInfo
operator|.
name|getConnectionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|isDecreaseNetworkConsumerPriority
argument_list|()
condition|)
block|{
name|byte
name|priority
init|=
name|ConsumerInfo
operator|.
name|NETWORK_CONSUMER_PRIORITY
decl_stmt|;
if|if
condition|(
name|priority
operator|>
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|info
operator|.
name|getBrokerPath
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getBrokerPath
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// The longer the path to the consumer, the less it's consumer
comment|// priority.
name|priority
operator|-=
name|info
operator|.
name|getBrokerPath
argument_list|()
operator|.
name|length
operator|+
literal|1
expr_stmt|;
block|}
name|result
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|configureDemandSubscription
argument_list|(
name|info
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|final
specifier|protected
name|DemandSubscription
name|createDemandSubscription
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|ConsumerInfo
name|info
init|=
operator|new
name|ConsumerInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
comment|// the remote info held by the DemandSubscription holds the original
comment|// consumerId,
comment|// the local info get's overwritten
name|info
operator|.
name|setConsumerId
argument_list|(
operator|new
name|ConsumerId
argument_list|(
name|localSessionInfo
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DemandSubscription
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|createDemandSubscription
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create DemandSubscription "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setPriority
argument_list|(
name|ConsumerInfo
operator|.
name|NETWORK_CONSUMER_PRIORITY
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|configureDemandSubscription
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|,
name|DemandSubscription
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setDispatchAsync
argument_list|(
name|configuration
operator|.
name|isDispatchAsync
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setPrefetchSize
argument_list|(
name|configuration
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionMapByLocalId
operator|.
name|put
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|subscriptionMapByRemoteId
operator|.
name|put
argument_list|(
name|sub
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|sub
argument_list|)
expr_stmt|;
comment|// This works for now since we use a VM connection to the local broker.
comment|// may need to change if we ever subscribe to a remote broker.
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setAdditionalPredicate
argument_list|(
name|createNetworkBridgeFilter
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeDemandSubscription
parameter_list|(
name|ConsumerId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|DemandSubscription
name|sub
init|=
name|subscriptionMapByRemoteId
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|removeSubscription
argument_list|(
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"removing sub on "
operator|+
name|localBroker
operator|+
literal|" from "
operator|+
name|remoteBrokerName
operator|+
literal|" :  "
operator|+
name|sub
operator|.
name|getRemoteInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|waitStarted
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|startedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|clearDownSubscriptions
parameter_list|()
block|{
name|subscriptionMapByLocalId
operator|.
name|clear
argument_list|()
expr_stmt|;
name|subscriptionMapByRemoteId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|NetworkBridgeFilter
name|createNetworkBridgeFilter
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|serviceLocalBrokerInfo
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|addRemoteBrokerToBrokerPath
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|serviceRemoteBrokerInfo
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|BrokerId
index|[]
name|getRemoteBrokerPath
parameter_list|()
function_decl|;
specifier|public
name|void
name|setNetworkBridgeListener
parameter_list|(
name|NetworkBridgeListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|networkBridgeListener
operator|=
name|listener
expr_stmt|;
block|}
specifier|private
name|void
name|fireBridgeFailed
parameter_list|()
block|{
name|NetworkBridgeListener
name|l
init|=
name|this
operator|.
name|networkBridgeListener
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|bridgeFailed
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|remoteBroker
operator|.
name|getRemoteAddress
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLocalAddress
parameter_list|()
block|{
return|return
name|localBroker
operator|.
name|getRemoteAddress
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRemoteBrokerName
parameter_list|()
block|{
return|return
name|remoteBrokerInfo
operator|==
literal|null
condition|?
literal|null
else|:
name|remoteBrokerInfo
operator|.
name|getBrokerName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLocalBrokerName
parameter_list|()
block|{
return|return
name|localBrokerInfo
operator|==
literal|null
condition|?
literal|null
else|:
name|localBrokerInfo
operator|.
name|getBrokerName
argument_list|()
return|;
block|}
specifier|public
name|long
name|getDequeueCounter
parameter_list|()
block|{
return|return
name|dequeueCounter
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getEnqueueCounter
parameter_list|()
block|{
return|return
name|enqueueCounter
operator|.
name|get
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|isDuplex
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isDuplex
argument_list|()
operator|||
name|createdByDuplex
return|;
block|}
static|static
block|{
name|ASYNC_TASKS
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"NetworkBridge"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

