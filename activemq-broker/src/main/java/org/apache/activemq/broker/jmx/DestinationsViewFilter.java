begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Defines a query API for destinations MBeans  *  * Typical usage  *  *         return DestinationsViewFilter.create(filter)  *                .setDestinations(broker.getQueueViews())  *                .filter(page, pageSize);  *  * where 'filter' is JSON representation of the query, like  *  * {name: '77', filter:'nonEmpty', sortColumn:'queueSize', sortOrder:'desc'}  *  * This returns a JSON map, containing filtered map of MBeans in the "data" field and total number of destinations that match criteria in the "count" field.  * The result will be properly paged, according to 'page' and 'pageSize' parameters.  *  */
end_comment

begin_class
specifier|public
class|class
name|DestinationsViewFilter
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DestinationsViewFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * Name pattern used to filter destinations      */
name|String
name|name
decl_stmt|;
comment|/**      * Arbitrary filter key to be applied to the destinations. Currently only simple predefined filters has been implemented:      *      * empty - return only empty queues (queueSize = 0)      * nonEmpty - return only non-empty queues queueSize != 0)      * noConsumer - return only destinations that doesn't have consumers      * nonAdvisory - return only non-Advisory topics      *      * For more implementation details see {@link DestinationsViewFilter.getPredicate}      *      */
name|String
name|filter
decl_stmt|;
comment|/**      * Sort destinations by this {@link DestinationView} property      */
name|String
name|sortColumn
init|=
literal|"name"
decl_stmt|;
comment|/**      * Order of sorting - 'asc' or 'desc'      */
name|String
name|sortOrder
init|=
literal|"asc"
decl_stmt|;
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|destinations
decl_stmt|;
specifier|public
name|DestinationsViewFilter
parameter_list|()
block|{     }
comment|/**      * Creates an object from the JSON string      *      */
specifier|public
specifier|static
name|DestinationsViewFilter
name|create
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DestinationsViewFilter
argument_list|()
return|;
block|}
name|json
operator|=
name|json
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|json
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|json
operator|.
name|equals
argument_list|(
literal|"{}"
argument_list|)
condition|)
block|{
return|return
operator|new
name|DestinationsViewFilter
argument_list|()
return|;
block|}
return|return
name|mapper
operator|.
name|readerFor
argument_list|(
name|DestinationsViewFilter
operator|.
name|class
argument_list|)
operator|.
name|readValue
argument_list|(
name|json
argument_list|)
return|;
block|}
comment|/**      * Destination MBeans to be queried      */
specifier|public
name|DestinationsViewFilter
name|setDestinations
parameter_list|(
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|destinations
parameter_list|)
block|{
name|this
operator|.
name|destinations
operator|=
name|destinations
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Filter, sort and page results.      *      * Returns JSON map with resulting destination views and total number of matched destinations      *      * @param page - defines result page to be returned      * @param pageSize - defines page size to be used      * @throws IOException      */
name|String
name|filter
parameter_list|(
name|int
name|page
parameter_list|,
name|int
name|pageSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|filtered
init|=
name|getFilteredDestinations
argument_list|(
name|page
argument_list|,
name|pageSize
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|destinations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|getFilteredDestinations
parameter_list|(
name|int
name|page
parameter_list|,
name|int
name|pageSize
parameter_list|)
block|{
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|filtered
init|=
name|Maps
operator|.
name|filterValues
argument_list|(
name|destinations
argument_list|,
name|getPredicate
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|start
init|=
operator|(
name|page
operator|-
literal|1
operator|)
operator|*
name|pageSize
decl_stmt|;
name|int
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|page
operator|*
name|pageSize
argument_list|,
name|filtered
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|entry
range|:
name|getOrdering
argument_list|()
operator|.
name|sortedCopy
argument_list|(
name|filtered
operator|.
name|entrySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|start
operator|&&
name|i
operator|<
name|end
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
name|Predicate
argument_list|<
name|DestinationView
argument_list|>
name|getPredicate
parameter_list|()
block|{
return|return
operator|new
name|Predicate
argument_list|<
name|DestinationView
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|DestinationView
name|input
parameter_list|)
block|{
name|boolean
name|match
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|match
operator|=
name|input
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
if|if
condition|(
name|getFilter
argument_list|()
operator|.
name|equals
argument_list|(
literal|"empty"
argument_list|)
condition|)
block|{
name|match
operator|=
name|input
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|getFilter
argument_list|()
operator|.
name|equals
argument_list|(
literal|"nonEmpty"
argument_list|)
condition|)
block|{
name|match
operator|=
name|input
operator|.
name|getQueueSize
argument_list|()
operator|!=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|getFilter
argument_list|()
operator|.
name|equals
argument_list|(
literal|"noConsumer"
argument_list|)
condition|)
block|{
name|match
operator|=
name|input
operator|.
name|getConsumerCount
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|getFilter
argument_list|()
operator|.
name|equals
argument_list|(
literal|"nonAdvisory"
argument_list|)
condition|)
block|{
return|return
operator|!
operator|(
name|input
operator|instanceof
name|TopicView
operator|&&
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|input
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
block|}
block|}
return|return
name|match
return|;
block|}
block|}
return|;
block|}
name|Ordering
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
argument_list|>
name|getOrdering
parameter_list|()
block|{
return|return
operator|new
name|Ordering
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
argument_list|>
argument_list|()
block|{
name|Method
name|getter
init|=
name|findGetterMethod
argument_list|(
name|DestinationView
operator|.
name|class
argument_list|,
name|getSortColumn
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|left
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|right
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|getter
operator|!=
literal|null
condition|)
block|{
name|Object
name|leftValue
init|=
name|getter
operator|.
name|invoke
argument_list|(
name|left
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|rightValue
init|=
name|getter
operator|.
name|invoke
argument_list|(
name|right
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftValue
operator|instanceof
name|Comparable
operator|&&
name|rightValue
operator|instanceof
name|Comparable
condition|)
block|{
if|if
condition|(
name|getSortOrder
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"desc"
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|rightValue
operator|)
operator|.
name|compareTo
argument_list|(
name|leftValue
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|leftValue
operator|)
operator|.
name|compareTo
argument_list|(
name|rightValue
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception sorting destinations"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|getDestinations
parameter_list|()
block|{
return|return
name|destinations
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|String
name|getSortOrder
parameter_list|()
block|{
return|return
name|sortOrder
return|;
block|}
specifier|public
name|void
name|setSortOrder
parameter_list|(
name|String
name|sortOrder
parameter_list|)
block|{
name|this
operator|.
name|sortOrder
operator|=
name|sortOrder
expr_stmt|;
block|}
specifier|public
name|String
name|getSortColumn
parameter_list|()
block|{
return|return
name|sortColumn
return|;
block|}
specifier|public
name|void
name|setSortColumn
parameter_list|(
name|String
name|sortColumn
parameter_list|)
block|{
name|this
operator|.
name|sortColumn
operator|=
name|sortColumn
expr_stmt|;
block|}
block|}
end_class

end_unit

