begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_comment
comment|/**  * In CLIENT_ACKNOWLEDGE and INDIVIDUAL_ACKNOWLEDGE modes following exception  * occurs when ASYNCH consumers acknowledges messages in not in order they  * received the messages.  *<p>  * Exception thrown on broker side:  *<p>  * {@code javax.jms.JMSException: Could not correlate acknowledgment with  * dispatched message: MessageAck}  *   * @author daroo  */
end_comment

begin_class
specifier|public
class|class
name|AMQ2489Test
extends|extends
name|TestSupport
block|{
specifier|private
specifier|final
specifier|static
name|String
name|SEQ_NUM_PROPERTY
init|=
literal|"seqNum"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|TOTAL_MESSAGES_CNT
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|CONSUMERS_CNT
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|LATCH
init|=
operator|new
name|CountDownLatch
argument_list|(
name|TOTAL_MESSAGES_CNT
argument_list|)
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testUnorderedClientAcknowledge
parameter_list|()
throws|throws
name|Exception
block|{
name|doUnorderedAck
argument_list|(
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnorderedIndividualAcknowledge
parameter_list|()
throws|throws
name|Exception
block|{
name|doUnorderedAck
argument_list|(
name|ActiveMQSession
operator|.
name|INDIVIDUAL_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Main test method      *       * @param acknowledgmentMode      *            - ACK mode to be used by consumers      * @throws Exception      */
specifier|protected
name|void
name|doUnorderedAck
parameter_list|(
name|int
name|acknowledgmentMode
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Consumer
argument_list|>
name|consumers
init|=
literal|null
decl_stmt|;
name|Session
name|producerSession
init|=
literal|null
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Because exception is thrown on broker side only, let's set up
comment|// exception listener to get it
specifier|final
name|TestExceptionListener
name|exceptionListener
init|=
operator|new
name|TestExceptionListener
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
name|exceptionListener
argument_list|)
expr_stmt|;
try|try
block|{
name|consumers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
argument_list|()
expr_stmt|;
comment|// start customers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSUMERS_CNT
condition|;
name|i
operator|++
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
operator|new
name|Consumer
argument_list|(
name|acknowledgmentMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// produce few test messages
name|producerSession
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
specifier|final
name|MessageProducer
name|producer
init|=
name|producerSession
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOTAL_MESSAGES_CNT
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Message
name|message
init|=
name|producerSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// assign each message sequence number
name|message
operator|.
name|setIntProperty
argument_list|(
name|SEQ_NUM_PROPERTY
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// during each onMessage() calls consumers decreases the LATCH
comment|// counter.
comment|//
comment|// so, let's wait till all messages are consumed.
comment|//
name|LATCH
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait a bit more to give exception listener a chance be populated
comment|// with
comment|// broker's error
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|exceptionListener
operator|.
name|getStatusText
argument_list|()
argument_list|,
name|exceptionListener
operator|.
name|hasExceptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|producerSession
operator|!=
literal|null
condition|)
name|producerSession
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|consumers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Consumer
name|c
range|:
name|consumers
control|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
return|;
block|}
specifier|public
specifier|final
class|class
name|Consumer
implements|implements
name|MessageListener
block|{
specifier|final
name|Session
name|session
decl_stmt|;
specifier|private
name|Consumer
parameter_list|(
name|int
name|acknowledgmentMode
parameter_list|)
block|{
try|try
block|{
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|acknowledgmentMode
argument_list|)
expr_stmt|;
specifier|final
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getQueueName
argument_list|()
operator|+
literal|"?consumer.prefetchSize=1"
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
comment|// retrieve sequence number assigned by producer...
specifier|final
name|int
name|seqNum
init|=
name|message
operator|.
name|getIntProperty
argument_list|(
name|SEQ_NUM_PROPERTY
argument_list|)
decl_stmt|;
comment|// ...and let's delay every second message a little bit before
comment|// acknowledgment
if|if
condition|(
operator|(
name|seqNum
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delayed message sequence numeber: "
operator|+
name|seqNum
argument_list|)
expr_stmt|;
try|try
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// decrease LATCH counter in the main test method.
name|LATCH
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
class|class
name|TestExceptionListener
implements|implements
name|ExceptionListener
block|{
specifier|private
specifier|final
name|java
operator|.
name|util
operator|.
name|Queue
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasExceptions
parameter_list|()
block|{
return|return
name|exceptions
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
return|;
block|}
specifier|public
name|String
name|getStatusText
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"Exceptions count on broker side: "
operator|+
name|exceptions
operator|.
name|size
argument_list|()
operator|+
literal|".\nMessages:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Exception
name|e
range|:
name|exceptions
control|)
block|{
name|str
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

