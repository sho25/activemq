begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_class
specifier|public
class|class
name|EmbeddedJettyServer
implements|implements
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
block|{
specifier|private
name|HTTPDiscoveryAgent
name|agent
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|SelectChannelConnector
name|connector
decl_stmt|;
specifier|private
name|DiscoveryRegistryServlet
name|camelServlet
init|=
operator|new
name|DiscoveryRegistryServlet
argument_list|()
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|agent
operator|.
name|getRegistryURL
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|NO_SECURITY
operator||
name|ServletContextHandler
operator|.
name|NO_SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|setServlet
argument_list|(
name|camelServlet
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|port
init|=
literal|80
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getPort
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|port
operator|=
name|uri
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
name|connector
operator|=
operator|new
name|SelectChannelConnector
argument_list|()
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connector
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|HTTPDiscoveryAgent
name|getAgent
parameter_list|()
block|{
return|return
name|agent
return|;
block|}
specifier|public
name|void
name|setAgent
parameter_list|(
name|HTTPDiscoveryAgent
name|agent
parameter_list|)
block|{
name|this
operator|.
name|agent
operator|=
name|agent
expr_stmt|;
block|}
block|}
end_class

end_unit

