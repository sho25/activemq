begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|// variation on AMQ2584 where the DLQ consumer works in parallel to producer so
end_comment

begin_comment
comment|// that some dups are not suppressed as they are already acked by the consumer
end_comment

begin_comment
comment|// the audit needs to be disabled to allow these dupes to be consumed
end_comment

begin_class
specifier|public
class|class
name|AMQ2584ConcurrentDlqTest
extends|extends
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQ2584ConcurrentDlqTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
name|ActiveMQTopic
name|topic
decl_stmt|;
name|ActiveMQConnection
name|consumerConnection
init|=
literal|null
decl_stmt|,
name|producerConnection
init|=
literal|null
decl_stmt|,
name|dlqConnection
init|=
literal|null
decl_stmt|;
name|Session
name|consumerSession
decl_stmt|;
name|Session
name|producerSession
decl_stmt|;
name|MessageProducer
name|producer
decl_stmt|;
name|Vector
argument_list|<
name|TopicSubscriber
argument_list|>
name|duralbeSubs
init|=
operator|new
name|Vector
argument_list|<
name|TopicSubscriber
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numMessages
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|numDurableSubs
init|=
literal|2
decl_stmt|;
name|String
name|data
decl_stmt|;
specifier|private
name|long
name|dlqConsumerLastReceivedTimeStamp
decl_stmt|;
specifier|private
name|AtomicLong
name|dlqReceivedCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// 2 deliveries of each message, 3 producers
name|CountDownLatch
name|redeliveryConsumerLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
operator|(
operator|(
literal|2
operator|*
name|numMessages
operator|)
operator|*
name|numDurableSubs
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// should get at least numMessages, possibly more
name|CountDownLatch
name|dlqConsumerLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
operator|(
name|numMessages
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|Exception
block|{
name|openConsumer
argument_list|(
name|redeliveryConsumerLatch
argument_list|)
expr_stmt|;
name|openDlqConsumer
argument_list|(
name|dlqConsumerLatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getStorePercentUsage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|sendMessage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BrokerView
name|brokerView
init|=
name|broker
operator|.
name|getAdminView
argument_list|()
decl_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|isFull
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"store percent usage: "
operator|+
name|brokerView
operator|.
name|getStorePercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"redelivery consumer got all it needs, remaining: "
operator|+
name|redeliveryConsumerLatch
operator|.
name|getCount
argument_list|()
argument_list|,
name|redeliveryConsumerLatch
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"dql  consumer got all it needs"
argument_list|,
name|dlqConsumerLatch
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|closeConsumer
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Giving dlq a chance to clear down once topic consumer is closed"
argument_list|)
expr_stmt|;
comment|// consumer all of the duplicates that arrived after the first ack
name|closeDlqConsumer
argument_list|()
expr_stmt|;
comment|//get broker a chance to clean obsolete messages, wait 2*cleanupInterval
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|FilenameFilter
name|justLogFiles
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|endsWith
argument_list|(
literal|".log"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|int
name|numFiles
init|=
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|getDirectory
argument_list|()
operator|.
name|list
argument_list|(
name|justLogFiles
argument_list|)
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|numFiles
operator|>
literal|2
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|getDirectory
argument_list|()
operator|.
name|list
argument_list|(
name|justLogFiles
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"num files: "
operator|+
name|numFiles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kahaDB dir should contain 1 db file,is: "
operator|+
name|numFiles
argument_list|,
literal|1
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openConsumer
parameter_list|(
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
throws|throws
name|Exception
block|{
name|consumerConnection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|()
expr_stmt|;
name|consumerConnection
operator|.
name|setClientID
argument_list|(
literal|"cliID"
argument_list|)
expr_stmt|;
name|consumerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumerSession
operator|=
name|consumerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageListener
name|listener
init|=
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|consumerSession
operator|.
name|recover
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDurableSubs
condition|;
name|i
operator|++
control|)
block|{
name|TopicSubscriber
name|sub
init|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"subName"
operator|+
name|i
argument_list|)
decl_stmt|;
name|sub
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|duralbeSubs
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|openDlqConsumer
parameter_list|(
specifier|final
name|CountDownLatch
name|received
parameter_list|)
throws|throws
name|Exception
block|{
name|dlqConnection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|()
expr_stmt|;
name|Session
name|dlqSession
init|=
name|dlqConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|dlqConsumer
init|=
name|dlqSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|)
decl_stmt|;
name|dlqConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|received
operator|.
name|getCount
argument_list|()
operator|>
literal|0
operator|&&
name|received
operator|.
name|getCount
argument_list|()
operator|%
literal|200
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"remaining on DLQ: "
operator|+
name|received
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|received
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|dlqConsumerLastReceivedTimeStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|dlqReceivedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dlqConnection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|closeConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
for|for
control|(
name|TopicSubscriber
name|sub
range|:
name|duralbeSubs
control|)
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|consumerSession
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDurableSubs
condition|;
name|i
operator|++
control|)
block|{
name|consumerSession
operator|.
name|unsubscribe
argument_list|(
literal|"subName"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|consumerConnection
operator|!=
literal|null
condition|)
block|{
name|consumerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerConnection
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|closeDlqConsumer
parameter_list|()
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
specifier|final
name|long
name|limit
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|dlqConsumerLastReceivedTimeStamp
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|dlqConsumerLastReceivedTimeStamp
operator|+
literal|5000
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|limit
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for DLQ do drain, receivedCount: "
operator|+
name|dlqReceivedCount
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dlqConnection
operator|!=
literal|null
condition|)
block|{
name|dlqConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|dlqConnection
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendMessage
parameter_list|(
name|boolean
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|producerConnection
operator|==
literal|null
condition|)
block|{
name|producerConnection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|producerSession
operator|=
name|producerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|producerSession
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|producerSession
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startBroker
parameter_list|(
name|boolean
name|deleteMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"testStoreSize"
argument_list|)
expr_stmt|;
name|PolicyMap
name|map
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|entry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setEnableAudit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|map
operator|.
name|setDefaultEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|map
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteMessages
condition|)
block|{
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|configurePersistenceAdapter
argument_list|(
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|200
operator|*
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|configurePersistenceAdapter
parameter_list|(
name|PersistenceAdapter
name|persistenceAdapter
parameter_list|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|maxFileLengthVal
init|=
name|String
operator|.
name|valueOf
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"journalMaxFileLength"
argument_list|,
name|maxFileLengthVal
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"maxFileLength"
argument_list|,
name|maxFileLengthVal
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"cleanupInterval"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"checkpointInterval"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
comment|// there are problems with duplicate dispatch in the cursor, which maintain
comment|// a map of messages. A dup dispatch can be dropped.
comment|// see: org.apache.activemq.broker.region.cursors.OrderedPendingList
comment|// Adding duplicate detection to the default DLQ strategy removes the problem
comment|// which means we can leave the default for concurrent store and dispatch q
comment|//properties.put("concurrentStoreAndDispatchQueues", "false");
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|persistenceAdapter
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://testStoreSize?jms.watchTopicAdvisories=false&jms.redeliveryPolicy.maximumRedeliveries=1&jms.redeliveryPolicy.initialRedeliveryDelay=0&waitForStart=5000&create=false"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|startBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|topic
operator|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stopBroker
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

