begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|SslBrokerServiceTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FailoverStaticNetworkTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FailoverStaticNetworkTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DESTINATION_NAME
init|=
literal|"testQ"
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerA
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerA1
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerB
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerC
decl_stmt|;
specifier|private
name|SslContext
name|sslContext
decl_stmt|;
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|listenPort
parameter_list|,
name|String
index|[]
name|networkToPorts
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBroker
argument_list|(
name|scheme
argument_list|,
name|listenPort
argument_list|,
name|networkToPorts
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|listenPort
parameter_list|,
name|String
index|[]
name|networkToPorts
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|networkProps
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"Broker_"
operator|+
name|listenPort
argument_list|)
expr_stmt|;
comment|// lazy init listener on broker start
name|TransportConnector
name|transportConnector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|transportConnector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
name|scheme
operator|+
literal|"://localhost:"
operator|+
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
operator|new
name|ArrayList
argument_list|<
name|TransportConnector
argument_list|>
argument_list|()
decl_stmt|;
name|transportConnectors
operator|.
name|add
argument_list|(
name|transportConnector
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setTransportConnectors
argument_list|(
name|transportConnectors
argument_list|)
expr_stmt|;
if|if
condition|(
name|networkToPorts
operator|!=
literal|null
operator|&&
name|networkToPorts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"static:(failover:("
operator|+
name|scheme
operator|+
literal|"://localhost:"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|networkToPorts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|networkToPorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
operator|+
name|scheme
operator|+
literal|"://localhost:"
operator|+
name|networkToPorts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// limit the reconnects in case of initial random connection to slave
comment|// leaving randomize on verifies that this config is picked up
name|builder
operator|.
name|append
argument_list|(
literal|")?maxReconnectAttempts=0)?useExponentialBackOff=false"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|nc
init|=
name|broker
operator|.
name|addNetworkConnector
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkProps
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|nc
argument_list|,
name|networkProps
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|broker
return|;
block|}
specifier|private
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|listenPort
parameter_list|,
name|String
name|dataDir
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"Broker_Shared"
argument_list|)
expr_stmt|;
comment|// lazy create transport connector on start completion
name|TransportConnector
name|connector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:"
operator|+
name|listenPort
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectory
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyManager
index|[]
name|km
init|=
name|SslBrokerServiceTest
operator|.
name|getKeyManager
argument_list|()
decl_stmt|;
name|TrustManager
index|[]
name|tm
init|=
name|SslBrokerServiceTest
operator|.
name|getTrustManager
argument_list|()
decl_stmt|;
name|sslContext
operator|=
operator|new
name|SslContext
argument_list|(
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerB
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerB
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
if|if
condition|(
name|brokerA1
operator|!=
literal|null
condition|)
block|{
name|brokerA1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA1
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|brokerC
operator|!=
literal|null
condition|)
block|{
name|brokerC
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerC
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendReceiveAfterReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"restarting brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendReceiveFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"63617"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
comment|// check mbean
name|Set
argument_list|<
name|String
argument_list|>
name|bridgeNames
init|=
name|getNetworkBridgeMBeanName
argument_list|(
name|brokerB
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"only one bridgeName: "
operator|+
name|bridgeNames
argument_list|,
literal|1
argument_list|,
name|bridgeNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"restarting brokerA"
argument_list|)
expr_stmt|;
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"63617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|otherBridgeNames
init|=
name|getNetworkBridgeMBeanName
argument_list|(
name|brokerB
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"only one bridgeName: "
operator|+
name|otherBridgeNames
argument_list|,
literal|1
argument_list|,
name|otherBridgeNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"there was an addition"
argument_list|,
name|bridgeNames
operator|.
name|addAll
argument_list|(
name|otherBridgeNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getNetworkBridgeMBeanName
parameter_list|(
name|BrokerService
name|brokerB
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectName
name|objectName
range|:
name|brokerB
operator|.
name|getManagementContext
argument_list|()
operator|.
name|queryNames
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
literal|"NetworkBridge"
operator|.
name|equals
argument_list|(
name|objectName
operator|.
name|getKeyProperty
argument_list|(
literal|"Type"
argument_list|)
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|objectName
operator|.
name|getKeyProperty
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendReceiveFailoverDuplex
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Vector
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|Vector
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dataDir
init|=
literal|"target/data/shared"
decl_stmt|;
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"61617"
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|BrokerService
name|slave
init|=
name|createBroker
argument_list|(
literal|"63617"
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|brokerA1
operator|=
name|slave
expr_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|slave
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|networkConnectorProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|networkConnectorProps
operator|.
name|put
argument_list|(
literal|"duplex"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"63617"
block|}
argument_list|,
name|networkConnectorProps
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerA
argument_list|,
name|brokerB
argument_list|)
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerB
argument_list|,
name|brokerA
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping brokerA (master shared_broker)"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
comment|// wait for slave to start
name|brokerA1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerA1
argument_list|,
name|brokerB
argument_list|)
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerB
argument_list|,
name|brokerA1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No unexpected exceptions "
operator|+
name|errors
argument_list|,
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// master slave piggy in the middle setup
specifier|public
name|void
name|testSendReceiveFailoverDuplexWithPIM
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|dataDir
init|=
literal|"target/data/shared/pim"
decl_stmt|;
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"61617"
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|BrokerService
name|slave
init|=
name|createBroker
argument_list|(
literal|"63617"
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|brokerA1
operator|=
name|slave
expr_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|slave
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|networkConnectorProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|networkConnectorProps
operator|.
name|put
argument_list|(
literal|"duplex"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|networkConnectorProps
operator|.
name|put
argument_list|(
literal|"networkTTL"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"63617"
block|}
argument_list|,
name|networkConnectorProps
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"all props applied"
argument_list|,
name|networkConnectorProps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|networkConnectorProps
operator|.
name|put
argument_list|(
literal|"duplex"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|networkConnectorProps
operator|.
name|put
argument_list|(
literal|"networkTTL"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|brokerC
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"64617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"63617"
block|}
argument_list|,
name|networkConnectorProps
argument_list|)
expr_stmt|;
name|brokerC
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"all props applied a second time"
argument_list|,
name|networkConnectorProps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//Thread.sleep(4000);
name|doTestNetworkSendReceive
argument_list|(
name|brokerC
argument_list|,
name|brokerB
argument_list|)
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerB
argument_list|,
name|brokerC
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping brokerA (master shared_broker)"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerC
argument_list|,
name|brokerB
argument_list|)
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerB
argument_list|,
name|brokerC
argument_list|)
expr_stmt|;
name|brokerC
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerC
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
comment|/**      * networked broker started after target so first connect attempt succeeds      * start order is important      */
annotation|@
name|Test
specifier|public
name|void
name|testSendReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"1111"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendReceiveSsl
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"ssl"
argument_list|,
literal|"61617"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"ssl"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61617"
block|,
literal|"1111"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeatedSendReceiveWithMasterSlaveAlternate
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerB
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"62617"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"61610"
block|,
literal|"61611"
block|}
argument_list|)
expr_stmt|;
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
name|brokerA
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61610"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|setBrokerName
argument_list|(
literal|"Pair"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|setBrokerObjectName
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|brokerA
operator|.
name|getManagementContext
argument_list|()
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
literal|"A"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Broker"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|brokerA
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|setDatabaseLockedWaitDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
comment|// restart after peer taken over
name|brokerA1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"A create/start, unexpected: "
operator|+
name|ignored
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// start with brokerA as master
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|brokerA
operator|!=
literal|null
operator|&&
name|brokerA
operator|.
name|waitUntilStarted
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
name|brokerA1
operator|=
name|createBroker
argument_list|(
literal|"tcp"
argument_list|,
literal|"61611"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerA1
operator|.
name|setBrokerName
argument_list|(
literal|"Pair"
argument_list|)
expr_stmt|;
comment|// so they can coexist in local jmx we set the object name b/c the brokername identifies the shared store
name|brokerA1
operator|.
name|setBrokerObjectName
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|brokerA
operator|.
name|getManagementContext
argument_list|()
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
literal|"A1"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Broker"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|brokerA1
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|setDatabaseLockedWaitDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|brokerA1
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerA1
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
comment|// restart after peer taken over
name|brokerA
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"A1 create/start, unexpected: "
operator|+
name|ignored
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|BrokerService
name|currentMaster
init|=
operator|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
name|brokerA
else|:
name|brokerA1
operator|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"iteration: "
operator|+
name|i
operator|+
literal|", using: "
operator|+
name|currentMaster
operator|.
name|getBrokerObjectName
argument_list|()
operator|.
name|getKeyProperty
argument_list|(
literal|"BrokerName"
argument_list|)
argument_list|)
expr_stmt|;
name|currentMaster
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|doTestNetworkSendReceive
argument_list|(
name|brokerB
argument_list|,
name|currentMaster
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|currentMaster
operator|.
name|getBrokerObjectName
argument_list|()
operator|.
name|getKeyProperty
argument_list|(
literal|"BrokerName"
argument_list|)
argument_list|)
expr_stmt|;
name|currentMaster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|currentMaster
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
name|done
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"all done"
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doTestNetworkSendReceive
parameter_list|()
throws|throws
name|Exception
throws|,
name|JMSException
block|{
name|doTestNetworkSendReceive
argument_list|(
name|brokerB
argument_list|,
name|brokerA
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestNetworkSendReceive
parameter_list|(
specifier|final
name|BrokerService
name|to
parameter_list|,
specifier|final
name|BrokerService
name|from
parameter_list|)
throws|throws
name|Exception
throws|,
name|JMSException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Consumer on the networked broker ..."
operator|+
name|from
argument_list|)
expr_stmt|;
name|SslContext
operator|.
name|setCurrentSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
comment|// Create a consumer on brokerA
name|ConnectionFactory
name|consFactory
init|=
name|createConnectionFactory
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|Connection
name|consConn
init|=
name|consFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consSession
init|=
name|consConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|(
name|ActiveMQDestination
operator|)
name|consSession
operator|.
name|createQueue
argument_list|(
name|DESTINATION_NAME
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|consSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"publishing to "
operator|+
name|to
argument_list|)
expr_stmt|;
name|sendMessageTo
argument_list|(
name|destination
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|boolean
name|gotMessage
init|=
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"from:  "
operator|+
name|from
operator|.
name|getBrokerObjectName
argument_list|()
operator|.
name|getKeyProperty
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|", received: "
operator|+
name|message
argument_list|)
expr_stmt|;
return|return
name|message
operator|!=
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|consConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ignored
parameter_list|)
block|{         }
name|assertTrue
argument_list|(
literal|"consumer on A got message"
argument_list|,
name|gotMessage
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendMessageTo
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|(
name|brokerService
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hi"
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|(
specifier|final
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
operator|(
operator|(
name|TransportConnector
operator|)
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setOptimizedMessageDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setUseAsyncSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setOptimizeAcknowledge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|connectionFactory
return|;
block|}
block|}
end_class

end_unit

