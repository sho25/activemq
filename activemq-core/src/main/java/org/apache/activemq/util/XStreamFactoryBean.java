begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|propertyeditors
operator|.
name|ClassEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|Annotations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|ConverterMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|SingleValueConverter
import|;
end_import

begin_class
specifier|public
class|class
name|XStreamFactoryBean
implements|implements
name|FactoryBean
block|{
name|XStream
name|xstream
init|=
operator|new
name|XStream
argument_list|()
decl_stmt|;
comment|/**      * Sets the<code>Converters</code> or<code>SingleValueConverters</code> to be registered with the      *<code>XStream</code> instance.      *      * @see Converter      * @see SingleValueConverter      */
specifier|public
name|void
name|setConverters
parameter_list|(
name|ConverterMatcher
index|[]
name|converters
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|converters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|converters
index|[
name|i
index|]
operator|instanceof
name|Converter
condition|)
block|{
name|xstream
operator|.
name|registerConverter
argument_list|(
operator|(
name|Converter
operator|)
name|converters
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|converters
index|[
name|i
index|]
operator|instanceof
name|SingleValueConverter
condition|)
block|{
name|xstream
operator|.
name|registerConverter
argument_list|(
operator|(
name|SingleValueConverter
operator|)
name|converters
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ConverterMatcher ["
operator|+
name|converters
index|[
name|i
index|]
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Set a alias/type map, consisting of string aliases mapped to<code>Class</code> instances (or Strings to be      * converted to<code>Class</code> instances).      *      * @see org.springframework.beans.propertyeditors.ClassEditor      */
specifier|public
name|void
name|setAliases
parameter_list|(
name|Map
name|aliases
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iterator
init|=
name|aliases
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check whether we need to convert from String to Class.
name|Class
name|type
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Class
condition|)
block|{
name|type
operator|=
operator|(
name|Class
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ClassEditor
name|editor
init|=
operator|new
name|ClassEditor
argument_list|()
decl_stmt|;
name|editor
operator|.
name|setAsText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|=
operator|(
name|Class
operator|)
name|editor
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|xstream
operator|.
name|alias
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the XStream mode.      *      * @see XStream#XPATH_REFERENCES      * @see XStream#ID_REFERENCES      * @see XStream#NO_REFERENCES      */
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|xstream
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the classes, for which mappings will be read from class-level JDK 1.5+ annotation metadata.      *      * @see Annotations#configureAliases(XStream, Class[])      */
specifier|public
name|void
name|setAnnotatedClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|annotatedClass
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|annotatedClass
argument_list|,
literal|"'annotatedClass' must not be null"
argument_list|)
expr_stmt|;
name|Annotations
operator|.
name|configureAliases
argument_list|(
name|xstream
argument_list|,
name|annotatedClass
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets annotated classes, for which aliases will be read from class-level JDK 1.5+ annotation metadata.      *      * @see Annotations#configureAliases(XStream, Class[])      */
specifier|public
name|void
name|setAnnotatedClasses
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|annotatedClasses
parameter_list|)
block|{
name|Assert
operator|.
name|notEmpty
argument_list|(
name|annotatedClasses
argument_list|,
literal|"'annotatedClasses' must not be empty"
argument_list|)
expr_stmt|;
name|Annotations
operator|.
name|configureAliases
argument_list|(
name|xstream
argument_list|,
name|annotatedClasses
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|xstream
return|;
block|}
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|XStream
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

