begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protocolbuffer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|StopWatch
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
name|int
name|loopCount
decl_stmt|;
specifier|private
name|int
name|totalLoops
decl_stmt|;
specifier|private
name|long
name|groupElapsed
decl_stmt|;
specifier|private
name|long
name|totalElapsed
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|long
name|minTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|maxTime
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|private
name|int
name|logFrequency
init|=
literal|1000
decl_stmt|;
specifier|private
name|NumberFormat
name|numberFormat
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
specifier|public
name|StopWatch
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|long
name|elapsedTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|groupElapsed
operator|+=
name|elapsedTime
expr_stmt|;
name|totalElapsed
operator|+=
name|elapsedTime
expr_stmt|;
name|loopCount
operator|++
expr_stmt|;
name|totalLoops
operator|++
expr_stmt|;
if|if
condition|(
name|elapsedTime
operator|>
name|maxTime
condition|)
block|{
name|maxTime
operator|=
name|elapsedTime
expr_stmt|;
block|}
if|if
condition|(
name|elapsedTime
operator|<
name|minTime
condition|)
block|{
name|minTime
operator|=
name|elapsedTime
expr_stmt|;
block|}
if|if
condition|(
name|logFrequency
operator|>
literal|0
operator|&&
name|loopCount
operator|%
name|logFrequency
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|loopCount
operator|=
literal|0
expr_stmt|;
name|groupElapsed
operator|=
literal|0
expr_stmt|;
name|minTime
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|maxTime
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|double
name|average
init|=
name|totalElapsed
decl_stmt|;
name|average
operator|*=
name|logFrequency
expr_stmt|;
name|average
operator|/=
name|totalLoops
expr_stmt|;
comment|//average /= 1000;
return|return
name|id
operator|+
literal|" count: "
operator|+
name|loopCount
operator|+
literal|" elapsed: "
operator|+
name|groupElapsed
operator|+
literal|" min: "
operator|+
name|minTime
operator|+
literal|" max: "
operator|+
name|maxTime
operator|+
literal|" average: "
operator|+
name|formatSeconds
argument_list|(
name|average
argument_list|)
return|;
block|}
specifier|public
name|int
name|getLogFrequency
parameter_list|()
block|{
return|return
name|logFrequency
return|;
block|}
specifier|public
name|void
name|setLogFrequency
parameter_list|(
name|int
name|logFrequency
parameter_list|)
block|{
name|this
operator|.
name|logFrequency
operator|=
name|logFrequency
expr_stmt|;
block|}
specifier|public
name|int
name|getLoopCount
parameter_list|()
block|{
return|return
name|loopCount
return|;
block|}
specifier|public
name|long
name|getMaxTime
parameter_list|()
block|{
return|return
name|maxTime
return|;
block|}
specifier|public
name|long
name|getMinTime
parameter_list|()
block|{
return|return
name|minTime
return|;
block|}
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
specifier|public
name|long
name|getGroupElapsed
parameter_list|()
block|{
return|return
name|groupElapsed
return|;
block|}
specifier|protected
name|String
name|formatSeconds
parameter_list|(
name|double
name|time
parameter_list|)
block|{
return|return
name|numberFormat
operator|.
name|format
argument_list|(
name|time
argument_list|)
return|;
block|}
block|}
end_class

end_unit

