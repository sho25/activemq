begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|ConnectionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|Subject
import|;
end_import

begin_comment
comment|/**  * A {@code SubjectResolver} that acquires the current Subject from a {@link org.apache.activemq.shiro.ConnectionReference}.  *  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|ConnectionSubjectResolver
implements|implements
name|SubjectResolver
block|{
specifier|private
specifier|final
name|SubjectSecurityContext
name|securityContext
decl_stmt|;
specifier|public
name|ConnectionSubjectResolver
parameter_list|(
name|ConnectionContext
name|connCtx
parameter_list|)
block|{
if|if
condition|(
name|connCtx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ConnectionContext argument cannot be null."
argument_list|)
throw|;
block|}
name|SecurityContext
name|secCtx
init|=
name|connCtx
operator|.
name|getSecurityContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|secCtx
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"There is no SecurityContext available on the ConnectionContext.  It "
operator|+
literal|"is expected that a previous broker in the chain will create the SecurityContext prior to this "
operator|+
literal|"resolver being invoked.  Ensure you have configured the SubjectPlugin and that it is "
operator|+
literal|"configured before all other Shiro-dependent broker filters."
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|secCtx
operator|instanceof
name|SubjectSecurityContext
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"The specified SecurityContext is expected to be a "
operator|+
name|SubjectSecurityContext
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" instance.  The current instance's class: "
operator|+
name|secCtx
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|this
operator|.
name|securityContext
operator|=
operator|(
name|SubjectSecurityContext
operator|)
name|secCtx
expr_stmt|;
block|}
specifier|public
name|ConnectionSubjectResolver
parameter_list|(
name|ConnectionReference
name|conn
parameter_list|)
block|{
name|this
argument_list|(
name|conn
operator|.
name|getConnectionContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|getSubject
parameter_list|()
block|{
name|Subject
name|subject
init|=
name|securityContext
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
return|return
name|subject
return|;
block|}
name|String
name|msg
init|=
literal|"There is no Subject available in the SecurityContext.  Ensure "
operator|+
literal|"that the SubjectPlugin is configured before all other Shiro-dependent broker filters."
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

