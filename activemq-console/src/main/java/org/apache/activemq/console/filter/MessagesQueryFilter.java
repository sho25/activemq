begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_class
specifier|public
class|class
name|MessagesQueryFilter
extends|extends
name|AbstractQueryFilter
block|{
specifier|private
name|JMXServiceURL
name|jmxServiceUrl
decl_stmt|;
specifier|private
name|ObjectName
name|destName
decl_stmt|;
comment|/**      * Create a JMS message query filter      *       * @param jmxServiceUrl - JMX service URL to connect to      * @param destName - object name query to retrieve the destination      */
specifier|public
name|MessagesQueryFilter
parameter_list|(
name|JMXServiceURL
name|jmxServiceUrl
parameter_list|,
name|ObjectName
name|destName
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|jmxServiceUrl
operator|=
name|jmxServiceUrl
expr_stmt|;
name|this
operator|.
name|destName
operator|=
name|destName
expr_stmt|;
block|}
comment|/**      * Queries the specified destination using the message selector format query      *       * @param queries - message selector queries      * @return list messages that matches the selector      * @throws Exception      */
specifier|public
name|List
name|query
parameter_list|(
name|List
name|queries
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|selector
init|=
literal|""
decl_stmt|;
comment|// Convert to message selector
for|for
control|(
name|Iterator
name|i
init|=
name|queries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|selector
operator|=
name|selector
operator|+
literal|"("
operator|+
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|") AND "
expr_stmt|;
block|}
comment|// Remove last AND
if|if
condition|(
operator|!
name|selector
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|selector
operator|=
name|selector
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|selector
operator|.
name|length
argument_list|()
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
return|return
name|queryMessages
argument_list|(
name|selector
argument_list|)
return|;
block|}
comment|/**      * Query the messages of a queue destination using JMX      *       * @param selector - message selector      * @return list of messages that matches the selector      * @throws Exception      */
specifier|protected
name|List
name|queryMessages
parameter_list|(
name|String
name|selector
parameter_list|)
throws|throws
name|Exception
block|{
name|JMXConnector
name|connector
init|=
name|createJmxConnector
argument_list|()
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|CompositeData
index|[]
name|messages
init|=
operator|(
name|CompositeData
index|[]
operator|)
name|server
operator|.
name|invoke
argument_list|(
name|destName
argument_list|,
literal|"browse"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|connector
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|messages
argument_list|)
return|;
block|}
comment|/**      * Get the JMX service URL the query is connecting to.      *       * @return JMX service URL      */
specifier|public
name|JMXServiceURL
name|getJmxServiceUrl
parameter_list|()
block|{
return|return
name|jmxServiceUrl
return|;
block|}
comment|/**      * Sets the JMX service URL the query is going to connect to.      *       * @param jmxServiceUrl - new JMX service URL      */
specifier|public
name|void
name|setJmxServiceUrl
parameter_list|(
name|JMXServiceURL
name|jmxServiceUrl
parameter_list|)
block|{
name|this
operator|.
name|jmxServiceUrl
operator|=
name|jmxServiceUrl
expr_stmt|;
block|}
comment|/**      * Sets the JMX service URL the query is going to connect to.      *       * @param jmxServiceUrl - new JMX service URL      */
specifier|public
name|void
name|setJmxServiceUrl
parameter_list|(
name|String
name|jmxServiceUrl
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|setJmxServiceUrl
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|jmxServiceUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a JMX connector      *       * @return JMX connector      * @throws java.io.IOException      */
specifier|protected
name|JMXConnector
name|createJmxConnector
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|getJmxServiceUrl
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

