begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ7118Test
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ7118Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
specifier|static
name|String
name|WIRE_LEVEL_ENDPOINT
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|Connection
name|producerConnection
decl_stmt|;
specifier|protected
name|Session
name|pSession
decl_stmt|;
specifier|protected
name|Connection
name|cConnection
decl_stmt|;
specifier|protected
name|Session
name|cSession
decl_stmt|;
specifier|private
specifier|final
name|String
name|xbean
init|=
literal|"xbean:"
decl_stmt|;
specifier|private
specifier|final
name|String
name|confBase
init|=
literal|"src/test/resources/org/apache/activemq/bugs/amq7118"
decl_stmt|;
name|int
name|checkpointIndex
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ActiveMQConnectionFactory
name|ACTIVE_MQ_CONNECTION_FACTORY
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|WIRE_LEVEL_ENDPOINT
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteData
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/data"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|()
expr_stmt|;
name|ACTIVE_MQ_CONNECTION_FACTORY
operator|.
name|setConnectionIDPrefix
argument_list|(
literal|"bla"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setupProducerConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|producerConnection
operator|=
name|ACTIVE_MQ_CONNECTION_FACTORY
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|pSession
operator|=
name|producerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setupConsumerConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|cConnection
operator|=
name|ACTIVE_MQ_CONNECTION_FACTORY
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|cConnection
operator|.
name|setClientID
argument_list|(
literal|"myClient1"
argument_list|)
expr_stmt|;
name|cConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|cSession
operator|=
name|cConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|xbean
operator|+
name|confBase
operator|+
literal|"/activemq.xml"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|setupProducerConnection
argument_list|()
expr_stmt|;
name|setupConsumerConnection
argument_list|()
expr_stmt|;
name|Topic
name|topic
init|=
name|pSession
operator|.
name|createTopic
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|cSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"clientId1"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Produce message to test topic"
argument_list|)
expr_stmt|;
name|produce
argument_list|(
name|pSession
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|)
expr_stmt|;
comment|// just one message
name|LOG
operator|.
name|info
argument_list|(
literal|"Consume message from test topic"
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Produce more messages to test topic and get into PFC"
argument_list|)
expr_stmt|;
name|boolean
name|sent
init|=
name|produce
argument_list|(
name|cSession
argument_list|,
name|topic
argument_list|,
literal|20
argument_list|,
literal|512
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|// Fill the store
name|assertFalse
argument_list|(
literal|"Never got to PFC condition"
argument_list|,
name|sent
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PFC hit"
argument_list|)
expr_stmt|;
comment|//We hit PFC, so shut down the producer
name|producerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Lets check the db-*.log file count before checkpointUpdate
name|checkFiles
argument_list|(
literal|false
argument_list|,
literal|21
argument_list|,
literal|"db-21.log"
argument_list|)
expr_stmt|;
comment|// Force checkFiles update
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|23
argument_list|,
literal|"db-23.log"
argument_list|)
expr_stmt|;
comment|//The ackMessageFileMap should be clean, so no more writing
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|23
argument_list|,
literal|"db-23.log"
argument_list|)
expr_stmt|;
comment|//One more time just to be sure - The ackMessageFileMap should be clean, so no more writing
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|23
argument_list|,
literal|"db-23.log"
argument_list|)
expr_stmt|;
comment|//Read out the rest of the messages
name|LOG
operator|.
name|info
argument_list|(
literal|"Consuming the rest of the files..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"All messages Consumed."
argument_list|)
expr_stmt|;
comment|//Clean up the log files and be sure its stable
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|,
literal|"db-30.log"
argument_list|)
expr_stmt|;
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|3
argument_list|,
literal|"db-31.log"
argument_list|)
expr_stmt|;
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|,
literal|"db-31.log"
argument_list|)
expr_stmt|;
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|,
literal|"db-31.log"
argument_list|)
expr_stmt|;
name|checkFiles
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|,
literal|"db-31.log"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|boolean
name|produce
parameter_list|(
name|Session
name|session
parameter_list|,
name|Topic
name|topic
parameter_list|,
name|int
name|messageCount
parameter_list|,
name|int
name|messageSize
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|helloMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"a"
argument_list|,
name|messageSize
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|producer
operator|.
name|send
argument_list|(
name|helloMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceAllocationException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|deleteData
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
index|[]
name|entries
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|String
name|s
range|:
name|entries
control|)
block|{
name|File
name|currentFile
init|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteData
argument_list|(
name|currentFile
argument_list|)
expr_stmt|;
block|}
name|currentFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkFiles
parameter_list|(
name|boolean
name|doCheckpoint
parameter_list|,
name|int
name|expectedCount
parameter_list|,
name|String
name|lastFileName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|dbfiles
init|=
operator|new
name|File
argument_list|(
literal|"target/data/kahadb"
argument_list|)
decl_stmt|;
name|FilenameFilter
name|lff
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"db-"
argument_list|)
operator|&&
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"log"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|doCheckpoint
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiating checkpointUpdate "
operator|+
operator|++
name|checkpointIndex
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|checkpoint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoint complete."
argument_list|)
expr_stmt|;
block|}
name|File
name|files
index|[]
init|=
name|dbfiles
operator|.
name|listFiles
argument_list|(
name|lff
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|files
argument_list|,
operator|new
name|DBFileComparator
argument_list|()
argument_list|)
expr_stmt|;
name|logfiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lastFileName
argument_list|,
name|files
index|[
name|files
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logfiles
parameter_list|(
name|File
index|[]
name|files
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Files found in KahaDB:"
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"    "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|DBFileComparator
implements|implements
name|Comparator
argument_list|<
name|File
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|File
name|o1
parameter_list|,
name|File
name|o2
parameter_list|)
block|{
name|int
name|n1
init|=
name|extractNumber
argument_list|(
name|o1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|n2
init|=
name|extractNumber
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|n1
operator|-
name|n2
return|;
block|}
specifier|private
name|int
name|extractNumber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|s
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|e
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|number
init|=
name|name
operator|.
name|substring
argument_list|(
name|s
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|i
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|i
operator|=
literal|0
expr_stmt|;
comment|// if filename does not match the format
comment|// then default to 0
block|}
return|return
name|i
return|;
block|}
block|}
block|}
end_class

end_unit

