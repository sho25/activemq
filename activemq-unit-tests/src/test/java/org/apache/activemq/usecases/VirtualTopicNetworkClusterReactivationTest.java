begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|ConditionalNetworkBridgeFilterFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * @author<a href="http://www.christianposta.com/blog">Christian Posta</a>  */
end_comment

begin_class
specifier|public
class|class
name|VirtualTopicNetworkClusterReactivationTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A
init|=
literal|"brokerA"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B
init|=
literal|"brokerB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A_TRANSPORT_URL
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B_TRANSPORT_URL
init|=
literal|"tcp://localhost:61617"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_SLEEP_MS
init|=
literal|1000
decl_stmt|;
specifier|private
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.FOO.TEST"
argument_list|)
decl_stmt|;
specifier|private
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.FOO.VirtualTopic.FOO.TEST"
argument_list|)
decl_stmt|;
comment|/**      * This test shows how to use pub/sub to mimic durable subscribers in a network of brokers.      *      * When using durable subscribers in a broker cluster, you can encounter a situation where a      * subscription gets orphaned on a broker when the client disconnects and reattaches to another      * broker in the cluster. Since the clientID/durableName only need to be unique within a single      * broker, it's possible to have a durable sub on multiple brokers in a cluster.      *      * FOR EXAMPLE:      * Broker A and B are networked together in both directions to form a full mesh. If durable      * subscriber 'foo' subscribes to failover(A,B) and ends up on B, and a producer on A, messages      * will be demand forwarded from A to B. But if the durable sub 'foo' disconnects from B,      * then reconnects to failover(A,B) but this time gets connected to A, the subscription on      * B will still be there are continue to receive messages (and possibly have missed messages      * sent there while gone)      *      * We can avoid all of this mess with virtual topics as seen below:      *      *      * @throws JMSException      */
specifier|public
name|void
name|testDurableSubReconnectFromAtoB
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// create consumer on broker B
name|ActiveMQConnectionFactory
name|bConnFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|BROKER_B_TRANSPORT_URL
operator|+
literal|"?jms.prefetchPolicy.queuePrefetch=0"
argument_list|)
decl_stmt|;
name|Connection
name|bConn
init|=
name|bConnFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|bConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|bSession
init|=
name|bConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|bSessionConsumer
init|=
name|bSession
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// create producer on A
name|ActiveMQConnectionFactory
name|aConnFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|BROKER_A_TRANSPORT_URL
argument_list|)
decl_stmt|;
name|Connection
name|aProducerConn
init|=
name|aConnFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|aProducerConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|aProducerSession
init|=
name|aProducerConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|aProducerSession
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|produce
argument_list|(
name|producer
argument_list|,
name|aProducerSession
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// sleep for a sec to let the messages get bridged over to broker B
name|sleep
argument_list|()
expr_stmt|;
comment|// consumer on B has not consumed any messages, and for some reason goes away:
name|bSessionConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|bSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|bConn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// let the bridge catch up
name|sleep
argument_list|()
expr_stmt|;
comment|// and now consumer reattaches to A and wants the messages that were sent to B
name|Connection
name|aConsumerConn
init|=
name|aConnFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|aConsumerConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|aConsumerSession
init|=
name|aConsumerConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|aSessionConsumer
init|=
name|aConsumerSession
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|sleep
argument_list|()
expr_stmt|;
comment|// they should all be there
name|consume
argument_list|(
name|aSessionConsumer
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|consume
parameter_list|(
name|MessageConsumer
name|durable
parameter_list|,
name|int
name|numMessagesExpected
parameter_list|)
throws|throws
name|JMSException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessagesExpected
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|durable
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"received: "
operator|+
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"message: "
operator|+
name|i
argument_list|,
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|produce
parameter_list|(
name|MessageProducer
name|producer
parameter_list|,
name|Session
name|sess
parameter_list|,
name|int
name|numMessages
parameter_list|)
throws|throws
name|JMSException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"message: "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|maxSetupTime
operator|=
literal|1000
expr_stmt|;
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|String
name|options
init|=
literal|"?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"
decl_stmt|;
name|BrokerService
name|brokerServiceA
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"broker:(%s)/%s%s"
argument_list|,
name|BROKER_A_TRANSPORT_URL
argument_list|,
name|BROKER_A
argument_list|,
name|options
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|brokerServiceA
operator|.
name|setDestinationPolicy
argument_list|(
name|buildPolicyMap
argument_list|()
argument_list|)
expr_stmt|;
name|brokerServiceA
operator|.
name|setDestinations
argument_list|(
operator|new
name|ActiveMQDestination
index|[]
block|{
name|queue
block|}
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerServiceB
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"broker:(%s)/%s%s"
argument_list|,
name|BROKER_B_TRANSPORT_URL
argument_list|,
name|BROKER_B
argument_list|,
name|options
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|brokerServiceB
operator|.
name|setDestinationPolicy
argument_list|(
name|buildPolicyMap
argument_list|()
argument_list|)
expr_stmt|;
name|brokerServiceB
operator|.
name|setDestinations
argument_list|(
operator|new
name|ActiveMQDestination
index|[]
block|{
name|queue
block|}
argument_list|)
expr_stmt|;
comment|// bridge brokers to each other statically (static: discovery)
name|bridgeBrokers
argument_list|(
name|BROKER_A
argument_list|,
name|BROKER_B
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|BROKER_B
argument_list|,
name|BROKER_A
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PolicyMap
name|buildPolicyMap
parameter_list|()
block|{
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|policyEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policyEntry
operator|.
name|setOptimizedDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ConditionalNetworkBridgeFilterFactory
name|networkBridgeFilterFactory
init|=
operator|new
name|ConditionalNetworkBridgeFilterFactory
argument_list|()
decl_stmt|;
name|networkBridgeFilterFactory
operator|.
name|setReplayWhenNoConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setNetworkBridgeFilterFactory
argument_list|(
name|networkBridgeFilterFactory
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setEnableAudit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.*.VirtualTopic.>"
argument_list|)
argument_list|,
name|policyEntry
argument_list|)
expr_stmt|;
return|return
name|policyMap
return|;
block|}
specifier|private
name|void
name|sleep
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_SLEEP_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|igonred
parameter_list|)
block|{         }
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|milliSecondTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliSecondTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|igonred
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

