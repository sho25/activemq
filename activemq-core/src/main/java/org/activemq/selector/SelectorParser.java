begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. SelectorParser.java */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|selector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|filter
operator|.
name|*
import|;
end_import

begin_comment
comment|/**   * JMS Selector Parser generated by JavaCC  *   * Do not edit this .java file directly - it is autogenerated from SelectorParser.jj  */
end_comment

begin_class
specifier|public
class|class
name|SelectorParser
implements|implements
name|SelectorParserConstants
block|{
specifier|public
name|SelectorParser
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BooleanExpression
name|parse
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|InvalidSelectorException
block|{
name|this
operator|.
name|ReInit
argument_list|(
operator|new
name|StringReader
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|JmsSelector
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InvalidSelectorException
operator|)
operator|new
name|InvalidSelectorException
argument_list|(
name|sql
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|BooleanExpression
name|asBooleanExpression
parameter_list|(
name|Expression
name|value
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|value
operator|instanceof
name|BooleanExpression
condition|)
block|{
return|return
operator|(
name|BooleanExpression
operator|)
name|value
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|PropertyExpression
condition|)
block|{
return|return
name|UnaryExpression
operator|.
name|createBooleanCast
argument_list|(
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Expression will not result in a boolean value: "
operator|+
name|value
argument_list|)
throw|;
block|}
comment|// ----------------------------------------------------------------------------
comment|// Grammer
comment|// ----------------------------------------------------------------------------
specifier|final
specifier|public
name|BooleanExpression
name|JmsSelector
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
init|=
literal|null
decl_stmt|;
name|left
operator|=
name|orExpression
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|asBooleanExpression
argument_list|(
name|left
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|orExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
decl_stmt|;
name|Expression
name|right
decl_stmt|;
name|left
operator|=
name|andExpression
argument_list|()
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|OR
case|:
empty_stmt|;
break|break;
default|default:
break|break
name|label_1
break|;
block|}
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|right
operator|=
name|andExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|LogicExpression
operator|.
name|createOR
argument_list|(
name|asBooleanExpression
argument_list|(
name|left
argument_list|)
argument_list|,
name|asBooleanExpression
argument_list|(
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|andExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
decl_stmt|;
name|Expression
name|right
decl_stmt|;
name|left
operator|=
name|equalityExpression
argument_list|()
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
empty_stmt|;
break|break;
default|default:
break|break
name|label_2
break|;
block|}
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|right
operator|=
name|equalityExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|LogicExpression
operator|.
name|createAND
argument_list|(
name|asBooleanExpression
argument_list|(
name|left
argument_list|)
argument_list|,
name|asBooleanExpression
argument_list|(
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|equalityExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
decl_stmt|;
name|Expression
name|right
decl_stmt|;
name|left
operator|=
name|comparisonExpression
argument_list|()
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IS
case|:
case|case
literal|28
case|:
case|case
literal|29
case|:
empty_stmt|;
break|break;
default|default:
break|break
name|label_3
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|28
case|:
name|jj_consume_token
argument_list|(
literal|28
argument_list|)
expr_stmt|;
name|right
operator|=
name|comparisonExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createEqual
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
literal|29
case|:
name|jj_consume_token
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|right
operator|=
name|comparisonExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createNotEqual
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|IS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createIsNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IS
case|:
name|jj_consume_token
argument_list|(
name|IS
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createIsNotNull
argument_list|(
name|left
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|comparisonExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
decl_stmt|;
name|Expression
name|right
decl_stmt|;
name|Expression
name|low
decl_stmt|;
name|Expression
name|high
decl_stmt|;
name|String
name|t
decl_stmt|,
name|u
decl_stmt|;
name|boolean
name|not
decl_stmt|;
name|ArrayList
name|list
decl_stmt|;
name|left
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
case|case
name|BETWEEN
case|:
case|case
name|LIKE
case|:
case|case
name|IN
case|:
case|case
literal|30
case|:
case|case
literal|31
case|:
case|case
literal|32
case|:
case|case
literal|33
case|:
empty_stmt|;
break|break;
default|default:
break|break
name|label_4
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|30
case|:
name|jj_consume_token
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|right
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createGreaterThan
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
literal|31
case|:
name|jj_consume_token
argument_list|(
literal|31
argument_list|)
expr_stmt|;
name|right
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createGreaterThanEqual
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|jj_consume_token
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|right
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createLessThan
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
literal|33
case|:
name|jj_consume_token
argument_list|(
literal|33
argument_list|)
expr_stmt|;
name|right
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createLessThanEqual
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIKE
case|:
name|u
operator|=
literal|null
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LIKE
argument_list|)
expr_stmt|;
name|t
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ESCAPE
case|:
name|jj_consume_token
argument_list|(
name|ESCAPE
argument_list|)
expr_stmt|;
name|u
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
name|left
operator|=
name|ComparisonExpression
operator|.
name|createLike
argument_list|(
name|left
argument_list|,
name|t
argument_list|,
name|u
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|jj_2_2
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|u
operator|=
literal|null
expr_stmt|;
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LIKE
argument_list|)
expr_stmt|;
name|t
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ESCAPE
case|:
name|jj_consume_token
argument_list|(
name|ESCAPE
argument_list|)
expr_stmt|;
name|u
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
name|left
operator|=
name|ComparisonExpression
operator|.
name|createNotLike
argument_list|(
name|left
argument_list|,
name|t
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BETWEEN
case|:
name|jj_consume_token
argument_list|(
name|BETWEEN
argument_list|)
expr_stmt|;
name|low
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|high
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createBetween
argument_list|(
name|left
argument_list|,
name|low
argument_list|,
name|high
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|jj_2_3
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|BETWEEN
argument_list|)
expr_stmt|;
name|low
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|high
operator|=
name|addExpression
argument_list|()
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createNotBetween
argument_list|(
name|left
argument_list|,
name|low
argument_list|,
name|high
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IN
case|:
name|jj_consume_token
argument_list|(
name|IN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|t
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|35
case|:
empty_stmt|;
break|break;
default|default:
break|break
name|label_5
break|;
block|}
name|jj_consume_token
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|t
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
literal|36
argument_list|)
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createInFilter
argument_list|(
name|left
argument_list|,
name|list
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|jj_2_4
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|t
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
name|list
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|label_6
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|35
case|:
empty_stmt|;
break|break;
default|default:
break|break
name|label_6
break|;
block|}
name|jj_consume_token
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|t
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
literal|36
argument_list|)
expr_stmt|;
name|left
operator|=
name|ComparisonExpression
operator|.
name|createNotInFilter
argument_list|(
name|left
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|addExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
decl_stmt|;
name|Expression
name|right
decl_stmt|;
name|left
operator|=
name|multExpr
argument_list|()
expr_stmt|;
name|label_7
label|:
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|jj_2_5
argument_list|(
literal|2147483647
argument_list|)
condition|)
block|{
empty_stmt|;
block|}
else|else
block|{
break|break
name|label_7
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|37
case|:
name|jj_consume_token
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|right
operator|=
name|multExpr
argument_list|()
expr_stmt|;
name|left
operator|=
name|ArithmeticExpression
operator|.
name|createPlus
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
literal|38
case|:
name|jj_consume_token
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|right
operator|=
name|multExpr
argument_list|()
expr_stmt|;
name|left
operator|=
name|ArithmeticExpression
operator|.
name|createMinus
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|multExpr
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
decl_stmt|;
name|Expression
name|right
decl_stmt|;
name|left
operator|=
name|unaryExpr
argument_list|()
expr_stmt|;
name|label_8
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|39
case|:
case|case
literal|40
case|:
case|case
literal|41
case|:
empty_stmt|;
break|break;
default|default:
break|break
name|label_8
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|39
case|:
name|jj_consume_token
argument_list|(
literal|39
argument_list|)
expr_stmt|;
name|right
operator|=
name|unaryExpr
argument_list|()
expr_stmt|;
name|left
operator|=
name|ArithmeticExpression
operator|.
name|createMultiply
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
literal|40
case|:
name|jj_consume_token
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|right
operator|=
name|unaryExpr
argument_list|()
expr_stmt|;
name|left
operator|=
name|ArithmeticExpression
operator|.
name|createDivide
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
case|case
literal|41
case|:
name|jj_consume_token
argument_list|(
literal|41
argument_list|)
expr_stmt|;
name|right
operator|=
name|unaryExpr
argument_list|()
expr_stmt|;
name|left
operator|=
name|ArithmeticExpression
operator|.
name|createMod
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|unaryExpr
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
name|Expression
name|left
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jj_2_6
argument_list|(
literal|2147483647
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|left
operator|=
name|unaryExpr
argument_list|()
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|38
case|:
name|jj_consume_token
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|left
operator|=
name|unaryExpr
argument_list|()
expr_stmt|;
name|left
operator|=
name|UnaryExpression
operator|.
name|createNegate
argument_list|(
name|left
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|left
operator|=
name|unaryExpr
argument_list|()
expr_stmt|;
name|left
operator|=
name|UnaryExpression
operator|.
name|createNOT
argument_list|(
name|asBooleanExpression
argument_list|(
name|left
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|XPATH
case|:
name|jj_consume_token
argument_list|(
name|XPATH
argument_list|)
expr_stmt|;
name|s
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
name|left
operator|=
name|UnaryExpression
operator|.
name|createXPath
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
case|case
name|XQUERY
case|:
name|jj_consume_token
argument_list|(
name|XQUERY
argument_list|)
expr_stmt|;
name|s
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
name|left
operator|=
name|UnaryExpression
operator|.
name|createXQuery
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|NULL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|HEX_LITERAL
case|:
case|case
name|OCTAL_LITERAL
case|:
case|case
name|FLOATING_POINT_LITERAL
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|ID
case|:
case|case
literal|34
case|:
name|left
operator|=
name|primaryExpr
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|Expression
name|primaryExpr
parameter_list|()
throws|throws
name|ParseException
block|{
name|Expression
name|left
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|NULL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|HEX_LITERAL
case|:
case|case
name|OCTAL_LITERAL
case|:
case|case
name|FLOATING_POINT_LITERAL
case|:
case|case
name|STRING_LITERAL
case|:
name|left
operator|=
name|literal
argument_list|()
expr_stmt|;
break|break;
case|case
name|ID
case|:
name|left
operator|=
name|variable
argument_list|()
expr_stmt|;
break|break;
case|case
literal|34
case|:
name|jj_consume_token
argument_list|(
literal|34
argument_list|)
expr_stmt|;
name|left
operator|=
name|orExpression
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|36
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|ConstantExpression
name|literal
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|String
name|s
decl_stmt|;
name|ConstantExpression
name|left
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
name|s
operator|=
name|stringLitteral
argument_list|()
expr_stmt|;
name|left
operator|=
operator|new
name|ConstantExpression
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DECIMAL_LITERAL
argument_list|)
expr_stmt|;
name|left
operator|=
name|ConstantExpression
operator|.
name|createFromDecimal
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|HEX_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|HEX_LITERAL
argument_list|)
expr_stmt|;
name|left
operator|=
name|ConstantExpression
operator|.
name|createFromHex
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|OCTAL_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|OCTAL_LITERAL
argument_list|)
expr_stmt|;
name|left
operator|=
name|ConstantExpression
operator|.
name|createFromOctal
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOATING_POINT_LITERAL
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|FLOATING_POINT_LITERAL
argument_list|)
expr_stmt|;
name|left
operator|=
name|ConstantExpression
operator|.
name|createFloat
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRUE
case|:
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
name|left
operator|=
name|ConstantExpression
operator|.
name|TRUE
expr_stmt|;
break|break;
case|case
name|FALSE
case|:
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
name|left
operator|=
name|ConstantExpression
operator|.
name|FALSE
expr_stmt|;
break|break;
case|case
name|NULL
case|:
name|jj_consume_token
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|left
operator|=
name|ConstantExpression
operator|.
name|NULL
expr_stmt|;
break|break;
default|default:
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|String
name|stringLitteral
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|StringBuffer
name|rc
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
comment|// Decode the sting value.
name|String
name|image
init|=
name|t
operator|.
name|image
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|image
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\''
condition|)
name|i
operator|++
expr_stmt|;
name|rc
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|rc
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|PropertyExpression
name|variable
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|PropertyExpression
name|left
init|=
literal|null
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|left
operator|=
operator|new
name|PropertyExpression
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|left
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|final
specifier|private
name|boolean
name|jj_2_2
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_2
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|final
specifier|private
name|boolean
name|jj_2_3
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_3
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|final
specifier|private
name|boolean
name|jj_2_4
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_4
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|final
specifier|private
name|boolean
name|jj_2_5
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_5
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|final
specifier|private
name|boolean
name|jj_2_6
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_6
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_51
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|32
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_27
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ID
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_61
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|35
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_48
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_56
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_57
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_38
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|OR
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_37
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_50
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|31
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_25
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|34
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_28
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|36
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_24
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_27
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_49
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|30
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_44
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_49
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_50
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_51
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_52
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_53
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_2
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_54
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_3
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_55
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_4
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_23
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_26
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_43
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_9
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_48
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_28
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_37
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_38
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_22
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_23
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_24
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_25
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_17
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_22
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_21
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|STRING_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_60
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|35
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_16
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|XQUERY
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_41
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_44
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_59
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ESCAPE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3_4
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|34
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_61
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|36
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3_6
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|37
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_15
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|XPATH
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_14
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_36
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NULL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_12
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|37
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_55
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|34
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_60
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|36
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_47
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IS
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NULL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_13
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|38
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_35
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FALSE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|IS
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NULL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_10
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_12
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_13
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_14
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_15
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_16
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_17
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_34
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TRUE
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_46
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|29
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3_3
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|BETWEEN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|AND
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_45
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|28
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_42
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_45
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_46
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3_1
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_47
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_33
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|FLOATING_POINT_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_54
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|BETWEEN
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|AND
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_58
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ESCAPE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_32
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|OCTAL_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_20
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|41
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_39
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_41
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_42
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3_2
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|NOT
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LIKE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_59
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_53
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|LIKE
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_58
argument_list|()
condition|)
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_31
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|HEX_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_19
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|40
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_18
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|39
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_11
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_18
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_19
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_20
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_40
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|AND
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_39
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_30
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|DECIMAL_LITERAL
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_9
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_10
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_11
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_29
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_21
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_57
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|38
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_9
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_37
parameter_list|()
block|{
if|if
condition|(
name|jj_3R_39
argument_list|()
condition|)
return|return
literal|true
return|;
name|Token
name|xsp
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_40
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3_5
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|37
argument_list|)
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|38
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|jj_3R_9
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_26
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_29
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_30
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_31
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_32
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_33
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_34
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_35
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_36
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_52
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|33
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_43
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|private
name|boolean
name|jj_3R_56
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
literal|37
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_3R_9
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|SelectorParserTokenManager
name|token_source
decl_stmt|;
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
specifier|public
name|Token
name|token
decl_stmt|,
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
specifier|private
name|int
name|jj_la
decl_stmt|;
specifier|public
name|boolean
name|lookingAhead
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|jj_semLA
decl_stmt|;
specifier|public
name|SelectorParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|SelectorParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|SelectorParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|SelectorParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|SelectorParser
parameter_list|(
name|SelectorParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|SelectorParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|final
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
specifier|final
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|lookingAhead
condition|?
name|jj_scanpos
else|:
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|final
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|Token
name|errortok
init|=
name|token
operator|.
name|next
decl_stmt|;
name|int
name|line
init|=
name|errortok
operator|.
name|beginLine
decl_stmt|,
name|column
init|=
name|errortok
operator|.
name|beginColumn
decl_stmt|;
name|String
name|mess
init|=
operator|(
name|errortok
operator|.
name|kind
operator|==
literal|0
operator|)
condition|?
name|tokenImage
index|[
literal|0
index|]
else|:
name|errortok
operator|.
name|image
decl_stmt|;
return|return
operator|new
name|ParseException
argument_list|(
literal|"Parse error at line "
operator|+
name|line
operator|+
literal|", column "
operator|+
name|column
operator|+
literal|".  Encountered: "
operator|+
name|mess
argument_list|)
return|;
block|}
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
block|}
end_class

end_unit

