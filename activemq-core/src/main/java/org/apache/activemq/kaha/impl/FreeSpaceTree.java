begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A a wrapper for a TreeMap of free Items - sorted by size This enables us to re-use free Items on disk  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
class|class
name|FreeSpaceTree
block|{
specifier|private
name|Map
name|sizeMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|TreeMap
name|tree
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|void
name|addItem
parameter_list|(
name|Item
name|item
parameter_list|)
block|{
name|Long
name|sizeKey
init|=
operator|new
name|Long
argument_list|(
name|item
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|Item
name|old
init|=
operator|(
name|Item
operator|)
name|tree
operator|.
name|put
argument_list|(
name|sizeKey
argument_list|,
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
comment|// We'll preserve old items to reuse
name|List
name|list
init|=
operator|(
name|List
operator|)
name|sizeMap
operator|.
name|get
argument_list|(
name|sizeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|sizeMap
operator|.
name|put
argument_list|(
name|sizeKey
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|removeItem
parameter_list|(
name|Item
name|item
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|Long
name|sizeKey
init|=
operator|new
name|Long
argument_list|(
name|item
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|Item
name|retrieved
init|=
operator|(
name|Item
operator|)
name|tree
operator|.
name|get
argument_list|(
name|sizeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|retrieved
operator|==
name|item
condition|)
block|{
name|Object
name|foo
init|=
name|tree
operator|.
name|remove
argument_list|(
name|sizeKey
argument_list|)
decl_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
name|reconfigureTree
argument_list|(
name|sizeKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|sizeMap
operator|.
name|get
argument_list|(
name|sizeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|boolean
name|foo
init|=
name|list
operator|.
name|remove
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sizeMap
operator|.
name|remove
argument_list|(
name|sizeKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
name|Item
name|getNextFreeSpace
parameter_list|(
name|Item
name|item
parameter_list|)
block|{
name|Item
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Long
name|sizeKey
init|=
operator|new
name|Long
argument_list|(
name|item
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|SortedMap
name|map
init|=
name|tree
operator|.
name|tailMap
argument_list|(
name|sizeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
operator|&&
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Long
name|resultKey
init|=
operator|(
name|Long
operator|)
name|map
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|result
operator|=
operator|(
name|Item
operator|)
name|map
operator|.
name|get
argument_list|(
name|resultKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// remove from the tree
name|tree
operator|.
name|remove
argument_list|(
name|resultKey
argument_list|)
expr_stmt|;
name|reconfigureTree
argument_list|(
name|resultKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
name|void
name|reconfigureTree
parameter_list|(
name|Long
name|sizeKey
parameter_list|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|sizeMap
operator|.
name|get
argument_list|(
name|sizeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Object
name|newItem
init|=
name|list
operator|.
name|remove
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|tree
operator|.
name|put
argument_list|(
name|sizeKey
argument_list|,
name|newItem
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sizeMap
operator|.
name|remove
argument_list|(
name|sizeKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|size
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|sizeMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|+=
name|list
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|result
operator|+
name|tree
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

