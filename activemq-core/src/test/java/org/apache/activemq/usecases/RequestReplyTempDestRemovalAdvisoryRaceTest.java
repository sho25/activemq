begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|DeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PriorityDispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SharedDeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DemandForwardingBridgeSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @author<a href="http://www.christianposta.com/blog">Christian Posta</a>  */
end_comment

begin_class
specifier|public
class|class
name|RequestReplyTempDestRemovalAdvisoryRaceTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RequestReplyTempDestRemovalAdvisoryRaceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A
init|=
literal|"BrokerA"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B
init|=
literal|"BrokerB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_C
init|=
literal|"BrokerC"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RESPONDENTS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SENDS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RANDOM_SLEEP_FOR_RESPONDENT_MS
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RANDOM_SLEEP_FOR_SENDER_MS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_NAME
init|=
literal|"foo.queue"
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|TEST_ITERATIONS
init|=
operator|new
name|String
index|[]
block|{
name|QUEUE_NAME
operator|+
literal|"0"
block|,
name|QUEUE_NAME
operator|+
literal|"1"
block|,
name|QUEUE_NAME
operator|+
literal|"2"
block|,
name|QUEUE_NAME
operator|+
literal|"3"
block|}
decl_stmt|;
specifier|final
name|AtomicLong
name|messageCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|respondentSendError
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|responseReceived
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sendsWithNoConsumers
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|forwardFailures
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|shutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|NetworkConnector
argument_list|>
name|networkConnectors
init|=
operator|new
name|HashSet
argument_list|<
name|NetworkConnector
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Connection
argument_list|>
name|advisoryConsumerConnections
init|=
operator|new
name|HashSet
argument_list|<
name|Connection
argument_list|>
argument_list|()
decl_stmt|;
name|Appender
name|slowDownAppender
decl_stmt|;
name|CountDownLatch
name|consumerDemandExists
decl_stmt|;
specifier|protected
name|boolean
name|useDuplex
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|RequestReplyTempDestRemovalAdvisoryRaceTest
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Notes: to reliably reproduce use debugger... set a "thread" breakpoint at line 679 in DemandForwardingBridgeSupport,      * and only break on the "2nd" pass (broker C's bridge). Allow debugging to continue shortly after hitting      * the breakpoint, for this test we use a logging appender to implement the pause,      * it fails most of the time, hence the combos      */
specifier|public
name|void
name|initCombos
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"QUEUE_NAME"
argument_list|,
name|TEST_ITERATIONS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTempDestRaceDuplex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// duplex
name|useDuplex
operator|=
literal|true
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|BROKER_A
argument_list|,
name|BROKER_B
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|BROKER_B
argument_list|,
name|BROKER_C
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
name|bridgesStart
init|=
operator|new
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkConnector
name|networkConnector
range|:
name|networkConnectors
control|)
block|{
name|bridgesStart
operator|.
name|addAll
argument_list|(
name|networkConnector
operator|.
name|activeBridges
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Bridges start:"
operator|+
name|bridgesStart
argument_list|)
expr_stmt|;
name|slowDownAdvisoryDispatch
argument_list|()
expr_stmt|;
name|noConsumerAdvisory
argument_list|()
expr_stmt|;
name|forwardFailureAdvisory
argument_list|()
expr_stmt|;
comment|// set up respondents
name|ExecutorService
name|respondentThreadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|BrokerItem
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_A
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|brokerAFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerA
operator|.
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
name|brokerAFactory
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RESPONDENTS
condition|;
name|i
operator|++
control|)
block|{
name|respondentThreadPool
operator|.
name|execute
argument_list|(
operator|new
name|EchoRespondent
argument_list|(
name|brokerAFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fire off sends
name|ExecutorService
name|senderThreadPool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|BrokerItem
name|brokerC
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_C
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|brokerCFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerC
operator|.
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SENDS
condition|;
name|i
operator|++
control|)
block|{
name|senderThreadPool
operator|.
name|execute
argument_list|(
operator|new
name|MessageSender
argument_list|(
name|brokerCFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|senderThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|senderThreadPool
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"shutting down"
argument_list|)
expr_stmt|;
name|shutdown
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
name|bridgesEnd
init|=
operator|new
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkConnector
name|networkConnector
range|:
name|networkConnectors
control|)
block|{
name|bridgesEnd
operator|.
name|addAll
argument_list|(
name|networkConnector
operator|.
name|activeBridges
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Bridges end:"
operator|+
name|bridgesEnd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no new bridges created"
argument_list|,
name|bridgesStart
argument_list|,
name|bridgesEnd
argument_list|)
expr_stmt|;
comment|// validate success or error of dlq
name|LOG
operator|.
name|info
argument_list|(
literal|"received: "
operator|+
name|responseReceived
operator|.
name|get
argument_list|()
operator|+
literal|", respondent error: "
operator|+
name|respondentSendError
operator|.
name|get
argument_list|()
operator|+
literal|", noConsumerCount: "
operator|+
name|sendsWithNoConsumers
operator|.
name|get
argument_list|()
operator|+
literal|", forwardFailures: "
operator|+
name|forwardFailures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"success or error"
argument_list|,
name|NUM_SENDS
argument_list|,
name|respondentSendError
operator|.
name|get
argument_list|()
operator|+
name|forwardFailures
operator|.
name|get
argument_list|()
operator|+
name|responseReceived
operator|.
name|get
argument_list|()
operator|+
name|sendsWithNoConsumers
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|forwardFailureAdvisory
parameter_list|()
throws|throws
name|JMSException
block|{
for|for
control|(
name|BrokerItem
name|item
range|:
name|brokers
operator|.
name|values
argument_list|()
control|)
block|{
name|ActiveMQConnectionFactory
name|brokerAFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|item
operator|.
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|brokerAFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getNetworkBridgeForwardFailureAdvisoryTopic
argument_list|()
argument_list|)
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|forwardFailures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|noConsumerAdvisory
parameter_list|()
throws|throws
name|JMSException
block|{
for|for
control|(
name|BrokerItem
name|item
range|:
name|brokers
operator|.
name|values
argument_list|()
control|)
block|{
name|ActiveMQConnectionFactory
name|brokerAFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|item
operator|.
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|brokerAFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getNoTopicConsumersAdvisoryTopic
argument_list|(
operator|new
name|ActiveMQTempTopic
argument_list|(
literal|">"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|sendsWithNoConsumers
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTempDestRace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// non duplex
name|bridgeBrokers
argument_list|(
name|BROKER_A
argument_list|,
name|BROKER_B
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|BROKER_B
argument_list|,
name|BROKER_A
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|BROKER_B
argument_list|,
name|BROKER_C
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|BROKER_C
argument_list|,
name|BROKER_B
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
name|bridgesStart
init|=
operator|new
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkConnector
name|networkConnector
range|:
name|networkConnectors
control|)
block|{
name|bridgesStart
operator|.
name|addAll
argument_list|(
name|networkConnector
operator|.
name|activeBridges
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|slowDownAdvisoryDispatch
argument_list|()
expr_stmt|;
name|noConsumerAdvisory
argument_list|()
expr_stmt|;
name|forwardFailureAdvisory
argument_list|()
expr_stmt|;
comment|// set up respondents
name|ExecutorService
name|respondentThreadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|BrokerItem
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_A
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|brokerAFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerA
operator|.
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
name|brokerAFactory
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RESPONDENTS
condition|;
name|i
operator|++
control|)
block|{
name|respondentThreadPool
operator|.
name|execute
argument_list|(
operator|new
name|EchoRespondent
argument_list|(
name|brokerAFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fire off sends
name|ExecutorService
name|senderThreadPool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|BrokerItem
name|brokerC
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_C
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|brokerCFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerC
operator|.
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SENDS
condition|;
name|i
operator|++
control|)
block|{
name|senderThreadPool
operator|.
name|execute
argument_list|(
operator|new
name|MessageSender
argument_list|(
name|brokerCFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|senderThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|senderThreadPool
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"shutting down"
argument_list|)
expr_stmt|;
name|shutdown
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
name|bridgesEnd
init|=
operator|new
name|HashSet
argument_list|<
name|NetworkBridge
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NetworkConnector
name|networkConnector
range|:
name|networkConnectors
control|)
block|{
name|bridgesEnd
operator|.
name|addAll
argument_list|(
name|networkConnector
operator|.
name|activeBridges
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"no new bridges created"
argument_list|,
name|bridgesStart
argument_list|,
name|bridgesEnd
argument_list|)
expr_stmt|;
comment|// validate success or error or dlq
name|LOG
operator|.
name|info
argument_list|(
literal|"received: "
operator|+
name|responseReceived
operator|.
name|get
argument_list|()
operator|+
literal|", respondent error: "
operator|+
name|respondentSendError
operator|.
name|get
argument_list|()
operator|+
literal|", noConsumerCount: "
operator|+
name|sendsWithNoConsumers
operator|.
name|get
argument_list|()
operator|+
literal|", forwardFailures: "
operator|+
name|forwardFailures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"success or error"
argument_list|,
name|NUM_SENDS
argument_list|,
name|respondentSendError
operator|.
name|get
argument_list|()
operator|+
name|forwardFailures
operator|.
name|get
argument_list|()
operator|+
name|responseReceived
operator|.
name|get
argument_list|()
operator|+
name|sendsWithNoConsumers
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|slowDownAdvisoryDispatch
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|DemandForwardingBridgeSupport
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
comment|// instrument a logger to block the processing of a remove sub advisory
comment|// simulate a slow thread
name|slowDownAppender
operator|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|loggingEvent
parameter_list|)
block|{
if|if
condition|(
name|Level
operator|.
name|DEBUG
operator|.
name|equals
argument_list|(
name|loggingEvent
operator|.
name|getLevel
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|loggingEvent
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"BrokerB"
argument_list|)
operator|&&
name|message
operator|.
name|contains
argument_list|(
literal|"remove local subscription"
argument_list|)
condition|)
block|{
comment|// sleep for a bit
try|try
block|{
name|consumerDemandExists
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Sleeping on receipt of remove info debug message: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                         }
block|}
block|}
block|}
block|}
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|addAppender
argument_list|(
name|slowDownAppender
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|responseReceived
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|respondentSendError
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|forwardFailures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sendsWithNoConsumers
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|networkConnectors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|advisoryConsumerConnections
operator|.
name|clear
argument_list|()
expr_stmt|;
name|consumerDemandExists
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:0)/"
operator|+
name|BROKER_A
operator|+
literal|"?persistent=false&useJmx=false"
argument_list|)
argument_list|)
operator|.
name|setDedicatedTaskRunner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:0)/"
operator|+
name|BROKER_B
operator|+
literal|"?persistent=false&useJmx=false"
argument_list|)
argument_list|)
operator|.
name|setDedicatedTaskRunner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:0)/"
operator|+
name|BROKER_C
operator|+
literal|"?persistent=false&useJmx=false"
argument_list|)
argument_list|)
operator|.
name|setDedicatedTaskRunner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|map
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setSendAdvisoryIfNoConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DeadLetterStrategy
name|deadletterStrategy
init|=
operator|new
name|SharedDeadLetterStrategy
argument_list|()
decl_stmt|;
name|deadletterStrategy
operator|.
name|setProcessNonPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setDeadLetterStrategy
argument_list|(
name|deadletterStrategy
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setDispatchPolicy
argument_list|(
operator|new
name|PriorityDispatchPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTempTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|defaultEntry
argument_list|)
expr_stmt|;
for|for
control|(
name|BrokerItem
name|item
range|:
name|brokers
operator|.
name|values
argument_list|()
control|)
block|{
name|item
operator|.
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|slowDownAppender
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|removeAppender
argument_list|(
name|slowDownAppender
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Connection
name|connection
range|:
name|advisoryConsumerConnections
control|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|NetworkConnector
name|bridgeBrokers
parameter_list|(
name|String
name|localBrokerName
parameter_list|,
name|String
name|remoteBrokerName
parameter_list|,
name|boolean
name|dynamicOnly
parameter_list|,
name|int
name|networkTTL
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|connector
init|=
name|super
operator|.
name|bridgeBrokers
argument_list|(
name|localBrokerName
argument_list|,
name|remoteBrokerName
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setBridgeTempDestinations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setAdvisoryForFailedForward
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
name|useDuplex
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
specifier|abstract
class|class
name|MessageClient
block|{
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|MessageProducer
name|producer
decl_stmt|;
specifier|protected
name|Random
name|random
decl_stmt|;
specifier|protected
name|int
name|timeToSleep
decl_stmt|;
comment|// set up the connection and session
specifier|public
name|MessageClient
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|,
name|int
name|timeToSleep
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeToSleep
operator|=
name|timeToSleep
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|preInit
argument_list|()
expr_stmt|;
name|initProducer
argument_list|()
expr_stmt|;
name|initConsumer
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|preInit
parameter_list|()
throws|throws
name|JMSException
block|{          }
specifier|abstract
specifier|protected
name|void
name|initProducer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
specifier|abstract
specifier|protected
name|void
name|initConsumer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
block|}
class|class
name|MessageSender
extends|extends
name|MessageClient
implements|implements
name|Runnable
block|{
specifier|protected
name|Destination
name|tempDest
decl_stmt|;
specifier|public
name|MessageSender
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|factory
argument_list|,
name|RANDOM_SLEEP_FOR_SENDER_MS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// create a message
try|try
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"request: message #"
operator|+
name|messageCount
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|tempDest
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SENDER: Message ["
operator|+
name|message
operator|.
name|getText
argument_list|()
operator|+
literal|"] has been sent."
argument_list|)
expr_stmt|;
name|Message
name|incomingMessage
init|=
name|consumer
operator|.
name|receive
argument_list|(
name|timeToSleep
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingMessage
operator|instanceof
name|TextMessage
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SENDER: Got a response from echo service!"
operator|+
operator|(
operator|(
name|TextMessage
operator|)
name|incomingMessage
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|responseReceived
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"SENDER: might want to see why i'm getting non-text messages..."
operator|+
name|incomingMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SENDER: Did not get a response this time"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"SENDER: Could not complete message sending properly: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|preInit
parameter_list|()
throws|throws
name|JMSException
block|{
name|this
operator|.
name|tempDest
operator|=
name|session
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initProducer
parameter_list|()
throws|throws
name|JMSException
block|{
name|this
operator|.
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|this
operator|.
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|tempDest
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumer for: "
operator|+
name|tempDest
operator|+
literal|", "
operator|+
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|EchoRespondent
extends|extends
name|MessageClient
implements|implements
name|Runnable
block|{
specifier|public
name|EchoRespondent
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|factory
argument_list|,
name|RANDOM_SLEEP_FOR_RESPONDENT_MS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RESPONDENT LISTENING"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|Message
name|incomingMessage
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingMessage
operator|instanceof
name|TextMessage
condition|)
block|{
name|ActiveMQTextMessage
name|textMessage
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|incomingMessage
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RESPONDENT: Received a message: ["
operator|+
name|textMessage
operator|.
name|getText
argument_list|()
operator|+
literal|"]"
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|textMessage
operator|.
name|getBrokerPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"reply: "
operator|+
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|Destination
name|replyTo
init|=
name|incomingMessage
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|timeToSleep
argument_list|)
expr_stmt|;
name|consumerDemandExists
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|producer
operator|.
name|send
argument_list|(
name|replyTo
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RESPONDENT: sent reply:"
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" back to: "
operator|+
name|replyTo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"RESPONDENT: could not send reply message: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|respondentSendError
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"RESPONDENT: could not create the reply message: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RESPONDENT could not generate a random number"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RESPONDENT: Could not set the message listener on the respondent"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initProducer
parameter_list|()
throws|throws
name|JMSException
block|{
name|this
operator|.
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// so that we can get an advisory on sending with no consumers
name|this
operator|.
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|this
operator|.
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

