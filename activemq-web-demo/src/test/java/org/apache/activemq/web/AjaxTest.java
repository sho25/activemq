begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|Stomp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|ContentExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|io
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|io
operator|.
name|ByteArrayBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|AjaxTest
extends|extends
name|JettyTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AjaxTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
class|class
name|AjaxTestContentExchange
extends|extends
name|ContentExchange
block|{
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
decl_stmt|;
specifier|private
name|String
name|responseContent
decl_stmt|;
name|AjaxTestContentExchange
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|headers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|responseContent
operator|=
literal|""
expr_stmt|;
block|}
specifier|protected
name|void
name|onResponseContent
parameter_list|(
name|Buffer
name|content
parameter_list|)
block|{
name|this
operator|.
name|responseContent
operator|+=
name|content
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|onResponseHeader
parameter_list|(
name|Buffer
name|name
parameter_list|,
name|Buffer
name|value
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getJsessionId
parameter_list|()
block|{
name|String
name|cookie
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"Set-Cookie"
argument_list|)
decl_stmt|;
name|String
index|[]
name|cookie_parts
init|=
name|cookie
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
return|return
name|cookie_parts
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
name|getResponseContent
parameter_list|()
block|{
return|return
name|responseContent
return|;
block|}
block|}
specifier|public
name|void
name|assertContains
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|actual
operator|+
literal|"' does not contain expected fragment '"
operator|+
name|expected
operator|+
literal|"'"
argument_list|,
name|actual
operator|.
name|indexOf
argument_list|(
name|expected
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertResponseCount
parameter_list|(
name|int
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|int
name|occurrences
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|actual
argument_list|,
literal|"<response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected number of<response> elements is not correct."
argument_list|,
name|expected
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testAjaxClientReceivesMessagesWhichAreSentToQueueWhileClientIsPolling
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testAjaxClientReceivesMessagesWhichAreSentToQueueWhileClientIsPolling ***"
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// client 1 subscribes to a queue
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://test&type=listen&message=handler"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|jsessionid
init|=
name|contentExchange
operator|.
name|getJsessionId
argument_list|()
decl_stmt|;
comment|// client 1 polls for messages
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING POLL"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|poll
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
comment|// while client 1 is polling, client 2 sends messages to the queue
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING MESSAGES"
argument_list|)
expr_stmt|;
name|contentExchange
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://test&type=send&message=msg1&"
operator|+
literal|"d1=queue://test&t1=send&m1=msg2&"
operator|+
literal|"d2=queue://test&t2=send&m2=msg3"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DONE POSTING MESSAGES"
argument_list|)
expr_stmt|;
comment|// wait for poll to finish
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|response
init|=
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
comment|// messages might not all be delivered during the 1st poll.  We need to check again.
name|poll
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|fullResponse
init|=
name|response
operator|+
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"full response : "
operator|+
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>msg1</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>msg2</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>msg3</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertResponseCount
argument_list|(
literal|3
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testAjaxClientReceivesMessagesWhichAreSentToTopicWhileClientIsPolling
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testAjaxClientReceivesMessagesWhichAreSentToTopicWhileClientIsPolling ***"
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// client 1 subscribes to a queue
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=topic://test&type=listen&message=handler"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|jsessionid
init|=
name|contentExchange
operator|.
name|getJsessionId
argument_list|()
decl_stmt|;
comment|// client 1 polls for messages
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING POLL"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|poll
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
comment|// while client 1 is polling, client 2 sends messages to the queue
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING MESSAGES"
argument_list|)
expr_stmt|;
name|contentExchange
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=topic://test&type=send&message=msg1&"
operator|+
literal|"d1=topic://test&t1=send&m1=msg2&"
operator|+
literal|"d2=topic://test&t2=send&m2=msg3"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DONE POSTING MESSAGES"
argument_list|)
expr_stmt|;
comment|// wait for poll to finish
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|response
init|=
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
comment|// not all messages might be delivered during the 1st poll.  We need to check again.
name|poll
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|fullResponse
init|=
name|response
operator|+
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"full response : "
operator|+
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='topic://test'>msg1</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='topic://test'>msg2</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='topic://test'>msg3</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertResponseCount
argument_list|(
literal|3
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testAjaxClientReceivesMessagesWhichAreQueuedBeforeClientSubscribes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testAjaxClientReceivesMessagesWhichAreQueuedBeforeClientSubscribes ***"
argument_list|)
expr_stmt|;
comment|// send messages to queue://test
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test one"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test two"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test three"
argument_list|)
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// client 1 subscribes to queue
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://test&type=listen&message=handler"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|jsessionid
init|=
name|contentExchange
operator|.
name|getJsessionId
argument_list|()
decl_stmt|;
comment|// client 1 polls for messages
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING POLL"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|poll
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
comment|// wait for poll to finish
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|response
init|=
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>test one</response>"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>test two</response>"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>test three</response>"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertResponseCount
argument_list|(
literal|3
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testStompMessagesAreReceivedByAjaxClient
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testStompMessagesAreRecievedByAjaxClient ***"
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// client 1 subscribes to a queue
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://test&type=listen&message=handler"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|jsessionid
init|=
name|contentExchange
operator|.
name|getJsessionId
argument_list|()
decl_stmt|;
comment|// client 1 polls for messages
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING POLL"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|poll
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
comment|// stomp client queues some messages
name|StompConnection
name|connection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|open
argument_list|(
name|stompUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|stompUri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|(
literal|"user"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"amq-msg-type"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
literal|"/queue/test"
argument_list|,
literal|"message1"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
literal|"/queue/test"
argument_list|,
literal|"message2"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
literal|"/queue/test"
argument_list|,
literal|"message3"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
literal|"/queue/test"
argument_list|,
literal|"message4"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
literal|"/queue/test"
argument_list|,
literal|"message5"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|connection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// Need to let the transport have enough time to dispatch the incoming messages from
comment|// the socket before we break the connection.
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// wait for poll to finish
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|response
init|=
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
comment|// not all messages might be delivered during the 1st poll.  We need to check again.
name|poll
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|fullResponse
init|=
name|response
operator|+
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>message1</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>message2</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>message3</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>message4</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handler' destination='queue://test'>message5</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertResponseCount
argument_list|(
literal|5
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testAjaxMessagesAreReceivedByStompClient
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testAjaxMessagesAreReceivedByStompClient ***"
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://test&type=send&message=msg1&"
operator|+
literal|"d1=queue://test&t1=send&m1=msg2&"
operator|+
literal|"d2=queue://test&t2=send&m2=msg3&"
operator|+
literal|"d3=queue://test&t3=send&m3=msg4"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|StompConnection
name|connection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|open
argument_list|(
name|stompUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|stompUri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|(
literal|"user"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
literal|"/queue/test"
argument_list|)
expr_stmt|;
name|StompFrame
name|message
decl_stmt|;
name|String
name|allMessageBodies
init|=
literal|""
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|message
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|allMessageBodies
operator|=
name|allMessageBodies
operator|+
literal|"\n"
operator|+
name|message
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{}
name|LOG
operator|.
name|debug
argument_list|(
literal|"All message bodies : "
operator|+
name|allMessageBodies
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"msg1"
argument_list|,
name|allMessageBodies
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"msg2"
argument_list|,
name|allMessageBodies
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"msg3"
argument_list|,
name|allMessageBodies
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"msg4"
argument_list|,
name|allMessageBodies
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testAjaxClientMayUseSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testAjaxClientMayUseSelectors ***"
argument_list|)
expr_stmt|;
comment|// send 2 messages to the same queue w/ different 'filter' values.
name|Message
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test one"
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|msg
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test two"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// client subscribes to queue
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://test&type=listen&message=handler"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
comment|// SELECTOR
name|contentExchange
operator|.
name|setRequestHeader
argument_list|(
literal|"selector"
argument_list|,
literal|"filter='two'"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|jsessionid
init|=
name|contentExchange
operator|.
name|getJsessionId
argument_list|()
decl_stmt|;
comment|// client 1 polls for messages
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING POLL"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|poll
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"<response id='handler' destination='queue://test'>test two</response>"
decl_stmt|;
name|assertContains
argument_list|(
name|expected
argument_list|,
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testMultipleAjaxClientsMayExistInTheSameSession
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testMultipleAjaxClientsMayExistInTheSameSession ***"
argument_list|)
expr_stmt|;
comment|// send messages to queues testA and testB.
name|MessageProducer
name|producerA
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
literal|"testA"
argument_list|)
argument_list|)
decl_stmt|;
name|MessageProducer
name|producerB
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
literal|"testB"
argument_list|)
argument_list|)
decl_stmt|;
name|producerA
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"A1"
argument_list|)
argument_list|)
expr_stmt|;
name|producerA
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"A2"
argument_list|)
argument_list|)
expr_stmt|;
name|producerB
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"B1"
argument_list|)
argument_list|)
expr_stmt|;
name|producerB
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"B2"
argument_list|)
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// clientA subscribes to /queue/testA
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://testA&"
operator|+
literal|"type=listen&"
operator|+
literal|"message=handlerA&"
operator|+
literal|"clientId=clientA"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|jsessionid
init|=
name|contentExchange
operator|.
name|getJsessionId
argument_list|()
decl_stmt|;
comment|// clientB subscribes to /queue/testB using the same JSESSIONID.
name|contentExchange
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=queue://testB&"
operator|+
literal|"type=listen&"
operator|+
literal|"message=handlerB&"
operator|+
literal|"clientId=clientB"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
comment|// clientA polls for messages
name|AjaxTestContentExchange
name|poll
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000&clientId=clientA"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"clientA response : "
operator|+
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expected1
init|=
literal|"<response id='handlerA' destination='queue://testA'>A1</response>"
decl_stmt|;
name|String
name|expected2
init|=
literal|"<response id='handlerA' destination='queue://testA'>A2</response>"
decl_stmt|;
name|assertContains
argument_list|(
name|expected1
argument_list|,
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|expected2
argument_list|,
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// clientB polls for messages
name|poll
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000&clientId=clientB"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"clientB response : "
operator|+
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
name|expected1
operator|=
literal|"<response id='handlerB' destination='queue://testB'>B1</response>"
expr_stmt|;
name|expected2
operator|=
literal|"<response id='handlerB' destination='queue://testB'>B2</response>"
expr_stmt|;
name|assertContains
argument_list|(
name|expected1
argument_list|,
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|expected2
argument_list|,
name|poll
operator|.
name|getResponseContent
argument_list|()
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testAjaxClientReceivesMessagesForMultipleTopics
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** testAjaxClientReceivesMessagesForMultipleTopics ***"
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|setConnectorType
argument_list|(
name|HttpClient
operator|.
name|CONNECTOR_SELECT_CHANNEL
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN FOR /topic/topicA"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|contentExchange
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=topic://topicA&type=listen&message=handlerA"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|jsessionid
init|=
name|contentExchange
operator|.
name|getJsessionId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING LISTEN FOR /topic/topicB"
argument_list|)
expr_stmt|;
name|contentExchange
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=topic://topicB&type=listen&message=handlerB"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
comment|// client 1 polls for messages
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING POLL"
argument_list|)
expr_stmt|;
name|AjaxTestContentExchange
name|poll
init|=
operator|new
name|AjaxTestContentExchange
argument_list|()
decl_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
comment|// while client 1 is polling, client 2 sends messages to the topics
name|LOG
operator|.
name|debug
argument_list|(
literal|"SENDING MESSAGES"
argument_list|)
expr_stmt|;
name|contentExchange
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|contentExchange
operator|.
name|setMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq"
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
literal|"destination=topic://topicA&type=send&message=A1&"
operator|+
literal|"d1=topic://topicB&t1=send&m1=B1&"
operator|+
literal|"d2=topic://topicA&t2=send&m2=A2&"
operator|+
literal|"d3=topic://topicB&t3=send&m3=B2"
argument_list|)
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|setRequestContentType
argument_list|(
literal|"application/x-www-form-urlencoded; charset=UTF-8"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|contentExchange
argument_list|)
expr_stmt|;
name|contentExchange
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DONE POSTING MESSAGES"
argument_list|)
expr_stmt|;
comment|// wait for poll to finish
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|response
init|=
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
comment|// not all messages might be delivered during the 1st poll.  We need to check again.
name|poll
operator|=
operator|new
name|AjaxTestContentExchange
argument_list|()
expr_stmt|;
name|poll
operator|.
name|setMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setURL
argument_list|(
literal|"http://localhost:8080/amq?timeout=5000"
argument_list|)
expr_stmt|;
name|poll
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|jsessionid
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|send
argument_list|(
name|poll
argument_list|)
expr_stmt|;
name|poll
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|String
name|fullResponse
init|=
name|response
operator|+
name|poll
operator|.
name|getResponseContent
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"full response "
operator|+
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handlerA' destination='topic://topicA'>A1</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handlerB' destination='topic://topicB'>B1</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handlerA' destination='topic://topicA'>A2</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<response id='handlerB' destination='topic://topicB'>B2</response>"
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|assertResponseCount
argument_list|(
literal|4
argument_list|,
name|fullResponse
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

