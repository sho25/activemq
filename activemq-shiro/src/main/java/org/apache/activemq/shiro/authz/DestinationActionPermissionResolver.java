begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authz
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|permission
operator|.
name|WildcardPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A {@code DestinationActionPermissionResolver} inspects {@link DestinationAction}s and returns one or more  * {@link WildcardPermission}s that must be granted to a {@code Subject} in order for that {@code Subject} to  * perform the action being taken on an {@link ActiveMQDestination}.  *<p/>  * See the {@link #createPermissionString createPermissionString documentation} to see what the  * resulting {@link WildcardPermission} instances would look like.  *  * @see #createPermissionString(org.apache.activemq.command.ActiveMQDestination, String) )  * @see #setPermissionStringPrefix(String)  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|DestinationActionPermissionResolver
implements|implements
name|ActionPermissionResolver
block|{
specifier|private
name|String
name|permissionStringPrefix
decl_stmt|;
specifier|private
name|boolean
name|permissionStringCaseSensitive
init|=
literal|true
decl_stmt|;
comment|/**      * Returns the String prefix that should be automatically prepended to a permission String before the      * String is converted to a {@link WildcardPermission} instance.  This is convenient if you want to provide a      * 'scope' or 'namespace' for ActiveMQ Destinations to clearly distinguish ActiveMQ-specific permissions from any      * others you might assign to user accounts.  The default value is {@code null}, indicating no prefix will be      * set by default.      *<p/>      * For example, the default settings might result in permissions Strings that look like this:      *<pre>      * topic:TEST:create      * temp-queue:MyQueue:remove      * topic:ActiveMQ.Advisory.*:read      *</pre>      *<p/>      * However, if your application has any application-specific permissions that start with the tokens {@code topic},      * {@code temp-topic}, {@code queue}, or {@code temp-queue}, you wouldn't be able to distinguish between      * application-specific permissions and those specific to ActiveMQ.  In this case you might set the      * {@code permissionStringPrefix}. For example, if you set:      * {@code resolver.setPermissionStringPrefix(&quot;jms&quot;);}, the above permission strings would look like this:      *<pre>      * jms:topic:TEST:create      * jms:temp-queue:MyQueue:remove      * jms:topic:ActiveMQ.Advisory.*:read      *</pre>      *<p/>      * Similarly, if the {@code permissionStringPrefix} was equal to {@code activeMQ}:      *<pre>      * activeMQ:topic:TEST:create      * activeMQ:temp-queue:MyQueue:remove      * activeMQ:topic:ActiveMQ.Advisory.*:read      *</pre>      *      * @return any String prefix that should be automatically prepended to a permission String before the      *         String is converted to a {@link WildcardPermission} instance.  Useful for namespacing permissions.      */
specifier|public
name|String
name|getPermissionStringPrefix
parameter_list|()
block|{
return|return
name|permissionStringPrefix
return|;
block|}
comment|/**      * Sets the String prefix that should be automatically prepended to a permission String before the      * String is converted to a {@link WildcardPermission} instance.  This is convenient if you want to provide a      * 'scope' or 'namespace' for ActiveMQ Destinations to clearly distinguish ActiveMQ-specific permissions from any      * others you might assign to user accounts. The default value is {@code null}, indicating no prefix will be      * set by default.      *<p/>      * For example, the default settings might result in permissions Strings that look like this:      *<pre>      * topic:TEST:create      * temp-queue:MyQueue:remove      * topic:ActiveMQ.Advisory.*:read      *</pre>      *<p/>      * However, if your application has any application-specific permissions that start with the tokens {@code topic},      * {@code temp-topic}, {@code queue}, or {@code temp-queue}, you wouldn't be able to distinguish between      * application-specific permissions and those specific to ActiveMQ.  In this case you might set the      * {@code permissionStringPrefix}. For example, if you set:      * {@code resolver.setPermissionStringPrefix(&quot;jms&quot;);}, the above permission strings would look like this:      *<pre>      * jms:topic:TEST:create      * jms:temp-queue:MyQueue:remove      * jms:topic:ActiveMQ.Advisory.*:read      *</pre>      *<p/>      * Similarly, if the {@code permissionStringPrefix} was equal to {@code activeMQ}:      *<pre>      * activeMQ:topic:TEST:create      * activeMQ:temp-queue:MyQueue:remove      * activeMQ:topic:ActiveMQ.Advisory.*:read      *</pre>      *      * @param permissionStringPrefix any String prefix that should be automatically prepended to a permission String      *                               before the String is converted to a {@link WildcardPermission} instance.  Useful      *                               for namespacing permissions.      */
specifier|public
name|void
name|setPermissionStringPrefix
parameter_list|(
name|String
name|permissionStringPrefix
parameter_list|)
block|{
name|this
operator|.
name|permissionStringPrefix
operator|=
name|permissionStringPrefix
expr_stmt|;
block|}
comment|/**      * Returns {@code true} if returned {@link WildcardPermission} instances should be considered case-sensitive,      * {@code false} otherwise.  The default value is {@code true}, which is<em>not</em> the normal      * {@link WildcardPermission} default setting.  This default was chosen to reflect ActiveMQ's      *<a href="http://activemq.apache.org/are-destinations-case-sensitive.html">case-sensitive destination names</a>.      *      * @return {@code true} if returned {@link WildcardPermission} instances should be considered case-sensitive,      *         {@code false} otherwise.      */
specifier|public
name|boolean
name|isPermissionStringCaseSensitive
parameter_list|()
block|{
return|return
name|permissionStringCaseSensitive
return|;
block|}
comment|/**      * Sets whether returned {@link WildcardPermission} instances should be considered case-sensitive.      * The default value is {@code true}, which is<em>not</em> the normal      * {@link WildcardPermission} default setting.  This default was chosen to accurately reflect ActiveMQ's      *<a href="http://activemq.apache.org/are-destinations-case-sensitive.html">case-sensitive destination names</a>.      *      * @param permissionStringCaseSensitive whether returned {@link WildcardPermission} instances should be considered      *                                      case-sensitive.      */
specifier|public
name|void
name|setPermissionStringCaseSensitive
parameter_list|(
name|boolean
name|permissionStringCaseSensitive
parameter_list|)
block|{
name|this
operator|.
name|permissionStringCaseSensitive
operator|=
name|permissionStringCaseSensitive
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Permission
argument_list|>
name|getPermissions
parameter_list|(
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|action
operator|instanceof
name|DestinationAction
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Action argument must be a "
operator|+
name|DestinationAction
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" instance."
argument_list|)
throw|;
block|}
name|DestinationAction
name|da
init|=
operator|(
name|DestinationAction
operator|)
name|action
decl_stmt|;
return|return
name|getPermissions
argument_list|(
name|da
argument_list|)
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|Permission
argument_list|>
name|getPermissions
parameter_list|(
name|DestinationAction
name|da
parameter_list|)
block|{
name|ActiveMQDestination
name|dest
init|=
name|da
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|String
name|verb
init|=
name|da
operator|.
name|getVerb
argument_list|()
decl_stmt|;
return|return
name|createPermissions
argument_list|(
name|dest
argument_list|,
name|verb
argument_list|)
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|Permission
argument_list|>
name|createPermissions
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|,
name|String
name|verb
parameter_list|)
block|{
name|Set
argument_list|<
name|Permission
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|isComposite
argument_list|()
condition|)
block|{
name|ActiveMQDestination
index|[]
name|composites
init|=
name|dest
operator|.
name|getCompositeDestinations
argument_list|()
decl_stmt|;
name|set
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Permission
argument_list|>
argument_list|(
name|composites
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ActiveMQDestination
name|d
range|:
name|composites
control|)
block|{
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|createPermissions
argument_list|(
name|d
argument_list|,
name|verb
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|Permission
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|permString
init|=
name|createPermissionString
argument_list|(
name|dest
argument_list|,
name|verb
argument_list|)
decl_stmt|;
name|Permission
name|perm
init|=
name|createPermission
argument_list|(
name|permString
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
comment|/**      * Inspects the specified {@code destination} and {@code verb} and returns a {@link WildcardPermission}-compatible      * String the represents the action.      *<h3>Format</h3>      * This implementation returns WildcardPermission strings with the following format:      *<pre>      * optionalPermissionStringPrefix + destinationType + ':' + destinationPhysicalName + ':' + actionVerb      *</pre>      * where:      *<ol>      *<li>{@code optionalPermissionStringPrefix} is the {@link #getPermissionStringPrefix() permissionStringPrefix}      * followed by a colon delimiter (':').  This is only present if the {@code permissionStringPrefix} has been      * specified and is non-null</li>      *<li>{@code destinationType} is one of the following four string tokens:      *<ul>      *<li>{@code topic}</li>      *<li>{@code temp-topic}</li>      *<li>{@code queue}</li>      *<li>{@code temp-queue}</li>      *</ul>      * based on whether the {@link DestinationAction#getDestination() destination} is      * a topic, temporary topic, queue, or temporary queue (respectively).      *</li>      *<li>      * {@code destinationPhysicalName} is      * {@link org.apache.activemq.command.ActiveMQDestination#getPhysicalName() destination.getPhysicalName()}      *</li>      *<li>      * {@code actionVerb} is {@link DestinationAction#getVerb() action.getVerb()}      *</li>      *</ol>      *<h3>Examples</h3>      * With the default settings (no {@link #getPermissionStringPrefix() permissionStringPrefix}), this might produce      * strings that look like the following:      *<pre>      * topic:TEST:create      * temp-queue:MyTempQueue:remove      * queue:ActiveMQ.Advisory.*:read      *</pre>      * If {@link #getPermissionStringPrefix() permissionStringPrefix} was set to {@code jms}, the above examples would      * look like this:      *<pre>      * jms:topic:TEST:create      * jms:temp-queue:MyTempQueue:remove      * jms:queue:ActiveMQ.Advisory.*:read      *</pre>      *      * @param dest the destination to inspect and convert to a {@link WildcardPermission} string.      * @param verb the behavior taken on the destination      * @return a {@link WildcardPermission} string that represents the specified {@code action}.      * @see #getPermissionStringPrefix() getPermissionStringPrefix() for more on why you might want to set this value      */
specifier|protected
name|String
name|createPermissionString
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|,
name|String
name|verb
parameter_list|)
block|{
if|if
condition|(
name|dest
operator|.
name|isComposite
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Use createPermissionStrings for composite destinations."
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|permissionStringPrefix
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|permissionStringPrefix
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|permissionStringPrefix
operator|.
name|endsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"temp-"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dest
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"topic:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"queue:"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|verb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|Permission
name|createPermission
parameter_list|(
name|String
name|permissionString
parameter_list|)
block|{
return|return
operator|new
name|ActiveMQWildcardPermission
argument_list|(
name|permissionString
argument_list|,
name|isPermissionStringCaseSensitive
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

