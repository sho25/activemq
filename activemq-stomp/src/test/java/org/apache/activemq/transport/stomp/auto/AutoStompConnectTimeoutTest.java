begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|auto
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|auto
operator|.
name|AutoTcpTransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test that connection attempts that don't send the connect get cleaned by  * by the protocolDetectionTimeOut property  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AutoStompConnectTimeoutTest
extends|extends
name|StompTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AutoStompConnectTimeoutTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Socket
name|connection
decl_stmt|;
specifier|protected
name|String
name|connectorScheme
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"auto"
block|}
block|,
block|{
literal|"auto+ssl"
block|}
block|,
block|{
literal|"auto+nio"
block|}
block|,
block|{
literal|"auto+nio+ssl"
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|AutoStompConnectTimeoutTest
parameter_list|(
name|String
name|connectorScheme
parameter_list|)
block|{
name|this
operator|.
name|connectorScheme
operator|=
name|connectorScheme
expr_stmt|;
block|}
specifier|protected
name|String
name|getConnectorScheme
parameter_list|()
block|{
return|return
name|connectorScheme
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{}
name|connection
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAdditionalConfig
parameter_list|()
block|{
return|return
literal|"?protocolDetectionTimeOut=1500"
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
specifier|public
name|void
name|testInactivityMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|connection
operator|=
name|createSocket
argument_list|()
expr_stmt|;
name|connection
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
literal|'C'
argument_list|)
expr_stmt|;
name|connection
operator|.
name|getOutputStream
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected exception on connect/disconnect"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"one connection"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|AutoTcpTransportServer
name|server
init|=
operator|(
name|AutoTcpTransportServer
operator|)
name|brokerService
operator|.
name|getTransportConnectorByScheme
argument_list|(
name|getConnectorScheme
argument_list|()
argument_list|)
operator|.
name|getServer
argument_list|()
decl_stmt|;
return|return
literal|1
operator|==
name|server
operator|.
name|getCurrentTransportCount
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|250
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// and it should be closed due to inactivity
name|assertTrue
argument_list|(
literal|"no dangling connections"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|AutoTcpTransportServer
name|server
init|=
operator|(
name|AutoTcpTransportServer
operator|)
name|brokerService
operator|.
name|getTransportConnectorByScheme
argument_list|(
name|getConnectorScheme
argument_list|()
argument_list|)
operator|.
name|getServer
argument_list|()
decl_stmt|;
return|return
literal|0
operator|==
name|server
operator|.
name|getCurrentTransportCount
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|500
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions"
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseTcpConnector
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseAutoConnector
parameter_list|()
block|{
return|return
name|connectorScheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"auto"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseAutoSslConnector
parameter_list|()
block|{
return|return
name|connectorScheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"auto+ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseAutoNioConnector
parameter_list|()
block|{
return|return
name|connectorScheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"auto+nio"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseAutoNioPlusSslConnector
parameter_list|()
block|{
return|return
name|connectorScheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"auto+nio+ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|useSSL
init|=
literal|false
decl_stmt|;
name|int
name|port
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|connectorScheme
condition|)
block|{
case|case
literal|"auto"
case|:
name|port
operator|=
name|this
operator|.
name|autoPort
expr_stmt|;
break|break;
case|case
literal|"auto+ssl"
case|:
name|useSSL
operator|=
literal|true
expr_stmt|;
name|port
operator|=
name|this
operator|.
name|autoSslPort
expr_stmt|;
break|break;
case|case
literal|"auto+nio"
case|:
name|port
operator|=
name|this
operator|.
name|autoNioPort
expr_stmt|;
break|break;
case|case
literal|"auto+nio+ssl"
case|:
name|useSSL
operator|=
literal|true
expr_stmt|;
name|port
operator|=
name|this
operator|.
name|autoNioSslPort
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid STOMP connector scheme passed to test."
argument_list|)
throw|;
block|}
if|if
condition|(
name|useSSL
condition|)
block|{
return|return
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
operator|.
name|createSocket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

