begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BaseCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|CommandVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|FutureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|MutexTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCorrelator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportDisposedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|VMTransportThreadSafeTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VMTransportThreadSafeTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|location1
init|=
literal|"vm://transport1"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|location2
init|=
literal|"vm://transport2"
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|DummyCommand
argument_list|>
name|localReceived
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|DummyCommand
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|DummyCommand
argument_list|>
name|remoteReceived
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|DummyCommand
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
class|class
name|DummyCommand
extends|extends
name|BaseCommand
block|{
specifier|public
specifier|final
name|int
name|sequenceId
decl_stmt|;
specifier|public
name|DummyCommand
parameter_list|()
block|{
name|this
operator|.
name|sequenceId
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|DummyCommand
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|sequenceId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|visit
parameter_list|(
name|CommandVisitor
name|visitor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
block|}
specifier|private
class|class
name|VMTestTransportListener
implements|implements
name|TransportListener
block|{
specifier|protected
specifier|final
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|received
decl_stmt|;
specifier|public
name|boolean
name|shutdownReceived
init|=
literal|false
decl_stmt|;
specifier|public
name|VMTestTransportListener
parameter_list|(
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|receiveQueue
parameter_list|)
block|{
name|this
operator|.
name|received
operator|=
name|receiveQueue
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|instanceof
name|ShutdownInfo
condition|)
block|{
name|shutdownReceived
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|received
operator|.
name|add
argument_list|(
operator|(
name|DummyCommand
operator|)
name|command
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{         }
block|}
specifier|private
class|class
name|VMResponderTransportListener
implements|implements
name|TransportListener
block|{
specifier|protected
specifier|final
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|received
decl_stmt|;
specifier|private
specifier|final
name|Transport
name|peer
decl_stmt|;
specifier|public
name|VMResponderTransportListener
parameter_list|(
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|receiveQueue
parameter_list|,
name|Transport
name|peer
parameter_list|)
block|{
name|this
operator|.
name|received
operator|=
name|receiveQueue
expr_stmt|;
name|this
operator|.
name|peer
operator|=
name|peer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|instanceof
name|ShutdownInfo
condition|)
block|{
return|return;
block|}
else|else
block|{
name|received
operator|.
name|add
argument_list|(
operator|(
name|DummyCommand
operator|)
name|command
argument_list|)
expr_stmt|;
if|if
condition|(
name|peer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|peer
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{         }
block|}
specifier|private
class|class
name|SlowVMTestTransportListener
extends|extends
name|VMTestTransportListener
block|{
specifier|private
specifier|final
name|TimeUnit
name|delayUnit
decl_stmt|;
specifier|private
specifier|final
name|long
name|delay
decl_stmt|;
specifier|public
name|SlowVMTestTransportListener
parameter_list|(
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|receiveQueue
parameter_list|)
block|{
name|this
argument_list|(
name|receiveQueue
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SlowVMTestTransportListener
parameter_list|(
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|receiveQueue
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|delayUnit
parameter_list|)
block|{
name|super
argument_list|(
name|receiveQueue
argument_list|)
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
name|this
operator|.
name|delayUnit
operator|=
name|delayUnit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|super
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
try|try
block|{
name|delayUnit
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|private
class|class
name|GatedVMTestTransportListener
extends|extends
name|VMTestTransportListener
block|{
specifier|private
specifier|final
name|CountDownLatch
name|gate
decl_stmt|;
specifier|public
name|GatedVMTestTransportListener
parameter_list|(
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|receiveQueue
parameter_list|)
block|{
name|this
argument_list|(
name|receiveQueue
argument_list|,
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GatedVMTestTransportListener
parameter_list|(
name|Queue
argument_list|<
name|DummyCommand
argument_list|>
name|receiveQueue
parameter_list|,
name|CountDownLatch
name|gate
parameter_list|)
block|{
name|super
argument_list|(
name|receiveQueue
argument_list|)
expr_stmt|;
name|this
operator|.
name|gate
operator|=
name|gate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|super
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
try|try
block|{
name|gate
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|private
name|void
name|assertMessageAreOrdered
parameter_list|(
name|ConcurrentLinkedQueue
argument_list|<
name|DummyCommand
argument_list|>
name|queue
parameter_list|)
block|{
name|int
name|lastSequenceId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DummyCommand
name|command
range|:
name|queue
control|)
block|{
name|int
name|id
init|=
name|command
operator|.
name|sequenceId
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Last id: "
operator|+
name|lastSequenceId
operator|+
literal|" should be less than current id: "
operator|+
name|id
argument_list|,
name|id
operator|>
name|lastSequenceId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|localReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
name|remoteReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStartWthoutListenerIOE
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an IOExcoption"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOnewayOnStoppedTransportTDE
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a TransportDisposedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportDisposedIOException
name|e
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStopSendsShutdownToPeer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
specifier|final
name|VMTestTransportListener
name|remoteListener
init|=
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
decl_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
name|remoteListener
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteListener
operator|.
name|shutdownReceived
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRemoteStopSendsExceptionToPendingRequests
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
specifier|final
name|VMTestTransportListener
name|remoteListener
init|=
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
decl_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
name|remoteListener
argument_list|)
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Response
index|[]
name|answer
init|=
operator|new
name|Response
index|[
literal|1
index|]
decl_stmt|;
name|ResponseCorrelator
name|responseCorrelator
init|=
operator|new
name|ResponseCorrelator
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|responseCorrelator
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|responseCorrelator
operator|.
name|start
argument_list|()
expr_stmt|;
name|responseCorrelator
operator|.
name|asyncRequest
argument_list|(
operator|new
name|DummyCommand
argument_list|()
argument_list|,
operator|new
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompletion
parameter_list|(
name|FutureResponse
name|resp
parameter_list|)
block|{
try|try
block|{
name|answer
index|[
literal|0
index|]
operator|=
name|resp
operator|.
name|getResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// simulate broker stop
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"answer: "
operator|+
name|answer
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|answer
index|[
literal|0
index|]
operator|instanceof
name|ExceptionResponse
operator|&&
operator|(
operator|(
name|ExceptionResponse
operator|)
name|answer
index|[
literal|0
index|]
operator|)
operator|.
name|getException
argument_list|()
operator|instanceof
name|TransportDisposedIOException
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMultipleStartsAndStops
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|remote
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteReceived
operator|.
name|size
argument_list|()
operator|==
literal|100
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|localReceived
operator|.
name|size
argument_list|()
operator|==
literal|100
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStartWithPeerNotStartedEnqueusCommandsNonAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestStartWithPeerNotStartedEnqueusCommands
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestStartWithPeerNotStartedEnqueusCommands
parameter_list|(
name|boolean
name|async
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
name|remote
operator|.
name|setAsync
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|remote
operator|.
name|getMessageQueue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteReceived
operator|.
name|size
argument_list|()
operator|==
literal|100
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBlockedOnewayEnqeueAandStopTransportAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestBlockedOnewayEnqeueAandStopTransport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBlockedOnewayEnqeueAandStopTransportNonAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestBlockedOnewayEnqeueAandStopTransport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestBlockedOnewayEnqeueAandStopTransport
parameter_list|(
name|boolean
name|async
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|sequenceId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|remote
operator|.
name|setAsync
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setAsyncQueueDepth
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|sequenceId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started async delivery, wait for remote's queue to fill up"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remote
operator|.
name|getMessageQueue
argument_list|()
operator|.
name|remainingCapacity
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remote messageQ is full, start it and stop all"
argument_list|)
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBlockedOnewayEnqeueWhileStartedDetectsStop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|sequenceId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|remote
operator|.
name|setAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setAsyncQueueDepth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|GatedVMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|sequenceId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started async delivery, wait for remote's queue to fill up"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remote
operator|.
name|getMessageQueue
argument_list|()
operator|.
name|remainingCapacity
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting async gate open."
argument_list|)
expr_stmt|;
name|Thread
name|gateman
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
operator|(
operator|(
name|GatedVMTestTransportListener
operator|)
name|remote
operator|.
name|getTransportListener
argument_list|()
operator|)
operator|.
name|gate
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|gateman
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remoteReceived
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertMessageAreOrdered
argument_list|(
name|remoteReceived
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStopWhileStartingAsyncWithNoAsyncLimit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// In the async case the iterate method should see that we are stopping and
comment|// drop out before we dispatch all the messages but it should get at least 49 since
comment|// the stop thread waits 500 mills and the listener is waiting 10 mills on each receive.
name|doTestStopWhileStartingWithNoAsyncLimit
argument_list|(
literal|true
argument_list|,
literal|49
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStopWhileStartingNonAsyncWithNoAsyncLimit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// In the non-async case the start dispatches all messages up front and then continues on
name|doTestStopWhileStartingWithNoAsyncLimit
argument_list|(
literal|false
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestStopWhileStartingWithNoAsyncLimit
parameter_list|(
name|boolean
name|async
parameter_list|,
specifier|final
name|int
name|expect
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
name|remote
operator|.
name|setAsync
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|SlowVMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
block|}
argument_list|)
decl_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Remote should receive: "
operator|+
name|expect
operator|+
literal|", commands but got: "
operator|+
name|remoteReceived
operator|.
name|size
argument_list|()
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteReceived
operator|.
name|size
argument_list|()
operator|>=
name|expect
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remote listener received "
operator|+
name|remoteReceived
operator|.
name|size
argument_list|()
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Remote transport never was disposed."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remote
operator|.
name|isDisposed
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|TestTwoWayMessageThroughPutSync
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|totalTimes
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|executions
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|totalTimes
operator|+=
name|doTestTwoWayMessageThroughPut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Total time of one way sync send throughput test: "
operator|+
operator|(
name|totalTimes
operator|/
name|executions
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|TestTwoWayMessageThroughPutAsnyc
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|totalTimes
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|executions
init|=
literal|50
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|executions
condition|;
operator|++
name|i
control|)
block|{
name|totalTimes
operator|+=
name|doTestTwoWayMessageThroughPut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Total time of one way async send throughput test: "
operator|+
operator|(
name|totalTimes
operator|/
name|executions
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|doTestTwoWayMessageThroughPut
parameter_list|(
name|boolean
name|async
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|sequenceId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|remote
operator|.
name|setAsync
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|messageCount
init|=
literal|200000
decl_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
name|localSend
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|sequenceId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
name|remoteSend
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|remote
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|sequenceId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|localSend
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteSend
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for both to finish and then check that each side go the correct amount
name|localSend
operator|.
name|join
argument_list|()
expr_stmt|;
name|remoteSend
operator|.
name|join
argument_list|()
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteReceived
operator|.
name|size
argument_list|()
operator|==
name|messageCount
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|localReceived
operator|.
name|size
argument_list|()
operator|==
name|messageCount
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"All messages sent,stop all"
argument_list|)
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
name|localReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
name|remoteReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|endTime
operator|-
name|startTime
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|TestOneWayMessageThroughPutSync
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|totalTimes
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|executions
init|=
literal|30
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|executions
condition|;
operator|++
name|i
control|)
block|{
name|totalTimes
operator|+=
name|doTestOneWayMessageThroughPut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Total time of one way sync send throughput test: "
operator|+
operator|(
name|totalTimes
operator|/
name|executions
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|TestOneWayMessageThroughPutAsnyc
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|totalTimes
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|executions
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|totalTimes
operator|+=
name|doTestOneWayMessageThroughPut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Total time of one way async send throughput test: "
operator|+
operator|(
name|totalTimes
operator|/
name|executions
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|doTestOneWayMessageThroughPut
parameter_list|(
name|boolean
name|async
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|local
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|remote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|sequenceId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|remote
operator|.
name|setAsync
argument_list|(
name|async
argument_list|)
expr_stmt|;
name|local
operator|.
name|setPeer
argument_list|(
name|remote
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPeer
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|remoteReceived
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|messageCount
init|=
literal|100000
decl_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
name|localSend
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|sequenceId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|localSend
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for both to finish and then check that each side go the correct amount
name|localSend
operator|.
name|join
argument_list|()
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteReceived
operator|.
name|size
argument_list|()
operator|==
name|messageCount
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"All messages sent,stop all"
argument_list|)
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
name|localReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
name|remoteReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|endTime
operator|-
name|startTime
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testTwoWayTrafficWithMutexTransportSync1
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|doTestTwoWayTrafficWithMutexTransport
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testTwoWayTrafficWithMutexTransportSync2
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|doTestTwoWayTrafficWithMutexTransport
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testTwoWayTrafficWithMutexTransportSync3
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|doTestTwoWayTrafficWithMutexTransport
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testTwoWayTrafficWithMutexTransportSync4
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|doTestTwoWayTrafficWithMutexTransport
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doTestTwoWayTrafficWithMutexTransport
parameter_list|(
name|boolean
name|localAsync
parameter_list|,
name|boolean
name|remoteAsync
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|VMTransport
name|vmlocal
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|VMTransport
name|vmremote
init|=
operator|new
name|VMTransport
argument_list|(
operator|new
name|URI
argument_list|(
name|location2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|MutexTransport
name|local
init|=
operator|new
name|MutexTransport
argument_list|(
name|vmlocal
argument_list|)
decl_stmt|;
specifier|final
name|MutexTransport
name|remote
init|=
operator|new
name|MutexTransport
argument_list|(
name|vmremote
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|sequenceId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|vmlocal
operator|.
name|setAsync
argument_list|(
name|localAsync
argument_list|)
expr_stmt|;
name|vmremote
operator|.
name|setAsync
argument_list|(
name|remoteAsync
argument_list|)
expr_stmt|;
name|vmlocal
operator|.
name|setPeer
argument_list|(
name|vmremote
argument_list|)
expr_stmt|;
name|vmremote
operator|.
name|setPeer
argument_list|(
name|vmlocal
argument_list|)
expr_stmt|;
name|local
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMTestTransportListener
argument_list|(
name|localReceived
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setTransportListener
argument_list|(
operator|new
name|VMResponderTransportListener
argument_list|(
name|remoteReceived
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|messageCount
init|=
literal|200000
decl_stmt|;
name|Thread
name|localSend
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|local
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|sequenceId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|Thread
name|remoteSend
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|remote
operator|.
name|oneway
argument_list|(
operator|new
name|DummyCommand
argument_list|(
name|sequenceId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|localSend
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteSend
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for both to finish and then check that each side go the correct amount
name|localSend
operator|.
name|join
argument_list|()
expr_stmt|;
name|remoteSend
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Remote should have received ("
operator|+
name|messageCount
operator|+
literal|") but got ()"
operator|+
name|remoteReceived
operator|.
name|size
argument_list|()
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteReceived
operator|.
name|size
argument_list|()
operator|==
name|messageCount
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Local should have received ("
operator|+
name|messageCount
operator|*
literal|2
operator|+
literal|") but got ()"
operator|+
name|localReceived
operator|.
name|size
argument_list|()
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|localReceived
operator|.
name|size
argument_list|()
operator|==
name|messageCount
operator|*
literal|2
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"All messages sent,stop all"
argument_list|)
expr_stmt|;
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
name|localReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
name|remoteReceived
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

