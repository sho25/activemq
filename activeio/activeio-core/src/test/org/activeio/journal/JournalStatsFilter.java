begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stats
operator|.
name|CountStatisticImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stats
operator|.
name|IndentPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stats
operator|.
name|TimeStatisticImpl
import|;
end_import

begin_comment
comment|/**  * A Journal filter that captures performance statistics of the filtered Journal.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|JournalStatsFilter
implements|implements
name|Journal
block|{
specifier|private
specifier|final
name|TimeStatisticImpl
name|writeLatency
init|=
operator|new
name|TimeStatisticImpl
argument_list|(
literal|"writeLatency"
argument_list|,
literal|"The amount of time that is spent waiting for a record to be written to the Journal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|writeRecordsCounter
init|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"writeRecordsCounter"
argument_list|,
literal|"The number of records that have been written by the Journal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|writeBytesCounter
init|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"writeBytesCounter"
argument_list|,
literal|"The number of bytes that have been written by the Journal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TimeStatisticImpl
name|synchedWriteLatency
init|=
operator|new
name|TimeStatisticImpl
argument_list|(
name|writeLatency
argument_list|,
literal|"synchedWriteLatency"
argument_list|,
literal|"The amount of time that is spent waiting for a synch record to be written to the Journal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TimeStatisticImpl
name|unsynchedWriteLatency
init|=
operator|new
name|TimeStatisticImpl
argument_list|(
name|writeLatency
argument_list|,
literal|"unsynchedWriteLatency"
argument_list|,
literal|"The amount of time that is spent waiting for a non synch record to be written to the Journal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TimeStatisticImpl
name|readLatency
init|=
operator|new
name|TimeStatisticImpl
argument_list|(
literal|"readLatency"
argument_list|,
literal|"The amount of time that is spent waiting for a record to be read from the Journal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|readBytesCounter
init|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"readBytesCounter"
argument_list|,
literal|"The number of bytes that have been read by the Journal"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Journal
name|next
decl_stmt|;
specifier|private
name|boolean
name|detailedStats
decl_stmt|;
comment|/** 	 * Creates a JournalStatsFilter that captures performance information of<code>next</next>.  	 * @param next 	 */
specifier|public
name|JournalStatsFilter
parameter_list|(
name|Journal
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
comment|/** 	 * @see org.codehaus.activemq.journal.Journal#write(byte[], boolean) 	 */
specifier|public
name|RecordLocation
name|write
parameter_list|(
name|Packet
name|data
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
comment|//writeWaitTimeStat
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RecordLocation
name|answer
init|=
name|next
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|sync
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|writeRecordsCounter
operator|.
name|increment
argument_list|()
expr_stmt|;
name|writeBytesCounter
operator|.
name|add
argument_list|(
name|data
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sync
condition|)
name|synchedWriteLatency
operator|.
name|addTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
else|else
name|unsynchedWriteLatency
operator|.
name|addTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/** 	 * @see org.codehaus.activemq.journal.Journal#read(org.codehaus.activemq.journal.RecordLocation) 	 */
specifier|public
name|Packet
name|read
parameter_list|(
name|RecordLocation
name|location
parameter_list|)
throws|throws
name|InvalidRecordLocationException
throws|,
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Packet
name|answer
init|=
name|next
operator|.
name|read
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|readBytesCounter
operator|.
name|add
argument_list|(
name|answer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|readLatency
operator|.
name|addTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/** 	 * @see org.codehaus.activemq.journal.Journal#setMark(org.codehaus.activemq.journal.RecordLocation, boolean) 	 */
specifier|public
name|void
name|setMark
parameter_list|(
name|RecordLocation
name|recordLocator
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|InvalidRecordLocationException
throws|,
name|IOException
block|{
name|next
operator|.
name|setMark
argument_list|(
name|recordLocator
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.codehaus.activemq.journal.Journal#getMark() 	 */
specifier|public
name|RecordLocation
name|getMark
parameter_list|()
block|{
return|return
name|next
operator|.
name|getMark
argument_list|()
return|;
block|}
comment|/** 	 * @see org.codehaus.activemq.journal.Journal#close() 	 */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|next
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @see org.codehaus.activemq.journal.Journal#setJournalEventListener(org.codehaus.activemq.journal.JournalEventListener) 	 */
specifier|public
name|void
name|setJournalEventListener
parameter_list|(
name|JournalEventListener
name|eventListener
parameter_list|)
block|{
name|next
operator|.
name|setJournalEventListener
argument_list|(
name|eventListener
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.codehaus.activemq.journal.Journal#getNextRecordLocation(org.codehaus.activemq.journal.RecordLocation) 	 */
specifier|public
name|RecordLocation
name|getNextRecordLocation
parameter_list|(
name|RecordLocation
name|lastLocation
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidRecordLocationException
block|{
return|return
name|next
operator|.
name|getNextRecordLocation
argument_list|(
name|lastLocation
argument_list|)
return|;
block|}
comment|/** 	 * Writes the gathered statistics to the<code>out</code> object. 	 *  	 * @param out 	 */
specifier|public
name|void
name|dump
parameter_list|(
name|IndentPrinter
name|out
parameter_list|)
block|{
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Journal Stats {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|incrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Throughput           : "
operator|+
name|getThroughputKps
argument_list|()
operator|+
literal|" k/s and "
operator|+
name|getThroughputRps
argument_list|()
operator|+
literal|" records/s"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Latency with force   : "
operator|+
name|getAvgSyncedLatencyMs
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Latency without force: "
operator|+
name|getAvgUnSyncedLatencyMs
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Raw Stats {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|incrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|writeRecordsCounter
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|writeBytesCounter
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|writeLatency
argument_list|)
expr_stmt|;
name|out
operator|.
name|incrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|synchedWriteLatency
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|unsynchedWriteLatency
argument_list|)
expr_stmt|;
name|out
operator|.
name|decrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|readBytesCounter
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|readLatency
argument_list|)
expr_stmt|;
name|out
operator|.
name|decrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|decrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dumps the stats to a String.      *       * @see java.lang.Object#toString()      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|detailedStats
condition|)
block|{
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|dump
argument_list|(
operator|new
name|IndentPrinter
argument_list|(
name|pw
argument_list|,
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|IndentPrinter
name|out
init|=
operator|new
name|IndentPrinter
argument_list|(
name|pw
argument_list|,
literal|"  "
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Throughput           : "
operator|+
name|getThroughputKps
argument_list|()
operator|+
literal|" k/s and "
operator|+
name|getThroughputRps
argument_list|()
operator|+
literal|" records/s"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Latency with force   : "
operator|+
name|getAvgSyncedLatencyMs
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Latency without force: "
operator|+
name|getAvgUnSyncedLatencyMs
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** 	 * @param detailedStats true if details stats should be displayed by<code>toString()</code> and<code>dump</code> 	 * @return 	 */
specifier|public
name|JournalStatsFilter
name|enableDetailedStats
parameter_list|(
name|boolean
name|detailedStats
parameter_list|)
block|{
name|this
operator|.
name|detailedStats
operator|=
name|detailedStats
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Gets the average throughput in k/s. 	 *  	 * @return the average throughput in k/s. 	 */
specifier|public
name|double
name|getThroughputKps
parameter_list|()
block|{
name|long
name|totalTime
init|=
name|writeBytesCounter
operator|.
name|getLastSampleTime
argument_list|()
operator|-
name|writeBytesCounter
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|double
operator|)
name|writeBytesCounter
operator|.
name|getCount
argument_list|()
operator|/
operator|(
name|double
operator|)
name|totalTime
operator|)
operator|/
operator|(
name|double
operator|)
literal|1024
operator|)
operator|*
literal|1000
return|;
block|}
comment|/** 	 * Gets the average throughput in records/s. 	 *  	 * @return the average throughput in records/s. 	 */
specifier|public
name|double
name|getThroughputRps
parameter_list|()
block|{
name|long
name|totalTime
init|=
name|writeRecordsCounter
operator|.
name|getLastSampleTime
argument_list|()
operator|-
name|writeRecordsCounter
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|double
operator|)
name|writeRecordsCounter
operator|.
name|getCount
argument_list|()
operator|/
operator|(
name|double
operator|)
name|totalTime
operator|)
operator|)
operator|*
literal|1000
return|;
block|}
comment|/** 	 * Gets the average number of writes done per second 	 *  	 * @return the average number of writes in w/s. 	 */
specifier|public
name|double
name|getWritesPerSecond
parameter_list|()
block|{
return|return
name|writeLatency
operator|.
name|getAveragePerSecond
argument_list|()
return|;
block|}
comment|/** 	 * Gets the average sync write latency in ms. 	 *  	 * @return the average sync write latency in ms. 	 */
specifier|public
name|double
name|getAvgSyncedLatencyMs
parameter_list|()
block|{
return|return
name|synchedWriteLatency
operator|.
name|getAverageTime
argument_list|()
return|;
block|}
comment|/** 	 * Gets the average non sync write latency in ms. 	 *  	 * @return the average non sync write latency in ms. 	 */
specifier|public
name|double
name|getAvgUnSyncedLatencyMs
parameter_list|()
block|{
return|return
name|unsynchedWriteLatency
operator|.
name|getAverageTime
argument_list|()
return|;
block|}
comment|/** 	 * Resets the stats sample. 	 */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|writeLatency
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeBytesCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeRecordsCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|synchedWriteLatency
operator|.
name|reset
argument_list|()
expr_stmt|;
name|unsynchedWriteLatency
operator|.
name|reset
argument_list|()
expr_stmt|;
name|readLatency
operator|.
name|reset
argument_list|()
expr_stmt|;
name|readBytesCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

