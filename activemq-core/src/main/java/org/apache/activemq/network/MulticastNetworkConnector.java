begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_comment
comment|/**  * A network connector which uses some kind of multicast-like transport that  * communicates with potentially many remote brokers over a single logical  * {@link Transport} instance such as when using multicast.  *   * This implementation does not depend on multicast at all; any other group  * based transport could be used.  *   * @org.apache.xbean.XBean  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|MulticastNetworkConnector
extends|extends
name|NetworkConnector
block|{
specifier|private
name|Transport
name|localTransport
decl_stmt|;
specifier|private
name|Transport
name|remoteTransport
decl_stmt|;
specifier|private
name|URI
name|remoteURI
decl_stmt|;
specifier|private
name|DemandForwardingBridgeSupport
name|bridge
decl_stmt|;
specifier|public
name|MulticastNetworkConnector
parameter_list|()
block|{     }
specifier|public
name|MulticastNetworkConnector
parameter_list|(
name|URI
name|remoteURI
parameter_list|)
block|{
name|this
operator|.
name|remoteURI
operator|=
name|remoteURI
expr_stmt|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|DemandForwardingBridgeSupport
name|getBridge
parameter_list|()
block|{
return|return
name|bridge
return|;
block|}
specifier|public
name|void
name|setBridge
parameter_list|(
name|DemandForwardingBridgeSupport
name|bridge
parameter_list|)
block|{
name|this
operator|.
name|bridge
operator|=
name|bridge
expr_stmt|;
block|}
specifier|public
name|Transport
name|getLocalTransport
parameter_list|()
block|{
return|return
name|localTransport
return|;
block|}
specifier|public
name|void
name|setLocalTransport
parameter_list|(
name|Transport
name|localTransport
parameter_list|)
block|{
name|this
operator|.
name|localTransport
operator|=
name|localTransport
expr_stmt|;
block|}
specifier|public
name|Transport
name|getRemoteTransport
parameter_list|()
block|{
return|return
name|remoteTransport
return|;
block|}
comment|/**      * Sets the remote transport implementation      */
specifier|public
name|void
name|setRemoteTransport
parameter_list|(
name|Transport
name|remoteTransport
parameter_list|)
block|{
name|this
operator|.
name|remoteTransport
operator|=
name|remoteTransport
expr_stmt|;
block|}
specifier|public
name|URI
name|getRemoteURI
parameter_list|()
block|{
return|return
name|remoteURI
return|;
block|}
comment|/**      * Sets the remote transport URI to some group transport like      *<code>multicast://address:port</code>      */
specifier|public
name|void
name|setRemoteURI
parameter_list|(
name|URI
name|remoteURI
parameter_list|)
block|{
name|this
operator|.
name|remoteURI
operator|=
name|remoteURI
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
specifier|protected
name|void
name|handleStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|remoteTransport
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|remoteURI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must specify the remoteURI property"
argument_list|)
throw|;
block|}
name|remoteTransport
operator|=
name|TransportFactory
operator|.
name|connect
argument_list|(
name|remoteURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localTransport
operator|==
literal|null
condition|)
block|{
name|localTransport
operator|=
name|createLocalTransport
argument_list|()
expr_stmt|;
block|}
name|bridge
operator|=
name|createBridge
argument_list|(
name|localTransport
argument_list|,
name|remoteTransport
argument_list|)
expr_stmt|;
name|configureBridge
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we need to start the transports after we've created the bridge
name|remoteTransport
operator|.
name|start
argument_list|()
expr_stmt|;
name|localTransport
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|handleStart
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|handleStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|handleStop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
if|if
condition|(
name|bridge
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bridge
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|remoteTransport
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|remoteTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|localTransport
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|localTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|String
name|name
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|remoteTransport
operator|.
name|toString
argument_list|()
expr_stmt|;
name|super
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|protected
name|DemandForwardingBridgeSupport
name|createBridge
parameter_list|(
name|Transport
name|local
parameter_list|,
name|Transport
name|remote
parameter_list|)
block|{
return|return
operator|new
name|CompositeDemandForwardingBridge
argument_list|(
name|this
argument_list|,
name|local
argument_list|,
name|remote
argument_list|)
return|;
block|}
block|}
end_class

end_unit

