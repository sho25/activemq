begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|QueueMessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_comment
comment|/**  * An abstraction that keeps the correct order of messages that need to be dispatched  * to consumers, but also hides the fact that there might be redelivered messages that  * should be dispatched ahead of any other paged in messages.  *  * Direct usage of this class is recommended as you can control when redeliveries need  * to be added vs regular pending messages (the next set of messages that can be dispatched)  *  * Created by ceposta  *<a href="http://christianposta.com/blog>http://christianposta.com/blog</a>.  */
end_comment

begin_class
specifier|public
class|class
name|QueueDispatchPendingList
implements|implements
name|PendingList
block|{
specifier|private
name|PendingList
name|pagedInPendingDispatch
init|=
operator|new
name|OrderedPendingList
argument_list|()
decl_stmt|;
specifier|private
name|PendingList
name|redeliveredWaitingDispatch
init|=
operator|new
name|OrderedPendingList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|prioritized
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|pagedInPendingDispatch
operator|.
name|isEmpty
argument_list|()
operator|&&
name|redeliveredWaitingDispatch
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|pagedInPendingDispatch
operator|.
name|clear
argument_list|()
expr_stmt|;
name|redeliveredWaitingDispatch
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Messages added are added directly to the pagedInPendingDispatch set of messages. If      * you're trying to add a message that is marked redelivered add it using addMessageForRedelivery()      * method      * @param message      *      The MessageReference that is to be added to this list.      *      * @return the pending node.      */
annotation|@
name|Override
specifier|public
name|PendingNode
name|addMessageFirst
parameter_list|(
name|MessageReference
name|message
parameter_list|)
block|{
return|return
name|pagedInPendingDispatch
operator|.
name|addMessageFirst
argument_list|(
name|message
argument_list|)
return|;
block|}
comment|/**      * Messages added are added directly to the pagedInPendingDispatch set of messages. If      * you're trying to add a message that is marked redelivered add it using addMessageForRedelivery()      * method      * @param message      *      The MessageReference that is to be added to this list.      *      * @return the pending node.      */
annotation|@
name|Override
specifier|public
name|PendingNode
name|addMessageLast
parameter_list|(
name|MessageReference
name|message
parameter_list|)
block|{
return|return
name|pagedInPendingDispatch
operator|.
name|addMessageLast
argument_list|(
name|message
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PendingNode
name|remove
parameter_list|(
name|MessageReference
name|message
parameter_list|)
block|{
if|if
condition|(
name|pagedInPendingDispatch
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return
name|pagedInPendingDispatch
operator|.
name|remove
argument_list|(
name|message
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|redeliveredWaitingDispatch
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return
name|redeliveredWaitingDispatch
operator|.
name|remove
argument_list|(
name|message
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|pagedInPendingDispatch
operator|.
name|size
argument_list|()
operator|+
name|redeliveredWaitingDispatch
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|messageSize
parameter_list|()
block|{
return|return
name|pagedInPendingDispatch
operator|.
name|messageSize
argument_list|()
operator|+
name|redeliveredWaitingDispatch
operator|.
name|messageSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|iterator
parameter_list|()
block|{
if|if
condition|(
name|prioritized
operator|&&
name|hasRedeliveries
argument_list|()
condition|)
block|{
specifier|final
name|QueueDispatchPendingList
name|delegate
init|=
name|this
decl_stmt|;
specifier|final
name|PrioritizedPendingList
name|priorityOrderedRedeliveredAndPending
init|=
operator|new
name|PrioritizedPendingList
argument_list|()
decl_stmt|;
name|priorityOrderedRedeliveredAndPending
operator|.
name|addAll
argument_list|(
name|redeliveredWaitingDispatch
argument_list|)
expr_stmt|;
name|priorityOrderedRedeliveredAndPending
operator|.
name|addAll
argument_list|(
name|pagedInPendingDispatch
argument_list|)
expr_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|combinedIterator
init|=
name|priorityOrderedRedeliveredAndPending
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|MessageReference
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|combinedIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageReference
name|next
parameter_list|()
block|{
name|current
operator|=
name|combinedIterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|remove
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|redeliveries
init|=
name|redeliveredWaitingDispatch
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|pendingDispatch
init|=
name|pagedInPendingDispatch
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|current
init|=
name|redeliveries
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|redeliveries
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|current
operator|==
name|redeliveries
operator|)
condition|)
block|{
name|current
operator|=
name|pendingDispatch
expr_stmt|;
block|}
return|return
name|current
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageReference
name|next
parameter_list|()
block|{
return|return
name|current
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|current
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|MessageReference
name|message
parameter_list|)
block|{
return|return
name|pagedInPendingDispatch
operator|.
name|contains
argument_list|(
name|message
argument_list|)
operator|||
name|redeliveredWaitingDispatch
operator|.
name|contains
argument_list|(
name|message
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|MessageReference
argument_list|>
name|values
parameter_list|()
block|{
name|List
argument_list|<
name|MessageReference
argument_list|>
name|messageReferences
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|iterator
init|=
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|messageReferences
operator|.
name|add
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|messageReferences
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
name|PendingList
name|pendingList
parameter_list|)
block|{
name|pagedInPendingDispatch
operator|.
name|addAll
argument_list|(
name|pendingList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MessageReference
name|get
parameter_list|(
name|MessageId
name|messageId
parameter_list|)
block|{
name|MessageReference
name|rc
init|=
name|pagedInPendingDispatch
operator|.
name|get
argument_list|(
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
return|return
name|redeliveredWaitingDispatch
operator|.
name|get
argument_list|(
name|messageId
argument_list|)
return|;
block|}
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertAtHead
parameter_list|(
name|List
argument_list|<
name|MessageReference
argument_list|>
name|list
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no insertion support in: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setPrioritizedMessages
parameter_list|(
name|boolean
name|prioritizedMessages
parameter_list|)
block|{
name|prioritized
operator|=
name|prioritizedMessages
expr_stmt|;
if|if
condition|(
name|prioritizedMessages
operator|&&
name|this
operator|.
name|pagedInPendingDispatch
operator|instanceof
name|OrderedPendingList
condition|)
block|{
name|pagedInPendingDispatch
operator|=
operator|new
name|PrioritizedPendingList
argument_list|()
expr_stmt|;
name|redeliveredWaitingDispatch
operator|=
operator|new
name|PrioritizedPendingList
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pagedInPendingDispatch
operator|instanceof
name|PrioritizedPendingList
condition|)
block|{
name|pagedInPendingDispatch
operator|=
operator|new
name|OrderedPendingList
argument_list|()
expr_stmt|;
name|redeliveredWaitingDispatch
operator|=
operator|new
name|OrderedPendingList
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasRedeliveries
parameter_list|()
block|{
return|return
operator|!
name|redeliveredWaitingDispatch
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addForRedelivery
parameter_list|(
name|List
argument_list|<
name|MessageReference
argument_list|>
name|list
parameter_list|,
name|boolean
name|noConsumers
parameter_list|)
block|{
if|if
condition|(
name|noConsumers
condition|)
block|{
comment|// a single consumer can expect repeatable redelivery order irrespective
comment|// of transaction or prefetch boundaries
name|redeliveredWaitingDispatch
operator|.
name|insertAtHead
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|MessageReference
name|ref
range|:
name|list
control|)
block|{
name|redeliveredWaitingDispatch
operator|.
name|addMessageLast
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

