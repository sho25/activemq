begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utilities for loading classes.  *   * @version $Rev: 109957 $ $Date: 2005/03/11 21:14:53 $  */
end_comment

begin_class
specifier|public
class|class
name|ClassLoading
block|{
comment|/**      * Load a class for the given name.<p/>      *<p>      * Handles loading primitive types as well as VM class and array syntax.      *       * @param className      *            The name of the Class to be loaded.      * @param classLoader      *            The class loader to load the Class object from.      * @return The Class object for the given name.      * @throws ClassNotFoundException      *             Failed to load Class object.      */
specifier|public
specifier|static
name|Class
name|loadClass
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"className is null"
argument_list|)
throw|;
block|}
comment|// First just try to load
try|try
block|{
return|return
name|load
argument_list|(
name|className
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ignore
parameter_list|)
block|{
comment|// handle special cases below
block|}
name|Class
name|type
init|=
literal|null
decl_stmt|;
comment|// Check if it is a primitive type
name|type
operator|=
name|getPrimitiveType
argument_list|(
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
return|return
name|type
return|;
comment|// Check if it is a vm primitive
name|type
operator|=
name|getVMPrimitiveType
argument_list|(
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
return|return
name|type
return|;
comment|// Handle VM class syntax (Lclassname;)
if|if
condition|(
name|className
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'L'
operator|&&
name|className
operator|.
name|charAt
argument_list|(
name|className
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|';'
condition|)
block|{
name|String
name|name
init|=
name|className
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|className
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|load
argument_list|(
name|name
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
comment|// Handle VM array syntax ([type)
if|if
condition|(
name|className
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'['
condition|)
block|{
name|int
name|arrayDimension
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'['
argument_list|)
operator|+
literal|1
decl_stmt|;
name|String
name|componentClassName
init|=
name|className
operator|.
name|substring
argument_list|(
name|arrayDimension
argument_list|,
name|className
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|type
operator|=
name|loadClass
argument_list|(
name|componentClassName
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|int
name|dim
index|[]
init|=
operator|new
name|int
index|[
name|arrayDimension
index|]
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|fill
argument_list|(
name|dim
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|dim
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
comment|// Handle user friendly type[] syntax
if|if
condition|(
name|className
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
comment|// get the base component class name and the arrayDimensions
name|int
name|arrayDimension
init|=
literal|0
decl_stmt|;
name|String
name|componentClassName
init|=
name|className
decl_stmt|;
while|while
condition|(
name|componentClassName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|componentClassName
operator|=
name|componentClassName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|componentClassName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|arrayDimension
operator|++
expr_stmt|;
block|}
comment|// load the base type
name|type
operator|=
name|loadClass
argument_list|(
name|componentClassName
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
comment|// return the array type
name|int
index|[]
name|dim
init|=
operator|new
name|int
index|[
name|arrayDimension
index|]
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|fill
argument_list|(
name|dim
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|dim
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
comment|// Else we can not load (give up)
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|className
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|Class
name|load
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
return|;
else|else
return|return
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassName
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|StringBuffer
name|rc
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
literal|'L'
argument_list|)
expr_stmt|;
name|rc
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|append
argument_list|(
name|VM_PRIMITIVES_REVERSE
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Primitive type name -> class map.      */
specifier|private
specifier|static
specifier|final
name|Map
name|PRIMITIVES
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** Setup the primitives map. */
static|static
block|{
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
literal|"void"
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the primitive type for the given primitive name.      *       * @param name      *            Primitive type name (boolean, byte, int, ...)      * @return Primitive type or null.      */
specifier|private
specifier|static
name|Class
name|getPrimitiveType
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Class
operator|)
name|PRIMITIVES
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * VM primitive type name -> primitive type      */
specifier|private
specifier|static
specifier|final
name|HashMap
name|VM_PRIMITIVES
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** Setup the vm primitives map. */
static|static
block|{
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"C"
argument_list|,
name|char
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"D"
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"F"
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"I"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"J"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"S"
argument_list|,
name|short
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"Z"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES
operator|.
name|put
argument_list|(
literal|"V"
argument_list|,
name|void
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * VM primitive type primitive type -> name      */
specifier|private
specifier|static
specifier|final
name|HashMap
name|VM_PRIMITIVES_REVERSE
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** Setup the vm primitives reverse map. */
static|static
block|{
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|char
operator|.
name|class
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
literal|"J"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
literal|"S"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|VM_PRIMITIVES_REVERSE
operator|.
name|put
argument_list|(
name|void
operator|.
name|class
argument_list|,
literal|"V"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the primitive type for the given VM primitive name.<p/>      *<p>      * Mapping:      *       *<pre>      *       *    B - byte      *    C - char      *    D - double      *    F - float      *    I - int      *    J - long      *    S - short      *    Z - boolean      *    V - void      *        *</pre>      *       * @param name      *            VM primitive type name (B, C, J, ...)      * @return Primitive type or null.      */
specifier|private
specifier|static
name|Class
name|getVMPrimitiveType
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Class
operator|)
name|VM_PRIMITIVES
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Map of primitive types to their wrapper classes      */
specifier|private
specifier|static
specifier|final
name|Map
name|PRIMITIVE_WRAPPERS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** Setup the wrapper map. */
static|static
block|{
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|PRIMITIVE_WRAPPERS
operator|.
name|put
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|,
name|Void
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

