begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
operator|.
name|BTreeIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|LongMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_class
class|class
name|JobSchedulerImpl
extends|extends
name|ServiceSupport
implements|implements
name|Runnable
implements|,
name|JobScheduler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobSchedulerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|JobSchedulerStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|index
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JobListener
argument_list|>
name|jobListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|JobListener
argument_list|>
argument_list|()
decl_stmt|;
name|JobSchedulerImpl
parameter_list|(
name|JobSchedulerStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.activemq.beanstalk.JobScheduler#getName()      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
comment|/*      * (non-Javadoc)      * @see      * org.apache.activemq.beanstalk.JobScheduler#addListener(org.apache.activemq      * .beanstalk.JobListener)      */
specifier|public
name|void
name|addListener
parameter_list|(
name|JobListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|jobListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see      * org.apache.activemq.beanstalk.JobScheduler#removeListener(org.apache.      * activemq.beanstalk.JobListener)      */
specifier|public
name|void
name|removeListener
parameter_list|(
name|JobListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|jobListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|schedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|ByteSequence
name|payload
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|schedule
argument_list|(
name|tx
argument_list|,
name|jobId
argument_list|,
name|payload
argument_list|,
literal|0
argument_list|,
name|delay
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|schedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|ByteSequence
name|payload
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|period
parameter_list|,
specifier|final
name|int
name|repeat
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|schedule
argument_list|(
name|tx
argument_list|,
name|jobId
argument_list|,
name|payload
argument_list|,
name|start
argument_list|,
name|period
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.activemq.beanstalk.JobScheduler#remove(long)      */
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|(
specifier|final
name|long
name|time
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|remove
argument_list|(
name|tx
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.activemq.beanstalk.JobScheduler#remove(long,      * java.lang.String)      */
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|(
specifier|final
name|long
name|time
parameter_list|,
specifier|final
name|String
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|remove
argument_list|(
name|tx
argument_list|,
name|time
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.activemq.beanstalk.JobScheduler#remove(java.lang.String)      */
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|remove
argument_list|(
name|tx
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|long
name|getNextScheduleTime
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|this
operator|.
name|index
operator|.
name|getFirst
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|first
operator|!=
literal|null
condition|?
name|first
operator|.
name|getKey
argument_list|()
else|:
operator|-
literal|1l
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.activemq.beanstalk.JobScheduler#getNextScheduleJobs()      */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|ByteSequence
argument_list|>
name|getNextScheduleJobs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|ByteSequence
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|index
operator|.
name|getFirst
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|first
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ByteSequence
name|bs
init|=
name|getJob
argument_list|(
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|ByteSequence
name|getJob
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
return|return
name|this
operator|.
name|store
operator|.
name|getJob
argument_list|(
name|location
argument_list|)
return|;
block|}
name|void
name|schedule
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|jobId
parameter_list|,
name|ByteSequence
name|payload
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|period
parameter_list|,
name|int
name|repeat
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
name|long
name|startTime
decl_stmt|;
name|long
name|time
decl_stmt|;
if|if
condition|(
name|start
operator|>
literal|0
condition|)
block|{
name|time
operator|=
name|startTime
operator|=
name|start
expr_stmt|;
block|}
else|else
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|time
operator|=
name|startTime
operator|+
name|period
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|index
operator|.
name|containsKey
argument_list|(
name|tx
argument_list|,
name|time
argument_list|)
condition|)
block|{
name|values
operator|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|JobLocation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|Location
name|location
init|=
name|this
operator|.
name|store
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JobLocation
name|jobLocation
init|=
operator|new
name|JobLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|jobLocation
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jobLocation
operator|.
name|setPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|jobLocation
operator|.
name|setRepeat
argument_list|(
name|repeat
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|jobLocation
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|time
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|incrementJournalCount
argument_list|(
name|tx
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|poke
argument_list|()
expr_stmt|;
block|}
name|void
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|long
name|time
parameter_list|,
name|String
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JobLocation
name|jl
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|jl
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|values
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|time
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|void
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|long
name|time
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|values
control|)
block|{
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|values
control|)
block|{
if|if
condition|(
name|jl
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
specifier|synchronized
name|void
name|destroy
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|values
control|)
block|{
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|synchronized
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|getNextToSchedule
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|store
operator|.
name|isStopped
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|store
operator|.
name|isStopping
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|this
operator|.
name|index
operator|.
name|getFirst
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|first
return|;
block|}
return|return
literal|null
return|;
block|}
name|void
name|fireJobs
parameter_list|(
name|List
argument_list|<
name|JobLocation
argument_list|>
name|list
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|list
control|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getJob
argument_list|(
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|JobListener
name|l
range|:
name|jobListeners
control|)
block|{
name|l
operator|.
name|scheduledJob
argument_list|(
name|jl
operator|.
name|getJobId
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|mainLoop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|running
operator|.
name|get
argument_list|()
operator|&&
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|this
operator|+
literal|" Caught exception in mainloop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JobScheduler:"
operator|+
name|this
operator|.
name|name
return|;
block|}
specifier|protected
name|void
name|mainLoop
parameter_list|()
block|{
while|while
condition|(
name|this
operator|.
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
comment|// peek the next job
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|getNextToSchedule
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|JobLocation
argument_list|>
argument_list|(
name|first
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|executionTime
init|=
name|first
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|executionTime
operator|<=
name|currentTime
condition|)
block|{
name|fireJobs
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|JobLocation
name|jl
range|:
name|list
control|)
block|{
name|int
name|repeat
init|=
name|jl
operator|.
name|getRepeat
argument_list|()
decl_stmt|;
if|if
condition|(
name|repeat
operator|!=
literal|0
condition|)
block|{
name|repeat
operator|--
expr_stmt|;
name|ByteSequence
name|payload
init|=
name|this
operator|.
name|store
operator|.
name|getJob
argument_list|(
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|jl
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|long
name|period
init|=
name|jl
operator|.
name|getPeriod
argument_list|()
decl_stmt|;
name|schedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
literal|0
argument_list|,
name|period
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now remove jobs from this execution time
name|remove
argument_list|(
name|executionTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|waitTime
init|=
name|executionTime
operator|-
name|currentTime
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|running
init|)
block|{
name|this
operator|.
name|running
operator|.
name|wait
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|running
init|)
block|{
name|this
operator|.
name|running
operator|.
name|wait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|this
operator|.
name|name
operator|+
literal|" Failed to schedule job"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|this
operator|.
name|name
operator|+
literal|" Failed to shutdown JobSchedulerStore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|running
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"JobScheduler:"
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|poke
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
name|this
operator|.
name|thread
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|poke
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|running
init|)
block|{
name|this
operator|.
name|running
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|createIndexes
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|index
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|load
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|index
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|setValueMarshaller
argument_list|(
name|ValueMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
name|void
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|setValueMarshaller
argument_list|(
name|ValueMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|index
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|ValueMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
block|{
specifier|static
name|ValueMarshaller
name|INSTANCE
init|=
operator|new
name|ValueMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|List
argument_list|<
name|JobLocation
argument_list|>
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|JobLocation
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|JobLocation
name|jobLocation
init|=
operator|new
name|JobLocation
argument_list|()
decl_stmt|;
name|jobLocation
operator|.
name|readExternal
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|jobLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|List
argument_list|<
name|JobLocation
argument_list|>
name|value
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JobLocation
name|jobLocation
range|:
name|value
control|)
block|{
name|jobLocation
operator|.
name|writeExternal
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

