begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidDestinationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_comment
comment|/**  * The StreamConnection interface allows you to send and receive   * data from a Destination in using standard java InputStream and OutputStream  * objects.  It's best use case is to send and receive large amounts of data  * that would be to large to hold in a single JMS message.  *   * @version $Revision$  */
end_comment

begin_interface
specifier|public
interface|interface
name|StreamConnection
extends|extends
name|Connection
block|{
specifier|public
name|InputStream
name|createInputStream
parameter_list|(
name|Destination
name|dest
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|public
name|InputStream
name|createInputStream
parameter_list|(
name|Destination
name|dest
parameter_list|,
name|String
name|messageSelector
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|public
name|InputStream
name|createInputStream
parameter_list|(
name|Destination
name|dest
parameter_list|,
name|String
name|messageSelector
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|public
name|InputStream
name|createDurableInputStream
parameter_list|(
name|Topic
name|dest
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|public
name|InputStream
name|createDurableInputStream
parameter_list|(
name|Topic
name|dest
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|messageSelector
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|public
name|InputStream
name|createDurableInputStream
parameter_list|(
name|Topic
name|dest
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|messageSelector
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|public
name|OutputStream
name|createOutputStream
parameter_list|(
name|Destination
name|dest
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|public
name|OutputStream
name|createOutputStream
parameter_list|(
name|Destination
name|dest
parameter_list|,
name|Map
name|streamProperties
parameter_list|,
name|int
name|deliveryMode
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|timeToLive
parameter_list|)
throws|throws
name|JMSException
function_decl|;
comment|/**      * Unsubscribes a durable subscription that has been created by a client.      *<P>      * This method deletes the state being maintained on behalf of the      * subscriber by its provider.      *<P>      * It is erroneous for a client to delete a durable subscription while there      * is an active<CODE>MessageConsumer</CODE> or<CODE>TopicSubscriber</CODE>      * for the subscription, or while a consumed message is part of a pending      * transaction or has not been acknowledged in the session.      *       * @param name      *            the name used to identify this subscription      * @throws JMSException      *             if the session fails to unsubscribe to the durable      *             subscription due to some internal error.      * @throws InvalidDestinationException      *             if an invalid subscription name is specified.      * @since 1.1      */
specifier|public
name|void
name|unsubscribe
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
function_decl|;
block|}
end_interface

end_unit

