begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|AbstractRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * @author<a href="http://www.christianposta.com/blog">Christian Posta</a>  */
end_comment

begin_class
specifier|public
class|class
name|ThreeBrokerTempDestDemandSubscriptionCleanupTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThreeBrokerTempDestDemandSubscriptionCleanupTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|enableTempDestinationBridging
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A
init|=
literal|"BrokerA"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B
init|=
literal|"BrokerB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_C
init|=
literal|"BrokerC"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ECHO_QUEUE_NAME
init|=
literal|"echo"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ITER
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CONSUME_TIMEOUT
init|=
literal|500
decl_stmt|;
comment|/**      * So we network three brokers together, and send a message with request-reply semantics.      * The message goes to an echo service listening on broker C. We send a message on a queue      * to broker A which gets demand forwarded to broker C. the echo service will respond to the      * temp destination listed in the JMSReplyTo header. that will get demand forwarded back to      * broker A. When the consumer of the temp dest on broker A closes, that subscription should      * be removed on broker A. advisories firing from broker A to broker B should remove that      * subscription on broker B. advisories firing from broker B to broker C should remove that      * subscription on broker C.      *      * @throws Exception      */
specifier|public
name|void
name|testSubscriptionsCleanedUpRace
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerItem
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_A
argument_list|)
decl_stmt|;
name|Runnable
name|tester
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITER
condition|;
name|i
operator|++
control|)
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|brokerA
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|sess
operator|.
name|createQueue
argument_list|(
name|ECHO_QUEUE_NAME
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting iter: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|Destination
name|replyTo
init|=
name|sess
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|MessageConsumer
name|responseConsumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|replyTo
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"Iteration: "
operator|+
name|i
argument_list|)
decl_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|TextMessage
name|response
init|=
operator|(
name|TextMessage
operator|)
name|responseConsumer
operator|.
name|receive
argument_list|(
name|CONSUME_TIMEOUT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should have gotten a response, but didn't for iter: "
operator|+
name|i
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"We got the wrong response from the echo service"
argument_list|,
literal|"Iteration: "
operator|+
name|i
argument_list|,
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// so we close the consumer so that an actual RemoveInfo command gets propogated through the
comment|// network
name|responseConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|ExecutorService
name|threadService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|threadService
operator|.
name|submit
argument_list|(
name|tester
argument_list|)
expr_stmt|;
name|threadService
operator|.
name|submit
argument_list|(
name|tester
argument_list|)
expr_stmt|;
name|threadService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"executor done on time"
argument_list|,
name|threadService
operator|.
name|awaitTermination
argument_list|(
literal|10l
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// for the real test... we should not have any subscriptions left on broker C for the temp dests
name|BrokerItem
name|brokerC
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_C
argument_list|)
decl_stmt|;
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerC
operator|.
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
specifier|final
name|AbstractRegion
name|region
init|=
operator|(
name|AbstractRegion
operator|)
name|regionBroker
operator|.
name|getTempQueueRegion
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There were no lingering temp-queue destinations"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Lingering temps: "
operator|+
name|region
operator|.
name|getSubscriptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
operator|==
name|region
operator|.
name|getSubscriptions
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test is slightly different from the above. We don't explicitly close the consumer down      * (which we did in the previous test to force the RemoveInfo to be sent). Here we just close      * the connection which should still clean up the subscriptions and temp destinations on the      * networked brokers.      *      * @throws Exception      */
specifier|public
name|void
name|testSubscriptionsCleanedUpAfterConnectionClose
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerItem
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_A
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITER
condition|;
name|i
operator|++
control|)
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|brokerA
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|sess
operator|.
name|createQueue
argument_list|(
name|ECHO_QUEUE_NAME
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting iter: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|Destination
name|replyTo
init|=
name|sess
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|MessageConsumer
name|responseConsumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|replyTo
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"Iteration: "
operator|+
name|i
argument_list|)
decl_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|TextMessage
name|response
init|=
operator|(
name|TextMessage
operator|)
name|responseConsumer
operator|.
name|receive
argument_list|(
name|CONSUME_TIMEOUT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should have gotten a response, but didn't for iter: "
operator|+
name|i
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"We got the wrong response from the echo service"
argument_list|,
literal|"Iteration: "
operator|+
name|i
argument_list|,
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// so closing the connection without closing the consumer first will leak subscriptions
comment|// in a nob?
comment|//              responseConsumer.close();
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|// for the real test... we should not have any subscriptions left on broker C for the temp dests
name|BrokerItem
name|brokerC
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_C
argument_list|)
decl_stmt|;
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerC
operator|.
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
specifier|final
name|AbstractRegion
name|region
init|=
operator|(
name|AbstractRegion
operator|)
name|regionBroker
operator|.
name|getTempQueueRegion
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There were no lingering temp-queue destinations"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Lingering temps: "
operator|+
name|region
operator|.
name|getSubscriptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
operator|==
name|region
operator|.
name|getSubscriptions
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|installEchoClientOnBrokerC
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerItem
name|brokerC
init|=
name|brokers
operator|.
name|get
argument_list|(
name|BROKER_C
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|brokerC
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|sess
operator|.
name|createQueue
argument_list|(
name|ECHO_QUEUE_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
name|Destination
name|replyTo
init|=
name|message
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|replyTo
argument_list|)
decl_stmt|;
name|Message
name|response
init|=
name|sess
operator|.
name|createTextMessage
argument_list|(
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replying to this request: "
operator|+
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Could not respond to an echo request"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/"
operator|+
name|BROKER_A
operator|+
literal|"?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/"
operator|+
name|BROKER_B
operator|+
literal|"?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61618)/"
operator|+
name|BROKER_C
operator|+
literal|"?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// set up a listener on broker C that will demand forward subscriptions over the network
name|installEchoClientOnBrokerC
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|NetworkConnector
name|bridgeBrokers
parameter_list|(
name|String
name|localBrokerName
parameter_list|,
name|String
name|remoteBrokerName
parameter_list|,
name|boolean
name|dynamicOnly
parameter_list|,
name|int
name|networkTTL
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|connector
init|=
name|super
operator|.
name|bridgeBrokers
argument_list|(
name|localBrokerName
argument_list|,
name|remoteBrokerName
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setBridgeTempDestinations
argument_list|(
name|enableTempDestinationBridging
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
block|}
end_class

end_unit

