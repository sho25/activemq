begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransactionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ4485Test
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4485Test
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
decl_stmt|;
specifier|final
name|int
name|messageCount
init|=
literal|20
decl_stmt|;
name|int
name|memoryLimit
init|=
literal|40
operator|*
literal|1024
decl_stmt|;
specifier|final
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"QUEUE."
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|Vector
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|slowSendResume
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|long
name|memoryLimit
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMemoryLimit
argument_list|(
name|memoryLimit
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|pMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|pMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|pMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|messageSend
operator|.
name|isInTransaction
argument_list|()
operator|&&
name|messageSend
operator|.
name|getProperty
argument_list|(
literal|"NUM"
argument_list|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Integer
name|num
init|=
operator|(
name|Integer
operator|)
name|messageSend
operator|.
name|getProperty
argument_list|(
literal|"NUM"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|TransactionBroker
name|transactionBroker
init|=
operator|(
name|TransactionBroker
operator|)
name|broker
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|TransactionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|transactionBroker
operator|.
name|getTransaction
argument_list|(
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
argument_list|,
name|messageSend
operator|.
name|getTransactionId
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AfterCommit, NUM:"
operator|+
name|num
operator|+
literal|", "
operator|+
name|messageSend
operator|.
name|getMessageId
argument_list|()
operator|+
literal|", tx: "
operator|+
name|messageSend
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|==
literal|5
condition|)
block|{
comment|// we want to add to cursor after usage is exhausted by message 20 and when
comment|// all other messages have been processed
name|LOG
operator|.
name|error
argument_list|(
literal|"Pausing on latch in afterCommit for: "
operator|+
name|num
operator|+
literal|", "
operator|+
name|messageSend
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|slowSendResume
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"resuming on latch afterCommit for: "
operator|+
name|num
operator|+
literal|", "
operator|+
name|messageSend
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messageCount
operator|+
literal|1
operator|==
name|num
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"releasing latch. "
operator|+
name|num
operator|+
literal|", "
operator|+
name|messageSend
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|slowSendResume
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// for message X, we need to delay so message 5 can setBatch
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"resuming afterCommit for: "
operator|+
name|num
operator|+
literal|", "
operator|+
name|messageSend
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
unit|}                 }
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|}         }         })
empty_stmt|;
end_empty_stmt

begin_function
unit|}       public
name|void
name|testOutOfOrderTransactionCompletionOnMemoryLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|Session
argument_list|>
name|sessionVector
init|=
operator|new
name|Vector
argument_list|<
name|Session
argument_list|>
argument_list|()
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|sessionVector
operator|.
name|add
argument_list|(
name|send
argument_list|(
name|i
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// get parallel commit so that the sync writes are batched
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|id
init|=
name|i
decl_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sessionVector
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|fail
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DestinationViewMBean
name|queueViewMBean
init|=
operator|(
name|DestinationViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|DestinationViewMBean
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// not sure how many messages will get enqueued
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
condition|)
name|assertTrue
argument_list|(
literal|"all "
operator|+
name|messageCount
operator|+
literal|" on the q"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueueCount: "
operator|+
name|queueViewMBean
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|messageCount
operator|==
name|queueViewMBean
operator|.
name|getEnqueueCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Big send to blow available destination usage before slow send resumes"
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|messageCount
operator|+
literal|1
argument_list|,
literal|35
operator|*
literal|1024
argument_list|,
literal|true
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// consume and verify all received
name|Connection
name|cosumerConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|cosumerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|cosumerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|bytesMessage
init|=
operator|(
name|BytesMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Got message: "
operator|+
name|i
operator|+
literal|", "
operator|+
name|expected
argument_list|,
name|bytesMessage
argument_list|)
expr_stmt|;
name|MessageId
name|mqMessageId
init|=
operator|(
operator|(
name|ActiveMQBytesMessage
operator|)
name|bytesMessage
operator|)
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got: "
operator|+
name|expected
operator|+
literal|", "
operator|+
name|mqMessageId
operator|+
literal|", NUM="
operator|+
operator|(
operator|(
name|ActiveMQBytesMessage
operator|)
name|bytesMessage
operator|)
operator|.
name|getProperty
argument_list|(
literal|"NUM"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|remove
argument_list|(
operator|(
operator|(
name|ActiveMQBytesMessage
operator|)
name|bytesMessage
operator|)
operator|.
name|getProperty
argument_list|(
literal|"NUM"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|Session
name|send
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|messageSize
parameter_list|,
name|boolean
name|transacted
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|transacted
condition|?
name|Session
operator|.
name|SESSION_TRANSACTED
else|:
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|BytesMessage
name|bytesMessage
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|bytesMessage
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
name|messageSize
index|]
argument_list|)
expr_stmt|;
name|bytesMessage
operator|.
name|setIntProperty
argument_list|(
literal|"NUM"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|bytesMessage
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent:"
operator|+
name|bytesMessage
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" session tx: "
operator|+
operator|(
operator|(
name|ActiveMQBytesMessage
operator|)
name|bytesMessage
operator|)
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|session
return|;
block|}
end_function

begin_function
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"thisOne"
argument_list|)
expr_stmt|;
name|configureBroker
argument_list|(
name|memoryLimit
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://thisOne?jms.alwaysSyncSend=true"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

