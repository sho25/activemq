begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultIOExceptionHandler
implements|implements
name|IOExceptionHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultIOExceptionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|boolean
name|ignoreAllErrors
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|ignoreNoSpaceErrors
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|noSpaceMessage
init|=
literal|"space"
decl_stmt|;
specifier|public
name|void
name|handle
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|ignoreAllErrors
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring IO exception, "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ignoreNoSpaceErrors
condition|)
block|{
name|Throwable
name|cause
init|=
name|exception
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|IOException
condition|)
block|{
if|if
condition|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|noSpaceMessage
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring no space left exception, "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return;
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the broker due to IO exception, "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure occured while stopping broker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreAllErrors
parameter_list|()
block|{
return|return
name|ignoreAllErrors
return|;
block|}
specifier|public
name|void
name|setIgnoreAllErrors
parameter_list|(
name|boolean
name|ignoreAllErrors
parameter_list|)
block|{
name|this
operator|.
name|ignoreAllErrors
operator|=
name|ignoreAllErrors
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreNoSpaceErrors
parameter_list|()
block|{
return|return
name|ignoreNoSpaceErrors
return|;
block|}
specifier|public
name|void
name|setIgnoreNoSpaceErrors
parameter_list|(
name|boolean
name|ignoreNoSpaceErrors
parameter_list|)
block|{
name|this
operator|.
name|ignoreNoSpaceErrors
operator|=
name|ignoreNoSpaceErrors
expr_stmt|;
block|}
specifier|public
name|String
name|getNoSpaceMessage
parameter_list|()
block|{
return|return
name|noSpaceMessage
return|;
block|}
specifier|public
name|void
name|setNoSpaceMessage
parameter_list|(
name|String
name|noSpaceMessage
parameter_list|)
block|{
name|this
operator|.
name|noSpaceMessage
operator|=
name|noSpaceMessage
expr_stmt|;
block|}
block|}
end_class

end_unit

