begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|KahaStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_comment
comment|/**  * Store test  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|LoadTest
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|10000
decl_stmt|;
specifier|static
specifier|final
name|int
name|NUM_LOADERS
init|=
literal|5
decl_stmt|;
specifier|protected
name|String
name|name
init|=
literal|"load.db"
decl_stmt|;
specifier|protected
name|KahaStore
name|store
decl_stmt|;
comment|/*      * Test method for 'org.apache.activemq.kaha.Store.close()'      */
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_LOADERS
argument_list|)
decl_stmt|;
name|CountDownLatch
name|stop
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_LOADERS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_LOADERS
condition|;
name|i
operator|++
control|)
block|{
name|Loader
name|loader
init|=
operator|new
name|Loader
argument_list|(
literal|"loader:"
operator|+
name|i
argument_list|,
name|store
argument_list|,
name|COUNT
argument_list|,
name|start
argument_list|,
name|stop
argument_list|)
decl_stmt|;
name|loader
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|stop
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|KahaStore
name|getStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|KahaStore
operator|)
name|StoreFactory
operator|.
name|open
argument_list|(
name|name
argument_list|,
literal|"rw"
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|name
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/target/activemq-data/load.db"
expr_stmt|;
name|StoreFactory
operator|.
name|delete
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|store
operator|=
name|getStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|store
operator|.
name|clear
argument_list|()
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|StoreFactory
operator|.
name|delete
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

