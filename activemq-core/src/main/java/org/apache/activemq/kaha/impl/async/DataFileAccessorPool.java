begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|async
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Used to pool DataFileAccessors.  *   * @author chirino  */
end_comment

begin_class
specifier|public
class|class
name|DataFileAccessorPool
block|{
specifier|private
specifier|final
name|AsyncDataManager
name|dataManager
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Pool
argument_list|>
name|pools
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Pool
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
name|int
name|MAX_OPEN_READERS_PER_FILE
init|=
literal|5
decl_stmt|;
class|class
name|Pool
block|{
specifier|private
specifier|final
name|DataFile
name|file
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|DataFileAccessor
argument_list|>
name|pool
init|=
operator|new
name|ArrayList
argument_list|<
name|DataFileAccessor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|used
decl_stmt|;
specifier|private
name|int
name|openCounter
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|public
name|Pool
parameter_list|(
name|DataFile
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|DataFileAccessor
name|openDataFileReader
parameter_list|()
throws|throws
name|IOException
block|{
name|DataFileAccessor
name|rc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rc
operator|=
operator|new
name|DataFileAccessor
argument_list|(
name|dataManager
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|=
operator|(
name|DataFileAccessor
operator|)
name|pool
operator|.
name|remove
argument_list|(
name|pool
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|used
operator|=
literal|true
expr_stmt|;
name|openCounter
operator|++
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|closeDataFileReader
parameter_list|(
name|DataFileAccessor
name|reader
parameter_list|)
block|{
name|openCounter
operator|--
expr_stmt|;
name|used
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|pool
operator|.
name|size
argument_list|()
operator|>=
name|MAX_OPEN_READERS_PER_FILE
operator|||
name|disposed
condition|)
block|{
name|reader
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pool
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearUsedMark
parameter_list|()
block|{
name|used
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUsed
parameter_list|()
block|{
return|return
name|used
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
for|for
control|(
name|DataFileAccessor
name|reader
range|:
name|pool
control|)
block|{
name|reader
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|pool
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disposed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getOpenCounter
parameter_list|()
block|{
return|return
name|openCounter
return|;
block|}
block|}
specifier|public
name|DataFileAccessorPool
parameter_list|(
name|AsyncDataManager
name|dataManager
parameter_list|)
block|{
name|this
operator|.
name|dataManager
operator|=
name|dataManager
expr_stmt|;
block|}
specifier|synchronized
name|void
name|clearUsedMark
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|pools
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Pool
name|pool
init|=
operator|(
name|Pool
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|pool
operator|.
name|clearUsedMark
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|disposeUnused
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Pool
argument_list|>
name|iter
init|=
name|pools
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Pool
name|pool
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pool
operator|.
name|isUsed
argument_list|()
condition|)
block|{
name|pool
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|synchronized
name|void
name|disposeDataFileAccessors
parameter_list|(
name|DataFile
name|dataFile
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Closed."
argument_list|)
throw|;
block|}
name|Pool
name|pool
init|=
name|pools
operator|.
name|get
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pool
operator|.
name|getOpenCounter
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pool
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|pools
operator|.
name|remove
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The data file is still in use: "
operator|+
name|dataFile
operator|+
literal|", use count: "
operator|+
name|pool
operator|.
name|getOpenCounter
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|synchronized
name|DataFileAccessor
name|openDataFileAccessor
parameter_list|(
name|DataFile
name|dataFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Closed."
argument_list|)
throw|;
block|}
name|Pool
name|pool
init|=
name|pools
operator|.
name|get
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|pool
operator|=
operator|new
name|Pool
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
name|pools
operator|.
name|put
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
return|return
name|pool
operator|.
name|openDataFileReader
argument_list|()
return|;
block|}
specifier|synchronized
name|void
name|closeDataFileAccessor
parameter_list|(
name|DataFileAccessor
name|reader
parameter_list|)
block|{
name|Pool
name|pool
init|=
name|pools
operator|.
name|get
argument_list|(
name|reader
operator|.
name|getDataFile
argument_list|()
operator|.
name|getDataFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
operator|||
name|closed
condition|)
block|{
name|reader
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pool
operator|.
name|closeDataFileReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|closed
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Pool
argument_list|>
name|iter
init|=
name|pools
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Pool
name|pool
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|pool
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|pools
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

