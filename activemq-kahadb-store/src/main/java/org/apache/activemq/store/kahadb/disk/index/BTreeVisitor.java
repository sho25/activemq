begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Interface used to selectively visit the entries in a BTree.  *   * @param<Key>  * @param<Value>  */
end_comment

begin_interface
specifier|public
interface|interface
name|BTreeVisitor
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
block|{
comment|/**      * Do you want to visit the range of BTree entries between the first and and second key?      *       * @param first if null indicates the range of values before the second key.       * @param second if null indicates the range of values after the first key.      * @return true if you want to visit the values between the first and second key.      */
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
function_decl|;
comment|/**      * The keys and values of a BTree leaf node.      *       * @param keys      * @param values      */
name|void
name|visit
parameter_list|(
name|List
argument_list|<
name|Key
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|>
name|values
parameter_list|)
function_decl|;
specifier|public
interface|interface
name|Predicate
parameter_list|<
name|Key
parameter_list|>
block|{
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
function_decl|;
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
function_decl|;
block|}
specifier|abstract
class|class
name|PredicateVisitor
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
implements|implements
name|BTreeVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
implements|,
name|Predicate
argument_list|<
name|Key
argument_list|>
block|{
specifier|public
name|void
name|visit
parameter_list|(
name|List
argument_list|<
name|Key
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Key
name|key
init|=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInterestedInKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|matched
argument_list|(
name|key
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|matched
parameter_list|(
name|Key
name|key
parameter_list|,
name|Value
name|value
parameter_list|)
block|{         }
block|}
class|class
name|OrVisitor
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
extends|extends
name|PredicateVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|Key
argument_list|>
argument_list|>
name|conditions
decl_stmt|;
specifier|public
name|OrVisitor
parameter_list|(
name|List
argument_list|<
name|Predicate
argument_list|<
name|Key
argument_list|>
argument_list|>
name|conditions
parameter_list|)
block|{
name|this
operator|.
name|conditions
operator|=
name|conditions
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
block|{
for|for
control|(
name|Predicate
argument_list|<
name|Key
argument_list|>
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|isInterestedInKeysBetween
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
for|for
control|(
name|Predicate
argument_list|<
name|Key
argument_list|>
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|isInterestedInKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|Key
argument_list|>
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" OR "
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|condition
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
class|class
name|AndVisitor
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
extends|extends
name|PredicateVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|<
name|Key
argument_list|>
argument_list|>
name|conditions
decl_stmt|;
specifier|public
name|AndVisitor
parameter_list|(
name|List
argument_list|<
name|Predicate
argument_list|<
name|Key
argument_list|>
argument_list|>
name|conditions
parameter_list|)
block|{
name|this
operator|.
name|conditions
operator|=
name|conditions
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
block|{
for|for
control|(
name|Predicate
argument_list|<
name|Key
argument_list|>
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
operator|!
name|condition
operator|.
name|isInterestedInKeysBetween
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
for|for
control|(
name|Predicate
argument_list|<
name|Key
argument_list|>
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
operator|!
name|condition
operator|.
name|isInterestedInKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Predicate
argument_list|<
name|Key
argument_list|>
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|condition
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
class|class
name|BetweenVisitor
parameter_list|<
name|Key
extends|extends
name|Comparable
parameter_list|<
name|Key
parameter_list|>
parameter_list|,
name|Value
parameter_list|>
extends|extends
name|PredicateVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|private
specifier|final
name|Key
name|first
decl_stmt|;
specifier|private
specifier|final
name|Key
name|last
decl_stmt|;
specifier|public
name|BetweenVisitor
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|last
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|last
operator|=
name|last
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
block|{
return|return
operator|(
name|second
operator|==
literal|null
operator|||
name|second
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|first
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|first
operator|==
literal|null
operator|||
name|first
operator|.
name|compareTo
argument_list|(
name|last
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
specifier|public
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|first
argument_list|)
operator|>=
literal|0
operator|&&
name|key
operator|.
name|compareTo
argument_list|(
name|last
argument_list|)
operator|<
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|first
operator|+
literal|">= key< "
operator|+
name|last
return|;
block|}
block|}
class|class
name|GTVisitor
parameter_list|<
name|Key
extends|extends
name|Comparable
parameter_list|<
name|Key
parameter_list|>
parameter_list|,
name|Value
parameter_list|>
extends|extends
name|PredicateVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|final
specifier|private
name|Key
name|value
decl_stmt|;
specifier|public
name|GTVisitor
parameter_list|(
name|Key
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
block|{
return|return
name|second
operator|==
literal|null
operator|||
name|second
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>
literal|0
return|;
block|}
specifier|public
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"key> "
operator|+
name|value
return|;
block|}
block|}
class|class
name|GTEVisitor
parameter_list|<
name|Key
extends|extends
name|Comparable
parameter_list|<
name|Key
parameter_list|>
parameter_list|,
name|Value
parameter_list|>
extends|extends
name|PredicateVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|final
specifier|private
name|Key
name|value
decl_stmt|;
specifier|public
name|GTEVisitor
parameter_list|(
name|Key
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
block|{
return|return
name|second
operator|==
literal|null
operator|||
name|second
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"key>= "
operator|+
name|value
return|;
block|}
block|}
class|class
name|LTVisitor
parameter_list|<
name|Key
extends|extends
name|Comparable
parameter_list|<
name|Key
parameter_list|>
parameter_list|,
name|Value
parameter_list|>
extends|extends
name|PredicateVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|final
specifier|private
name|Key
name|value
decl_stmt|;
specifier|public
name|LTVisitor
parameter_list|(
name|Key
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
block|{
return|return
name|first
operator|==
literal|null
operator|||
name|first
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|public
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"key< "
operator|+
name|value
return|;
block|}
block|}
class|class
name|LTEVisitor
parameter_list|<
name|Key
extends|extends
name|Comparable
parameter_list|<
name|Key
parameter_list|>
parameter_list|,
name|Value
parameter_list|>
extends|extends
name|PredicateVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|final
specifier|private
name|Key
name|value
decl_stmt|;
specifier|public
name|LTEVisitor
parameter_list|(
name|Key
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Key
name|first
parameter_list|,
name|Key
name|second
parameter_list|)
block|{
return|return
name|first
operator|==
literal|null
operator|||
name|first
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<=
literal|0
return|;
block|}
specifier|public
name|boolean
name|isInterestedInKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|<=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"key<= "
operator|+
name|value
return|;
block|}
block|}
block|}
end_interface

end_unit

