begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|junit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|runners
operator|.
name|statements
operator|.
name|FailOnTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|BlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|InitializationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Custom JUnit test runner for customizing JUnit tests run in ActiveMQ.  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQTestRunner
extends|extends
name|BlockJUnit4ClassRunner
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMQTestRunner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ActiveMQTestRunner
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|InitializationError
block|{
name|super
argument_list|(
name|klass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Statement
name|methodBlock
parameter_list|(
specifier|final
name|FrameworkMethod
name|method
parameter_list|)
block|{
name|Statement
name|statement
init|=
name|super
operator|.
name|methodBlock
argument_list|(
name|method
argument_list|)
decl_stmt|;
comment|// Check for repeats needed
name|statement
operator|=
name|withPotentialRepeat
argument_list|(
name|method
argument_list|,
name|statement
argument_list|)
expr_stmt|;
return|return
name|statement
return|;
block|}
comment|/**      * Perform the same logic as      * {@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}      * but with additional support for changing the coded timeout with an extended value.      *      * @return either a {@link FailOnTimeout}, or the supplied {@link Statement} as appropriate.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|protected
name|Statement
name|withPotentialTimeout
parameter_list|(
name|FrameworkMethod
name|frameworkMethod
parameter_list|,
name|Object
name|testInstance
parameter_list|,
name|Statement
name|next
parameter_list|)
block|{
name|long
name|testTimeout
init|=
name|getOriginalTimeout
argument_list|(
name|frameworkMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|testTimeout
operator|>
literal|0
condition|)
block|{
name|String
name|multiplierString
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.activemq.junit.testTimeoutMultiplier"
argument_list|)
decl_stmt|;
name|double
name|multiplier
init|=
literal|0.0
decl_stmt|;
try|try
block|{
name|multiplier
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|multiplierString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring testTimeoutMultiplier not set to a valid value: "
operator|+
name|multiplierString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multiplier
operator|>
literal|0.0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test timeout multiple {} applied to test timeout {}ms: new timeout = {}"
argument_list|,
name|multiplier
argument_list|,
name|testTimeout
argument_list|,
call|(
name|long
call|)
argument_list|(
name|testTimeout
operator|*
name|multiplier
argument_list|)
argument_list|)
expr_stmt|;
name|testTimeout
operator|=
call|(
name|long
call|)
argument_list|(
name|testTimeout
operator|*
name|multiplier
argument_list|)
expr_stmt|;
block|}
name|next
operator|=
name|FailOnTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|testTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|super
operator|.
name|withPotentialTimeout
argument_list|(
name|frameworkMethod
argument_list|,
name|testInstance
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
comment|/**      * Check for the presence of a {@link Repeat} annotation and return a {@link RepeatStatement}      * to handle executing the test repeated or the original value if not repeating.      *      * @return either a {@link RepeatStatement}, or the supplied {@link Statement} as appropriate.      */
specifier|protected
name|Statement
name|withPotentialRepeat
parameter_list|(
name|FrameworkMethod
name|frameworkMethod
parameter_list|,
name|Statement
name|next
parameter_list|)
block|{
name|Repeat
name|repeatAnnotation
init|=
name|frameworkMethod
operator|.
name|getAnnotation
argument_list|(
name|Repeat
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|repeatAnnotation
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|RepeatStatement
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|(
name|repeatAnnotation
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
comment|/**      * Retrieve the original JUnit {@code timeout} from the {@link Test @Test}      * annotation on the incoming {@linkplain FrameworkMethod test method}.      *      * @return the timeout, or {@code 0} if none was specified      */
specifier|protected
name|long
name|getOriginalTimeout
parameter_list|(
name|FrameworkMethod
name|frameworkMethod
parameter_list|)
block|{
name|Test
name|test
init|=
name|frameworkMethod
operator|.
name|getAnnotation
argument_list|(
name|Test
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|test
operator|!=
literal|null
operator|&&
name|test
operator|.
name|timeout
argument_list|()
operator|>
literal|0
condition|?
name|test
operator|.
name|timeout
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

