begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_class
specifier|public
class|class
name|BrokerTest
extends|extends
name|BrokerTestSupport
block|{
specifier|public
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|int
name|deliveryMode
decl_stmt|;
specifier|public
name|int
name|prefetch
decl_stmt|;
specifier|public
name|byte
name|destinationType
decl_stmt|;
specifier|public
name|boolean
name|durableConsumer
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MAX_NULL_WAIT
init|=
literal|500
decl_stmt|;
specifier|public
name|void
name|initCombosForTestQueueOnlyOnceDeliveryWith2Consumers
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueOnlyOnceDeliveryWith2Consumers
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"m2 is null for index: "
operator|+
name|i
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|m1
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo2
argument_list|,
name|m2
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestQueueBrowserWith2Consumers
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueBrowserWith2Consumers
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|//as the messages are sent async - need to synchronize the last
comment|//one to ensure they arrive in the order we want
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup a second connection with a queue browser.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setBrowser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m2 is null for index: "
operator|+
name|i
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m1
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo2
argument_list|,
name|m2
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
comment|/*      * change the order of the above test      */
specifier|public
name|void
name|testQueueBrowserWith2ConsumersBrowseFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|deliveryMode
operator|=
name|DeliveryMode
operator|.
name|NON_PERSISTENT
expr_stmt|;
comment|// Setup a second connection with a queue browser.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setBrowser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|//as the messages are sent async - need to synchronize the last
comment|//one to ensure they arrive in the order we want
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
block|}
comment|// no messages present in queue browser as there were no messages when it
comment|// was created
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueBrowserWith2ConsumersInterleaved
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|deliveryMode
operator|=
name|DeliveryMode
operator|.
name|NON_PERSISTENT
expr_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup a second connection with a queue browser.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setBrowser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|//as the messages are sent async - need to synchronize the last
comment|//one to ensure they arrive in the order we want
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
block|}
comment|// a browse is a snapshot - only guarantee to see messages produced before
comment|// the browser
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m2 is null for index: "
operator|+
name|i
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m1
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo2
argument_list|,
name|m2
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestConsumerPrefetchAndStandardAck
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
comment|// Integer.valueOf(DeliveryMode.NON_PERSISTENT),
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerPrefetchAndStandardAck
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Send 3 messages to the broker.
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure only 1 message was delivered.
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// Acknowledge the first message. This should cause the next message to
comment|// get dispatched.
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m2
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|m3
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m3
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m3
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTransactedAckWithPrefetchOfOne
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransactedAckWithPrefetchOfOne
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection1
argument_list|,
name|connectionInfo1
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Now get the messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Begin the transaction.
name|LocalTransactionId
name|txid
init|=
name|createLocalTransaction
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo1
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
comment|// Commit the transaction.
name|connection1
operator|.
name|send
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo1
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTransactedSend
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransactedSend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection1
argument_list|,
name|connectionInfo1
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|LocalTransactionId
name|txid
init|=
name|createLocalTransaction
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo1
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send the messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// The point of this test is that message should not be delivered until
comment|// send is committed.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection1
argument_list|,
name|MAX_NULL_WAIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Commit the transaction.
name|connection1
operator|.
name|send
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo1
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now get the messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestQueueTransactedAck
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueTransactedAck
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection1
argument_list|,
name|connectionInfo1
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|LocalTransactionId
name|txid
init|=
name|createLocalTransaction
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo1
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acknowledge the first 2 messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
comment|// Commit the transaction.
name|connection1
operator|.
name|send
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo1
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// The queue should now only have the remaining 2 messages
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countMessagesInQueue
argument_list|(
name|connection1
argument_list|,
name|connectionInfo1
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicDurableSubscriptionCanBeRestored
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo1
operator|.
name|setClientId
argument_list|(
literal|"clientid1"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the messages
name|Message
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|// Ack the last message.
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m
argument_list|,
literal|2
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the connection.
name|connection1
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo2
operator|.
name|setClientId
argument_list|(
literal|"clientid1"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Get the rest of the messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGroupedMessagesDeliveredToOnlyOneConsumer
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGroupedMessagesDeliveredToOnlyOneConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|message
operator|.
name|setGroupID
argument_list|(
literal|"TEST-GROUP"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setGroupSequence
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// All the messages should have been sent down connection 1.. just get
comment|// the first 3
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Close the first consumer.
name|connection1
operator|.
name|request
argument_list|(
name|closeConsumerInfo
argument_list|(
name|consumerInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// The last messages should now go the the second consumer.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"m1 is null for index: "
operator|+
name|i
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|createAck
argument_list|(
name|consumerInfo2
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTopicConsumerOnlySeeMessagesAfterCreation
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"durableConsumer"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|,
name|Boolean
operator|.
name|FALSE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicConsumerOnlySeeMessagesAfterCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo1
operator|.
name|setClientId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
comment|// Send the 1st message
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the durable subscription.
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|durableConsumer
condition|)
block|{
name|consumerInfo1
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Subscription should skip over the first message
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|m2
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTopicRetroactiveConsumerSeeMessagesBeforeCreation
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"durableConsumer"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|,
name|Boolean
operator|.
name|FALSE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicRetroactiveConsumerSeeMessagesBeforeCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo1
operator|.
name|setClientId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
name|Message
name|m
init|=
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// Create the durable subscription.
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|durableConsumer
condition|)
block|{
name|consumerInfo1
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// the behavior is VERY dependent on the recovery policy used.
comment|// But the default broker settings try to make it as consistent as
comment|// possible
comment|// Subscription should see all messages sent.
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|m2
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// TODO: need to reimplement this since we don't fail when we send to a
comment|// non-existant
comment|// destination. But if we can access the Region directly then we should be
comment|// able to
comment|// check that if the destination was removed.
comment|//
comment|// public void initCombosForTestTempDestinationsRemovedOnConnectionClose() {
comment|// addCombinationValues( "deliveryMode", new Object[]{
comment|// Integer.valueOf(DeliveryMode.NON_PERSISTENT),
comment|// Integer.valueOf(DeliveryMode.PERSISTENT)} );
comment|// addCombinationValues( "destinationType", new Object[]{
comment|// Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE),
comment|// Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)} );
comment|// }
comment|//
comment|// public void testTempDestinationsRemovedOnConnectionClose() throws
comment|// Exception {
comment|//
comment|// // Setup a first connection
comment|// StubConnection connection1 = createConnection();
comment|// ConnectionInfo connectionInfo1 = createConnectionInfo();
comment|// SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
comment|// ProducerInfo producerInfo1 = createProducerInfo(sessionInfo1);
comment|// connection1.send(connectionInfo1);
comment|// connection1.send(sessionInfo1);
comment|// connection1.send(producerInfo1);
comment|//
comment|// destination = createDestinationInfo(connection1, connectionInfo1,
comment|// destinationType);
comment|//
comment|// StubConnection connection2 = createConnection();
comment|// ConnectionInfo connectionInfo2 = createConnectionInfo();
comment|// SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
comment|// ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
comment|// connection2.send(connectionInfo2);
comment|// connection2.send(sessionInfo2);
comment|// connection2.send(producerInfo2);
comment|//
comment|// // Send from connection2 to connection1's temp destination. Should
comment|// succeed.
comment|// connection2.send(createMessage(producerInfo2, destination,
comment|// deliveryMode));
comment|//
comment|// // Close connection 1
comment|// connection1.request(closeConnectionInfo(connectionInfo1));
comment|//
comment|// try {
comment|// // Send from connection2 to connection1's temp destination. Should not
comment|// succeed.
comment|// connection2.request(createMessage(producerInfo2, destination,
comment|// deliveryMode));
comment|// fail("Expected JMSException.");
comment|// } catch ( JMSException success ) {
comment|// }
comment|//
comment|// }
comment|// public void initCombosForTestTempDestinationsAreNotAutoCreated() {
comment|// addCombinationValues( "deliveryMode", new Object[]{
comment|// Integer.valueOf(DeliveryMode.NON_PERSISTENT),
comment|// Integer.valueOf(DeliveryMode.PERSISTENT)} );
comment|// addCombinationValues( "destinationType", new Object[]{
comment|// Byte.valueOf(ActiveMQDestination.TEMP_QUEUE_TYPE),
comment|// Byte.valueOf(ActiveMQDestination.TEMP_TOPIC_TYPE)} );
comment|// }
comment|//
comment|//
comment|// We create temp destination on demand now so this test case is no longer
comment|// valid.
comment|//
comment|// public void testTempDestinationsAreNotAutoCreated() throws Exception {
comment|//
comment|// // Setup a first connection
comment|// StubConnection connection1 = createConnection();
comment|// ConnectionInfo connectionInfo1 = createConnectionInfo();
comment|// SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
comment|// ProducerInfo producerInfo1 = createProducerInfo(sessionInfo1);
comment|// connection1.send(connectionInfo1);
comment|// connection1.send(sessionInfo1);
comment|// connection1.send(producerInfo1);
comment|//
comment|// destination =
comment|// ActiveMQDestination.createDestination(connectionInfo1.getConnectionId()+":1",
comment|// destinationType);
comment|//
comment|// // Should not be able to send to a non-existant temp destination.
comment|// try {
comment|// connection1.request(createMessage(producerInfo1, destination,
comment|// deliveryMode));
comment|// fail("Expected JMSException.");
comment|// } catch ( JMSException success ) {
comment|// }
comment|//
comment|// }
specifier|public
name|void
name|initCombosForTestExclusiveQueueDeliversToOnlyOneConsumer
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExclusiveQueueDeliversToOnlyOneConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send a message.. this should make consumer 1 the exclusive owner.
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Second message should go to consumer 1 even though consumer 2 is
comment|// ready
comment|// for dispatch.
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acknowledge the first 2 messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Close the first consumer.
name|connection1
operator|.
name|send
argument_list|(
name|closeConsumerInfo
argument_list|(
name|consumerInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// The last two messages should now go the the second consumer.
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo2
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestWildcardConsume
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWildcardConsume
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
comment|// setup the wildcard consumer.
name|ActiveMQDestination
name|compositeDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"WILD.*.TEST"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|compositeDestination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// These two message should NOT match the wild card.
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"WILD.CARD"
argument_list|,
name|destinationType
argument_list|)
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"WILD.TEST"
argument_list|,
name|destinationType
argument_list|)
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// These two message should match the wild card.
name|ActiveMQDestination
name|d1
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"WILD.CARD.TEST"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|d1
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|m
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|d2
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"WILD.FOO.TEST"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|d2
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d2
argument_list|,
name|m
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestCompositeConsume
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompositeConsume
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
comment|// setup the composite consumer.
name|ActiveMQDestination
name|compositeDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"A,B"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|compositeDestination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Publish to the two destinations
name|ActiveMQDestination
name|destinationA
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"A"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destinationB
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"B"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
comment|// Send a message to each destination .
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destinationA
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destinationB
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// The consumer should get both messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestCompositeSend
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompositeSend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|destinationA
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"A"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destinationA
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|destinationB
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"B"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destinationB
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Send the messages to the composite destination.
name|ActiveMQDestination
name|compositeDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"A,B"
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|compositeDestination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The messages should have been delivered to both the A and B
comment|// destination.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m1
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compositeDestination
argument_list|,
name|m1
operator|.
name|getOriginalDestination
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compositeDestination
argument_list|,
name|m2
operator|.
name|getOriginalDestination
argument_list|()
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|createAck
argument_list|(
name|consumerInfo2
argument_list|,
name|m2
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestConnectionCloseCascades
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectionCloseCascades
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// give the async ack a chance to perculate and validate all are currently consumed
name|Message
name|msg
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|,
name|MAX_NULL_WAIT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"all messages were received "
operator|+
name|msg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|// Close the connection, this should in turn close the consumer.
name|connection1
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send another message, connection1 should not get the message.
name|connection2
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"no message received"
argument_list|,
name|receiveMessage
argument_list|(
name|connection1
argument_list|,
name|MAX_NULL_WAIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestSessionCloseCascades
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSessionCloseCascades
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Close the session, this should in turn close the consumer.
name|connection1
operator|.
name|request
argument_list|(
name|closeSessionInfo
argument_list|(
name|sessionInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send another message, connection1 should not get the message.
name|connection2
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|,
name|MAX_NULL_WAIT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"no message received from connection1 after session close"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestConsumerClose
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerClose
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// give the async ack a chance to perculate and validate all are currently consumed
comment|// use receive rather than poll as broker info is sent async and may still need to be dequeued
name|Message
name|result
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|,
name|MAX_NULL_WAIT
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"no more messages "
operator|+
name|result
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// Close the consumer.
name|connection1
operator|.
name|request
argument_list|(
name|closeConsumerInfo
argument_list|(
name|consumerInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send another message, connection1 should not get the message.
name|connection2
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|,
name|MAX_NULL_WAIT
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"no message received after close "
operator|+
name|result
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTopicNoLocal
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicNoLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// The 2nd connection should get the messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
block|}
comment|// Send a message with the 2nd connection
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// The first connection should not see the initial 4 local messages sent
comment|// but should
comment|// see the messages from connection 2.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTopicDispatchIsBroadcast
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicDispatchIsBroadcast
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestQueueDispatchedAreRedeliveredOnConsumerClose
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueDispatchedAreRedeliveredOnConsumerClose
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection1
argument_list|,
name|connectionInfo1
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lastDeliveredSeq
init|=
operator|-
literal|1
decl_stmt|;
comment|// Get the messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|m1
operator|.
name|isRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|lastDeliveredSeq
operator|=
name|m1
operator|.
name|getMessageId
argument_list|()
operator|.
name|getBrokerSequenceId
argument_list|()
expr_stmt|;
block|}
comment|// Close the consumer without sending any ACKS.
name|RemoveInfo
name|removeInfo
init|=
name|closeConsumerInfo
argument_list|(
name|consumerInfo1
argument_list|)
decl_stmt|;
name|removeInfo
operator|.
name|setLastDeliveredSequenceId
argument_list|(
name|lastDeliveredSeq
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|removeInfo
argument_list|)
expr_stmt|;
comment|// Drain any in flight messages..
while|while
condition|(
name|connection1
operator|.
name|getDispatchQueue
argument_list|()
operator|.
name|poll
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|!=
literal|null
condition|)
block|{         }
comment|// Add the second consumer
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Make sure the messages were re delivered to the 2nd consumer.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m1
operator|.
name|isRedelivered
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestQueueBrowseMessages
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueBrowseMessages
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use selector to skip first message.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setBrowser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestQueueSendThenAddConsumer
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueSendThenAddConsumer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
comment|// Send a message to the broker.
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start the consumer
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Make sure the message was delivered.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestQueueAckRemovesMessage
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueAckRemovesMessage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|Message
name|message1
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|Message
name|message2
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message2
argument_list|)
expr_stmt|;
comment|// Make sure the message was delivered.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|message1
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|countMessagesInQueue
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destination
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|countMessagesInQueue
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destination
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|countMessagesInQueue
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destination
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestSelectorSkipsMessages
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST_TOPIC"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST_QUEUE"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectorSkipsMessages
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSelector
argument_list|(
literal|"JMSType='last'"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|Message
name|message1
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|message1
operator|.
name|setType
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|Message
name|message2
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
name|message2
operator|.
name|setType
argument_list|(
literal|"last"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message2
argument_list|)
expr_stmt|;
comment|// Use selector to skip first message.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|message2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|closeConsumerInfo
argument_list|(
name|consumerInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestAddConsumerThenSend
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddConsumerThenSend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the message was delivered.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestConsumerPrefetchAtOne
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerPrefetchAtOne
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Send 2 messages to the broker.
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure only 1 message was delivered.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestConsumerPrefetchAtTwo
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerPrefetchAtTwo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Send 3 messages to the broker.
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure only 1 message was delivered.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestConsumerPrefetchAndDeliveredAck
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"deliveryMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destinationType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|)
block|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerPrefetchAndDeliveredAck
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a producer and consumer
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|destination
operator|=
name|createDestinationInfo
argument_list|(
name|connection
argument_list|,
name|connectionInfo
argument_list|,
name|destinationType
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Send 3 messages to the broker.
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure only 1 message was delivered.
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// Acknowledge the first message. This should cause the next message to
comment|// get dispatched.
name|connection
operator|.
name|request
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m2
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|m3
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m3
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m3
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetServices
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|broker
operator|.
name|getServices
argument_list|()
operator|.
name|length
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|BrokerTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

