begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Dn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|exception
operator|.
name|LdapException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapNetworkConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test of the {@link SimpleCachedLDAPAuthorizationMap} that tests against a basic OpenLDAP instance.  * Disabled by default because it requires external setup to provide the OpenLDAP instance.  *   * To enable, you need an OpenLDAP with a minimum of the following in the slapd.conf file:   *   * suffix   "dc=apache,dc=org"  * rootdn   "cn=Manager,dc=apache,dc=org"  * rootpw   {SSHA}+Rx8kj98q3FlK5rUkT2hAtMP5v2ImQ82  *   * If you wish to use different settings or don't use the default port, change the constants   * below for your environment.  */
end_comment

begin_class
annotation|@
name|Ignore
specifier|public
class|class
name|CachedLDAPAuthorizationModuleLegacyOpenLDAPTest
extends|extends
name|AbstractCachedLDAPAuthorizationMapLegacyTest
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|LDAP_USER
init|=
literal|"cn=Manager,dc=apache,dc=org"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|LDAP_PASS
init|=
literal|"password"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|LDAP_HOST
init|=
literal|"localhost"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|LDAP_PORT
init|=
literal|389
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|cleanAndLoad
argument_list|(
literal|"dc=apache,dc=org"
argument_list|,
literal|"org/apache/activemq/security/activemq-openldap-legacy.ldif"
argument_list|,
name|LDAP_HOST
argument_list|,
name|LDAP_PORT
argument_list|,
name|LDAP_USER
argument_list|,
name|LDAP_PASS
argument_list|,
name|map
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameDestination
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Subtree rename not implemented by OpenLDAP.
block|}
specifier|protected
name|SimpleCachedLDAPAuthorizationMap
name|createMap
parameter_list|()
block|{
name|SimpleCachedLDAPAuthorizationMap
name|newMap
init|=
name|super
operator|.
name|createMap
argument_list|()
decl_stmt|;
name|newMap
operator|.
name|setConnectionURL
argument_list|(
literal|"ldap://"
operator|+
name|LDAP_HOST
operator|+
literal|":"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|LDAP_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|newMap
operator|.
name|setConnectionUsername
argument_list|(
name|LDAP_USER
argument_list|)
expr_stmt|;
name|newMap
operator|.
name|setConnectionPassword
argument_list|(
name|LDAP_PASS
argument_list|)
expr_stmt|;
comment|// Persistent search is not supported in OpenLDAP
name|newMap
operator|.
name|setRefreshInterval
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|newMap
operator|.
name|setQueueSearchBase
argument_list|(
literal|"ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org"
argument_list|)
expr_stmt|;
name|newMap
operator|.
name|setTopicSearchBase
argument_list|(
literal|"ou=Topic,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org"
argument_list|)
expr_stmt|;
name|newMap
operator|.
name|setTempSearchBase
argument_list|(
literal|"ou=Temp,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org"
argument_list|)
expr_stmt|;
return|return
name|newMap
return|;
block|}
specifier|protected
name|InputStream
name|getAddLdif
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/activemq/security/activemq-openldap-legacy-add.ldif"
argument_list|)
return|;
block|}
specifier|protected
name|InputStream
name|getRemoveLdif
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/activemq/security/activemq-openldap-legacy-delete.ldif"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getQueueBaseDn
parameter_list|()
block|{
return|return
literal|"ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org"
return|;
block|}
specifier|protected
name|LdapConnection
name|getLdapConnection
parameter_list|()
throws|throws
name|LdapException
throws|,
name|IOException
block|{
name|LdapConnection
name|connection
init|=
operator|new
name|LdapNetworkConnection
argument_list|(
name|LDAP_HOST
argument_list|,
name|LDAP_PORT
argument_list|)
decl_stmt|;
name|connection
operator|.
name|bind
argument_list|(
operator|new
name|Dn
argument_list|(
name|LDAP_USER
argument_list|)
argument_list|,
name|LDAP_PASS
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
end_class

end_unit

