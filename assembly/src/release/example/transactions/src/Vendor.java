begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_comment
comment|/**  * The Vendor synchronously, and in a single transaction, receives the  * order from VendorOrderQueue and sends messages to the two Suppliers via  * MonitorOrderQueue and StorageOrderQueue.  * The responses are received asynchronously; when both responses come  * back, the order confirmation message is sent back to the Retailer.  */
end_comment

begin_class
specifier|public
class|class
name|Vendor
implements|implements
name|Runnable
implements|,
name|MessageListener
block|{
specifier|private
name|String
name|url
decl_stmt|;
specifier|private
name|String
name|user
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|Session
name|asyncSession
decl_stmt|;
specifier|private
name|int
name|numSuppliers
init|=
literal|2
decl_stmt|;
specifier|private
name|Object
name|supplierLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
name|Vendor
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|Destination
name|orderQueue
decl_stmt|;
name|Destination
name|monitorOrderQueue
decl_stmt|;
name|Destination
name|storageOrderQueue
decl_stmt|;
name|TemporaryQueue
name|vendorConfirmQueue
decl_stmt|;
name|MessageConsumer
name|orderConsumer
init|=
literal|null
decl_stmt|;
name|MessageProducer
name|monitorProducer
init|=
literal|null
decl_stmt|;
name|MessageProducer
name|storageProducer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|orderQueue
operator|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"VendorOrderQueue"
argument_list|)
expr_stmt|;
name|monitorOrderQueue
operator|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"MonitorOrderQueue"
argument_list|)
expr_stmt|;
name|storageOrderQueue
operator|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"StorageOrderQueue"
argument_list|)
expr_stmt|;
name|orderConsumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|orderQueue
argument_list|)
expr_stmt|;
name|monitorProducer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|monitorOrderQueue
argument_list|)
expr_stmt|;
name|storageProducer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|storageOrderQueue
argument_list|)
expr_stmt|;
name|Connection
name|asyncconnection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|asyncSession
operator|=
name|asyncconnection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|vendorConfirmQueue
operator|=
name|asyncSession
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|MessageConsumer
name|confirmConsumer
init|=
name|asyncSession
operator|.
name|createConsumer
argument_list|(
name|vendorConfirmQueue
argument_list|)
decl_stmt|;
name|confirmConsumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|asyncconnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Order
name|order
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Message
name|inMessage
init|=
name|orderConsumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|MapMessage
name|message
decl_stmt|;
if|if
condition|(
name|inMessage
operator|instanceof
name|MapMessage
condition|)
block|{
name|message
operator|=
operator|(
name|MapMessage
operator|)
name|inMessage
expr_stmt|;
block|}
else|else
block|{
comment|// end of stream
name|Message
name|outMessage
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|outMessage
operator|.
name|setJMSReplyTo
argument_list|(
name|vendorConfirmQueue
argument_list|)
expr_stmt|;
name|monitorProducer
operator|.
name|send
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|storageProducer
operator|.
name|send
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// Randomly throw an exception in here to simulate a Database error
comment|// and trigger a rollback of the transaction
if|if
condition|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Simulated Database Error."
argument_list|)
throw|;
block|}
name|order
operator|=
operator|new
name|Order
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|MapMessage
name|orderMessage
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|orderMessage
operator|.
name|setJMSReplyTo
argument_list|(
name|vendorConfirmQueue
argument_list|)
expr_stmt|;
name|orderMessage
operator|.
name|setInt
argument_list|(
literal|"VendorOrderNumber"
argument_list|,
name|order
operator|.
name|getOrderNumber
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|quantity
init|=
name|message
operator|.
name|getInt
argument_list|(
literal|"Quantity"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: Retailer ordered "
operator|+
name|quantity
operator|+
literal|" "
operator|+
name|message
operator|.
name|getString
argument_list|(
literal|"Item"
argument_list|)
argument_list|)
expr_stmt|;
name|orderMessage
operator|.
name|setInt
argument_list|(
literal|"Quantity"
argument_list|,
name|quantity
argument_list|)
expr_stmt|;
name|orderMessage
operator|.
name|setString
argument_list|(
literal|"Item"
argument_list|,
literal|"Monitor"
argument_list|)
expr_stmt|;
name|monitorProducer
operator|.
name|send
argument_list|(
name|orderMessage
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: ordered "
operator|+
name|quantity
operator|+
literal|" Monitor(s)"
argument_list|)
expr_stmt|;
name|orderMessage
operator|.
name|setString
argument_list|(
literal|"Item"
argument_list|,
literal|"HardDrive"
argument_list|)
expr_stmt|;
name|storageProducer
operator|.
name|send
argument_list|(
name|orderMessage
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: ordered "
operator|+
name|quantity
operator|+
literal|" Hard Drive(s)"
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: Comitted Transaction 1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: JMSException Occured: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: Rolled Back Transaction."
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|supplierLock
init|)
block|{
while|while
condition|(
name|numSuppliers
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|supplierLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|asyncconnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|message
operator|instanceof
name|MapMessage
operator|)
condition|)
block|{
synchronized|synchronized
init|(
name|supplierLock
init|)
block|{
name|numSuppliers
operator|--
expr_stmt|;
name|supplierLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|asyncSession
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|orderNumber
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|MapMessage
name|componentMessage
init|=
operator|(
name|MapMessage
operator|)
name|message
decl_stmt|;
name|orderNumber
operator|=
name|componentMessage
operator|.
name|getInt
argument_list|(
literal|"VendorOrderNumber"
argument_list|)
expr_stmt|;
name|Order
name|order
init|=
name|Order
operator|.
name|getOrder
argument_list|(
name|orderNumber
argument_list|)
decl_stmt|;
name|order
operator|.
name|processSubOrder
argument_list|(
name|componentMessage
argument_list|)
expr_stmt|;
name|asyncSession
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"Pending"
operator|.
name|equals
argument_list|(
name|order
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: Completed processing for order "
operator|+
name|orderNumber
argument_list|)
expr_stmt|;
name|MessageProducer
name|replyProducer
init|=
name|asyncSession
operator|.
name|createProducer
argument_list|(
name|order
operator|.
name|getMessage
argument_list|()
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|)
decl_stmt|;
name|MapMessage
name|replyMessage
init|=
name|asyncSession
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Fulfilled"
operator|.
name|equals
argument_list|(
name|order
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|replyMessage
operator|.
name|setBoolean
argument_list|(
literal|"OrderAccepted"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: sent "
operator|+
name|order
operator|.
name|quantity
operator|+
literal|" computer(s)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replyMessage
operator|.
name|setBoolean
argument_list|(
literal|"OrderAccepted"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vendor: unable to send "
operator|+
name|order
operator|.
name|quantity
operator|+
literal|" computer(s)"
argument_list|)
expr_stmt|;
block|}
name|replyProducer
operator|.
name|send
argument_list|(
name|replyMessage
argument_list|)
expr_stmt|;
name|asyncSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vender: committed transaction 2"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Order
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|Order
argument_list|>
name|pendingOrders
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Order
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|nextOrderNumber
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|orderNumber
decl_stmt|;
specifier|private
name|int
name|quantity
decl_stmt|;
specifier|private
name|MapMessage
name|monitor
init|=
literal|null
decl_stmt|;
specifier|private
name|MapMessage
name|storage
init|=
literal|null
decl_stmt|;
specifier|private
name|MapMessage
name|message
decl_stmt|;
specifier|private
name|String
name|status
decl_stmt|;
specifier|public
name|Order
parameter_list|(
name|MapMessage
name|message
parameter_list|)
block|{
name|this
operator|.
name|orderNumber
operator|=
name|nextOrderNumber
operator|++
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
try|try
block|{
name|this
operator|.
name|quantity
operator|=
name|message
operator|.
name|getInt
argument_list|(
literal|"Quantity"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|this
operator|.
name|quantity
operator|=
literal|0
expr_stmt|;
block|}
name|status
operator|=
literal|"Pending"
expr_stmt|;
name|pendingOrders
operator|.
name|put
argument_list|(
name|orderNumber
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
specifier|public
name|int
name|getOrderNumber
parameter_list|()
block|{
return|return
name|orderNumber
return|;
block|}
specifier|public
specifier|static
name|int
name|getOutstandingOrders
parameter_list|()
block|{
return|return
name|pendingOrders
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Order
name|getOrder
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
name|pendingOrders
operator|.
name|get
argument_list|(
name|number
argument_list|)
return|;
block|}
specifier|public
name|MapMessage
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|void
name|processSubOrder
parameter_list|(
name|MapMessage
name|message
parameter_list|)
block|{
name|String
name|itemName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|itemName
operator|=
name|message
operator|.
name|getString
argument_list|(
literal|"Item"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Monitor"
operator|.
name|equals
argument_list|(
name|itemName
argument_list|)
condition|)
block|{
name|monitor
operator|=
name|message
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"HardDrive"
operator|.
name|equals
argument_list|(
name|itemName
argument_list|)
condition|)
block|{
name|storage
operator|=
name|message
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|monitor
operator|&&
literal|null
operator|!=
name|storage
condition|)
block|{
comment|// Received both messages
try|try
block|{
if|if
condition|(
name|quantity
operator|>
name|monitor
operator|.
name|getInt
argument_list|(
literal|"Quantity"
argument_list|)
condition|)
block|{
name|status
operator|=
literal|"Cancelled"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|quantity
operator|>
name|storage
operator|.
name|getInt
argument_list|(
literal|"Quantity"
argument_list|)
condition|)
block|{
name|status
operator|=
literal|"Cancelled"
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
literal|"Fulfilled"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|status
operator|=
literal|"Cancelled"
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|url
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
name|String
name|user
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|url
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|user
operator|=
name|args
index|[
literal|1
index|]
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|3
condition|)
block|{
name|password
operator|=
name|args
index|[
literal|2
index|]
expr_stmt|;
block|}
name|Vendor
name|v
init|=
operator|new
name|Vendor
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|v
argument_list|,
literal|"Vendor"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

