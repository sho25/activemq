begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueReceiver
import|;
end_import

begin_comment
comment|/**  * A client uses a<CODE>QueueReceiver</CODE> object to receive messages that  * have been delivered to a queue.  *<p/>  *<P>  * Although it is possible to have multiple<CODE>QueueReceiver</CODE> s for  * the same queue, the JMS API does not define how messages are distributed  * between the<CODE>QueueReceiver</CODE>s.  *<p/>  *<P>  * If a<CODE>QueueReceiver</CODE> specifies a message selector, the messages  * that are not selected remain on the queue. By definition, a message selector  * allows a<CODE>QueueReceiver</CODE> to skip messages. This means that when  * the skipped messages are eventually read, the total ordering of the reads  * does not retain the partial order defined by each message producer. Only  *<CODE>QueueReceiver</CODE> s without a message selector will read messages  * in message producer order.  *<p/>  *<P>  * Creating a<CODE>MessageConsumer</CODE> provides the same features as  * creating a<CODE>QueueReceiver</CODE>. A<CODE>MessageConsumer</CODE>  * object is recommended for creating new code. The<CODE>QueueReceiver  *</CODE> is provided to support existing code.  *  * @see javax.jms.Session#createConsumer(javax.jms.Destination, String)  * @see javax.jms.Session#createConsumer(javax.jms.Destination)  * @see javax.jms.QueueSession#createReceiver(Queue, String)  * @see javax.jms.QueueSession#createReceiver(Queue)  * @see javax.jms.MessageConsumer  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQQueueReceiver
extends|extends
name|ActiveMQMessageConsumer
implements|implements
name|QueueReceiver
block|{
comment|/**      * @param theSession      * @param value      * @param destination      * @param messageSelector      * @param prefetch      * @param asyncDispatch       * @throws JMSException      */
specifier|protected
name|ActiveMQQueueReceiver
parameter_list|(
name|ActiveMQSession
name|theSession
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|selector
parameter_list|,
name|int
name|prefetch
parameter_list|,
name|int
name|maximumPendingMessageCount
parameter_list|,
name|boolean
name|asyncDispatch
parameter_list|)
throws|throws
name|JMSException
block|{
name|super
argument_list|(
name|theSession
argument_list|,
name|consumerId
argument_list|,
name|destination
argument_list|,
literal|null
argument_list|,
name|selector
argument_list|,
name|prefetch
argument_list|,
name|maximumPendingMessageCount
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|asyncDispatch
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the<CODE>Queue</CODE> associated with this queue receiver.      *      * @return this receiver's<CODE>Queue</CODE>      * @throws JMSException if the JMS provider fails to get the queue for this queue      *                      receiver due to some internal error.      */
specifier|public
name|Queue
name|getQueue
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
operator|(
name|Queue
operator|)
name|super
operator|.
name|getDestination
argument_list|()
return|;
block|}
block|}
end_class

end_unit

