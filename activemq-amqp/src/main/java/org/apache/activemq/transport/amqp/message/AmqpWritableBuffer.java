begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|WritableBuffer
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|AmqpWritableBuffer
implements|implements
name|WritableBuffer
block|{
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_CAPACITY
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
name|byte
name|buffer
index|[]
decl_stmt|;
name|int
name|position
decl_stmt|;
comment|/**     * Creates a new WritableBuffer with default capacity.     */
specifier|public
name|AmqpWritableBuffer
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CAPACITY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new WritableBuffer with the given capacity.      */
specifier|public
name|AmqpWritableBuffer
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|capacity
index|]
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
specifier|public
name|int
name|getArrayLength
parameter_list|()
block|{
return|return
name|position
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|int
name|newPosition
init|=
name|position
operator|+
literal|1
decl_stmt|;
name|ensureCapacity
argument_list|(
name|newPosition
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
index|]
operator|=
name|b
expr_stmt|;
name|position
operator|=
name|newPosition
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putShort
parameter_list|(
name|short
name|value
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|position
operator|+
literal|2
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putInt
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|position
operator|+
literal|4
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|position
operator|+
literal|8
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|56
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|48
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|40
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|32
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putFloat
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|putInt
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putDouble
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|putLong
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|newPosition
init|=
name|position
operator|+
name|length
decl_stmt|;
name|ensureCapacity
argument_list|(
name|newPosition
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|offset
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|position
operator|=
name|newPosition
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRemaining
parameter_list|()
block|{
return|return
name|position
operator|<
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|remaining
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
operator|-
name|position
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|position
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|position
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|ByteBuffer
name|payload
parameter_list|)
block|{
name|int
name|newPosition
init|=
name|position
operator|+
name|payload
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|ensureCapacity
argument_list|(
name|newPosition
argument_list|)
expr_stmt|;
while|while
condition|(
name|payload
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
name|payload
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|position
operator|=
name|newPosition
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|limit
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
comment|/**      * Ensures the the buffer has at least the minimumCapacity specified.      *      * @param minimumCapacity      *      the minimum capacity needed to meet the next write operation.      */
specifier|private
name|void
name|ensureCapacity
parameter_list|(
name|int
name|minimumCapacity
parameter_list|)
block|{
if|if
condition|(
name|minimumCapacity
operator|>
name|buffer
operator|.
name|length
condition|)
block|{
name|byte
name|newBuffer
index|[]
init|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
name|buffer
operator|.
name|length
operator|<<
literal|1
argument_list|,
name|minimumCapacity
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|newBuffer
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

