begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
operator|.
name|BTreeIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Page
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|IntegerMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|LockFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|StringMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_class
specifier|public
class|class
name|JobSchedulerStore
extends|extends
name|ServiceSupport
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobSchedulerStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DATABASE_LOCKED_WAIT_DELAY
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CLOSED_STATE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OPEN_STATE
init|=
literal|2
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
name|PageFile
name|pageFile
decl_stmt|;
specifier|private
name|Journal
name|journal
decl_stmt|;
specifier|private
name|LockFile
name|lockFile
decl_stmt|;
specifier|private
name|boolean
name|failIfDatabaseIsLocked
decl_stmt|;
specifier|private
name|int
name|journalMaxFileLength
init|=
name|Journal
operator|.
name|DEFAULT_MAX_FILE_LENGTH
decl_stmt|;
specifier|private
name|int
name|journalMaxWriteBatchSize
init|=
name|Journal
operator|.
name|DEFAULT_MAX_WRITE_BATCH_SIZE
decl_stmt|;
specifier|private
name|boolean
name|enableIndexWriteAsync
init|=
literal|false
decl_stmt|;
comment|// private int indexWriteBatchSize = PageFile.DEFAULT_WRITE_BATCH_SIZE;
name|MetaData
name|metaData
init|=
operator|new
name|MetaData
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|MetaDataMarshaller
name|metaDataMarshaller
init|=
operator|new
name|MetaDataMarshaller
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|schedulers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
class|class
name|MetaData
block|{
specifier|protected
name|MetaData
parameter_list|(
name|JobSchedulerStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|private
specifier|final
name|JobSchedulerStore
name|store
decl_stmt|;
name|Page
argument_list|<
name|MetaData
argument_list|>
name|page
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|journalRC
decl_stmt|;
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|storedSchedulers
decl_stmt|;
name|void
name|createIndexes
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storedSchedulers
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|load
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storedSchedulers
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|JobSchedulerMarshaller
argument_list|(
name|this
operator|.
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setKeyMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setValueMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
name|void
name|loadScheduler
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|schedulers
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|storedSchedulers
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|schedulers
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|read
parameter_list|(
name|DataInput
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storedSchedulers
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|is
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|JobSchedulerMarshaller
argument_list|(
name|this
operator|.
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|is
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setKeyMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setValueMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|storedSchedulers
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|journalRC
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|MetaDataMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|MetaData
argument_list|>
block|{
specifier|private
specifier|final
name|JobSchedulerStore
name|store
decl_stmt|;
name|MetaDataMarshaller
parameter_list|(
name|JobSchedulerStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|MetaData
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|MetaData
name|rc
init|=
operator|new
name|MetaData
argument_list|(
name|this
operator|.
name|store
argument_list|)
decl_stmt|;
name|rc
operator|.
name|read
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|MetaData
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|ValueMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
block|{
specifier|public
name|List
argument_list|<
name|JobLocation
argument_list|>
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|JobLocation
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|JobLocation
name|jobLocation
init|=
operator|new
name|JobLocation
argument_list|()
decl_stmt|;
name|jobLocation
operator|.
name|readExternal
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|jobLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|List
argument_list|<
name|JobLocation
argument_list|>
name|value
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JobLocation
name|jobLocation
range|:
name|value
control|)
block|{
name|jobLocation
operator|.
name|writeExternal
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|JobSchedulerMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|JobSchedulerImpl
argument_list|>
block|{
specifier|private
specifier|final
name|JobSchedulerStore
name|store
decl_stmt|;
name|JobSchedulerMarshaller
parameter_list|(
name|JobSchedulerStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|JobSchedulerImpl
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|JobSchedulerImpl
name|result
init|=
operator|new
name|JobSchedulerImpl
argument_list|(
name|this
operator|.
name|store
argument_list|)
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|JobSchedulerImpl
name|js
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|js
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
try|try
block|{
return|return
name|journal
operator|.
name|getDiskSize
argument_list|()
operator|+
name|pageFile
operator|.
name|getDiskSize
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|JobScheduler
name|getJobScheduler
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|JobSchedulerImpl
name|result
init|=
name|this
operator|.
name|schedulers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
specifier|final
name|JobSchedulerImpl
name|js
init|=
operator|new
name|JobSchedulerImpl
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|js
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|js
operator|.
name|createIndexes
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|js
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|storedSchedulers
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|name
argument_list|,
name|js
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|result
operator|=
name|js
expr_stmt|;
name|this
operator|.
name|schedulers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|js
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStarted
argument_list|()
condition|)
block|{
name|result
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|pageFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|removeJobScheduler
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
specifier|final
name|JobSchedulerImpl
name|js
init|=
name|this
operator|.
name|schedulers
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|result
operator|=
name|js
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|js
operator|.
name|stop
argument_list|()
expr_stmt|;
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|metaData
operator|.
name|storedSchedulers
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|js
operator|.
name|destroy
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|directory
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|directory
operator|=
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
operator|+
name|File
operator|.
name|pathSeparator
operator|+
literal|"delayedDB"
argument_list|)
expr_stmt|;
block|}
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|this
operator|.
name|directory
argument_list|)
expr_stmt|;
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|journal
operator|=
operator|new
name|Journal
argument_list|()
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|setMaxFileLength
argument_list|(
name|getJournalMaxFileLength
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|setWriteBatchSize
argument_list|(
name|getJournalMaxWriteBatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|pageFile
operator|=
operator|new
name|PageFile
argument_list|(
name|directory
argument_list|,
literal|"scheduleDB"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageFile
operator|.
name|load
argument_list|()
expr_stmt|;
name|this
operator|.
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Page
argument_list|<
name|MetaData
argument_list|>
name|page
init|=
name|tx
operator|.
name|allocate
argument_list|()
decl_stmt|;
assert|assert
name|page
operator|.
name|getPageId
argument_list|()
operator|==
literal|0
assert|;
name|page
operator|.
name|set
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|page
operator|=
name|page
expr_stmt|;
name|metaData
operator|.
name|createIndexes
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metaData
operator|.
name|page
argument_list|,
name|metaDataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Page
argument_list|<
name|MetaData
argument_list|>
name|page
init|=
name|tx
operator|.
name|load
argument_list|(
literal|0
argument_list|,
name|metaDataMarshaller
argument_list|)
decl_stmt|;
name|metaData
operator|=
name|page
operator|.
name|get
argument_list|()
expr_stmt|;
name|metaData
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
name|metaData
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|loadScheduler
argument_list|(
name|tx
argument_list|,
name|schedulers
argument_list|)
expr_stmt|;
for|for
control|(
name|JobSchedulerImpl
name|js
range|:
name|schedulers
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|js
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|JobSchedulerStore
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load "
operator|+
name|js
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|pageFile
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|" started"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|JobSchedulerImpl
name|js
range|:
name|this
operator|.
name|schedulers
operator|.
name|values
argument_list|()
control|)
block|{
name|js
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|pageFile
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|pageFile
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|journal
operator|!=
literal|null
condition|)
block|{
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|lockFile
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lockFile
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|lockFile
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|+
literal|" stopped"
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|incrementJournalCount
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|logId
init|=
name|location
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
name|Integer
name|val
init|=
name|this
operator|.
name|metaData
operator|.
name|journalRC
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|logId
argument_list|)
decl_stmt|;
name|int
name|refCount
init|=
name|val
operator|!=
literal|null
condition|?
name|val
operator|.
name|intValue
argument_list|()
operator|+
literal|1
else|:
literal|1
decl_stmt|;
name|this
operator|.
name|metaData
operator|.
name|journalRC
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|logId
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|decrementJournalCount
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|logId
init|=
name|location
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
name|int
name|refCount
init|=
name|this
operator|.
name|metaData
operator|.
name|journalRC
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|logId
argument_list|)
decl_stmt|;
name|refCount
operator|--
expr_stmt|;
if|if
condition|(
name|refCount
operator|<=
literal|0
condition|)
block|{
name|this
operator|.
name|metaData
operator|.
name|journalRC
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|logId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|logId
argument_list|)
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|removeDataFiles
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|metaData
operator|.
name|journalRC
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|logId
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
name|ByteSequence
name|getPayload
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
name|ByteSequence
name|result
init|=
literal|null
decl_stmt|;
name|result
operator|=
name|this
operator|.
name|journal
operator|.
name|read
argument_list|(
name|location
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|synchronized
name|Location
name|write
parameter_list|(
name|ByteSequence
name|payload
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
return|return
name|this
operator|.
name|journal
operator|.
name|write
argument_list|(
name|payload
argument_list|,
name|sync
argument_list|)
return|;
block|}
specifier|private
name|void
name|lock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lockFile
operator|==
literal|null
condition|)
block|{
name|File
name|lockFileName
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"lock"
argument_list|)
decl_stmt|;
name|lockFile
operator|=
operator|new
name|LockFile
argument_list|(
name|lockFileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|failIfDatabaseIsLocked
condition|)
block|{
name|lockFile
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|lockFile
operator|.
name|lock
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Database "
operator|+
name|lockFileName
operator|+
literal|" is locked... waiting "
operator|+
operator|(
name|DATABASE_LOCKED_WAIT_DELAY
operator|/
literal|1000
operator|)
operator|+
literal|" seconds for the database to be unlocked. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DATABASE_LOCKED_WAIT_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{                         }
block|}
block|}
block|}
block|}
block|}
name|PageFile
name|getPageFile
parameter_list|()
block|{
name|this
operator|.
name|pageFile
operator|.
name|isLoaded
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|pageFile
return|;
block|}
specifier|public
name|boolean
name|isFailIfDatabaseIsLocked
parameter_list|()
block|{
return|return
name|failIfDatabaseIsLocked
return|;
block|}
specifier|public
name|void
name|setFailIfDatabaseIsLocked
parameter_list|(
name|boolean
name|failIfDatabaseIsLocked
parameter_list|)
block|{
name|this
operator|.
name|failIfDatabaseIsLocked
operator|=
name|failIfDatabaseIsLocked
expr_stmt|;
block|}
specifier|public
name|int
name|getJournalMaxFileLength
parameter_list|()
block|{
return|return
name|journalMaxFileLength
return|;
block|}
specifier|public
name|void
name|setJournalMaxFileLength
parameter_list|(
name|int
name|journalMaxFileLength
parameter_list|)
block|{
name|this
operator|.
name|journalMaxFileLength
operator|=
name|journalMaxFileLength
expr_stmt|;
block|}
specifier|public
name|int
name|getJournalMaxWriteBatchSize
parameter_list|()
block|{
return|return
name|journalMaxWriteBatchSize
return|;
block|}
specifier|public
name|void
name|setJournalMaxWriteBatchSize
parameter_list|(
name|int
name|journalMaxWriteBatchSize
parameter_list|)
block|{
name|this
operator|.
name|journalMaxWriteBatchSize
operator|=
name|journalMaxWriteBatchSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnableIndexWriteAsync
parameter_list|()
block|{
return|return
name|enableIndexWriteAsync
return|;
block|}
specifier|public
name|void
name|setEnableIndexWriteAsync
parameter_list|(
name|boolean
name|enableIndexWriteAsync
parameter_list|)
block|{
name|this
operator|.
name|enableIndexWriteAsync
operator|=
name|enableIndexWriteAsync
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JobSchedulerStore:"
operator|+
name|this
operator|.
name|directory
return|;
block|}
block|}
end_class

end_unit

