begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|///Copyright 2003-2005 Arthur van Hoff, Rick Blair
end_comment

begin_comment
comment|//Licensed under Apache License version 2.0
end_comment

begin_comment
comment|//Original license LGPL
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Parse an incoming DNS message into its components.  *  * @version %I%, %G%  * @author	Arthur van Hoff, Werner Randelshofer, Pierre Frisch  */
end_comment

begin_class
specifier|final
class|class
name|DNSIncoming
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DNSIncoming
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Implementation note: This vector should be immutable.
comment|// If a client of DNSIncoming changes the contents of this vector,
comment|// we get undesired results. To fix this, we have to migrate to
comment|// the Collections API of Java 1.2. i.e we replace Vector by List.
comment|// final static Vector EMPTY = new Vector();
specifier|private
name|DatagramPacket
name|packet
decl_stmt|;
specifier|private
name|int
name|off
decl_stmt|;
specifier|private
name|int
name|len
decl_stmt|;
specifier|private
name|byte
name|data
index|[]
decl_stmt|;
name|int
name|id
decl_stmt|;
specifier|private
name|int
name|flags
decl_stmt|;
specifier|private
name|int
name|numQuestions
decl_stmt|;
name|int
name|numAnswers
decl_stmt|;
specifier|private
name|int
name|numAuthorities
decl_stmt|;
specifier|private
name|int
name|numAdditionals
decl_stmt|;
specifier|private
name|long
name|receivedTime
decl_stmt|;
name|List
name|questions
decl_stmt|;
name|List
name|answers
decl_stmt|;
comment|/**      * Parse a message from a datagram packet.      */
name|DNSIncoming
parameter_list|(
name|DatagramPacket
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|packet
operator|=
name|packet
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|packet
operator|.
name|getData
argument_list|()
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|packet
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|this
operator|.
name|off
operator|=
name|packet
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|this
operator|.
name|questions
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
name|this
operator|.
name|answers
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
name|this
operator|.
name|receivedTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
block|{
name|id
operator|=
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|flags
operator|=
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|numQuestions
operator|=
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|numAnswers
operator|=
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|numAuthorities
operator|=
name|readUnsignedShort
argument_list|()
expr_stmt|;
name|numAdditionals
operator|=
name|readUnsignedShort
argument_list|()
expr_stmt|;
comment|// parse questions
if|if
condition|(
name|numQuestions
operator|>
literal|0
condition|)
block|{
name|questions
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|(
name|numQuestions
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQuestions
condition|;
name|i
operator|++
control|)
block|{
name|DNSQuestion
name|question
init|=
operator|new
name|DNSQuestion
argument_list|(
name|readName
argument_list|()
argument_list|,
name|readUnsignedShort
argument_list|()
argument_list|,
name|readUnsignedShort
argument_list|()
argument_list|)
decl_stmt|;
name|questions
operator|.
name|add
argument_list|(
name|question
argument_list|)
expr_stmt|;
block|}
block|}
comment|// parse answers
name|int
name|n
init|=
name|numAnswers
operator|+
name|numAuthorities
operator|+
name|numAdditionals
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|answers
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|String
name|domain
init|=
name|readName
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|clazz
init|=
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|ttl
init|=
name|readInt
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|readUnsignedShort
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|off
operator|+
name|len
decl_stmt|;
name|DNSRecord
name|rec
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DNSConstants
operator|.
name|TYPE_A
case|:
comment|// IPv4
case|case
name|DNSConstants
operator|.
name|TYPE_AAAA
case|:
comment|// IPv6 FIXME [PJYF Oct 14 2004] This has not been tested
name|rec
operator|=
operator|new
name|DNSRecord
operator|.
name|Address
argument_list|(
name|domain
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|,
name|readBytes
argument_list|(
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DNSConstants
operator|.
name|TYPE_CNAME
case|:
case|case
name|DNSConstants
operator|.
name|TYPE_PTR
case|:
name|rec
operator|=
operator|new
name|DNSRecord
operator|.
name|Pointer
argument_list|(
name|domain
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|,
name|readName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DNSConstants
operator|.
name|TYPE_TXT
case|:
name|rec
operator|=
operator|new
name|DNSRecord
operator|.
name|Text
argument_list|(
name|domain
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|,
name|readBytes
argument_list|(
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DNSConstants
operator|.
name|TYPE_SRV
case|:
name|rec
operator|=
operator|new
name|DNSRecord
operator|.
name|Service
argument_list|(
name|domain
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|,
name|readUnsignedShort
argument_list|()
argument_list|,
name|readUnsignedShort
argument_list|()
argument_list|,
name|readUnsignedShort
argument_list|()
argument_list|,
name|readName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DNSConstants
operator|.
name|TYPE_HINFO
case|:
comment|// Maybe we should do something with those
break|break;
default|default :
name|logger
operator|.
name|finer
argument_list|(
literal|"DNSIncoming() unknown type:"
operator|+
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|rec
operator|!=
literal|null
condition|)
block|{
comment|// Add a record, if we were able to create one.
name|answers
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Addjust the numbers for the skipped record
if|if
condition|(
name|answers
operator|.
name|size
argument_list|()
operator|<
name|numAnswers
condition|)
block|{
name|numAnswers
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|answers
operator|.
name|size
argument_list|()
operator|<
name|numAnswers
operator|+
name|numAuthorities
condition|)
block|{
name|numAuthorities
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|answers
operator|.
name|size
argument_list|()
operator|<
name|numAnswers
operator|+
name|numAuthorities
operator|+
name|numAdditionals
condition|)
block|{
name|numAdditionals
operator|--
expr_stmt|;
block|}
block|}
block|}
block|}
name|off
operator|=
name|end
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"DNSIncoming() dump "
operator|+
name|print
argument_list|(
literal|true
argument_list|)
operator|+
literal|"\n exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Check if the message is a query.      */
name|boolean
name|isQuery
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_QR_MASK
operator|)
operator|==
name|DNSConstants
operator|.
name|FLAGS_QR_QUERY
return|;
block|}
comment|/**      * Check if the message is truncated.      */
name|boolean
name|isTruncated
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_TC
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**      * Check if the message is a response.      */
name|boolean
name|isResponse
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_QR_MASK
operator|)
operator|==
name|DNSConstants
operator|.
name|FLAGS_QR_RESPONSE
return|;
block|}
specifier|private
name|int
name|get
parameter_list|(
name|int
name|off
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>=
name|len
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"parser error: offset="
operator|+
name|off
argument_list|)
throw|;
block|}
return|return
name|data
index|[
name|off
index|]
operator|&
literal|0xFF
return|;
block|}
specifier|private
name|int
name|readUnsignedShort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|get
argument_list|(
name|off
operator|++
argument_list|)
operator|<<
literal|8
operator|)
operator|+
name|get
argument_list|(
name|off
operator|++
argument_list|)
return|;
block|}
specifier|private
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|readUnsignedShort
argument_list|()
operator|<<
literal|16
operator|)
operator|+
name|readUnsignedShort
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|readBytes
parameter_list|(
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|off
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
specifier|private
name|void
name|readUTF
parameter_list|(
name|StringBuffer
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|end
init|=
name|off
operator|+
name|len
init|;
name|off
operator|<
name|end
condition|;
control|)
block|{
name|int
name|ch
init|=
name|get
argument_list|(
name|off
operator|++
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
operator|>>
literal|4
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
comment|// 0xxxxxxx
break|break;
case|case
literal|12
case|:
case|case
literal|13
case|:
comment|// 110x xxxx   10xx xxxx
name|ch
operator|=
operator|(
operator|(
name|ch
operator|&
literal|0x1F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|get
argument_list|(
name|off
operator|++
argument_list|)
operator|&
literal|0x3F
operator|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
comment|// 1110 xxxx  10xx xxxx  10xx xxxx
name|ch
operator|=
operator|(
operator|(
name|ch
operator|&
literal|0x0f
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|get
argument_list|(
name|off
operator|++
argument_list|)
operator|&
literal|0x3F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|get
argument_list|(
name|off
operator|++
argument_list|)
operator|&
literal|0x3F
operator|)
expr_stmt|;
break|break;
default|default:
comment|// 10xx xxxx,  1111 xxxx
name|ch
operator|=
operator|(
operator|(
name|ch
operator|&
literal|0x3F
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
name|get
argument_list|(
name|off
operator|++
argument_list|)
operator|&
literal|0x0f
operator|)
expr_stmt|;
break|break;
block|}
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|readName
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|off
init|=
name|this
operator|.
name|off
decl_stmt|;
name|int
name|next
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|first
init|=
name|off
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|len
init|=
name|get
argument_list|(
name|off
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|len
operator|&
literal|0xC0
condition|)
block|{
case|case
literal|0x00
case|:
comment|//buf.append("[" + off + "]");
name|readUTF
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|off
operator|+=
name|len
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0xC0
case|:
comment|//buf.append("<" + (off - 1) + ">");
if|if
condition|(
name|next
operator|<
literal|0
condition|)
block|{
name|next
operator|=
name|off
operator|+
literal|1
expr_stmt|;
block|}
name|off
operator|=
operator|(
operator|(
name|len
operator|&
literal|0x3F
operator|)
operator|<<
literal|8
operator|)
operator||
name|get
argument_list|(
name|off
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|off
operator|>=
name|first
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"bad domain name: possible circular name detected"
argument_list|)
throw|;
block|}
name|first
operator|=
name|off
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"bad domain name: '"
operator|+
name|buf
operator|+
literal|"' at "
operator|+
name|off
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|off
operator|=
operator|(
name|next
operator|>=
literal|0
operator|)
condition|?
name|next
else|:
name|off
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Debugging.      */
name|String
name|print
parameter_list|(
name|boolean
name|dump
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|questions
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    ques:"
operator|+
name|iterator
operator|.
name|next
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|answers
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|<
name|numAnswers
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    answ:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|<
name|numAnswers
operator|+
name|numAuthorities
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    auth:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"    addi:"
argument_list|)
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dump
condition|)
block|{
for|for
control|(
name|int
name|off
init|=
literal|0
init|,
name|len
init|=
name|packet
operator|.
name|getLength
argument_list|()
init|;
name|off
operator|<
name|len
condition|;
name|off
operator|+=
literal|32
control|)
block|{
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
literal|32
argument_list|,
name|len
operator|-
name|off
argument_list|)
decl_stmt|;
if|if
condition|(
name|off
operator|<
literal|10
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|off
operator|<
literal|100
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
name|data
index|[
name|off
operator|+
name|i
index|]
operator|&
literal|0xF0
operator|)
operator|>>
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
name|data
index|[
name|off
operator|+
name|i
index|]
operator|&
literal|0x0F
operator|)
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|int
name|ch
init|=
name|data
index|[
name|off
operator|+
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ch
operator|>
literal|' '
operator|)
operator|&&
operator|(
name|ch
operator|<
literal|127
operator|)
operator|)
condition|?
operator|(
name|char
operator|)
name|ch
else|:
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|// limit message size
if|if
condition|(
name|off
operator|+
literal|32
operator|>=
literal|256
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"....\n"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isQuery
argument_list|()
condition|?
literal|"dns[query,"
else|:
literal|"dns[response,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|packet
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|packet
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|packet
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|",len="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|packet
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|",id=0x"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",flags=0x"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_QR_RESPONSE
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|":r"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_AA
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|":aa"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_TC
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|":tc"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numQuestions
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",questions="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numQuestions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numAnswers
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",answers="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numAnswers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numAuthorities
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",authorities="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numAuthorities
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numAdditionals
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",additionals="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numAdditionals
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Appends answers to this Incoming.      *      * @throws IllegalArgumentException If not a query or if Truncated.      */
name|void
name|append
parameter_list|(
name|DNSIncoming
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isQuery
argument_list|()
operator|&&
name|this
operator|.
name|isTruncated
argument_list|()
operator|&&
name|that
operator|.
name|isQuery
argument_list|()
condition|)
block|{
name|this
operator|.
name|questions
operator|.
name|addAll
argument_list|(
name|that
operator|.
name|questions
argument_list|)
expr_stmt|;
name|this
operator|.
name|numQuestions
operator|+=
name|that
operator|.
name|numQuestions
expr_stmt|;
if|if
condition|(
name|Collections
operator|.
name|EMPTY_LIST
operator|.
name|equals
argument_list|(
name|answers
argument_list|)
condition|)
block|{
name|answers
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|that
operator|.
name|numAnswers
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|answers
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|numAnswers
argument_list|,
name|that
operator|.
name|answers
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|that
operator|.
name|numAnswers
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numAnswers
operator|+=
name|that
operator|.
name|numAnswers
expr_stmt|;
block|}
if|if
condition|(
name|that
operator|.
name|numAuthorities
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|answers
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|numAnswers
operator|+
name|this
operator|.
name|numAuthorities
argument_list|,
name|that
operator|.
name|answers
operator|.
name|subList
argument_list|(
name|that
operator|.
name|numAnswers
argument_list|,
name|that
operator|.
name|numAnswers
operator|+
name|that
operator|.
name|numAuthorities
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numAuthorities
operator|+=
name|that
operator|.
name|numAuthorities
expr_stmt|;
block|}
if|if
condition|(
name|that
operator|.
name|numAdditionals
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|answers
operator|.
name|addAll
argument_list|(
name|that
operator|.
name|answers
operator|.
name|subList
argument_list|(
name|that
operator|.
name|numAnswers
operator|+
name|that
operator|.
name|numAuthorities
argument_list|,
name|that
operator|.
name|numAnswers
operator|+
name|that
operator|.
name|numAuthorities
operator|+
name|that
operator|.
name|numAdditionals
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numAdditionals
operator|+=
name|that
operator|.
name|numAdditionals
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
name|int
name|elapseSinceArrival
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|receivedTime
argument_list|)
return|;
block|}
block|}
end_class

end_unit

