begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NoSpaceIOTest
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NoSpaceIOTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// handy way to validate some out of space related errors with a usb key
comment|// allow it to run out of space, delete toDelete and see it recover
annotation|@
name|Ignore
argument_list|(
literal|"needs small volume, like usb key"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testRunOutOfSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
literal|"/Volumes/NO NAME/"
argument_list|)
decl_stmt|;
name|File
name|useUpSpace
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"bigFile"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|useUpSpace
operator|.
name|exists
argument_list|()
condition|)
block|{
name|RandomAccessFile
name|filler
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|useUpSpace
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|filler
operator|.
name|setLength
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|1412
argument_list|)
expr_stmt|;
comment|// use ~1.5G of 2G (usb) volume
name|File
name|toDelete
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"toDelete"
argument_list|)
decl_stmt|;
name|filler
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|toDelete
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|filler
operator|.
name|setLength
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|32
operator|*
literal|10
argument_list|)
expr_stmt|;
comment|// 10 data files
block|}
name|broker
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|AtomicLong
name|consumed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|consume
argument_list|(
name|consumed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumed: "
operator|+
name|consumed
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|checkpoint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AtomicLong
name|sent
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|produce
argument_list|(
name|sent
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"got ex, sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|consume
parameter_list|(
name|AtomicLong
name|consumed
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|c
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"t"
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|consumed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|produce
parameter_list|(
name|AtomicLong
name|sent
parameter_list|,
name|long
name|toSend
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|c
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"t"
argument_list|)
argument_list|)
decl_stmt|;
name|TextMessage
name|m
init|=
name|s
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|char
index|[
literal|1024
operator|*
literal|1024
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toSend
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|sent
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

