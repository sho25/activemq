begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protocolbuffer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|OpenWirePerformanceTest
extends|extends
name|TestSupport
block|{
specifier|protected
name|String
name|fileName
init|=
literal|"target/openwire.openwire"
decl_stmt|;
specifier|protected
name|OpenWireFormat
name|openWireFormat
init|=
name|createOpenWireFormat
argument_list|()
decl_stmt|;
specifier|protected
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"FOO.BAR"
argument_list|)
decl_stmt|;
specifier|protected
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
operator|new
name|SessionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|StopWatch
name|watch
init|=
name|createStopWatch
argument_list|(
literal|"writer"
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|watch
operator|.
name|start
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setCorrelationId
argument_list|(
literal|"ABCD"
argument_list|)
expr_stmt|;
comment|//message.setType("type:" + i);
if|if
condition|(
name|useProducerId
condition|)
block|{
name|message
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|producerId
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing message: "
operator|+
name|i
operator|+
literal|" = "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
comment|/*             byte[] bytes = message.toByteArray();             int size = bytes.length;             out.write(size);             //System.out.println("writing bytes: " + size);             out.write(bytes); */
name|openWireFormat
operator|.
name|marshal
argument_list|(
name|message
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|watch
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now lets try read them!
name|StopWatch
name|watch2
init|=
name|createStopWatch
argument_list|(
literal|"reader"
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|DataInput
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|watch2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Object
name|message
init|=
name|openWireFormat
operator|.
name|unmarshal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
comment|/*             int size = in.read();             byte[] data = new byte[size];             in.read(data); */
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reading message: "
operator|+
name|i
operator|+
literal|" = "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|watch2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|OpenWireFormat
name|createOpenWireFormat
parameter_list|()
block|{
name|OpenWireFormat
name|wf
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|wf
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wf
operator|.
name|setStackTraceEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|wf
operator|.
name|setVersion
argument_list|(
name|OpenWireFormat
operator|.
name|DEFAULT_VERSION
argument_list|)
expr_stmt|;
return|return
name|wf
return|;
block|}
block|}
end_class

end_unit

