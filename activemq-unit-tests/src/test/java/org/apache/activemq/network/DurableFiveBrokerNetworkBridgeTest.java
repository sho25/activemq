begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test to make sure durable subscriptions propagate properly throughout network bridges  * and that conduit subscriptions work properly  */
end_comment

begin_class
specifier|public
class|class
name|DurableFiveBrokerNetworkBridgeTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
name|boolean
name|duplex
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NetworkConnector
name|bridgeBrokers
parameter_list|(
name|String
name|localBrokerName
parameter_list|,
name|String
name|remoteBrokerName
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|connector
init|=
name|super
operator|.
name|bridgeBrokers
argument_list|(
name|localBrokerName
argument_list|,
name|remoteBrokerName
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.FOO?forceDurable=true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
name|duplex
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setConduitSubscriptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setSyncDurableSubs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setNetworkTTL
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
specifier|public
name|void
name|testDurablePropagationDuplex
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|true
expr_stmt|;
name|testDurablePropagation
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationOneWay
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|false
expr_stmt|;
name|testDurablePropagation
argument_list|()
expr_stmt|;
block|}
comment|/**      * BrokerA -> BrokerB -> BrokerC      */
specifier|protected
name|void
name|testDurablePropagation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
block|}
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|ActiveMQTopic
name|dest
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|Session
name|ses
init|=
name|createSession
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientA
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subB"
argument_list|)
decl_stmt|;
comment|// let consumers propagate around the network
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerC"
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientA
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientB
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|//bring online a consumer on the other side
name|Session
name|ses2
init|=
name|createSession
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientC
init|=
name|ses2
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subC"
argument_list|)
decl_stmt|;
comment|//there will be 2 network durables, 1 for each direction of the bridge
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientA
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientB
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientC
operator|.
name|close
argument_list|()
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subA"
argument_list|)
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subB"
argument_list|)
expr_stmt|;
name|ses2
operator|.
name|unsubscribe
argument_list|(
literal|"subC"
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationConsumerAllBrokersDuplex
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|true
expr_stmt|;
name|testDurablePropagationConsumerAllBrokers
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationConsumerAllBrokersOneWay
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|false
expr_stmt|;
name|testDurablePropagationConsumerAllBrokers
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|testDurablePropagationConsumerAllBrokers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
block|}
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|ActiveMQTopic
name|dest
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|Session
name|ses
init|=
name|createSession
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientA
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subA"
argument_list|)
decl_stmt|;
comment|// let consumers propagate around the network
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//bring online a consumer on the other side
name|Session
name|ses2
init|=
name|createSession
argument_list|(
literal|"BrokerB"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB
init|=
name|ses2
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subB"
argument_list|)
decl_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Session
name|ses3
init|=
name|createSession
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientC
init|=
name|ses3
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subC"
argument_list|)
decl_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientA
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientB
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientC
operator|.
name|close
argument_list|()
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subA"
argument_list|)
expr_stmt|;
name|ses2
operator|.
name|unsubscribe
argument_list|(
literal|"subB"
argument_list|)
expr_stmt|;
name|ses3
operator|.
name|unsubscribe
argument_list|(
literal|"subC"
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagation5BrokerDuplex
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|true
expr_stmt|;
name|testDurablePropagation5Broker
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagation5BrokerOneWay
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|false
expr_stmt|;
name|testDurablePropagation5Broker
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|testDurablePropagation5Broker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerD"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerD"
argument_list|,
literal|"BrokerE"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerD"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerE"
argument_list|,
literal|"BrokerD"
argument_list|)
expr_stmt|;
block|}
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|ActiveMQTopic
name|dest
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|Session
name|ses
init|=
name|createSession
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientA
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subA"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// let consumers propagate around the network
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerE"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerE"
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientA
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|//bring online a consumer on the other side
name|Session
name|ses2
init|=
name|createSession
argument_list|(
literal|"BrokerE"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientE
init|=
name|ses2
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subE"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//there will be 2 network durables, 1 for each direction of the bridge
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerE"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientA
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientE
operator|.
name|close
argument_list|()
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subA"
argument_list|)
expr_stmt|;
name|ses2
operator|.
name|unsubscribe
argument_list|(
literal|"subE"
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerE"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationSpokeDuplex
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|true
expr_stmt|;
name|testDurablePropagationSpoke
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationSpokeOneWay
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|false
expr_stmt|;
name|testDurablePropagationSpoke
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|testDurablePropagationSpoke
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerD"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerD"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
block|}
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|ActiveMQTopic
name|dest
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|Session
name|ses
init|=
name|createSession
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
name|Session
name|ses2
init|=
name|createSession
argument_list|(
literal|"BrokerB"
argument_list|)
decl_stmt|;
name|Session
name|ses3
init|=
name|createSession
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|Session
name|ses4
init|=
name|createSession
argument_list|(
literal|"BrokerD"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientA
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientAB
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subAB"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// let consumers propagate around the network
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MessageConsumer
name|clientD
init|=
name|ses4
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subD"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientD
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerC"
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientD
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|MessageConsumer
name|clientB
init|=
name|ses2
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subB"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientC
init|=
name|ses3
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subC"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientA
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientAB
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientB
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientC
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientD
operator|.
name|close
argument_list|()
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subA"
argument_list|)
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subAB"
argument_list|)
expr_stmt|;
name|ses2
operator|.
name|unsubscribe
argument_list|(
literal|"subB"
argument_list|)
expr_stmt|;
name|ses3
operator|.
name|unsubscribe
argument_list|(
literal|"subC"
argument_list|)
expr_stmt|;
name|ses4
operator|.
name|unsubscribe
argument_list|(
literal|"subD"
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testForceDurablePropagationDuplex
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|true
expr_stmt|;
name|testForceDurablePropagation
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testForceDurablePropagationOneWay
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|false
expr_stmt|;
name|testForceDurablePropagation
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|testForceDurablePropagation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
block|}
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|ActiveMQTopic
name|dest
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|Session
name|ses
init|=
name|createSession
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientA
init|=
name|ses
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// let consumers propagate around the network
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerC"
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientA
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|Session
name|ses2
init|=
name|createSession
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientC
init|=
name|ses2
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientA
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientC
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationSyncDuplex
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|true
expr_stmt|;
name|testDurablePropagationSync
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationSyncOneWay
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|false
expr_stmt|;
name|testDurablePropagationSync
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|testDurablePropagationSync
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|NetworkConnector
name|nc1
init|=
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|nc2
init|=
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|nc3
init|=
literal|null
decl_stmt|;
name|NetworkConnector
name|nc4
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|nc3
operator|=
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|nc4
operator|=
name|bridgeBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
block|}
name|startAllBrokers
argument_list|()
expr_stmt|;
name|nc1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nc2
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|nc3
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nc4
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Setup destination
name|ActiveMQTopic
name|dest
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|Session
name|ses
init|=
name|createSession
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
name|Session
name|ses2
init|=
name|createSession
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientA
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subB"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientC
init|=
name|ses2
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subC"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nc1
operator|.
name|start
argument_list|()
expr_stmt|;
name|nc2
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|duplex
condition|)
block|{
name|nc3
operator|.
name|start
argument_list|()
expr_stmt|;
name|nc4
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|//there will be 2 network durables, 1 for each direction of the bridge
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientA
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientB
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientC
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurablePropagationMultipleBridgesDifferentDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|duplex
operator|=
literal|true
expr_stmt|;
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
comment|//Duplicate the bridges with different included destinations - valid use case
name|NetworkConnector
name|nc3
init|=
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|nc4
init|=
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|nc3
operator|.
name|setName
argument_list|(
literal|"nc3"
argument_list|)
expr_stmt|;
name|nc4
operator|.
name|setName
argument_list|(
literal|"nc4"
argument_list|)
expr_stmt|;
name|nc3
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.FOO2?forceDurable=true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nc4
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.FOO2?forceDurable=true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|ActiveMQTopic
name|dest
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|dest2
init|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|(
literal|"TEST.FOO2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|Session
name|ses
init|=
name|createSession
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
name|Session
name|ses2
init|=
name|createSession
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientA
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subA"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientAa
init|=
name|ses
operator|.
name|createDurableSubscriber
argument_list|(
name|dest2
argument_list|,
literal|"subAa"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientC
init|=
name|ses2
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"subC"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientCc
init|=
name|ses2
operator|.
name|createDurableSubscriber
argument_list|(
name|dest2
argument_list|,
literal|"subCc"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//make sure network durables are online
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientA
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientC
operator|.
name|close
argument_list|()
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subA"
argument_list|)
expr_stmt|;
name|ses2
operator|.
name|unsubscribe
argument_list|(
literal|"subC"
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clientAa
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientCc
operator|.
name|close
argument_list|()
expr_stmt|;
name|ses
operator|.
name|unsubscribe
argument_list|(
literal|"subAa"
argument_list|)
expr_stmt|;
name|ses2
operator|.
name|unsubscribe
argument_list|(
literal|"subCc"
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|dest2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertNCDurableSubsCount
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|count
operator|==
name|getNCDurableSubs
argument_list|(
name|brokerService
argument_list|,
name|dest
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10000
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|DurableTopicSubscription
argument_list|>
name|getNCDurableSubs
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQTopic
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DurableTopicSubscription
argument_list|>
name|subs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Destination
name|d
init|=
name|brokerService
operator|.
name|getDestination
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|destination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|d
operator|instanceof
name|DestinationFilter
condition|)
block|{
name|destination
operator|=
operator|(
operator|(
name|DestinationFilter
operator|)
name|d
operator|)
operator|.
name|getAdaptor
argument_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
operator|)
name|d
expr_stmt|;
block|}
for|for
control|(
name|SubscriptionKey
name|key
range|:
name|destination
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|getSubscriptionName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|DemandForwardingBridge
operator|.
name|DURABLE_SUB_PREFIX
argument_list|)
condition|)
block|{
name|DurableTopicSubscription
name|sub
init|=
name|destination
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|options
init|=
operator|new
name|String
argument_list|(
literal|"?persistent=false&useJmx=false"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/BrokerB"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61618)/BrokerC"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61619)/BrokerD"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61620)/BrokerE"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|broker
operator|.
name|setBrokerId
argument_list|(
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Session
name|createSession
parameter_list|(
name|String
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|con
init|=
name|createConnection
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|DurableFiveBrokerNetworkBridgeTest
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

