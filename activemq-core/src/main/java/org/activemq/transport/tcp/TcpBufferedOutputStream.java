begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>  *   * Copyright 2005 (C) Simula Labs Inc.  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * An optimized buffered outputstream for Tcp  *  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|TcpBufferedOutputStream
extends|extends
name|FilterOutputStream
block|{
specifier|private
specifier|final
specifier|static
name|int
name|BUFFER_SIZE
init|=
literal|8192
decl_stmt|;
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|/**      * Constructor      *      * @param out      */
specifier|public
name|TcpBufferedOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new buffered output stream to write data to the specified underlying output stream with the specified      * buffer size.      *      * @param out  the underlying output stream.      * @param size the buffer size.      * @throws IllegalArgumentException if size<= 0.      */
specifier|public
name|TcpBufferedOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Buffer size<= 0"
argument_list|)
throw|;
block|}
name|buffer
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
block|}
comment|/**      * write a byte on to the stream      *      * @param b - byte to write      * @throws IOException      */
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|availableBufferToWrite
argument_list|()
operator|<
literal|1
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
name|buffer
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
comment|/**      * write a byte array to the stream      *      * @param b   the byte buffer      * @param off the offset into the buffer      * @param len the length of data to write      * @throws IOException      */
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|availableBufferToWrite
argument_list|()
operator|<
name|len
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|length
operator|>=
name|len
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buffer
argument_list|,
name|count
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|count
operator|+=
name|len
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * flush the data to the output stream      * This doesn't call flush on the underlying outputstream, because      * Tcp is particularly efficent at doing this itself ....      *      * @throws IOException      */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>
literal|0
operator|&&
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**      * close this stream      *      * @throws IOException      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Checks that the stream has not been closed      *      * @throws IOException      */
specifier|protected
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Cannot write to the stream any more it has already been closed"
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return the amount free space in the buffer      */
specifier|private
name|int
name|availableBufferToWrite
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|length
operator|-
name|count
return|;
block|}
block|}
end_class

end_unit

