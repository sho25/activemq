begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|Stomp
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_class
specifier|public
class|class
name|StompTest
extends|extends
name|CombinationTestSupport
block|{
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|TransportConnector
name|connector
decl_stmt|;
specifier|private
name|Socket
name|stompSocket
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|inputBuffer
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|ActiveMQQueue
name|queue
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"stomp://localhost:0"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|URI
name|connectUri
init|=
name|connector
operator|.
name|getConnectUri
argument_list|()
decl_stmt|;
name|stompSocket
operator|=
operator|new
name|Socket
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|connectUri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|inputBuffer
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|stompSocket
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sendFrame
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|stompSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|receiveFrame
parameter_list|(
name|long
name|timeOut
parameter_list|)
throws|throws
name|Exception
block|{
name|stompSocket
operator|.
name|setSoTimeout
argument_list|(
operator|(
name|int
operator|)
name|timeOut
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|stompSocket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"socket closed."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting stomp frame to terminate with \0\n"
argument_list|,
name|c
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
name|byte
index|[]
name|ba
init|=
name|inputBuffer
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|inputBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|ba
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
else|else
block|{
name|inputBuffer
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|sendMessage
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
name|msg
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendMessage
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|connect_frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n"
operator|+
literal|"request-id: 1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|connect_frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"response-id:1"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that the timestamp is valid - should
comment|// be very close to the current time.
name|long
name|tnow
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|tmsg
init|=
name|message
operator|.
name|getJMSTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|tnow
operator|-
name|tmsg
argument_list|)
operator|<
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJMSXGroupIdCanBeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"JMSXGroupID: TEST\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TEST"
argument_list|,
operator|(
operator|(
name|ActiveMQTextMessage
operator|)
name|message
operator|)
operator|.
name|getGroupID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendMessageWithCustomHeadersAndSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|,
literal|"foo = 'abc'"
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"foo:abc\n"
operator|+
literal|"bar:123\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|"123"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendMessageWithStandardHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"correlation-id:c123\n"
operator|+
literal|"priority:3\n"
operator|+
literal|"type:t345\n"
operator|+
literal|"JMSXGroupID:abc\n"
operator|+
literal|"foo:abc\n"
operator|+
literal|"bar:123\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
literal|"c123"
argument_list|,
name|message
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getJMSType"
argument_list|,
literal|"t345"
argument_list|,
name|message
operator|.
name|getJMSType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getJMSPriority"
argument_list|,
literal|3
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|"123"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JMSXGroupID"
argument_list|,
literal|"abc"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"JMSXGroupID"
argument_list|)
argument_list|)
expr_stmt|;
name|ActiveMQTextMessage
name|amqMessage
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GroupID"
argument_list|,
literal|"abc"
argument_list|,
name|amqMessage
operator|.
name|getGroupID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithAutoAck
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithMessageSentWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"s"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"n"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|message
operator|.
name|setByteProperty
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|9
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDoubleProperty
argument_list|(
literal|"d"
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|message
operator|.
name|setFloatProperty
argument_list|(
literal|"f"
argument_list|,
operator|(
name|float
operator|)
literal|6.0
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"i"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|message
operator|.
name|setLongProperty
argument_list|(
literal|"l"
argument_list|,
literal|121
argument_list|)
expr_stmt|;
name|message
operator|.
name|setShortProperty
argument_list|(
literal|"s"
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"out: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMessagesAreInOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|ctr
init|=
literal|10
decl_stmt|;
name|String
index|[]
name|data
init|=
operator|new
name|String
index|[
name|ctr
index|]
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|getName
argument_list|()
operator|+
name|i
expr_stmt|;
name|sendMessage
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Message not in order"
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// sleep a while before publishing another set of messages
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|getName
argument_list|()
operator|+
literal|":second:"
operator|+
name|i
expr_stmt|;
name|sendMessage
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Message not in order"
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithAutoAckAndSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"selector: foo = 'zzz'\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"Ignored message"
argument_list|,
literal|"foo"
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"Real message"
argument_list|,
literal|"foo"
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have received the real message but got: "
operator|+
name|frame
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
literal|"Real message"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithClientAck
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:client\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// message should be received since message was not acknowledged
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnsubscribe
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|//send a message to our queue
name|sendMessage
argument_list|(
literal|"first message"
argument_list|)
expr_stmt|;
comment|//receive message from socket
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
comment|//remove suscription
name|frame
operator|=
literal|"UNSUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
comment|//send a message to our queue
name|sendMessage
argument_list|(
literal|"second message"
argument_list|)
expr_stmt|;
try|try
block|{
name|frame
operator|=
name|receiveFrame
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received frame: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No message should have been received since subscription was removed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{          }
block|}
specifier|public
name|void
name|testTransactionCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|receiveFrame
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"BEGIN\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"COMMIT\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have received a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransactionRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: brianm\n"
operator|+
literal|"passcode: wombats\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|receiveFrame
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"BEGIN\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n"
operator|+
literal|"first message"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|//rollback first message
name|frame
operator|=
literal|"ABORT\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"BEGIN\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n"
operator|+
literal|"second message"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"COMMIT\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// This test case is currently failing
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
comment|//only second msg should be received since first msg was rolled back
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second message"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForFrameToTakeEffect
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// bit of a dirty hack :)
comment|// another option would be to force some kind of receipt to be returned
comment|// from the frame
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

