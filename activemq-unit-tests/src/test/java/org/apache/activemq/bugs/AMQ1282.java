begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_comment
comment|/**  * An AMQ-1282 Test  */
end_comment

begin_class
specifier|public
class|class
name|AMQ1282
extends|extends
name|TestCase
block|{
specifier|private
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|MapMessage
name|message
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
expr_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|message
operator|=
name|session
operator|.
name|createMapMessage
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testUnmappedBooleanMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|Boolean
name|actual
init|=
name|message
operator|.
name|getBoolean
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedIntegerMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|Integer
name|actual
init|=
name|message
operator|.
name|getInt
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|expected
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedShortMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|Short
name|actual
init|=
name|message
operator|.
name|getShort
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|expected
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedLongMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|Long
name|actual
init|=
name|message
operator|.
name|getLong
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|expected
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedStringMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|String
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|String
name|actual
init|=
name|message
operator|.
name|getString
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|expected
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedCharMessage
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
name|message
operator|.
name|getChar
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown NullPointerException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|success
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedByteMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|Byte
name|actual
init|=
name|message
operator|.
name|getByte
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|expected
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedDoubleMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|Double
name|actual
init|=
name|message
operator|.
name|getDouble
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|expected
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUnmappedFloatMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Object
name|expected
decl_stmt|;
try|try
block|{
name|expected
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|expected
operator|=
name|ex
expr_stmt|;
block|}
try|try
block|{
name|Float
name|actual
init|=
name|message
operator|.
name|getFloat
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|expected
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aClass
operator|.
name|isInstance
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

