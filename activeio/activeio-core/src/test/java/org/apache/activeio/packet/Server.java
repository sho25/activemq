begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|AcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|SyncToAsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|stats
operator|.
name|CountStatisticImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|beanutils
operator|.
name|BeanUtils
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Implements a simple tcp echo server for use in benchmarking   * activeio channel implementations.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|Server
implements|implements
name|Runnable
implements|,
name|AcceptListener
block|{
specifier|private
name|URI
name|url
decl_stmt|;
specifier|private
name|CountDownLatch
name|shutdownCountDownLatch
decl_stmt|;
specifier|private
name|long
name|requestDelay
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|sampleInterval
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|activeConnectionsCounter
init|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"activeConnectionsCounter"
argument_list|,
literal|"The number of active connection attached to the server."
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|echoedBytesCounter
init|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"echoedBytesCounter"
argument_list|,
literal|"The number of bytes that have been echoed by the server."
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|HashMap
name|options
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|option
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|option
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|||
name|option
operator|.
name|length
argument_list|()
operator|<
literal|2
operator|||
name|i
operator|+
literal|1
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid usage."
argument_list|)
expr_stmt|;
return|return;
block|}
name|option
operator|=
name|option
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|BeanUtils
operator|.
name|populate
argument_list|(
name|server
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server starting with the following options: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" url="
operator|+
name|server
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" sampleInterval="
operator|+
name|server
operator|.
name|getSampleInterval
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" requestDelay="
operator|+
name|server
operator|.
name|getRequestDelay
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|printSampleData
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|runDuration
init|=
operator|(
name|now
operator|-
name|activeConnectionsCounter
operator|.
name|getStartTime
argument_list|()
operator|)
operator|/
literal|1000f
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Active connections: "
operator|+
name|activeConnectionsCounter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Echoed bytes: "
operator|+
operator|(
name|echoedBytesCounter
operator|.
name|getCount
argument_list|()
operator|/
literal|1024f
operator|)
operator|+
literal|" kb"
argument_list|)
expr_stmt|;
name|echoedBytesCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|activeConnectionsCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|echoedBytesCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|shutdownCountDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChannelFactory
name|factory
init|=
operator|new
name|ChannelFactory
argument_list|()
decl_stmt|;
name|AsyncChannelServer
name|server
init|=
name|factory
operator|.
name|bindAsyncChannel
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server accepting connections on: "
operator|+
name|server
operator|.
name|getConnectURI
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAcceptListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|shutdownCountDownLatch
operator|.
name|await
argument_list|(
name|sampleInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|printSampleData
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Stopping server."
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|this
operator|.
name|url
operator|=
operator|new
name|URI
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
class|class
name|ServerConnectionHandler
implements|implements
name|AsyncChannelListener
block|{
specifier|private
specifier|final
name|AsyncChannel
name|asyncChannel
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|public
name|ServerConnectionHandler
parameter_list|(
name|AsyncChannel
name|asyncChannel
parameter_list|)
block|{
name|this
operator|.
name|asyncChannel
operator|=
name|asyncChannel
expr_stmt|;
name|activeConnectionsCounter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
if|if
condition|(
name|packet
operator|==
name|EOSPacket
operator|.
name|EOS_PACKET
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Peer disconnected."
argument_list|)
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
name|requestDelay
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|requestDelay
argument_list|)
expr_stmt|;
block|}
name|echoedBytesCounter
operator|.
name|add
argument_list|(
name|packet
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|asyncChannel
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
name|asyncChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onPacketError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interrupted... Shutting down."
argument_list|)
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onPacketError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
name|asyncChannel
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|activeConnectionsCounter
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|disposed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|onAccept
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
try|try
block|{
name|AsyncChannel
name|asyncChannel
init|=
name|SyncToAsyncChannel
operator|.
name|adapt
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|asyncChannel
operator|.
name|setAsyncChannelListener
argument_list|(
operator|new
name|ServerConnectionHandler
argument_list|(
name|asyncChannel
argument_list|)
argument_list|)
expr_stmt|;
name|asyncChannel
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onAcceptError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onAcceptError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|shutdownCountDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the requestDelay.      */
specifier|public
name|long
name|getRequestDelay
parameter_list|()
block|{
return|return
name|requestDelay
return|;
block|}
comment|/**      * @param requestDelay The requestDelay to set.      */
specifier|public
name|void
name|setRequestDelay
parameter_list|(
name|long
name|requestDelay
parameter_list|)
block|{
name|this
operator|.
name|requestDelay
operator|=
name|requestDelay
expr_stmt|;
block|}
comment|/**      * @return Returns the sampleInterval.      */
specifier|public
name|long
name|getSampleInterval
parameter_list|()
block|{
return|return
name|sampleInterval
return|;
block|}
comment|/**      * @param sampleInterval The sampleInterval to set.      */
specifier|public
name|void
name|setSampleInterval
parameter_list|(
name|long
name|sampleInterval
parameter_list|)
block|{
name|this
operator|.
name|sampleInterval
operator|=
name|sampleInterval
expr_stmt|;
block|}
block|}
end_class

end_unit

