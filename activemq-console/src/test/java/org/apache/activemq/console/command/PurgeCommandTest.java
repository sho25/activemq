begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|PurgeCommandTest
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|datum
decl_stmt|;
specifier|private
specifier|final
name|String
name|expected
decl_stmt|;
comment|/**      * Produces the data for the test.      *      * @return      */
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: convertToSQL92({0})={1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|produceTestData
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// wildcard query enclosed by single quotes must be converted into
comment|// SQL92 LIKE-statement
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSMessageId LIKE '%:10_')"
argument_list|,
literal|"JMSMessageId='*:10?'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// query parameter containing wildcard characters but not enclosed by
comment|// single quotes must be taken as literal
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSMessageId=*:10?)"
argument_list|,
literal|"JMSMessageId=*:10?"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSMessageId=%:10_)"
argument_list|,
literal|"JMSMessageId=%:10_"
argument_list|)
argument_list|)
expr_stmt|;
comment|// query parameter not enclosed by single quotes must be taken as literal
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSMessageId=SOME_ID)"
argument_list|,
literal|"JMSMessageId=SOME_ID"
argument_list|)
argument_list|)
expr_stmt|;
comment|// query parameter not containing wildcard characters but enclosed by
comment|// single quotes must not be converted into a SQL92 LIKE-statement
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSMessageId='SOME_ID')"
argument_list|,
literal|"JMSMessageId='SOME_ID'"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSMessageId='%:10_')"
argument_list|,
literal|"JMSMessageId='%:10_'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// multiple query parameter must be concatenated by 'AND'
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSMessageId LIKE '%:10_') AND (JMSPriority>5)"
argument_list|,
literal|"JMSMessageId='*:10?'"
argument_list|,
literal|"JMSPriority>5"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"(JMSPriority>5) AND (JMSMessageId LIKE '%:10_')"
argument_list|,
literal|"JMSPriority>5"
argument_list|,
literal|"JMSMessageId='*:10?'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// a query which is already in SQL92 syntax should not be altered
name|params
operator|.
name|add
argument_list|(
name|toParameterArray
argument_list|(
literal|"((JMSPriority>5) AND (JMSMessageId LIKE '%:10_'))"
argument_list|,
literal|"(JMSPriority>5) AND (JMSMessageId LIKE '%:10_')"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
comment|/**      * Test if the wildcard queries correctly converted into a valid SQL92      * statement.      */
annotation|@
name|Test
specifier|public
name|void
name|testConvertToSQL92
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"testTokens  = "
operator|+
name|datum
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  output = "
operator|+
name|expected
argument_list|)
expr_stmt|;
name|PurgeCommand
name|pc
init|=
operator|new
name|PurgeCommand
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|pc
operator|.
name|convertToSQL92
argument_list|(
name|datum
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert the passed parameter into an object array which is used for      * the unit tests of method<code>convertToSQL92</code>.      *      * @param datum the tokens which are passed as list to the method      * @param expected the expected value returned by the method      * @return object array with the values used for the unit test      */
specifier|static
name|Object
index|[]
name|toParameterArray
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
modifier|...
name|tokens
parameter_list|)
block|{
return|return
operator|new
name|Object
index|[]
block|{
name|Arrays
operator|.
name|asList
argument_list|(
name|tokens
argument_list|)
block|,
name|expected
block|}
return|;
block|}
specifier|public
name|PurgeCommandTest
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|datum
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|this
operator|.
name|datum
operator|=
name|datum
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
block|}
end_class

end_unit

