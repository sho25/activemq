begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Your Corporation. All Rights Reserved.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|Subscription
block|{
specifier|private
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|private
name|int
name|ackMode
init|=
literal|1
decl_stmt|;
specifier|private
name|StompWireFormat
name|format
decl_stmt|;
specifier|private
specifier|final
name|ConsumerId
name|consumerId
decl_stmt|;
specifier|private
specifier|final
name|String
name|subscriptionId
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_ID
init|=
literal|"~~ NO SUCH THING ~~%%@#!Q"
decl_stmt|;
specifier|public
name|Subscription
parameter_list|(
name|StompWireFormat
name|format
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|,
name|String
name|subscriptionId
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|consumerId
operator|=
name|consumerId
expr_stmt|;
name|this
operator|.
name|subscriptionId
operator|=
name|subscriptionId
expr_stmt|;
block|}
name|void
name|setDestination
parameter_list|(
name|ActiveMQDestination
name|actual_dest
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|actual_dest
expr_stmt|;
block|}
name|void
name|receive
parameter_list|(
name|ActiveMQTextMessage
name|msg
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
if|if
condition|(
name|ackMode
operator|==
name|CLIENT_ACK
condition|)
block|{
name|AckListener
name|listener
init|=
operator|new
name|AckListener
argument_list|(
name|msg
argument_list|,
name|consumerId
argument_list|,
name|subscriptionId
argument_list|)
decl_stmt|;
name|format
operator|.
name|addAckListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ackMode
operator|==
name|AUTO_ACK
condition|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
comment|// if (format.isInTransaction())
comment|// ack.setTransactionIDString(format.getTransactionId());
name|ack
operator|.
name|setDestination
argument_list|(
name|msg
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setConsumerId
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageID
argument_list|(
name|msg
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|format
operator|.
name|enqueueCommand
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|FrameBuilder
name|builder
init|=
operator|new
name|FrameBuilder
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|)
operator|.
name|addHeaders
argument_list|(
name|msg
argument_list|)
operator|.
name|setBody
argument_list|(
name|msg
operator|.
name|getText
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subscriptionId
operator|.
name|equals
argument_list|(
name|NO_ID
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|,
name|subscriptionId
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|builder
operator|.
name|toFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|receive
parameter_list|(
name|ActiveMQBytesMessage
name|msg
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
comment|// @todo refactor this and the other receive form to remoce duplication
comment|// -bmc
if|if
condition|(
name|ackMode
operator|==
name|CLIENT_ACK
condition|)
block|{
name|AckListener
name|listener
init|=
operator|new
name|AckListener
argument_list|(
name|msg
argument_list|,
name|consumerId
argument_list|,
name|subscriptionId
argument_list|)
decl_stmt|;
name|format
operator|.
name|addAckListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ackMode
operator|==
name|AUTO_ACK
condition|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
comment|// if (format.isInTransaction())
comment|// ack.setTransactionIDString(format.getTransactionId());
name|ack
operator|.
name|setDestination
argument_list|(
name|msg
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setConsumerId
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageID
argument_list|(
name|msg
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|format
operator|.
name|enqueueCommand
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|FrameBuilder
name|builder
init|=
operator|new
name|FrameBuilder
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|)
operator|.
name|addHeaders
argument_list|(
name|msg
argument_list|)
operator|.
name|setBody
argument_list|(
name|msg
operator|.
name|getContent
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subscriptionId
operator|.
name|equals
argument_list|(
name|NO_ID
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|,
name|subscriptionId
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|builder
operator|.
name|toFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|static
specifier|final
name|int
name|AUTO_ACK
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|CLIENT_ACK
init|=
literal|2
decl_stmt|;
specifier|public
name|void
name|setAckMode
parameter_list|(
name|int
name|clientAck
parameter_list|)
block|{
name|this
operator|.
name|ackMode
operator|=
name|clientAck
expr_stmt|;
block|}
specifier|public
name|RemoveInfo
name|close
parameter_list|()
block|{
name|RemoveInfo
name|unsub
init|=
operator|new
name|RemoveInfo
argument_list|()
decl_stmt|;
name|unsub
operator|.
name|setObjectId
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
return|return
name|unsub
return|;
block|}
block|}
end_class

end_unit

