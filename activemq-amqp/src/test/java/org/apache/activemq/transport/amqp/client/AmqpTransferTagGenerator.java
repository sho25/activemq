begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_comment
comment|/**  * Utility class that can generate and if enabled pool the binary tag values  * used to identify transfers over an AMQP link.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AmqpTransferTagGenerator
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TAG_POOL_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|byte
index|[]
argument_list|>
name|tagPool
decl_stmt|;
specifier|private
name|long
name|nextTagId
decl_stmt|;
specifier|private
name|int
name|maxPoolSize
init|=
name|DEFAULT_TAG_POOL_SIZE
decl_stmt|;
specifier|public
name|AmqpTransferTagGenerator
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AmqpTransferTagGenerator
parameter_list|(
name|boolean
name|pool
parameter_list|)
block|{
if|if
condition|(
name|pool
condition|)
block|{
name|this
operator|.
name|tagPool
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|tagPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Retrieves the next available tag.      *      * @return a new or unused tag depending on the pool option.      */
specifier|public
name|byte
index|[]
name|getNextTag
parameter_list|()
block|{
name|byte
index|[]
name|tagBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tagPool
operator|!=
literal|null
condition|)
block|{
name|tagBytes
operator|=
name|tagPool
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tagBytes
operator|==
literal|null
condition|)
block|{
name|long
name|tag
init|=
name|nextTagId
operator|++
decl_stmt|;
name|int
name|size
init|=
name|encodingSize
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|tagBytes
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|tagBytes
index|[
name|size
operator|-
literal|1
operator|-
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tag
operator|>>>
operator|(
name|i
operator|*
literal|8
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tagBytes
return|;
block|}
comment|/**      * When used as a pooled cache of tags the unused tags should always be returned once      * the transfer has been settled.      *      * @param data      *        a previously borrowed tag that is no longer in use.      */
specifier|public
name|void
name|returnTag
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|tagPool
operator|!=
literal|null
operator|&&
name|tagPool
operator|.
name|size
argument_list|()
operator|<
name|maxPoolSize
condition|)
block|{
name|tagPool
operator|.
name|offerLast
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the current max pool size value.      *      * @return the current max tag pool size.      */
specifier|public
name|int
name|getMaxPoolSize
parameter_list|()
block|{
return|return
name|maxPoolSize
return|;
block|}
comment|/**      * Sets the max tag pool size.  If the size is smaller than the current number      * of pooled tags the pool will drain over time until it matches the max.      *      * @param maxPoolSize      *        the maximum number of tags to hold in the pool.      */
specifier|public
name|void
name|setMaxPoolSize
parameter_list|(
name|int
name|maxPoolSize
parameter_list|)
block|{
name|this
operator|.
name|maxPoolSize
operator|=
name|maxPoolSize
expr_stmt|;
block|}
comment|/**      * @return true if the generator is using a pool of tags to reduce allocations.      */
specifier|public
name|boolean
name|isPooling
parameter_list|()
block|{
return|return
name|tagPool
operator|!=
literal|null
return|;
block|}
specifier|private
name|int
name|encodingSize
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
name|Long
operator|.
name|BYTES
return|;
block|}
name|int
name|size
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|size
operator|<
literal|8
operator|&&
operator|(
name|value
operator|>=
operator|(
literal|1L
operator|<<
operator|(
name|size
operator|*
literal|8
operator|)
operator|)
operator|)
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

