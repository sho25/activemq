begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsMessage
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQJmsHeaderRouteForceTest
extends|extends
name|ActiveMQJmsHeaderRouteTest
block|{
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do not map jms message as we want to tamper with the JMS message directly, and not use the Camel API for that
name|from
argument_list|(
literal|"activemq:test.a?mapJmsMessage=false"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// lets set the custom JMS headers using the JMS API
name|JmsMessage
name|jmsMessage
init|=
name|assertIsInstanceOf
argument_list|(
name|JmsMessage
operator|.
name|class
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
decl_stmt|;
name|jmsMessage
operator|.
name|getJmsMessage
argument_list|()
operator|.
name|setJMSReplyTo
argument_list|(
name|replyQueue
argument_list|)
expr_stmt|;
name|jmsMessage
operator|.
name|getJmsMessage
argument_list|()
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
name|jmsMessage
operator|.
name|getJmsMessage
argument_list|()
operator|.
name|setJMSType
argument_list|(
name|messageType
argument_list|)
expr_stmt|;
block|}
comment|// force sending the incoming JMS Message, as we want to tamper with the JMS API directly
comment|// instead of using the Camel API for setting JMS headers.
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:test.b?preserveMessageQos=true&forceSendOriginalMessage=true"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:test.b"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

