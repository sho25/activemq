begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|AnnotatedMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerMBeanSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|VirtualDestinationSelectorCacheView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A plugin which allows the caching of the selector from a subscription queue.  *<p/>  * This stops the build-up of unwanted messages, especially when consumers may  * disconnect from time to time when using virtual destinations.  *<p/>  * This is influenced by code snippets developed by Maciej Rakowicz  *  * @see https://issues.apache.org/activemq/browse/AMQ-3004  * @see http://mail-archives.apache.org/mod_mbox/activemq-users/201011.mbox/%3C8A013711-2613-450A-A487-379E784AF1D6@homeaway.co.uk%3E  */
end_comment

begin_class
specifier|public
class|class
name|SubQueueSelectorCacheBroker
extends|extends
name|BrokerFilter
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubQueueSelectorCacheBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MATCH_EVERYTHING
init|=
literal|"TRUE"
decl_stmt|;
comment|/**      * The subscription's selector cache. We cache compiled expressions keyed      * by the target destination.      */
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|subSelectorCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|File
name|persistFile
decl_stmt|;
specifier|private
name|boolean
name|singleSelectorPerDestination
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|ignoreWildcardSelectors
init|=
literal|false
decl_stmt|;
specifier|private
name|ObjectName
name|objectName
decl_stmt|;
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|persistThread
decl_stmt|;
specifier|private
name|long
name|persistInterval
init|=
name|MAX_PERSIST_INTERVAL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|MAX_PERSIST_INTERVAL
init|=
literal|600000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECTOR_CACHE_PERSIST_THREAD_NAME
init|=
literal|"SelectorCachePersistThread"
decl_stmt|;
comment|/**      * Constructor      */
specifier|public
name|SubQueueSelectorCacheBroker
parameter_list|(
name|Broker
name|next
parameter_list|,
specifier|final
name|File
name|persistFile
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|persistFile
operator|=
name|persistFile
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using persisted selector cache from[{}]"
argument_list|,
name|persistFile
argument_list|)
expr_stmt|;
name|readCache
argument_list|()
expr_stmt|;
name|persistThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
name|SELECTOR_CACHE_PERSIST_THREAD_NAME
argument_list|)
expr_stmt|;
name|persistThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|enableJmx
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|enableJmx
parameter_list|()
block|{
name|BrokerService
name|broker
init|=
name|getBrokerService
argument_list|()
decl_stmt|;
if|if
condition|(
name|broker
operator|.
name|isUseJmx
argument_list|()
condition|)
block|{
name|VirtualDestinationSelectorCacheView
name|view
init|=
operator|new
name|VirtualDestinationSelectorCacheView
argument_list|(
name|this
argument_list|)
decl_stmt|;
try|try
block|{
name|objectName
operator|=
name|BrokerMBeanSupport
operator|.
name|createVirtualDestinationSelectorCacheName
argument_list|(
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
argument_list|,
literal|"plugin"
argument_list|,
literal|"virtualDestinationCache"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"virtualDestinationCacheSelector mbean name; "
operator|+
name|objectName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|AnnotatedMBean
operator|.
name|registerMBean
argument_list|(
name|broker
operator|.
name|getManagementContext
argument_list|()
argument_list|,
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"JMX is enabled, but when installing the VirtualDestinationSelectorCache, couldn't install the JMX mbeans. Continuing without installing the mbeans."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|running
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|persistThread
operator|!=
literal|null
condition|)
block|{
name|persistThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|persistThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|//if
name|unregisterMBeans
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|unregisterMBeans
parameter_list|()
block|{
name|BrokerService
name|broker
init|=
name|getBrokerService
argument_list|()
decl_stmt|;
if|if
condition|(
name|broker
operator|.
name|isUseJmx
argument_list|()
operator|&&
name|this
operator|.
name|objectName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying uninstall VirtualDestinationSelectorCache; couldn't uninstall mbeans, continuting..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
comment|// don't track selectors for advisory topics
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|destinationName
init|=
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caching consumer selector [{}] on  '{}'"
argument_list|,
name|info
operator|.
name|getSelector
argument_list|()
argument_list|,
name|destinationName
argument_list|)
expr_stmt|;
name|String
name|selector
init|=
name|info
operator|.
name|getSelector
argument_list|()
operator|==
literal|null
condition|?
name|MATCH_EVERYTHING
else|:
name|info
operator|.
name|getSelector
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ignoreWildcardSelectors
operator|&&
name|hasWildcards
argument_list|(
name|selector
argument_list|)
operator|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|selectors
init|=
name|subSelectorCache
operator|.
name|get
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectors
operator|==
literal|null
condition|)
block|{
name|selectors
operator|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|singleSelectorPerDestination
operator|&&
operator|!
name|MATCH_EVERYTHING
operator|.
name|equals
argument_list|(
name|selector
argument_list|)
condition|)
block|{
comment|// in this case, we allow only ONE selector. But we don't count the catch-all "null/TRUE" selector
comment|// here, we always allow that one. But only one true selector.
name|boolean
name|containsMatchEverything
init|=
name|selectors
operator|.
name|contains
argument_list|(
name|MATCH_EVERYTHING
argument_list|)
decl_stmt|;
name|selectors
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// put back the MATCH_EVERYTHING selector
if|if
condition|(
name|containsMatchEverything
condition|)
block|{
name|selectors
operator|.
name|add
argument_list|(
name|MATCH_EVERYTHING
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"adding new selector: into cache "
operator|+
name|selector
argument_list|)
expr_stmt|;
name|selectors
operator|.
name|add
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"current selectors in cache: "
operator|+
name|selectors
argument_list|)
expr_stmt|;
name|subSelectorCache
operator|.
name|put
argument_list|(
name|destinationName
argument_list|,
name|selectors
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
return|;
block|}
comment|// trivial check for SQL92/selector wildcards
specifier|private
name|boolean
name|hasWildcards
parameter_list|(
name|String
name|selector
parameter_list|)
block|{
return|return
name|selector
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
operator|||
name|selector
operator|.
name|contains
argument_list|(
literal|"_"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|singleSelectorPerDestination
condition|)
block|{
name|String
name|destinationName
init|=
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectors
init|=
name|subSelectorCache
operator|.
name|get
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getSelector
argument_list|()
operator|==
literal|null
operator|&&
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|boolean
name|removed
init|=
name|selectors
operator|.
name|remove
argument_list|(
name|MATCH_EVERYTHING
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"A non-selector consumer has dropped. Removing the catchall matching pattern 'TRUE'. Successful? "
operator|+
name|removed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readCache
parameter_list|()
block|{
if|if
condition|(
name|persistFile
operator|!=
literal|null
operator|&&
name|persistFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|persistFile
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectInputStream
name|in
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|fis
argument_list|)
decl_stmt|;
try|try
block|{
name|subSelectorCache
operator|=
operator|(
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid selector cache data found. Please remove file."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//try
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//try
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to read persisted selector cache...it will be ignored!"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|//try
block|}
comment|//if
block|}
comment|/**      * Persist the selector cache.      */
specifier|private
name|void
name|persistCache
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Persisting selector cache...."
argument_list|)
expr_stmt|;
try|try
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|persistFile
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|subSelectorCache
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//try
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to persist selector cache"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//try
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to access file[{}]"
argument_list|,
name|persistFile
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|//try
block|}
comment|/**      * @return The JMS selector for the specified {@code destination}      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSelector
parameter_list|(
specifier|final
name|String
name|destination
parameter_list|)
block|{
return|return
name|subSelectorCache
operator|.
name|get
argument_list|(
name|destination
argument_list|)
return|;
block|}
comment|/**      * Persist the selector cache every {@code MAX_PERSIST_INTERVAL}ms.      *      * @see java.lang.Runnable#run()      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|persistInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{             }
comment|//try
name|persistCache
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSingleSelectorPerDestination
parameter_list|()
block|{
return|return
name|singleSelectorPerDestination
return|;
block|}
specifier|public
name|void
name|setSingleSelectorPerDestination
parameter_list|(
name|boolean
name|singleSelectorPerDestination
parameter_list|)
block|{
name|this
operator|.
name|singleSelectorPerDestination
operator|=
name|singleSelectorPerDestination
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSelectorsForDestination
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
if|if
condition|(
name|subSelectorCache
operator|.
name|containsKey
argument_list|(
name|destinationName
argument_list|)
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|subSelectorCache
operator|.
name|get
argument_list|(
name|destinationName
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
specifier|public
name|long
name|getPersistInterval
parameter_list|()
block|{
return|return
name|persistInterval
return|;
block|}
specifier|public
name|void
name|setPersistInterval
parameter_list|(
name|long
name|persistInterval
parameter_list|)
block|{
name|this
operator|.
name|persistInterval
operator|=
name|persistInterval
expr_stmt|;
block|}
specifier|public
name|boolean
name|deleteSelectorForDestination
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|String
name|selector
parameter_list|)
block|{
if|if
condition|(
name|subSelectorCache
operator|.
name|containsKey
argument_list|(
name|destinationName
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|cachedSelectors
init|=
name|subSelectorCache
operator|.
name|get
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
return|return
name|cachedSelectors
operator|.
name|remove
argument_list|(
name|selector
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|deleteAllSelectorsForDestination
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
if|if
condition|(
name|subSelectorCache
operator|.
name|containsKey
argument_list|(
name|destinationName
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|cachedSelectors
init|=
name|subSelectorCache
operator|.
name|get
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|cachedSelectors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isIgnoreWildcardSelectors
parameter_list|()
block|{
return|return
name|ignoreWildcardSelectors
return|;
block|}
specifier|public
name|void
name|setIgnoreWildcardSelectors
parameter_list|(
name|boolean
name|ignoreWildcardSelectors
parameter_list|)
block|{
name|this
operator|.
name|ignoreWildcardSelectors
operator|=
name|ignoreWildcardSelectors
expr_stmt|;
block|}
block|}
end_class

end_unit

