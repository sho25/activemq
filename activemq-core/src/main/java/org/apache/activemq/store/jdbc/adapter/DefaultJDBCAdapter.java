begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCMessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|Statements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Implements all the default JDBC operations that are used  * by the JDBCPersistenceAdapter.  *<p/>  * sub-classing is encouraged to override the default  * implementation of methods to account for differences  * in JDBC Driver implementations.  *<p/>  * The JDBCAdapter inserts and extracts BLOB data using the  * getBytes()/setBytes() operations.  *<p/>  * The databases/JDBC drivers that use this adapter are:  *<ul>  *<li></li>  *</ul>  *  * @org.apache.xbean.XBean element="defaultJDBCAdapter"  *   * @version $Revision: 1.10 $  */
end_comment

begin_class
specifier|public
class|class
name|DefaultJDBCAdapter
implements|implements
name|JDBCAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultJDBCAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Statements
name|statements
decl_stmt|;
specifier|protected
name|boolean
name|batchStatments
init|=
literal|true
decl_stmt|;
specifier|protected
name|void
name|setBinaryData
parameter_list|(
name|PreparedStatement
name|s
parameter_list|,
name|int
name|index
parameter_list|,
name|byte
name|data
index|[]
parameter_list|)
throws|throws
name|SQLException
block|{
name|s
operator|.
name|setBytes
argument_list|(
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|byte
index|[]
name|getBinaryData
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getBytes
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|void
name|doCreateTables
parameter_list|(
name|TransactionContext
name|c
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|Statement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Check to see if the table already exists.  If it does, then don't log warnings during startup.
comment|// Need to run the scripts anyways since they may contain ALTER statements that upgrade a previous version of the table
name|boolean
name|alreadyExists
init|=
literal|false
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|statements
operator|.
name|getFullMessageTableName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TABLE"
block|}
argument_list|)
expr_stmt|;
name|alreadyExists
operator|=
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{             }
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|String
index|[]
name|createStatments
init|=
name|statements
operator|.
name|getCreateSchemaStatements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|createStatments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// This will fail usually since the tables will be
comment|// created already.
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Executing SQL: "
operator|+
name|createStatments
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|boolean
name|rc
init|=
name|s
operator|.
name|execute
argument_list|(
name|createStatments
index|[
name|i
index|]
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|alreadyExists
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Could not create JDBC tables; The message table already existed."
operator|+
literal|" Failure was: "
operator|+
name|createStatments
index|[
name|i
index|]
operator|+
literal|" Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" SQLState: "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" Vendor code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not create JDBC tables; they could already exist."
operator|+
literal|" Failure was: "
operator|+
name|createStatments
index|[
name|i
index|]
operator|+
literal|" Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" SQLState: "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" Vendor code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|JDBCPersistenceAdapter
operator|.
name|log
argument_list|(
literal|"Failure details: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|public
name|void
name|doDropTables
parameter_list|(
name|TransactionContext
name|c
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|Statement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|String
index|[]
name|dropStatments
init|=
name|statements
operator|.
name|getDropSchemaStatements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dropStatments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// This will fail usually since the tables will be
comment|// created already.
try|try
block|{
name|boolean
name|rc
init|=
name|s
operator|.
name|execute
argument_list|(
name|dropStatments
index|[
name|i
index|]
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not drop JDBC tables; they may not exist."
operator|+
literal|" Failure was: "
operator|+
name|dropStatments
index|[
name|i
index|]
operator|+
literal|" Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" SQLState: "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" Vendor code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|JDBCPersistenceAdapter
operator|.
name|log
argument_list|(
literal|"Failure details: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|public
name|long
name|doGetLastMessageBrokerSequenceId
parameter_list|(
name|TransactionContext
name|c
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindLastSequenceIdInMsgsStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|long
name|seq1
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|seq1
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindLastSequenceIdInAcksStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|long
name|seq2
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|seq2
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|seq1
argument_list|,
name|seq2
argument_list|)
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doAddMessage
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|MessageId
name|messageID
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|long
name|expiration
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|getAddMessageStatement
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getAddMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|c
operator|.
name|setAddMessageStatement
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|messageID
operator|.
name|getBrokerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|messageID
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|messageID
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|5
argument_list|,
name|expiration
argument_list|)
expr_stmt|;
name|setBinaryData
argument_list|(
name|s
argument_list|,
literal|6
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|s
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|executeUpdate
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Failed add a message"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|batchStatments
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doAddMessageReference
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|MessageId
name|messageID
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|long
name|expirationTime
parameter_list|,
name|String
name|messageRef
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|getAddMessageStatement
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getAddMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|c
operator|.
name|setAddMessageStatement
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|messageID
operator|.
name|getBrokerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|messageID
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|messageID
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|5
argument_list|,
name|expirationTime
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|messageRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|s
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|executeUpdate
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Failed add a message"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|batchStatments
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|long
name|getBrokerSequenceId
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|MessageId
name|messageID
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindMessageSequenceIdStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|messageID
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|messageID
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|doGetMessage
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|long
name|seq
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getBinaryData
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|)
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|doGetMessageReference
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|long
name|seq
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doRemoveMessage
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|long
name|seq
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|getRemovedMessageStatement
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getRemoveMessageStatment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|c
operator|.
name|setRemovedMessageStatement
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|seq
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|s
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|executeUpdate
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Failed to remove message"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|batchStatments
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doRecover
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|JDBCMessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
comment|//        printQuery(c, "Select * from ACTIVEMQ_MSGS", System.out);
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindAllMessagesStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|statements
operator|.
name|isUseExternalMessageReferences
argument_list|()
condition|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|listener
operator|.
name|recoverMessageReference
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|listener
operator|.
name|recoverMessage
argument_list|(
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getBinaryData
argument_list|(
name|rs
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|listener
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doSetLastAck
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|long
name|seq
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|getAddMessageStatement
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getUpdateLastAckOfDurableSubStatement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|c
operator|.
name|setUpdateLastAckStatement
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchStatments
condition|)
block|{
name|s
operator|.
name|addBatch
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|executeUpdate
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Failed add a message"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|batchStatments
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doRecoverSubscription
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|JDBCMessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
comment|//        dumpTables(c, destination.getQualifiedName(),clientId,subscriptionName);
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindAllDurableSubMessagesStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|statements
operator|.
name|isUseExternalMessageReferences
argument_list|()
condition|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|listener
operator|.
name|recoverMessageReference
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|listener
operator|.
name|recoverMessage
argument_list|(
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getBinaryData
argument_list|(
name|rs
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|listener
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doRecoverNextMessages
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|long
name|seq
parameter_list|,
name|int
name|maxReturned
parameter_list|,
name|JDBCMessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
comment|//      dumpTables(c, destination.getQualifiedName(),clientId,subscriptionName);
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"VANILLA STATEMENT = "
operator|+
name|statements
operator|.
name|getFindDurableSubMessagesStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindDurableSubMessagesStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|4
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|s
operator|.
name|setInt
argument_list|(
literal|5
argument_list|,
name|maxReturned
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"STATEMENT = "
operator|+
name|s
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|statements
operator|.
name|isUseExternalMessageReferences
argument_list|()
condition|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|listener
operator|.
name|recoverMessageReference
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|listener
operator|.
name|recoverMessage
argument_list|(
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getBinaryData
argument_list|(
name|rs
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|listener
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|doGetDurableSubscriberMessageCount
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getDurableSubscriberMessageCountStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|result
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * @see org.apache.activemq.store.jdbc.JDBCAdapter#doSetSubscriberEntry(java.sql.Connection, java.lang.Object, org.apache.activemq.service.SubscriptionInfo)      */
specifier|public
name|void
name|doSetSubscriberEntry
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|String
name|selector
parameter_list|,
name|boolean
name|retroactive
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
comment|//        dumpTables(c, destination.getQualifiedName(), clientId, subscriptionName);
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|lastMessageId
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|retroactive
condition|)
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindLastSequenceIdInMsgsStatement
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|lastMessageId
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getCreateDurableSubStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|5
argument_list|,
name|lastMessageId
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|executeUpdate
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create durable subscription for: "
operator|+
name|clientId
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SubscriptionInfo
name|doGetSubscriberEntry
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindDurableSubStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SubscriptionInfo
name|subscription
init|=
operator|new
name|SubscriptionInfo
argument_list|()
decl_stmt|;
name|subscription
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|subscription
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|subscription
operator|.
name|setSubcriptionName
argument_list|(
name|subscriptionName
argument_list|)
expr_stmt|;
name|subscription
operator|.
name|setSelector
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|subscription
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SubscriptionInfo
index|[]
name|doGetAllSubscriptions
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindAllDurableSubsStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|ArrayList
name|rc
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|SubscriptionInfo
name|subscription
init|=
operator|new
name|SubscriptionInfo
argument_list|()
decl_stmt|;
name|subscription
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|subscription
operator|.
name|setSelector
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|subscription
operator|.
name|setSubcriptionName
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|subscription
operator|.
name|setClientId
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|add
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|SubscriptionInfo
index|[]
operator|)
name|rc
operator|.
name|toArray
argument_list|(
operator|new
name|SubscriptionInfo
index|[
name|rc
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doRemoveAllMessages
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destinationName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getRemoveAllMessagesStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destinationName
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getRemoveAllSubscriptionsStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destinationName
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doDeleteSubscription
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getDeleteSubscriptionStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
name|s
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doDeleteOldMessages
parameter_list|(
name|TransactionContext
name|c
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Executing SQL: "
operator|+
name|statements
operator|.
name|getDeleteOldMessagesStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getDeleteOldMessagesStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|s
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Deleted "
operator|+
name|i
operator|+
literal|" old message(s)."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|private
name|void
name|close
parameter_list|(
name|PreparedStatement
name|s
parameter_list|)
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
block|}
specifier|static
specifier|private
name|void
name|close
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|Set
name|doGetDestinations
parameter_list|(
name|TransactionContext
name|c
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|HashSet
name|rc
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindAllDestinationsStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|boolean
name|isBatchStatments
parameter_list|()
block|{
return|return
name|batchStatments
return|;
block|}
specifier|public
name|void
name|setBatchStatments
parameter_list|(
name|boolean
name|batchStatments
parameter_list|)
block|{
name|this
operator|.
name|batchStatments
operator|=
name|batchStatments
expr_stmt|;
block|}
specifier|public
name|void
name|setUseExternalMessageReferences
parameter_list|(
name|boolean
name|useExternalMessageReferences
parameter_list|)
block|{
name|statements
operator|.
name|setUseExternalMessageReferences
argument_list|(
name|useExternalMessageReferences
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Statements
name|getStatements
parameter_list|()
block|{
return|return
name|statements
return|;
block|}
specifier|public
name|void
name|setStatements
parameter_list|(
name|Statements
name|statements
parameter_list|)
block|{
name|this
operator|.
name|statements
operator|=
name|statements
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|doGetNextDurableSubscriberMessageStatement
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriberName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getNextDurableSubscriberMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|subscriberName
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getBinaryData
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|)
return|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Useful for debugging.     public void dumpTables(Connection c, String destinationName, String clientId, String subscriptionName) throws SQLException {                 printQuery(c, "Select * from ACTIVEMQ_MSGS", System.out);         printQuery(c, "Select * from ACTIVEMQ_ACKS", System.out);         PreparedStatement s = c.prepareStatement("SELECT M.ID, D.LAST_ACKED_ID FROM "         +"ACTIVEMQ_MSGS M, "         +"ACTIVEMQ_ACKS D "         +"WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"          +" AND M.CONTAINER=D.CONTAINER AND M.ID> D.LAST_ACKED_ID"         +" ORDER BY M.ID");         s.setString(1,destinationName);         s.setString(2,clientId);         s.setString(3,subscriptionName);         printQuery(s,System.out);     }          public void dumpTables(Connection c) throws SQLException {         printQuery(c, "Select * from ACTIVEMQ_MSGS", System.out);         printQuery(c, "Select * from ACTIVEMQ_ACKS", System.out);     }      private void printQuery(Connection c, String query, PrintStream out) throws SQLException {         printQuery(c.prepareStatement(query), out);     }          private void printQuery(PreparedStatement s, PrintStream out) throws SQLException {                  ResultSet set=null;         try {             set = s.executeQuery();             ResultSetMetaData metaData = set.getMetaData();             for( int i=1; i<= metaData.getColumnCount(); i++ ) {                 if(i==1)                     out.print("||");                 out.print(metaData.getColumnName(i)+"||");             }             out.println();             while(set.next()) {                 for( int i=1; i<= metaData.getColumnCount(); i++ ) {                     if(i==1)                         out.print("|");                     out.print(set.getString(i)+"|");                 }                 out.println();             }         } finally {             try { set.close(); } catch (Throwable ignore) {}             try { s.close(); } catch (Throwable ignore) {}         }     }     */
block|}
end_class

end_unit

