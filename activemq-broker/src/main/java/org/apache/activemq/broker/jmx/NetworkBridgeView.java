begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkBridge
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkBridgeView
implements|implements
name|NetworkBridgeViewMBean
block|{
specifier|private
specifier|final
name|NetworkBridge
name|bridge
decl_stmt|;
specifier|private
name|boolean
name|createByDuplex
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NetworkDestinationView
argument_list|>
name|networkDestinationViewList
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|NetworkDestinationView
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|NetworkBridgeView
parameter_list|(
name|NetworkBridge
name|bridge
parameter_list|)
block|{
name|this
operator|.
name|bridge
operator|=
name|bridge
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|bridge
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|bridge
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalAddress
parameter_list|()
block|{
return|return
name|bridge
operator|.
name|getLocalAddress
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|bridge
operator|.
name|getRemoteAddress
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRemoteBrokerName
parameter_list|()
block|{
return|return
name|bridge
operator|.
name|getRemoteBrokerName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLocalBrokerName
parameter_list|()
block|{
return|return
name|bridge
operator|.
name|getLocalBrokerName
argument_list|()
return|;
block|}
specifier|public
name|long
name|getEnqueueCounter
parameter_list|()
block|{
return|return
name|bridge
operator|.
name|getEnqueueCounter
argument_list|()
return|;
block|}
specifier|public
name|long
name|getDequeueCounter
parameter_list|()
block|{
return|return
name|bridge
operator|.
name|getDequeueCounter
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isCreatedByDuplex
parameter_list|()
block|{
return|return
name|createByDuplex
return|;
block|}
specifier|public
name|void
name|setCreateByDuplex
parameter_list|(
name|boolean
name|createByDuplex
parameter_list|)
block|{
name|this
operator|.
name|createByDuplex
operator|=
name|createByDuplex
expr_stmt|;
block|}
specifier|public
name|void
name|resetStats
parameter_list|()
block|{
name|bridge
operator|.
name|resetStats
argument_list|()
expr_stmt|;
for|for
control|(
name|NetworkDestinationView
name|networkDestinationView
range|:
name|networkDestinationViewList
control|)
block|{
name|networkDestinationView
operator|.
name|resetStats
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addNetworkDestinationView
parameter_list|(
name|NetworkDestinationView
name|networkDestinationView
parameter_list|)
block|{
name|networkDestinationViewList
operator|.
name|add
argument_list|(
name|networkDestinationView
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeNetworkDestinationView
parameter_list|(
name|NetworkDestinationView
name|networkDestinationView
parameter_list|)
block|{
name|networkDestinationViewList
operator|.
name|remove
argument_list|(
name|networkDestinationView
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

