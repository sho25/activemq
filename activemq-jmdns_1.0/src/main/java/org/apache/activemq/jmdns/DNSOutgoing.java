begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|//Copyright 2003-2005 Arthur van Hoff, Rick Blair
end_comment

begin_comment
comment|//Licensed under Apache License version 2.0
end_comment

begin_comment
comment|//Original license LGPL
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * An outgoing DNS message.  *  * @version %I%, %G%  * @author	Arthur van Hoff, Rick Blair, Werner Randelshofer  */
end_comment

begin_class
specifier|final
class|class
name|DNSOutgoing
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DNSOutgoing
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|id
decl_stmt|;
name|int
name|flags
decl_stmt|;
specifier|private
name|boolean
name|multicast
decl_stmt|;
specifier|private
name|int
name|numQuestions
decl_stmt|;
specifier|private
name|int
name|numAnswers
decl_stmt|;
specifier|private
name|int
name|numAuthorities
decl_stmt|;
specifier|private
name|int
name|numAdditionals
decl_stmt|;
specifier|private
name|Hashtable
name|names
decl_stmt|;
name|byte
name|data
index|[]
decl_stmt|;
name|int
name|off
decl_stmt|;
name|int
name|len
decl_stmt|;
comment|/**      * Create an outgoing multicast query or response.      */
name|DNSOutgoing
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|this
argument_list|(
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an outgoing query or response.      */
name|DNSOutgoing
parameter_list|(
name|int
name|flags
parameter_list|,
name|boolean
name|multicast
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|multicast
operator|=
name|multicast
expr_stmt|;
name|names
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|DNSConstants
operator|.
name|MAX_MSG_TYPICAL
index|]
expr_stmt|;
name|off
operator|=
literal|12
expr_stmt|;
block|}
comment|/**      * Add a question to the message.      */
name|void
name|addQuestion
parameter_list|(
name|DNSQuestion
name|rec
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numAnswers
operator|>
literal|0
operator|||
name|numAuthorities
operator|>
literal|0
operator|||
name|numAdditionals
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Questions must be added before answers"
argument_list|)
throw|;
block|}
name|numQuestions
operator|++
expr_stmt|;
name|writeQuestion
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add an answer if it is not suppressed.      */
name|void
name|addAnswer
parameter_list|(
name|DNSIncoming
name|in
parameter_list|,
name|DNSRecord
name|rec
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numAuthorities
operator|>
literal|0
operator|||
name|numAdditionals
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Answers must be added before authorities and additionals"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rec
operator|.
name|suppressedBy
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|addAnswer
argument_list|(
name|rec
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add an additional answer to the record. Omit if there is no room.      */
name|void
name|addAdditionalAnswer
parameter_list|(
name|DNSIncoming
name|in
parameter_list|,
name|DNSRecord
name|rec
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|off
operator|<
name|DNSConstants
operator|.
name|MAX_MSG_TYPICAL
operator|-
literal|200
operator|)
operator|&&
operator|!
name|rec
operator|.
name|suppressedBy
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|writeRecord
argument_list|(
name|rec
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|numAdditionals
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * Add an answer to the message.      */
name|void
name|addAnswer
parameter_list|(
name|DNSRecord
name|rec
parameter_list|,
name|long
name|now
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numAuthorities
operator|>
literal|0
operator|||
name|numAdditionals
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Questions must be added before answers"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rec
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|now
operator|==
literal|0
operator|)
operator|||
operator|!
name|rec
operator|.
name|isExpired
argument_list|(
name|now
argument_list|)
condition|)
block|{
name|writeRecord
argument_list|(
name|rec
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|numAnswers
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|LinkedList
name|authorativeAnswers
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
comment|/**      * Add an authorative answer to the message.      */
name|void
name|addAuthorativeAnswer
parameter_list|(
name|DNSRecord
name|rec
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numAdditionals
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Authorative answers must be added before additional answers"
argument_list|)
throw|;
block|}
name|authorativeAnswers
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
name|writeRecord
argument_list|(
name|rec
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|numAuthorities
operator|++
expr_stmt|;
comment|// VERIFY:
block|}
name|void
name|writeByte
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|off
operator|>=
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"buffer full"
argument_list|)
throw|;
block|}
name|data
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
name|void
name|writeBytes
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|writeByte
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|off
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|writeBytes
parameter_list|(
name|byte
name|data
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|writeBytes
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|writeBytes
parameter_list|(
name|byte
name|data
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|writeByte
argument_list|(
name|data
index|[
name|off
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|writeShort
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeByte
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|writeByte
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeInt
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeShort
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeUTF
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// compute utf length
name|int
name|utflen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ch
init|=
name|str
operator|.
name|charAt
argument_list|(
name|off
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|0x0001
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|0x007F
operator|)
condition|)
block|{
name|utflen
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ch
operator|>
literal|0x07FF
condition|)
block|{
name|utflen
operator|+=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|utflen
operator|+=
literal|2
expr_stmt|;
block|}
block|}
block|}
comment|// write utf length
name|writeByte
argument_list|(
name|utflen
argument_list|)
expr_stmt|;
comment|// write utf data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ch
init|=
name|str
operator|.
name|charAt
argument_list|(
name|off
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|0x0001
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|0x007F
operator|)
condition|)
block|{
name|writeByte
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ch
operator|>
literal|0x07FF
condition|)
block|{
name|writeByte
argument_list|(
literal|0xE0
operator||
operator|(
operator|(
name|ch
operator|>>
literal|12
operator|)
operator|&
literal|0x0F
operator|)
argument_list|)
expr_stmt|;
name|writeByte
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|ch
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|writeByte
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|ch
operator|>>
literal|0
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeByte
argument_list|(
literal|0xC0
operator||
operator|(
operator|(
name|ch
operator|>>
literal|6
operator|)
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|writeByte
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|ch
operator|>>
literal|0
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|writeName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|n
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|n
operator|=
name|name
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|Integer
name|offset
init|=
operator|(
name|Integer
operator|)
name|names
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|int
name|val
init|=
name|offset
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|>
name|off
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"DNSOutgoing writeName failed val="
operator|+
name|val
operator|+
literal|" name="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|writeByte
argument_list|(
operator|(
name|val
operator|>>
literal|8
operator|)
operator||
literal|0xC0
argument_list|)
expr_stmt|;
name|writeByte
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return;
block|}
name|names
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Integer
argument_list|(
name|off
argument_list|)
argument_list|)
expr_stmt|;
name|writeUTF
argument_list|(
name|name
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|writeQuestion
parameter_list|(
name|DNSQuestion
name|question
parameter_list|)
throws|throws
name|IOException
block|{
name|writeName
argument_list|(
name|question
operator|.
name|name
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|question
operator|.
name|type
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|question
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
name|void
name|writeRecord
parameter_list|(
name|DNSRecord
name|rec
parameter_list|,
name|long
name|now
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|save
init|=
name|off
decl_stmt|;
try|try
block|{
name|writeName
argument_list|(
name|rec
operator|.
name|name
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|rec
operator|.
name|type
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|rec
operator|.
name|clazz
operator||
operator|(
operator|(
name|rec
operator|.
name|unique
operator|&&
name|multicast
operator|)
condition|?
name|DNSConstants
operator|.
name|CLASS_UNIQUE
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|writeInt
argument_list|(
operator|(
name|now
operator|==
literal|0
operator|)
condition|?
name|rec
operator|.
name|ttl
else|:
name|rec
operator|.
name|getRemainingTTL
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|off
decl_stmt|;
name|rec
operator|.
name|write
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|off
operator|-
name|start
decl_stmt|;
name|data
index|[
name|start
operator|-
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|len
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|data
index|[
name|start
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|len
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|off
operator|=
name|save
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Finish the message before sending it off.      */
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|save
init|=
name|off
decl_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
name|writeShort
argument_list|(
name|multicast
condition|?
literal|0
else|:
name|id
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|numQuestions
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|numAnswers
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|numAuthorities
argument_list|)
expr_stmt|;
name|writeShort
argument_list|(
name|numAdditionals
argument_list|)
expr_stmt|;
name|off
operator|=
name|save
expr_stmt|;
block|}
name|boolean
name|isQuery
parameter_list|()
block|{
return|return
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_QR_MASK
operator|)
operator|==
name|DNSConstants
operator|.
name|FLAGS_QR_QUERY
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|numQuestions
operator|==
literal|0
operator|&&
name|numAuthorities
operator|==
literal|0
operator|&&
name|numAdditionals
operator|==
literal|0
operator|&&
name|numAnswers
operator|==
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isQuery
argument_list|()
condition|?
literal|"dns[query,"
else|:
literal|"dns[response,"
argument_list|)
expr_stmt|;
comment|//buf.append(packet.getAddress().getHostAddress());
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
comment|//buf.append(packet.getPort());
comment|//buf.append(",len=");
comment|//buf.append(packet.getLength());
name|buf
operator|.
name|append
argument_list|(
literal|",id=0x"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",flags=0x"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_QR_RESPONSE
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|":r"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_AA
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|":aa"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|DNSConstants
operator|.
name|FLAGS_TC
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|":tc"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numQuestions
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",questions="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numQuestions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numAnswers
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",answers="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numAnswers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numAuthorities
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",authorities="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numAuthorities
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numAdditionals
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|",additionals="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|numAdditionals
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|",\nnames="
operator|+
name|names
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|",\nauthorativeAnswers="
operator|+
name|authorativeAnswers
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

