begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2005 LogicBlaze, Inc. (http://www.logicblaze.com)  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activecluster
operator|.
name|group
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a logical group of nodes in a cluster,  * such as a Master and a number of Slaves which operate as a  * logical unit.  *<p/>  * A cluster can be divided into a single group, or many groups  * depending on the policy required.  *<p/>  * The number of groups could be application defined; created on demand  * or there could even be one group for each node, with other nodes acting  * as buddy nodes in each nodes' group (i.e. each node is a master with N  * buddies/slaves)  *  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|Group
block|{
specifier|private
name|int
name|minimumMemberCount
decl_stmt|;
specifier|private
name|int
name|maximumMemberCount
decl_stmt|;
specifier|private
name|List
name|members
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|int
name|memberCount
decl_stmt|;
specifier|public
name|Group
parameter_list|()
block|{     }
specifier|public
name|Group
parameter_list|(
name|int
name|minimumMemberCount
parameter_list|,
name|int
name|maximumMemberCount
parameter_list|)
block|{
name|this
operator|.
name|minimumMemberCount
operator|=
name|minimumMemberCount
expr_stmt|;
name|this
operator|.
name|maximumMemberCount
operator|=
name|maximumMemberCount
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|List
name|getMembers
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|members
argument_list|)
return|;
block|}
comment|/**      * Adds a node to the given group      *      * @return the index of the node in the group (0 = master, 1..N = slave)      */
specifier|public
specifier|synchronized
name|int
name|addMember
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|int
name|index
init|=
name|members
operator|.
name|indexOf
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|index
return|;
block|}
name|members
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|memberCount
operator|++
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|removeMember
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|members
operator|.
name|remove
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
name|memberCount
operator|--
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Returns true if the group is usable, that it has enough members to be used.      */
specifier|public
name|boolean
name|isUsable
parameter_list|()
block|{
return|return
name|memberCount
operator|>=
name|minimumMemberCount
return|;
block|}
comment|/**      * Returns true if the group cannot accept any more new members      */
specifier|public
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|memberCount
operator|>=
name|maximumMemberCount
return|;
block|}
specifier|public
name|int
name|getMemberCount
parameter_list|()
block|{
return|return
name|memberCount
return|;
block|}
specifier|public
name|int
name|getMaximumMemberCount
parameter_list|()
block|{
return|return
name|maximumMemberCount
return|;
block|}
specifier|public
name|void
name|setMaximumMemberCount
parameter_list|(
name|int
name|maximumMemberCount
parameter_list|)
block|{
name|this
operator|.
name|maximumMemberCount
operator|=
name|maximumMemberCount
expr_stmt|;
block|}
specifier|public
name|int
name|getMinimumMemberCount
parameter_list|()
block|{
return|return
name|minimumMemberCount
return|;
block|}
specifier|public
name|void
name|setMinimumMemberCount
parameter_list|(
name|int
name|minimumMemberCount
parameter_list|)
block|{
name|this
operator|.
name|minimumMemberCount
operator|=
name|minimumMemberCount
expr_stmt|;
block|}
block|}
end_class

end_unit

