begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|AbstractInactivityMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used to make sure that commands are arriving periodically from the peer of  * the transport.  */
end_comment

begin_class
specifier|public
class|class
name|StompInactivityMonitor
extends|extends
name|AbstractInactivityMonitor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StompInactivityMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|isConfigured
init|=
literal|false
decl_stmt|;
specifier|public
name|StompInactivityMonitor
parameter_list|(
name|Transport
name|next
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|,
name|wireFormat
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startMonitoring
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|isConfigured
operator|=
literal|true
expr_stmt|;
name|stopConnectCheckTask
argument_list|()
expr_stmt|;
name|startMonitorThreads
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processInboundWireFormatInfo
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|protected
name|void
name|processOutboundWireFormatInfo
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|protected
name|boolean
name|configuredOk
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isConfigured
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stomp Inactivity Monitor read check interval: {}ms, write check interval: {}ms"
argument_list|,
name|getReadCheckTime
argument_list|()
argument_list|,
name|getWriteCheckTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|getReadCheckTime
argument_list|()
operator|>=
literal|0
operator|&&
name|this
operator|.
name|getWriteCheckTime
argument_list|()
operator|>=
literal|0
return|;
block|}
block|}
end_class

end_unit

