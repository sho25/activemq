begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * @author chirino  */
end_comment

begin_class
specifier|public
class|class
name|LinkedNodeTest
extends|extends
name|TestCase
block|{
specifier|static
class|class
name|IntLinkedNode
extends|extends
name|LinkedNode
block|{
specifier|public
specifier|final
name|int
name|v
decl_stmt|;
specifier|public
name|IntLinkedNode
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|this
operator|.
name|v
operator|=
name|v
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|v
return|;
block|}
block|}
name|IntLinkedNode
name|i1
init|=
operator|new
name|IntLinkedNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|IntLinkedNode
name|i2
init|=
operator|new
name|IntLinkedNode
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|IntLinkedNode
name|i3
init|=
operator|new
name|IntLinkedNode
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|IntLinkedNode
name|i4
init|=
operator|new
name|IntLinkedNode
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|IntLinkedNode
name|i5
init|=
operator|new
name|IntLinkedNode
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|IntLinkedNode
name|i6
init|=
operator|new
name|IntLinkedNode
argument_list|(
literal|6
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testLinkAfter
parameter_list|()
block|{
name|i1
operator|.
name|linkAfter
argument_list|(
name|i2
operator|.
name|linkAfter
argument_list|(
name|i3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Order should be 1,2,3
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i1
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i3
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|i1
operator|.
name|linkAfter
argument_list|(
name|i4
operator|.
name|linkAfter
argument_list|(
name|i5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Order should be 1,4,5,2,3
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|==
name|i4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i1
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i4
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i4
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i5
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i5
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i3
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLinkBefore
parameter_list|()
block|{
name|i3
operator|.
name|linkBefore
argument_list|(
name|i2
operator|.
name|linkBefore
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i1
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i3
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|i2
operator|.
name|linkBefore
argument_list|(
name|i5
operator|.
name|linkBefore
argument_list|(
name|i4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Order should be 1,4,5,2,3
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|==
name|i4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i1
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i4
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i4
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i5
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i5
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i3
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnlink
parameter_list|()
block|{
name|i1
operator|.
name|linkAfter
argument_list|(
name|i2
operator|.
name|linkAfter
argument_list|(
name|i3
argument_list|)
argument_list|)
expr_stmt|;
name|i3
operator|.
name|linkAfter
argument_list|(
name|i4
argument_list|)
expr_stmt|;
name|i1
operator|.
name|linkBefore
argument_list|(
name|i5
argument_list|)
expr_stmt|;
name|i1
operator|.
name|linkAfter
argument_list|(
name|i6
argument_list|)
expr_stmt|;
comment|// Order should be 5,1,6,2,3,4
name|i4
operator|.
name|unlink
argument_list|()
expr_stmt|;
name|i5
operator|.
name|unlink
argument_list|()
expr_stmt|;
name|i6
operator|.
name|unlink
argument_list|()
expr_stmt|;
comment|// Order should be 1,2,3
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|==
name|i3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i1
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|==
name|i2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|==
name|i1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|i3
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
operator|.
name|getPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i1
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i2
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|.
name|isTailNode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i3
operator|.
name|isHeadNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

