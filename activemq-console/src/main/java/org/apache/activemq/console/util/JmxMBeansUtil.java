begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JmxMBeansUtil
block|{
specifier|private
name|JmxMBeansUtil
parameter_list|()
block|{     }
specifier|public
specifier|static
name|List
name|getAllBrokers
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|new
name|MBeansObjectNameQueryFilter
argument_list|(
name|jmxConnection
argument_list|)
operator|)
operator|.
name|query
argument_list|(
literal|"type=Broker,brokerName=*"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|getBrokersByName
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|String
name|brokerName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|new
name|MBeansObjectNameQueryFilter
argument_list|(
name|jmxConnection
argument_list|)
operator|)
operator|.
name|query
argument_list|(
literal|"type=Broker,brokerName="
operator|+
name|brokerName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|getAllBrokers
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|Set
name|attributes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|new
name|MBeansAttributeQueryFilter
argument_list|(
name|jmxConnection
argument_list|,
name|attributes
argument_list|,
operator|new
name|MBeansObjectNameQueryFilter
argument_list|(
name|jmxConnection
argument_list|)
argument_list|)
operator|)
operator|.
name|query
argument_list|(
literal|"type=Broker"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|getBrokersByName
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|String
name|brokerName
parameter_list|,
name|Set
name|attributes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|new
name|MBeansAttributeQueryFilter
argument_list|(
name|jmxConnection
argument_list|,
name|attributes
argument_list|,
operator|new
name|MBeansObjectNameQueryFilter
argument_list|(
name|jmxConnection
argument_list|)
argument_list|)
operator|)
operator|.
name|query
argument_list|(
literal|"type=Broker,brokerName="
operator|+
name|brokerName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|x_queryMBeans
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|List
name|queryList
parameter_list|)
throws|throws
name|Exception
block|{
comment|// If there is no query defined get all mbeans
if|if
condition|(
name|queryList
operator|==
literal|null
operator|||
name|queryList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|createMBeansObjectNameQuery
argument_list|(
name|jmxConnection
argument_list|)
operator|.
name|query
argument_list|(
literal|""
argument_list|)
return|;
comment|// Parse through all the query strings
block|}
else|else
block|{
return|return
name|createMBeansObjectNameQuery
argument_list|(
name|jmxConnection
argument_list|)
operator|.
name|query
argument_list|(
name|queryList
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
name|queryMBeansAsMap
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|List
name|queryList
parameter_list|,
name|Set
name|attributes
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|answer
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AttributeList
argument_list|>
name|mbeans
init|=
name|queryMBeans
argument_list|(
name|jmxConnection
argument_list|,
name|queryList
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
for|for
control|(
name|AttributeList
name|mbean
range|:
name|mbeans
control|)
block|{
for|for
control|(
name|Attribute
name|attr
range|:
name|mbean
operator|.
name|asList
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Name"
argument_list|)
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|,
name|mbean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
specifier|public
specifier|static
name|List
name|queryMBeans
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|List
name|queryList
parameter_list|,
name|Set
name|attributes
parameter_list|)
throws|throws
name|Exception
block|{
comment|// If there is no query defined get all mbeans
if|if
condition|(
name|queryList
operator|==
literal|null
operator|||
name|queryList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|createMBeansAttributeQuery
argument_list|(
name|jmxConnection
argument_list|,
name|attributes
argument_list|)
operator|.
name|query
argument_list|(
literal|""
argument_list|)
return|;
comment|// Parse through all the query strings
block|}
else|else
block|{
return|return
name|createMBeansAttributeQuery
argument_list|(
name|jmxConnection
argument_list|,
name|attributes
argument_list|)
operator|.
name|query
argument_list|(
name|queryList
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|List
name|queryMBeans
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|String
name|queryString
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMBeansObjectNameQuery
argument_list|(
name|jmxConnection
argument_list|)
operator|.
name|query
argument_list|(
name|queryString
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|queryMBeans
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|String
name|queryString
parameter_list|,
name|Set
name|attributes
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMBeansAttributeQuery
argument_list|(
name|jmxConnection
argument_list|,
name|attributes
argument_list|)
operator|.
name|query
argument_list|(
name|queryString
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|filterMBeansView
parameter_list|(
name|List
name|mbeans
parameter_list|,
name|Set
name|viewFilter
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|PropertiesViewFilter
argument_list|(
name|viewFilter
argument_list|,
operator|new
name|MapTransformFilter
argument_list|(
operator|new
name|StubQueryFilter
argument_list|(
name|mbeans
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
literal|""
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createQueryString
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|param
parameter_list|)
block|{
return|return
name|query
operator|.
name|replaceAll
argument_list|(
literal|"%1"
argument_list|,
name|param
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createQueryString
parameter_list|(
name|String
name|query
parameter_list|,
name|List
name|params
parameter_list|)
block|{
name|String
name|output
init|=
name|query
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|params
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|output
operator|=
name|output
operator|.
name|replaceAll
argument_list|(
literal|"%"
operator|+
name|count
operator|++
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
specifier|public
specifier|static
name|QueryFilter
name|createMBeansObjectNameQuery
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|)
block|{
return|return
operator|new
name|MBeansObjectNameQueryFilter
argument_list|(
name|jmxConnection
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QueryFilter
name|createMBeansAttributeQuery
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|Set
name|attributes
parameter_list|)
block|{
comment|// Let use be able to accept wildcard queries
comment|// Use regular expressions to filter the query result
comment|// Retrieve the attributes needed
comment|// Retrieve the mbeans object name specified by the query
return|return
operator|new
name|MBeansAttributeQueryFilter
argument_list|(
name|jmxConnection
argument_list|,
name|attributes
argument_list|,
operator|new
name|MBeansObjectNameQueryFilter
argument_list|(
name|jmxConnection
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QueryFilter
name|createMessageQueryFilter
parameter_list|(
name|MBeanServerConnection
name|jmxConnection
parameter_list|,
name|ObjectName
name|destName
parameter_list|)
block|{
return|return
operator|new
name|WildcardToMsgSelectorTransformFilter
argument_list|(
operator|new
name|MessagesQueryFilter
argument_list|(
name|jmxConnection
argument_list|,
name|destName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|filterMessagesView
parameter_list|(
name|List
name|messages
parameter_list|,
name|Set
name|groupViews
parameter_list|,
name|Set
name|attributeViews
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|new
name|PropertiesViewFilter
argument_list|(
name|attributeViews
argument_list|,
operator|new
name|GroupPropertiesViewFilter
argument_list|(
name|groupViews
argument_list|,
operator|new
name|MapTransformFilter
argument_list|(
operator|new
name|StubQueryFilter
argument_list|(
name|messages
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|)
operator|.
name|query
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

