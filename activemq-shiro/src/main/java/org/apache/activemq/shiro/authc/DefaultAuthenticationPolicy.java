begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|ConnectionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectConnectionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|PrincipalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SimplePrincipalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|DefaultAuthenticationPolicy
implements|implements
name|AuthenticationPolicy
block|{
specifier|private
name|boolean
name|vmConnectionAuthenticationRequired
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|systemAccountUsername
init|=
literal|"system"
decl_stmt|;
specifier|private
name|String
name|systemAccountRealmName
init|=
literal|"iniRealm"
decl_stmt|;
specifier|private
name|boolean
name|anonymousAccessAllowed
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|anonymousAccountUsername
init|=
literal|"anonymous"
decl_stmt|;
specifier|private
name|String
name|anonymousAccountRealmName
init|=
literal|"iniRealm"
decl_stmt|;
specifier|public
name|boolean
name|isVmConnectionAuthenticationRequired
parameter_list|()
block|{
return|return
name|vmConnectionAuthenticationRequired
return|;
block|}
specifier|public
name|void
name|setVmConnectionAuthenticationRequired
parameter_list|(
name|boolean
name|vmConnectionAuthenticationRequired
parameter_list|)
block|{
name|this
operator|.
name|vmConnectionAuthenticationRequired
operator|=
name|vmConnectionAuthenticationRequired
expr_stmt|;
block|}
specifier|public
name|String
name|getSystemAccountUsername
parameter_list|()
block|{
return|return
name|systemAccountUsername
return|;
block|}
specifier|public
name|void
name|setSystemAccountUsername
parameter_list|(
name|String
name|systemAccountUsername
parameter_list|)
block|{
name|this
operator|.
name|systemAccountUsername
operator|=
name|systemAccountUsername
expr_stmt|;
block|}
specifier|public
name|String
name|getSystemAccountRealmName
parameter_list|()
block|{
return|return
name|systemAccountRealmName
return|;
block|}
specifier|public
name|void
name|setSystemAccountRealmName
parameter_list|(
name|String
name|systemAccountRealmName
parameter_list|)
block|{
name|this
operator|.
name|systemAccountRealmName
operator|=
name|systemAccountRealmName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAnonymousAccessAllowed
parameter_list|()
block|{
return|return
name|anonymousAccessAllowed
return|;
block|}
specifier|public
name|void
name|setAnonymousAccessAllowed
parameter_list|(
name|boolean
name|anonymousAccessAllowed
parameter_list|)
block|{
name|this
operator|.
name|anonymousAccessAllowed
operator|=
name|anonymousAccessAllowed
expr_stmt|;
block|}
specifier|public
name|String
name|getAnonymousAccountUsername
parameter_list|()
block|{
return|return
name|anonymousAccountUsername
return|;
block|}
specifier|public
name|void
name|setAnonymousAccountUsername
parameter_list|(
name|String
name|anonymousAccountUsername
parameter_list|)
block|{
name|this
operator|.
name|anonymousAccountUsername
operator|=
name|anonymousAccountUsername
expr_stmt|;
block|}
specifier|public
name|String
name|getAnonymousAccountRealmName
parameter_list|()
block|{
return|return
name|anonymousAccountRealmName
return|;
block|}
specifier|public
name|void
name|setAnonymousAccountRealmName
parameter_list|(
name|String
name|anonymousAccountRealmName
parameter_list|)
block|{
name|this
operator|.
name|anonymousAccountRealmName
operator|=
name|anonymousAccountRealmName
expr_stmt|;
block|}
comment|/**      * Returns {@code true} if the client connection has supplied credentials to authenticate itself, {@code false}      * otherwise.      *      * @param conn the client's connection context      * @return {@code true} if the client connection has supplied credentials to authenticate itself, {@code false}      *         otherwise.      */
specifier|protected
name|boolean
name|credentialsAvailable
parameter_list|(
name|ConnectionReference
name|conn
parameter_list|)
block|{
return|return
name|conn
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
operator|||
name|conn
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAuthenticationRequired
parameter_list|(
name|SubjectConnectionReference
name|conn
parameter_list|)
block|{
name|Subject
name|subject
init|=
name|conn
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
comment|//already authenticated:
return|return
literal|false
return|;
block|}
comment|//subject is not authenticated.  Authentication is required by default for all accounts other than
comment|//the anonymous user (if enabled) or the vm account (if enabled)
if|if
condition|(
name|isAnonymousAccessAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|isAnonymousAccount
argument_list|(
name|subject
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|isVmConnectionAuthenticationRequired
argument_list|()
condition|)
block|{
if|if
condition|(
name|isSystemAccount
argument_list|(
name|subject
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|isAnonymousAccount
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|PrincipalCollection
name|pc
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
return|return
name|pc
operator|!=
literal|null
operator|&&
name|matches
argument_list|(
name|pc
argument_list|,
name|anonymousAccountUsername
argument_list|,
name|anonymousAccountRealmName
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isSystemAccount
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|PrincipalCollection
name|pc
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
return|return
name|pc
operator|!=
literal|null
operator|&&
name|matches
argument_list|(
name|pc
argument_list|,
name|systemAccountUsername
argument_list|,
name|systemAccountRealmName
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|matches
parameter_list|(
name|PrincipalCollection
name|principals
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|realmName
parameter_list|)
block|{
name|Collection
name|realmPrincipals
init|=
name|principals
operator|.
name|fromRealm
argument_list|(
name|realmName
argument_list|)
decl_stmt|;
if|if
condition|(
name|realmPrincipals
operator|!=
literal|null
operator|&&
operator|!
name|realmPrincipals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|realmPrincipals
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|isSystemConnection
parameter_list|(
name|ConnectionReference
name|conn
parameter_list|)
block|{
name|String
name|remoteAddress
init|=
name|conn
operator|.
name|getConnectionContext
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
return|return
name|remoteAddress
operator|.
name|startsWith
argument_list|(
literal|"vm:"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|customizeSubject
parameter_list|(
name|Subject
operator|.
name|Builder
name|subjectBuilder
parameter_list|,
name|ConnectionReference
name|conn
parameter_list|)
block|{
comment|// We only need to specify a custom identity or authentication state if a normal authentication will not occur.
comment|// If the client supplied connection credentials, the AuthenticationFilter will perform a normal authentication,
comment|// so we should exit immediately:
if|if
condition|(
name|credentialsAvailable
argument_list|(
name|conn
argument_list|)
condition|)
block|{
return|return;
block|}
comment|//The connection cannot be authenticated, potentially implying a system or anonymous connection.  Check if so:
if|if
condition|(
name|isAssumeIdentity
argument_list|(
name|conn
argument_list|)
condition|)
block|{
name|PrincipalCollection
name|assumedIdentity
init|=
name|createAssumedIdentity
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|subjectBuilder
operator|.
name|principals
argument_list|(
name|assumedIdentity
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns {@code true} if an unauthenticated connection should still assume a specific identity, {@code false}      * otherwise.  This method will<em>only</em> be called if there are no connection      * {@link #credentialsAvailable(ConnectionReference) credentialsAvailable}.      * If a client supplies connection credentials, they will always be used to authenticate the client with that      * identity.      *<p/>      * If {@code true} is returned, the assumed identity will be returned by      * {@link #createAssumedIdentity(ConnectionReference) createAssumedIdentity}.      *<h3>Warning</h3>      * This method exists primarily to support the system and anonymous accounts - it is probably unsafe to return      * {@code true} in most other scenarios.      *      * @param conn a reference to the client's connection      * @return {@code true} if an unauthenticated connection should still assume a specific identity, {@code false}      *         otherwise.      */
specifier|protected
name|boolean
name|isAssumeIdentity
parameter_list|(
name|ConnectionReference
name|conn
parameter_list|)
block|{
return|return
name|isAnonymousAccessAllowed
argument_list|()
operator|||
operator|(
name|isSystemConnection
argument_list|(
name|conn
argument_list|)
operator|&&
operator|!
name|isVmConnectionAuthenticationRequired
argument_list|()
operator|)
return|;
block|}
comment|/**      * Returns a Shiro {@code PrincipalCollection} representing the identity to assume (without true authentication) for      * the specified Connection.      *<p/>      * This method is<em>only</em> called if {@link #isAssumeIdentity(ConnectionReference)} is {@code true}.      *      * @param conn a reference to the client's connection      * @return a Shiro {@code PrincipalCollection} representing the identity to assume (without true authentication) for      *         the specified Connection.      */
specifier|protected
name|PrincipalCollection
name|createAssumedIdentity
parameter_list|(
name|ConnectionReference
name|conn
parameter_list|)
block|{
comment|//anonymous by default:
name|String
name|username
init|=
name|anonymousAccountUsername
decl_stmt|;
name|String
name|realmName
init|=
name|anonymousAccountRealmName
decl_stmt|;
comment|//vm connections are special and should assume the system account:
if|if
condition|(
name|isSystemConnection
argument_list|(
name|conn
argument_list|)
condition|)
block|{
name|username
operator|=
name|systemAccountUsername
expr_stmt|;
name|realmName
operator|=
name|systemAccountRealmName
expr_stmt|;
block|}
return|return
operator|new
name|SimplePrincipalCollection
argument_list|(
name|username
argument_list|,
name|realmName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

