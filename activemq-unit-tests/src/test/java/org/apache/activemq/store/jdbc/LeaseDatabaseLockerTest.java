begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|AbstractLocker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
operator|.
name|DefaultJDBCAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|Expectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|Mockery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|lib
operator|.
name|legacy
operator|.
name|ClassImposteriser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|LeaseDatabaseLockerTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LeaseDatabaseLockerTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|JDBCPersistenceAdapter
name|jdbc
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
name|DataSource
name|dataSource
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUpStore
parameter_list|()
throws|throws
name|Exception
block|{
name|jdbc
operator|=
operator|new
name|JDBCPersistenceAdapter
argument_list|()
expr_stmt|;
name|dataSource
operator|=
name|jdbc
operator|.
name|getDataSource
argument_list|()
expr_stmt|;
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|jdbc
operator|.
name|setBrokerService
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|getAdapter
argument_list|()
operator|.
name|doCreateTables
argument_list|(
name|jdbc
operator|.
name|getTransactionContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopDerby
parameter_list|()
block|{
name|DataSourceServiceSupport
operator|.
name|shutdownDefaultDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockInterleave
parameter_list|()
throws|throws
name|Exception
block|{
name|LeaseDatabaseLocker
name|lockerA
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|lockerA
operator|.
name|setLeaseHolderId
argument_list|(
literal|"First"
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLocker
argument_list|(
name|lockerA
argument_list|)
expr_stmt|;
specifier|final
name|LeaseDatabaseLocker
name|lockerB
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|lockerB
operator|.
name|setLeaseHolderId
argument_list|(
literal|"Second"
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLocker
argument_list|(
name|lockerB
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|blocked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|lockerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First has lock"
argument_list|,
name|lockerA
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|lockerBStarting
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|lockerBStarting
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|lockerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|blocked
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|lockerBStarting
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|lockerB
operator|.
name|getLockAcquireSleepInterval
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"B is blocked"
argument_list|,
name|blocked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"A is good"
argument_list|,
name|lockerA
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|lockerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|lockerB
operator|.
name|getLockAcquireSleepInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"lockerB has the lock"
argument_list|,
name|blocked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|lockerB
operator|.
name|stop
argument_list|()
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockAcquireRace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// build a fake lock
specifier|final
name|String
name|fakeId
init|=
literal|"Anon"
decl_stmt|;
specifier|final
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|PreparedStatement
name|statement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|jdbc
operator|.
name|getStatements
argument_list|()
operator|.
name|getLeaseObtainStatement
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|fakeId
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|now
operator|+
literal|30000
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we got the lease"
argument_list|,
literal|1
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
specifier|final
name|LeaseDatabaseLocker
name|lockerA
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|lockerA
operator|.
name|setLeaseHolderId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLocker
argument_list|(
name|lockerA
argument_list|)
expr_stmt|;
specifier|final
name|LeaseDatabaseLocker
name|lockerB
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|lockerB
operator|.
name|setLeaseHolderId
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLocker
argument_list|(
name|lockerB
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|LeaseDatabaseLocker
argument_list|>
name|lockedSet
init|=
operator|new
name|HashSet
argument_list|<
name|LeaseDatabaseLocker
argument_list|>
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|lockerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|lockedSet
operator|.
name|add
argument_list|(
name|lockerA
argument_list|)
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|lockerB
operator|.
name|start
argument_list|()
expr_stmt|;
name|lockedSet
operator|.
name|add
argument_list|(
name|lockerB
argument_list|)
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// sleep for a bit till both are alive
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no start"
argument_list|,
name|lockedSet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"A is blocked"
argument_list|,
name|lockerA
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"B is blocked"
argument_list|,
name|lockerB
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"releasing phony lock "
operator|+
name|fakeId
argument_list|)
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|jdbc
operator|.
name|getStatements
argument_list|()
operator|.
name|getLeaseUpdateStatement
argument_list|()
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|fakeId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"we released "
operator|+
name|fakeId
argument_list|,
literal|1
argument_list|,
name|statement
operator|.
name|executeUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"released "
operator|+
name|fakeId
argument_list|)
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|AbstractLocker
operator|.
name|DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one locker started"
argument_list|,
literal|1
argument_list|,
name|lockedSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"one isAlive"
argument_list|,
name|lockerA
operator|.
name|keepAlive
argument_list|()
operator|||
name|lockerB
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|LeaseDatabaseLocker
name|winner
init|=
name|lockedSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|winner
operator|.
name|stop
argument_list|()
expr_stmt|;
name|lockedSet
operator|.
name|remove
argument_list|(
name|winner
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|AbstractLocker
operator|.
name|DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one locker started"
argument_list|,
literal|1
argument_list|,
name|lockedSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lockedSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|printLockTable
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiffOffsetAhead
parameter_list|()
throws|throws
name|Exception
block|{
name|LeaseDatabaseLocker
name|underTest
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"when ahead of db adjustment is negative"
argument_list|,
name|callDiffOffset
argument_list|(
name|underTest
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60000
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiffOffsetBehind
parameter_list|()
throws|throws
name|Exception
block|{
name|LeaseDatabaseLocker
name|underTest
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"when behind db adjustment is positive"
argument_list|,
name|callDiffOffset
argument_list|(
name|underTest
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|60000
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiffIngoredIfLessthanMaxAllowableDiffFromDBTime
parameter_list|()
throws|throws
name|Exception
block|{
name|LeaseDatabaseLocker
name|underTest
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|underTest
operator|.
name|setMaxAllowableDiffFromDBTime
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no adjust when under limit"
argument_list|,
literal|0
argument_list|,
name|callDiffOffset
argument_list|(
name|underTest
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|40000
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|callDiffOffset
parameter_list|(
name|LeaseDatabaseLocker
name|underTest
parameter_list|,
specifier|final
name|long
name|dbTime
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockery
name|context
init|=
operator|new
name|Mockery
argument_list|()
block|{
block|{
name|setImposteriser
parameter_list|(
name|ClassImposteriser
operator|.
name|INSTANCE
parameter_list|)
constructor_decl|;
block|}
block|}
decl_stmt|;
specifier|final
name|Statements
name|statements
init|=
name|context
operator|.
name|mock
argument_list|(
name|Statements
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|JDBCPersistenceAdapter
name|jdbcPersistenceAdapter
init|=
name|context
operator|.
name|mock
argument_list|(
name|JDBCPersistenceAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|connection
init|=
name|context
operator|.
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PreparedStatement
name|preparedStatement
init|=
name|context
operator|.
name|mock
argument_list|(
name|PreparedStatement
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ResultSet
name|resultSet
init|=
name|context
operator|.
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Timestamp
name|timestamp
init|=
name|context
operator|.
name|mock
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|checking
argument_list|(
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|allowing
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
operator|.
name|getStatements
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|statements
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
parameter_list|(
name|jdbcPersistenceAdapter
parameter_list|)
constructor_decl|;
name|allowing
parameter_list|(
name|statements
parameter_list|)
constructor_decl|;
name|allowing
argument_list|(
name|connection
argument_list|)
operator|.
name|prepareStatement
argument_list|(
name|with
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|preparedStatement
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
parameter_list|(
name|connection
parameter_list|)
constructor_decl|;
name|allowing
argument_list|(
name|preparedStatement
argument_list|)
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|resultSet
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|resultSet
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|resultSet
argument_list|)
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|timestamp
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|dbTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|configure
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setLockable
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
expr_stmt|;
return|return
name|underTest
operator|.
name|determineTimeDifference
argument_list|(
name|connection
argument_list|)
return|;
block|}
specifier|private
name|void
name|printLockTable
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultJDBCAdapter
operator|.
name|printQuery
argument_list|(
name|connection
argument_list|,
literal|"SELECT * from ACTIVEMQ_LOCK"
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

