begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_comment
comment|/**  * A useful base class for implementing a {@link MessageProducer}  *  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ActiveMQMessageProducerSupport
implements|implements
name|MessageProducer
implements|,
name|Closeable
block|{
specifier|protected
name|ActiveMQSession
name|session
decl_stmt|;
specifier|protected
name|boolean
name|disableMessageID
decl_stmt|;
specifier|protected
name|boolean
name|disableMessageTimestamp
decl_stmt|;
specifier|protected
name|int
name|defaultDeliveryMode
decl_stmt|;
specifier|protected
name|int
name|defaultPriority
decl_stmt|;
specifier|protected
name|long
name|defaultTimeToLive
decl_stmt|;
specifier|protected
name|int
name|sendTimeout
init|=
literal|0
decl_stmt|;
specifier|public
name|ActiveMQMessageProducerSupport
parameter_list|(
name|ActiveMQSession
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|disableMessageTimestamp
operator|=
name|session
operator|.
name|connection
operator|.
name|isDisableTimeStampsByDefault
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets whether message IDs are disabled.      *<P>      * Since message IDs take some effort to create and increase a message's      * size, some JMS providers may be able to optimize message overhead if      * they are given a hint that the message ID is not used by an application.      * By calling the<CODE>setDisableMessageID</CODE> method on this message      * producer, a JMS client enables this potential optimization for all      * messages sent by this message producer. If the JMS provider accepts this      * hint, these messages must have the message ID set to null; if the      * provider ignores the hint, the message ID must be set to its normal      * unique value.      *<P>      * Message IDs are enabled by default.      *      * @param value indicates if message IDs are disabled      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to      *                      some internal error.      */
specifier|public
name|void
name|setDisableMessageID
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|disableMessageID
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Gets an indication of whether message IDs are disabled.      *      * @return an indication of whether message IDs are disabled      * @throws javax.jms.JMSException if the JMS provider fails to determine if message IDs are      *                      disabled due to some internal error.      */
specifier|public
name|boolean
name|getDisableMessageID
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|disableMessageID
return|;
block|}
comment|/**      * Sets whether message timestamps are disabled.      *<P>      * Since timestamps take some effort to create and increase a message's      * size, some JMS providers may be able to optimize message overhead if      * they are given a hint that the timestamp is not used by an application.      * By calling the<CODE>setDisableMessageTimestamp</CODE> method on this      * message producer, a JMS client enables this potential optimization for      * all messages sent by this message producer. If the JMS provider accepts      * this hint, these messages must have the timestamp set to zero; if the      * provider ignores the hint, the timestamp must be set to its normal      * value.      *<P>      * Message timestamps are enabled by default.      *      * @param value indicates if message timestamps are disabled      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to      *                      some internal error.      */
specifier|public
name|void
name|setDisableMessageTimestamp
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|disableMessageTimestamp
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Gets an indication of whether message timestamps are disabled.      *      * @return an indication of whether message timestamps are disabled      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to      *                      some internal error.      */
specifier|public
name|boolean
name|getDisableMessageTimestamp
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|disableMessageTimestamp
return|;
block|}
comment|/**      * Sets the producer's default delivery mode.      *<P>      * Delivery mode is set to<CODE>PERSISTENT</CODE> by default.      *      * @param newDeliveryMode the message delivery mode for this message producer; legal      *                        values are<code>DeliveryMode.NON_PERSISTENT</code> and      *<code>DeliveryMode.PERSISTENT</code>      * @throws javax.jms.JMSException if the JMS provider fails to set the delivery mode due to      *                      some internal error.      * @see javax.jms.MessageProducer#getDeliveryMode      * @see javax.jms.DeliveryMode#NON_PERSISTENT      * @see javax.jms.DeliveryMode#PERSISTENT      * @see javax.jms.Message#DEFAULT_DELIVERY_MODE      */
specifier|public
name|void
name|setDeliveryMode
parameter_list|(
name|int
name|newDeliveryMode
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|newDeliveryMode
operator|!=
name|DeliveryMode
operator|.
name|PERSISTENT
operator|&&
name|newDeliveryMode
operator|!=
name|DeliveryMode
operator|.
name|NON_PERSISTENT
condition|)
block|{
throw|throw
operator|new
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
argument_list|(
literal|"unknown delivery mode: "
operator|+
name|newDeliveryMode
argument_list|)
throw|;
block|}
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultDeliveryMode
operator|=
name|newDeliveryMode
expr_stmt|;
block|}
comment|/**      * Gets the producer's default delivery mode.      *      * @return the message delivery mode for this message producer      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to      *                      some internal error.      */
specifier|public
name|int
name|getDeliveryMode
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|defaultDeliveryMode
return|;
block|}
comment|/**      * Sets the producer's default priority.      *<P>      * The JMS API defines ten levels of priority value, with 0 as the lowest      * priority and 9 as the highest. Clients should consider priorities 0-4 as      * gradations of normal priority and priorities 5-9 as gradations of      * expedited priority. Priority is set to 4 by default.      *      * @param newDefaultPriority the message priority for this message producer; must be a      *                           value between 0 and 9      * @throws javax.jms.JMSException if the JMS provider fails to set the delivery mode due to      *                      some internal error.      * @see javax.jms.MessageProducer#getPriority      * @see javax.jms.Message#DEFAULT_PRIORITY      */
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|newDefaultPriority
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|newDefaultPriority
argument_list|<
literal|0
operator|||
name|newDefaultPriority
argument_list|>
literal|9
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"default priority must be a value between 0 and 9"
argument_list|)
throw|;
block|}
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultPriority
operator|=
name|newDefaultPriority
expr_stmt|;
block|}
comment|/**      * Gets the producer's default priority.      *      * @return the message priority for this message producer      * @throws javax.jms.JMSException if the JMS provider fails to close the producer due to      *                      some internal error.      * @see javax.jms.MessageProducer#setPriority      */
specifier|public
name|int
name|getPriority
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|defaultPriority
return|;
block|}
comment|/**      * Sets the default length of time in milliseconds from its dispatch time      * that a produced message should be retained by the message system.      *<P>      * Time to live is set to zero by default.      *      * @param timeToLive the message time to live in milliseconds; zero is unlimited      * @throws javax.jms.JMSException if the JMS provider fails to set the time to live due to      *                      some internal error.      * @see javax.jms.MessageProducer#getTimeToLive      * @see javax.jms.Message#DEFAULT_TIME_TO_LIVE      */
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|long
name|timeToLive
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|timeToLive
operator|<
literal|0L
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot set a negative timeToLive"
argument_list|)
throw|;
block|}
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultTimeToLive
operator|=
name|timeToLive
expr_stmt|;
block|}
comment|/**      * Gets the default length of time in milliseconds from its dispatch time      * that a produced message should be retained by the message system.      *      * @return the message time to live in milliseconds; zero is unlimited      * @throws javax.jms.JMSException if the JMS provider fails to get the time to live due to      *                      some internal error.      * @see javax.jms.MessageProducer#setTimeToLive      */
specifier|public
name|long
name|getTimeToLive
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|defaultTimeToLive
return|;
block|}
comment|/**      * Sends a message using the<CODE>MessageProducer</CODE>'s default      * delivery mode, priority, and time to live.      *      * @param message the message to send      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some      *                                     internal error.      * @throws javax.jms.MessageFormatException      if an invalid message is specified.      * @throws javax.jms.InvalidDestinationException if a client uses this method with a<CODE>      *                                     MessageProducer</CODE> with an invalid destination.      * @throws UnsupportedOperationException      *                                     if a client uses this method with a<CODE>      *                                     MessageProducer</CODE> that did not specify a      *                                     destination at creation time.      * @see javax.jms.Session#createProducer      * @see javax.jms.MessageProducer      * @since 1.1      */
specifier|public
name|void
name|send
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|send
argument_list|(
name|this
operator|.
name|getDestination
argument_list|()
argument_list|,
name|message
argument_list|,
name|this
operator|.
name|defaultDeliveryMode
argument_list|,
name|this
operator|.
name|defaultPriority
argument_list|,
name|this
operator|.
name|defaultTimeToLive
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a message to the destination, specifying delivery mode, priority,      * and time to live.      *      * @param message      the message to send      * @param deliveryMode the delivery mode to use      * @param priority     the priority for this message      * @param timeToLive   the message's lifetime (in milliseconds)      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some      *                                     internal error.      * @throws javax.jms.MessageFormatException      if an invalid message is specified.      * @throws javax.jms.InvalidDestinationException if a client uses this method with a<CODE>      *                                     MessageProducer</CODE> with an invalid destination.      * @throws UnsupportedOperationException      *                                     if a client uses this method with a<CODE>      *                                     MessageProducer</CODE> that did not specify a      *                                     destination at creation time.      * @see javax.jms.Session#createProducer      * @since 1.1      */
specifier|public
name|void
name|send
parameter_list|(
name|Message
name|message
parameter_list|,
name|int
name|deliveryMode
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|timeToLive
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|send
argument_list|(
name|this
operator|.
name|getDestination
argument_list|()
argument_list|,
name|message
argument_list|,
name|deliveryMode
argument_list|,
name|priority
argument_list|,
name|timeToLive
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a message to a destination for an unidentified message producer.      * Uses the<CODE>MessageProducer</CODE>'s default delivery mode,      * priority, and time to live.      *<P>      * Typically, a message producer is assigned a destination at creation      * time; however, the JMS API also supports unidentified message producers,      * which require that the destination be supplied every time a message is      * sent.      *      * @param destination the destination to send this message to      * @param message     the message to send      * @throws javax.jms.JMSException                if the JMS provider fails to send the message due to some      *                                     internal error.      * @throws javax.jms.MessageFormatException      if an invalid message is specified.      * @throws javax.jms.InvalidDestinationException if a client uses this method with an invalid destination.      * @throws UnsupportedOperationException      *                                     if a client uses this method with a<CODE>      *                                     MessageProducer</CODE> that specified a destination at      *                                     creation time.      * @see javax.jms.Session#createProducer      * @see javax.jms.MessageProducer      */
specifier|public
name|void
name|send
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|message
argument_list|,
name|this
operator|.
name|defaultDeliveryMode
argument_list|,
name|this
operator|.
name|defaultPriority
argument_list|,
name|this
operator|.
name|defaultTimeToLive
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IllegalStateException
function_decl|;
comment|/**      * @return the sendTimeout      */
specifier|public
name|int
name|getSendTimeout
parameter_list|()
block|{
return|return
name|sendTimeout
return|;
block|}
comment|/**      * @param sendTimeout the sendTimeout to set      */
specifier|public
name|void
name|setSendTimeout
parameter_list|(
name|int
name|sendTimeout
parameter_list|)
block|{
name|this
operator|.
name|sendTimeout
operator|=
name|sendTimeout
expr_stmt|;
block|}
block|}
end_class

end_unit

