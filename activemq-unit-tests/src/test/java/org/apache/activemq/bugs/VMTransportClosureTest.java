begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|VMTransportClosureTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VMTransportClosureTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MAX_TEST_TIME_MILLIS
init|=
literal|300000
decl_stmt|;
comment|// 5min
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ATTEMPTS
init|=
literal|100000
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setMaxTestTime
argument_list|(
name|MAX_TEST_TIME_MILLIS
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * EmbeddedBrokerTestSupport.createBroker() binds the broker to a VM 	 * transport address, which results in a call to 	 * VMTransportFactory.doBind(location): 	 *<p> 	 *<code> 	 *     public TransportServer doBind(URI location) throws IOException { 	 *        return bind(location, false); 	 *} 	 *</code> 	 *</p> 	 * As a result, VMTransportServer.disposeOnDisconnect is<code>false</code>. 	 * To expose the bug, we need to have VMTransportServer.disposeOnDisconnect 	 *<code>true</code>, which is the case when the VMTransportServer is not 	 * already bound when the first connection is made. 	 */
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
name|isPersistent
argument_list|()
argument_list|)
expr_stmt|;
comment|// answer.addConnector(bindAddress);
return|return
name|answer
return|;
block|}
comment|/** 	 * This test demonstrates how the "disposeOnDisonnect" feature of 	 * VMTransportServer can incorrectly close all VM connections to the local 	 * broker. 	 */
specifier|public
name|void
name|testPrematureClosure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Open a persistent connection to the local broker. The persistent
comment|// connection is maintained through the test and should prevent the
comment|// VMTransportServer from stopping itself when the local transport is
comment|// closed.
name|ActiveMQConnection
name|persistentConn
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|()
decl_stmt|;
name|persistentConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|persistentConn
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ATTEMPTS
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt: "
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// Open and close a local transport connection. As is done by by
comment|// most users of the transport, ensure that the transport is stopped
comment|// when closed by the peer (via ShutdownInfo). Closing the local
comment|// transport should not affect the persistent connection.
specifier|final
name|Transport
name|localTransport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
name|broker
operator|.
name|getVmConnectorURI
argument_list|()
argument_list|)
decl_stmt|;
name|localTransport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|instanceof
name|ShutdownInfo
condition|)
block|{
try|try
block|{
name|localTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
comment|// ignore
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{
comment|// ignore
block|}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{
comment|// ignore
block|}
block|}
argument_list|)
expr_stmt|;
name|localTransport
operator|.
name|start
argument_list|()
expr_stmt|;
name|localTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Ensure that the persistent connection is still usable.
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createMessage
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|persistentConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

