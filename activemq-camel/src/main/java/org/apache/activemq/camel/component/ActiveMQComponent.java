begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|SingleConnectionFactory
import|;
end_import

begin_comment
comment|/**  * The<a href="http://activemq.apache.org/camel/activemq.html">ActiveMQ Component</a>  *  *   */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQComponent
extends|extends
name|JmsComponent
block|{
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|SingleConnectionFactory
argument_list|>
name|singleConnectionFactoryList
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|SingleConnectionFactory
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Service
argument_list|>
name|pooledConnectionFactoryServiceList
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Service
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|exposeAllQueues
decl_stmt|;
specifier|private
name|CamelEndpointLoader
name|endpointLoader
decl_stmt|;
comment|/**      * Creates an<a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>      *      * @return the created component      */
specifier|public
specifier|static
name|ActiveMQComponent
name|activeMQComponent
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQComponent
argument_list|()
return|;
block|}
comment|/**      * Creates an<a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>      * connecting to the given<a href="http://activemq.apache.org/configuring-transports.html">broker URL</a>      *      * @param brokerURL the URL to connect to      * @return the created component      */
specifier|public
specifier|static
name|ActiveMQComponent
name|activeMQComponent
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
name|ActiveMQComponent
name|answer
init|=
operator|new
name|ActiveMQComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|answer
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setBrokerURL
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
comment|// set the connection factory with the provided broker url
name|answer
operator|.
name|setConnectionFactory
argument_list|(
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|public
name|ActiveMQComponent
parameter_list|()
block|{     }
specifier|public
name|ActiveMQComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ActiveMQComponent
parameter_list|(
name|ActiveMQConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBrokerURL
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setBrokerURL
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isExposeAllQueues
parameter_list|()
block|{
return|return
name|exposeAllQueues
return|;
block|}
comment|/**      * If enabled this will cause all Queues in the ActiveMQ broker to be eagerly populated into the CamelContext      * so that they can be easily browsed by any Camel tooling. This option is disabled by default.      *      * @param exposeAllQueues      */
specifier|public
name|void
name|setExposeAllQueues
parameter_list|(
name|boolean
name|exposeAllQueues
parameter_list|)
block|{
name|this
operator|.
name|exposeAllQueues
operator|=
name|exposeAllQueues
expr_stmt|;
block|}
specifier|public
name|void
name|setUsePooledConnection
parameter_list|(
name|boolean
name|usePooledConnection
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setUsePooledConnection
argument_list|(
name|usePooledConnection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setUseSingleConnection
parameter_list|(
name|boolean
name|useSingleConnection
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setUseSingleConnection
argument_list|(
name|useSingleConnection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addPooledConnectionFactoryService
parameter_list|(
name|Service
name|pooledConnectionFactoryService
parameter_list|)
block|{
name|pooledConnectionFactoryServiceList
operator|.
name|add
argument_list|(
name|pooledConnectionFactoryService
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSingleConnectionFactory
parameter_list|(
name|SingleConnectionFactory
name|singleConnectionFactory
parameter_list|)
block|{
name|singleConnectionFactoryList
operator|.
name|add
argument_list|(
name|singleConnectionFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|isExposeAllQueues
argument_list|()
condition|)
block|{
name|endpointLoader
operator|=
operator|new
name|CamelEndpointLoader
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|endpointLoader
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|endpointLoader
operator|!=
literal|null
condition|)
block|{
name|endpointLoader
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|endpointLoader
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Service
name|s
range|:
name|pooledConnectionFactoryServiceList
control|)
block|{
name|s
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|pooledConnectionFactoryServiceList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|SingleConnectionFactory
name|s
range|:
name|singleConnectionFactoryList
control|)
block|{
name|s
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|singleConnectionFactoryList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|JmsConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|configuration
operator|)
operator|.
name|setActiveMQComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|JmsConfiguration
name|createConfiguration
parameter_list|()
block|{
name|ActiveMQConfiguration
name|answer
init|=
operator|new
name|ActiveMQConfiguration
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setActiveMQComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

