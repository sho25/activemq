begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ScheduledMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|JobSchedulerViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests of the JMX JobSchedulerStore management MBean.  */
end_comment

begin_class
specifier|public
class|class
name|JobSchedulerJmxManagementTests
extends|extends
name|JobSchedulerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobSchedulerJmxManagementTests
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testJobSchedulerMBeanIsRegistered
parameter_list|()
throws|throws
name|Exception
block|{
name|JobSchedulerViewMBean
name|view
init|=
name|getJobSchedulerMBean
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNumberOfJobs
parameter_list|()
throws|throws
name|Exception
block|{
name|JobSchedulerViewMBean
name|view
init|=
name|getJobSchedulerMBean
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleMessage
argument_list|(
literal|60000
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleMessage
argument_list|(
literal|60000
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemvoeJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobSchedulerViewMBean
name|view
init|=
name|getJobSchedulerMBean
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleMessage
argument_list|(
literal|60000
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|TabularData
name|jobs
init|=
name|view
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|jobs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|jobId
init|=
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|key
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to remove Job: {}"
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|view
operator|.
name|removeJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemvoeJobInRange
parameter_list|()
throws|throws
name|Exception
block|{
name|JobSchedulerViewMBean
name|view
init|=
name|getJobSchedulerMBean
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleMessage
argument_list|(
literal|60000
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|now
init|=
name|JobSupport
operator|.
name|getDateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|later
init|=
name|JobSupport
operator|.
name|getDateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|120
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|view
operator|.
name|removeAllJobs
argument_list|(
name|now
argument_list|,
name|later
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNextScheduledJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobSchedulerViewMBean
name|view
init|=
name|getJobSchedulerMBean
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleMessage
argument_list|(
literal|60000
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|before
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|57
operator|*
literal|1000
decl_stmt|;
name|long
name|toLate
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|63
operator|*
literal|1000
decl_stmt|;
name|String
name|next
init|=
name|view
operator|.
name|getNextScheduleTime
argument_list|()
decl_stmt|;
name|long
name|nextTime
init|=
name|JobSupport
operator|.
name|getDataTime
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Next Scheduled Time: {}"
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nextTime
operator|>
name|before
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nextTime
operator|<
name|toLate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetExecutionCount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JobSchedulerViewMBean
name|view
init|=
name|getJobSchedulerMBean
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|scheduleMessage
argument_list|(
literal|10000
argument_list|,
literal|1000
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|TabularData
name|jobs
init|=
name|view
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jobs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jobId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|jobs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|jobId
operator|=
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|key
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|fixedJobId
init|=
name|jobId
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to get execution count for Job: {}"
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|view
operator|.
name|getExecutionCount
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should execute again"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|view
operator|.
name|getExecutionCount
argument_list|(
name|fixedJobId
argument_list|)
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseJmx
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|scheduleMessage
parameter_list|(
name|int
name|time
parameter_list|,
name|int
name|period
parameter_list|,
name|int
name|repeat
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test msg"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setLongProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_DELAY
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|message
operator|.
name|setLongProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_PERIOD
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_REPEAT
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

