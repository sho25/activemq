begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|load
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageAudit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|perf
operator|.
name|PerfRate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|LoadClient
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LoadClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|int
name|SLEEP_TIME
init|=
literal|2
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Destination
name|startDestination
decl_stmt|;
specifier|protected
name|Destination
name|nextDestination
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|MessageProducer
name|producer
decl_stmt|;
specifier|protected
name|PerfRate
name|rate
init|=
operator|new
name|PerfRate
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|deliveryMode
init|=
name|DeliveryMode
operator|.
name|PERSISTENT
decl_stmt|;
specifier|protected
name|ActiveMQMessageAudit
name|audit
init|=
operator|new
name|ActiveMQMessageAudit
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|connectionPerMessage
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|running
decl_stmt|;
specifier|protected
name|int
name|timeout
init|=
literal|10000
decl_stmt|;
specifier|public
name|LoadClient
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|rate
operator|.
name|reset
argument_list|()
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|connectionPerMessage
condition|)
block|{
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|getConsumeDestination
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|getSendDestination
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|this
operator|.
name|deliveryMode
argument_list|)
expr_stmt|;
block|}
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|running
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|running
condition|)
block|{
name|String
name|result
init|=
name|consume
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|send
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|rate
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|running
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|name
operator|+
literal|" Failed to consume!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|consume
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|con
init|=
literal|null
decl_stmt|;
name|MessageConsumer
name|c
init|=
name|consumer
decl_stmt|;
if|if
condition|(
name|connectionPerMessage
condition|)
block|{
name|con
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|c
operator|=
name|s
operator|.
name|createConsumer
argument_list|(
name|getConsumeDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TextMessage
name|result
init|=
operator|(
name|TextMessage
operator|)
name|c
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|audit
operator|.
name|isDuplicate
argument_list|(
name|result
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Received duplicate "
operator|+
name|result
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|audit
operator|.
name|isInOrder
argument_list|(
name|result
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Out of order "
operator|+
name|result
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|connectionPerMessage
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
comment|//give the broker a chance
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
operator|!=
literal|null
condition|?
name|result
operator|.
name|getText
argument_list|()
else|:
literal|null
return|;
block|}
specifier|protected
name|void
name|send
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|con
init|=
name|connection
decl_stmt|;
name|MessageProducer
name|p
init|=
name|producer
decl_stmt|;
name|Session
name|s
init|=
name|session
decl_stmt|;
if|if
condition|(
name|connectionPerMessage
condition|)
block|{
name|con
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
name|s
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|p
operator|=
name|s
operator|.
name|createProducer
argument_list|(
name|getSendDestination
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
block|}
name|TextMessage
name|message
init|=
name|s
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|p
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionPerMessage
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
comment|//give the broker a chance
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Destination
name|getStartDestination
parameter_list|()
block|{
return|return
name|startDestination
return|;
block|}
specifier|public
name|void
name|setStartDestination
parameter_list|(
name|Destination
name|startDestination
parameter_list|)
block|{
name|this
operator|.
name|startDestination
operator|=
name|startDestination
expr_stmt|;
block|}
specifier|public
name|Destination
name|getNextDestination
parameter_list|()
block|{
return|return
name|nextDestination
return|;
block|}
specifier|public
name|void
name|setNextDestination
parameter_list|(
name|Destination
name|nextDestination
parameter_list|)
block|{
name|this
operator|.
name|nextDestination
operator|=
name|nextDestination
expr_stmt|;
block|}
specifier|public
name|int
name|getDeliveryMode
parameter_list|()
block|{
return|return
name|deliveryMode
return|;
block|}
specifier|public
name|void
name|setDeliveryMode
parameter_list|(
name|int
name|deliveryMode
parameter_list|)
block|{
name|this
operator|.
name|deliveryMode
operator|=
name|deliveryMode
expr_stmt|;
block|}
specifier|public
name|boolean
name|isConnectionPerMessage
parameter_list|()
block|{
return|return
name|connectionPerMessage
return|;
block|}
specifier|public
name|void
name|setConnectionPerMessage
parameter_list|(
name|boolean
name|connectionPerMessage
parameter_list|)
block|{
name|this
operator|.
name|connectionPerMessage
operator|=
name|connectionPerMessage
expr_stmt|;
block|}
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
specifier|public
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
specifier|protected
name|Destination
name|getSendDestination
parameter_list|()
block|{
return|return
name|nextDestination
return|;
block|}
specifier|protected
name|Destination
name|getConsumeDestination
parameter_list|()
block|{
return|return
name|startDestination
return|;
block|}
block|}
end_class

end_unit

