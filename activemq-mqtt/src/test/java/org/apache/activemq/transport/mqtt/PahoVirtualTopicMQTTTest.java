begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|paho
operator|.
name|client
operator|.
name|mqttv3
operator|.
name|MqttClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|paho
operator|.
name|client
operator|.
name|mqttv3
operator|.
name|MqttConnectOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|PahoVirtualTopicMQTTTest
extends|extends
name|PahoMQTTTest
block|{
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|protocolConfig
operator|=
literal|"transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|MessageConsumer
name|createConsumer
parameter_list|(
name|Session
name|s
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|s
operator|.
name|createConsumer
argument_list|(
name|s
operator|.
name|createQueue
argument_list|(
literal|"Consumer.X.VirtualTopic."
operator|+
name|topic
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testVirtualTopicQueueRestore
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|user10
init|=
literal|"user10"
decl_stmt|;
name|String
name|password10
init|=
literal|"user10"
decl_stmt|;
name|String
name|clientId10
init|=
literal|"client-10"
decl_stmt|;
name|String
name|topic10
init|=
literal|"user10/"
decl_stmt|;
name|MqttConnectOptions
name|options10
init|=
operator|new
name|MqttConnectOptions
argument_list|()
decl_stmt|;
name|options10
operator|.
name|setCleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options10
operator|.
name|setUserName
argument_list|(
name|user10
argument_list|)
expr_stmt|;
name|options10
operator|.
name|setPassword
argument_list|(
name|password10
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|MqttClient
name|client10
init|=
name|createClient
argument_list|(
literal|false
argument_list|,
name|clientId10
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client10
operator|.
name|subscribe
argument_list|(
name|topic10
operator|+
name|clientId10
operator|+
literal|"/#"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client10
operator|.
name|subscribe
argument_list|(
name|topic10
operator|+
literal|"#"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|user1
init|=
literal|"user1"
decl_stmt|;
name|String
name|password1
init|=
literal|"user1"
decl_stmt|;
name|String
name|clientId1
init|=
literal|"client-1"
decl_stmt|;
name|String
name|topic1
init|=
literal|"user1/"
decl_stmt|;
name|MqttConnectOptions
name|options1
init|=
operator|new
name|MqttConnectOptions
argument_list|()
decl_stmt|;
name|options1
operator|.
name|setCleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|options1
operator|.
name|setUserName
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|options1
operator|.
name|setPassword
argument_list|(
name|password1
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|MqttClient
name|client1
init|=
name|createClient
argument_list|(
literal|false
argument_list|,
name|clientId1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client1
operator|.
name|subscribe
argument_list|(
name|topic1
operator|+
name|clientId1
operator|+
literal|"/#"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client1
operator|.
name|subscribe
argument_list|(
name|topic1
operator|+
literal|"#"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Destination
name|queue
range|:
name|regionBroker
operator|.
name|getQueueRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Queue "
operator|+
name|queue
operator|.
name|getActiveMQDestination
argument_list|()
operator|+
literal|" have more than one consumer"
argument_list|,
literal|1
argument_list|,
name|queue
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

