begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalTopicAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|async
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|AMQTxOperation
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|ADD_OPERATION_TYPE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|REMOVE_OPERATION_TYPE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|ACK_OPERATION_TYPE
init|=
literal|3
decl_stmt|;
specifier|private
name|byte
name|operationType
decl_stmt|;
specifier|private
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|private
name|Object
name|data
decl_stmt|;
specifier|private
name|Location
name|location
decl_stmt|;
specifier|public
name|AMQTxOperation
parameter_list|()
block|{     }
specifier|public
name|AMQTxOperation
parameter_list|(
name|byte
name|operationType
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|Object
name|data
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|operationType
operator|=
name|operationType
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
comment|/**      * @return the data      */
specifier|public
name|Object
name|getData
parameter_list|()
block|{
return|return
name|this
operator|.
name|data
return|;
block|}
comment|/**      * @param data the data to set      */
specifier|public
name|void
name|setData
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|/**      * @return the location      */
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
comment|/**      * @param location the location to set      */
specifier|public
name|void
name|setLocation
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
comment|/**      * @return the operationType      */
specifier|public
name|byte
name|getOperationType
parameter_list|()
block|{
return|return
name|this
operator|.
name|operationType
return|;
block|}
comment|/**      * @param operationType the operationType to set      */
specifier|public
name|void
name|setOperationType
parameter_list|(
name|byte
name|operationType
parameter_list|)
block|{
name|this
operator|.
name|operationType
operator|=
name|operationType
expr_stmt|;
block|}
specifier|public
name|boolean
name|replay
parameter_list|(
name|AMQPersistenceAdapter
name|adapter
parameter_list|,
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|AMQMessageStore
name|store
init|=
operator|(
name|AMQMessageStore
operator|)
name|adapter
operator|.
name|createMessageStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|operationType
operator|==
name|ADD_OPERATION_TYPE
condition|)
block|{
name|result
operator|=
name|store
operator|.
name|replayAddMessage
argument_list|(
name|context
argument_list|,
operator|(
name|Message
operator|)
name|data
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operationType
operator|==
name|REMOVE_OPERATION_TYPE
condition|)
block|{
name|result
operator|=
name|store
operator|.
name|replayRemoveMessage
argument_list|(
name|context
argument_list|,
operator|(
name|MessageAck
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JournalTopicAck
name|ack
init|=
operator|(
name|JournalTopicAck
operator|)
name|data
decl_stmt|;
name|result
operator|=
operator|(
operator|(
name|AMQTopicMessageStore
operator|)
name|store
operator|)
operator|.
name|replayAcknowledge
argument_list|(
name|context
argument_list|,
name|ack
operator|.
name|getClientId
argument_list|()
argument_list|,
name|ack
operator|.
name|getSubscritionName
argument_list|()
argument_list|,
name|ack
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|writeExternal
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|DataOutput
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
name|location
operator|.
name|writeExternal
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|packet
operator|.
name|length
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|packet
operator|.
name|data
argument_list|,
name|packet
operator|.
name|offset
argument_list|,
name|packet
operator|.
name|length
argument_list|)
expr_stmt|;
name|packet
operator|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|packet
operator|.
name|length
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|packet
operator|.
name|data
argument_list|,
name|packet
operator|.
name|offset
argument_list|,
name|packet
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readExternal
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|DataInput
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|location
operator|=
operator|new
name|Location
argument_list|()
expr_stmt|;
name|this
operator|.
name|location
operator|.
name|readExternal
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|setData
argument_list|(
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteSequence
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|=
name|dis
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|this
operator|.
name|destination
operator|=
operator|(
name|ActiveMQDestination
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteSequence
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

