begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_comment
comment|/**  * A Destination which implements<a href="http://activemq.org/site/virtual-destinations.html">Virtual Topic</a>  */
end_comment

begin_class
specifier|public
class|class
name|VirtualTopicInterceptor
extends|extends
name|DestinationFilter
block|{
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|private
specifier|final
name|String
name|postfix
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|local
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|concurrentSend
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|transactedSend
decl_stmt|;
specifier|private
specifier|final
name|LRUCache
argument_list|<
name|ActiveMQDestination
argument_list|,
name|ActiveMQQueue
argument_list|>
name|cache
init|=
operator|new
name|LRUCache
argument_list|<
name|ActiveMQDestination
argument_list|,
name|ActiveMQQueue
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|VirtualTopicInterceptor
parameter_list|(
name|Destination
name|next
parameter_list|,
name|VirtualTopic
name|virtualTopic
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|virtualTopic
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|this
operator|.
name|postfix
operator|=
name|virtualTopic
operator|.
name|getPostfix
argument_list|()
expr_stmt|;
name|this
operator|.
name|local
operator|=
name|virtualTopic
operator|.
name|isLocal
argument_list|()
expr_stmt|;
name|this
operator|.
name|concurrentSend
operator|=
name|virtualTopic
operator|.
name|isConcurrentSend
argument_list|()
expr_stmt|;
name|this
operator|.
name|transactedSend
operator|=
name|virtualTopic
operator|.
name|isTransactedSend
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Topic
name|getTopic
parameter_list|()
block|{
return|return
operator|(
name|Topic
operator|)
name|this
operator|.
name|next
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|isAdvisory
argument_list|()
operator|&&
operator|!
operator|(
name|local
operator|&&
name|message
operator|.
name|getBrokerPath
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|ActiveMQDestination
name|queueConsumers
init|=
name|getQueueConsumersWildcard
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|send
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
name|queueConsumers
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|send
parameter_list|(
specifier|final
name|ProducerBrokerExchange
name|context
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Broker
name|broker
init|=
name|context
operator|.
name|getConnectionContext
argument_list|()
operator|.
name|getBroker
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Destination
argument_list|>
name|destinations
init|=
name|broker
operator|.
name|getDestinations
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDestinations
init|=
name|destinations
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|LocalTransactionId
name|localBrokerTransactionToCoalesceJournalSync
init|=
name|beginLocalTransaction
argument_list|(
name|numDestinations
argument_list|,
name|context
operator|.
name|getConnectionContext
argument_list|()
argument_list|,
name|message
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|concurrentSend
operator|&&
name|numDestinations
operator|>
literal|1
condition|)
block|{
specifier|final
name|CountDownLatch
name|concurrent
init|=
operator|new
name|CountDownLatch
argument_list|(
name|destinations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|exceptionAtomicReference
init|=
operator|new
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|BrokerService
name|brokerService
init|=
name|broker
operator|.
name|getBrokerService
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Destination
name|dest
range|:
name|destinations
control|)
block|{
if|if
condition|(
name|shouldDispatch
argument_list|(
name|broker
argument_list|,
name|message
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|brokerService
operator|.
name|getTaskRunnerFactory
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dest
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionAtomicReference
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|concurrent
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|concurrent
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|concurrent
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exceptionAtomicReference
operator|.
name|get
argument_list|()
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
specifier|final
name|Destination
name|dest
range|:
name|destinations
control|)
block|{
if|if
condition|(
name|shouldDispatch
argument_list|(
name|broker
argument_list|,
name|message
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|dest
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|commit
argument_list|(
name|localBrokerTransactionToCoalesceJournalSync
argument_list|,
name|context
operator|.
name|getConnectionContext
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|LocalTransactionId
name|beginLocalTransaction
parameter_list|(
name|int
name|numDestinations
parameter_list|,
name|ConnectionContext
name|connectionContext
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|LocalTransactionId
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|transactedSend
operator|&&
name|numDestinations
operator|>
literal|1
operator|&&
name|message
operator|.
name|isPersistent
argument_list|()
operator|&&
name|message
operator|.
name|getTransactionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LocalTransactionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|connectionContext
operator|.
name|getBroker
argument_list|()
operator|.
name|beginTransaction
argument_list|(
name|connectionContext
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|connectionContext
operator|.
name|setTransaction
argument_list|(
name|connectionContext
operator|.
name|getTransactions
argument_list|()
operator|.
name|get
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|commit
parameter_list|(
name|LocalTransactionId
name|tx
parameter_list|,
name|ConnectionContext
name|connectionContext
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
block|{
name|connectionContext
operator|.
name|getBroker
argument_list|()
operator|.
name|commitTransaction
argument_list|(
name|connectionContext
argument_list|,
name|tx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connectionContext
operator|.
name|getTransactions
argument_list|()
operator|.
name|remove
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|connectionContext
operator|.
name|setTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|shouldDispatch
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|Message
name|message
parameter_list|,
name|Destination
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
comment|//if can't find .* in the prefix, default back to old logic and return true
return|return
name|prefix
operator|.
name|contains
argument_list|(
literal|".*"
argument_list|)
condition|?
name|dest
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefix
operator|.
name|indexOf
argument_list|(
literal|".*"
argument_list|)
argument_list|)
argument_list|)
else|:
literal|true
return|;
block|}
specifier|protected
name|ActiveMQDestination
name|getQueueConsumersWildcard
parameter_list|(
name|ActiveMQDestination
name|original
parameter_list|)
block|{
name|ActiveMQQueue
name|queue
decl_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|queue
operator|=
name|cache
operator|.
name|get
argument_list|(
name|original
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
name|prefix
operator|+
name|original
operator|.
name|getPhysicalName
argument_list|()
operator|+
name|postfix
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|original
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queue
return|;
block|}
block|}
end_class

end_unit

