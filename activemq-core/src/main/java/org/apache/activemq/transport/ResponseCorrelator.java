begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Adds the incrementing sequence number to commands along with performing the  * corelation of responses to requests to create a blocking request-response  * semantics.  *   * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|ResponseCorrelator
extends|extends
name|TransportFilter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResponseCorrelator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FutureResponse
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|FutureResponse
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|IntSequenceGenerator
name|sequenceGenerator
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|debug
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|private
name|IOException
name|error
decl_stmt|;
specifier|public
name|ResponseCorrelator
parameter_list|(
name|Transport
name|next
parameter_list|)
block|{
name|this
argument_list|(
name|next
argument_list|,
operator|new
name|IntSequenceGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResponseCorrelator
parameter_list|(
name|Transport
name|next
parameter_list|,
name|IntSequenceGenerator
name|sequenceGenerator
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|sequenceGenerator
operator|=
name|sequenceGenerator
expr_stmt|;
block|}
specifier|public
name|void
name|oneway
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
name|command
operator|.
name|setCommandId
argument_list|(
name|sequenceGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|next
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FutureResponse
name|asyncRequest
parameter_list|(
name|Object
name|o
parameter_list|,
name|ResponseCallback
name|responseCallback
parameter_list|)
throws|throws
name|IOException
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
name|command
operator|.
name|setCommandId
argument_list|(
name|sequenceGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FutureResponse
name|future
init|=
operator|new
name|FutureResponse
argument_list|(
name|responseCallback
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|requestMap
init|)
block|{
if|if
condition|(
name|this
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|requestMap
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
name|next
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|public
name|Object
name|request
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureResponse
name|response
init|=
name|asyncRequest
argument_list|(
name|command
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getResult
argument_list|()
return|;
block|}
specifier|public
name|Object
name|request
parameter_list|(
name|Object
name|command
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureResponse
name|response
init|=
name|asyncRequest
argument_list|(
name|command
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getResult
argument_list|(
name|timeout
argument_list|)
return|;
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Command
name|command
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Command
condition|)
block|{
name|command
operator|=
operator|(
name|Command
operator|)
name|o
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Object cannot be converted to a Command,  Object: "
operator|+
name|o
argument_list|)
throw|;
block|}
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|FutureResponse
name|future
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|requestMap
init|)
block|{
name|future
operator|=
name|requestMap
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received unexpected response: {"
operator|+
name|command
operator|+
literal|"}for command id: "
operator|+
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|getTransportListener
argument_list|()
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If an async exception occurs, then assume no responses will arrive for      * any of current requests. Lets let them know of the problem.      */
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|dispose
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|super
operator|.
name|onException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|dispose
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Stopped."
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dispose
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|FutureResponse
argument_list|>
name|requests
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|requestMap
init|)
block|{
if|if
condition|(
name|this
operator|.
name|error
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|requests
operator|=
operator|new
name|ArrayList
argument_list|<
name|FutureResponse
argument_list|>
argument_list|(
name|requestMap
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|requests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|FutureResponse
argument_list|>
name|iter
init|=
name|requests
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FutureResponse
name|fr
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|fr
operator|.
name|set
argument_list|(
operator|new
name|ExceptionResponse
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|IntSequenceGenerator
name|getSequenceGenerator
parameter_list|()
block|{
return|return
name|sequenceGenerator
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|next
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

