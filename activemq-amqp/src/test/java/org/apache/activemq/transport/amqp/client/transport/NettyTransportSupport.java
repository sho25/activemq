begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLParameters
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509ExtendedKeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Static class that provides various utility methods used by Transport implementations.  */
end_comment

begin_class
specifier|public
class|class
name|NettyTransportSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NettyTransportSupport
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Creates a Netty SslHandler instance for use in Transports that require      * an SSL encoder / decoder.      *      * @param remote      *        The URI of the remote peer that the SslHandler will be used against.      * @param options      *        The SSL options object to build the SslHandler instance from.      *      * @return a new SslHandler that is configured from the given options.      *      * @throws Exception if an error occurs while creating the SslHandler instance.      */
specifier|public
specifier|static
name|SslHandler
name|createSslHandler
parameter_list|(
name|URI
name|remote
parameter_list|,
name|NettyTransportSslOptions
name|options
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|SslHandler
argument_list|(
name|createSslEngine
argument_list|(
name|remote
argument_list|,
name|createSslContext
argument_list|(
name|options
argument_list|)
argument_list|,
name|options
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a new SSLContext using the options specific in the given TransportSslOptions      * instance.      *      * @param options      *        the configured options used to create the SSLContext.      *      * @return a new SSLContext instance.      *      * @throws Exception if an error occurs while creating the context.      */
specifier|public
specifier|static
name|SSLContext
name|createSslContext
parameter_list|(
name|NettyTransportSslOptions
name|options
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|contextProtocol
init|=
name|options
operator|.
name|getContextProtocol
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting SSLContext instance using protocol: {}"
argument_list|,
name|contextProtocol
argument_list|)
expr_stmt|;
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|contextProtocol
argument_list|)
decl_stmt|;
name|KeyManager
index|[]
name|keyMgrs
init|=
name|loadKeyManagers
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|TrustManager
index|[]
name|trustManagers
init|=
name|loadTrustManagers
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|keyMgrs
argument_list|,
name|trustManagers
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create SSLContext: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Create a new SSLEngine instance in client mode from the given SSLContext and      * TransportSslOptions instances.      *      * @param context      *        the SSLContext to use when creating the engine.      * @param options      *        the TransportSslOptions to use to configure the new SSLEngine.      *      * @return a new SSLEngine instance in client mode.      *      * @throws Exception if an error occurs while creating the new SSLEngine.      */
specifier|public
specifier|static
name|SSLEngine
name|createSslEngine
parameter_list|(
name|SSLContext
name|context
parameter_list|,
name|NettyTransportSslOptions
name|options
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createSslEngine
argument_list|(
literal|null
argument_list|,
name|context
argument_list|,
name|options
argument_list|)
return|;
block|}
comment|/**      * Create a new SSLEngine instance in client mode from the given SSLContext and      * TransportSslOptions instances.      *      * @param remote      *        the URI of the remote peer that will be used to initialize the engine, may be null if none should.      * @param context      *        the SSLContext to use when creating the engine.      * @param options      *        the TransportSslOptions to use to configure the new SSLEngine.      *      * @return a new SSLEngine instance in client mode.      *      * @throws Exception if an error occurs while creating the new SSLEngine.      */
specifier|public
specifier|static
name|SSLEngine
name|createSslEngine
parameter_list|(
name|URI
name|remote
parameter_list|,
name|SSLContext
name|context
parameter_list|,
name|NettyTransportSslOptions
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|SSLEngine
name|engine
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remote
operator|==
literal|null
condition|)
block|{
name|engine
operator|=
name|context
operator|.
name|createSSLEngine
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|=
name|context
operator|.
name|createSSLEngine
argument_list|(
name|remote
operator|.
name|getHost
argument_list|()
argument_list|,
name|remote
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|setEnabledProtocols
argument_list|(
name|buildEnabledProtocols
argument_list|(
name|engine
argument_list|,
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setEnabledCipherSuites
argument_list|(
name|buildEnabledCipherSuites
argument_list|(
name|engine
argument_list|,
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setUseClientMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|isVerifyHost
argument_list|()
condition|)
block|{
name|SSLParameters
name|sslParameters
init|=
name|engine
operator|.
name|getSSLParameters
argument_list|()
decl_stmt|;
name|sslParameters
operator|.
name|setEndpointIdentificationAlgorithm
argument_list|(
literal|"HTTPS"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setSSLParameters
argument_list|(
name|sslParameters
argument_list|)
expr_stmt|;
block|}
return|return
name|engine
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|buildEnabledProtocols
parameter_list|(
name|SSLEngine
name|engine
parameter_list|,
name|NettyTransportSslOptions
name|options
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|enabledProtocols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getEnabledProtocols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|configuredProtocols
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|options
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Configured protocols from transport options: {}"
argument_list|,
name|configuredProtocols
argument_list|)
expr_stmt|;
name|enabledProtocols
operator|.
name|addAll
argument_list|(
name|configuredProtocols
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|engineProtocols
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Default protocols from the SSLEngine: {}"
argument_list|,
name|engineProtocols
argument_list|)
expr_stmt|;
name|enabledProtocols
operator|.
name|addAll
argument_list|(
name|engineProtocols
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|disabledProtocols
init|=
name|options
operator|.
name|getDisabledProtocols
argument_list|()
decl_stmt|;
if|if
condition|(
name|disabledProtocols
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|disabled
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|disabledProtocols
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Disabled protocols: {}"
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|enabledProtocols
operator|.
name|removeAll
argument_list|(
name|disabled
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Enabled protocols: {}"
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|enabledProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|buildEnabledCipherSuites
parameter_list|(
name|SSLEngine
name|engine
parameter_list|,
name|NettyTransportSslOptions
name|options
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|enabledCipherSuites
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getEnabledCipherSuites
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|configuredCipherSuites
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|options
operator|.
name|getEnabledCipherSuites
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Configured cipher suites from transport options: {}"
argument_list|,
name|configuredCipherSuites
argument_list|)
expr_stmt|;
name|enabledCipherSuites
operator|.
name|addAll
argument_list|(
name|configuredCipherSuites
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|engineCipherSuites
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|engine
operator|.
name|getEnabledCipherSuites
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Default cipher suites from the SSLEngine: {}"
argument_list|,
name|engineCipherSuites
argument_list|)
expr_stmt|;
name|enabledCipherSuites
operator|.
name|addAll
argument_list|(
name|engineCipherSuites
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|disabledCipherSuites
init|=
name|options
operator|.
name|getDisabledCipherSuites
argument_list|()
decl_stmt|;
if|if
condition|(
name|disabledCipherSuites
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|disabled
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|disabledCipherSuites
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Disabled cipher suites: {}"
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|enabledCipherSuites
operator|.
name|removeAll
argument_list|(
name|disabled
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Enabled cipher suites: {}"
argument_list|,
name|enabledCipherSuites
argument_list|)
expr_stmt|;
return|return
name|enabledCipherSuites
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TrustManager
index|[]
name|loadTrustManagers
parameter_list|(
name|NettyTransportSslOptions
name|options
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|options
operator|.
name|isTrustAll
argument_list|()
condition|)
block|{
return|return
operator|new
name|TrustManager
index|[]
block|{
name|createTrustAllTrustManager
argument_list|()
block|}
return|;
block|}
if|if
condition|(
name|options
operator|.
name|getTrustStoreLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TrustManagerFactory
name|fact
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|storeLocation
init|=
name|options
operator|.
name|getTrustStoreLocation
argument_list|()
decl_stmt|;
name|String
name|storePassword
init|=
name|options
operator|.
name|getTrustStorePassword
argument_list|()
decl_stmt|;
name|String
name|storeType
init|=
name|options
operator|.
name|getStoreType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Attempt to load TrustStore from location {} of type {}"
argument_list|,
name|storeLocation
argument_list|,
name|storeType
argument_list|)
expr_stmt|;
name|KeyStore
name|trustStore
init|=
name|loadStore
argument_list|(
name|storeLocation
argument_list|,
name|storePassword
argument_list|,
name|storeType
argument_list|)
decl_stmt|;
name|fact
operator|.
name|init
argument_list|(
name|trustStore
argument_list|)
expr_stmt|;
return|return
name|fact
operator|.
name|getTrustManagers
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|KeyManager
index|[]
name|loadKeyManagers
parameter_list|(
name|NettyTransportSslOptions
name|options
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|options
operator|.
name|getKeyStoreLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KeyManagerFactory
name|fact
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|storeLocation
init|=
name|options
operator|.
name|getKeyStoreLocation
argument_list|()
decl_stmt|;
name|String
name|storePassword
init|=
name|options
operator|.
name|getKeyStorePassword
argument_list|()
decl_stmt|;
name|String
name|storeType
init|=
name|options
operator|.
name|getStoreType
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|options
operator|.
name|getKeyAlias
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Attempt to load KeyStore from location {} of type {}"
argument_list|,
name|storeLocation
argument_list|,
name|storeType
argument_list|)
expr_stmt|;
name|KeyStore
name|keyStore
init|=
name|loadStore
argument_list|(
name|storeLocation
argument_list|,
name|storePassword
argument_list|,
name|storeType
argument_list|)
decl_stmt|;
name|fact
operator|.
name|init
argument_list|(
name|keyStore
argument_list|,
name|storePassword
operator|!=
literal|null
condition|?
name|storePassword
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
return|return
name|fact
operator|.
name|getKeyManagers
argument_list|()
return|;
block|}
else|else
block|{
name|validateAlias
argument_list|(
name|keyStore
argument_list|,
name|alias
argument_list|)
expr_stmt|;
return|return
name|wrapKeyManagers
argument_list|(
name|alias
argument_list|,
name|fact
operator|.
name|getKeyManagers
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|KeyManager
index|[]
name|wrapKeyManagers
parameter_list|(
name|String
name|alias
parameter_list|,
name|KeyManager
index|[]
name|origKeyManagers
parameter_list|)
block|{
name|KeyManager
index|[]
name|keyManagers
init|=
operator|new
name|KeyManager
index|[
name|origKeyManagers
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|origKeyManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|KeyManager
name|km
init|=
name|origKeyManagers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|km
operator|instanceof
name|X509ExtendedKeyManager
condition|)
block|{
name|km
operator|=
operator|new
name|X509AliasKeyManager
argument_list|(
name|alias
argument_list|,
operator|(
name|X509ExtendedKeyManager
operator|)
name|km
argument_list|)
expr_stmt|;
block|}
name|keyManagers
index|[
name|i
index|]
operator|=
name|km
expr_stmt|;
block|}
return|return
name|keyManagers
return|;
block|}
specifier|private
specifier|static
name|void
name|validateAlias
parameter_list|(
name|KeyStore
name|store
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|KeyStoreException
block|{
if|if
condition|(
operator|!
name|store
operator|.
name|containsAlias
argument_list|(
name|alias
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The alias '"
operator|+
name|alias
operator|+
literal|"' doesn't exist in the key store"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|store
operator|.
name|isKeyEntry
argument_list|(
name|alias
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The alias '"
operator|+
name|alias
operator|+
literal|"' in the keystore doesn't represent a key entry"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|KeyStore
name|loadStore
parameter_list|(
name|String
name|storePath
parameter_list|,
specifier|final
name|String
name|password
parameter_list|,
name|String
name|storeType
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStore
name|store
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|storeType
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|storePath
argument_list|)
argument_list|)
init|;
init|)
block|{
name|store
operator|.
name|load
argument_list|(
name|in
argument_list|,
name|password
operator|!=
literal|null
condition|?
name|password
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|private
specifier|static
name|TrustManager
name|createTrustAllTrustManager
parameter_list|()
block|{
return|return
operator|new
name|X509TrustManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|X509Certificate
index|[]
name|x509Certificates
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|CertificateException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|X509Certificate
index|[]
name|x509Certificates
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|CertificateException
block|{             }
annotation|@
name|Override
specifier|public
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
operator|new
name|X509Certificate
index|[
literal|0
index|]
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

