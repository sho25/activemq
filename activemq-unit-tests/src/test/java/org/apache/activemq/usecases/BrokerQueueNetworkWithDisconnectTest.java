begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
operator|.
name|VMTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SocketProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BrokerQueueNetworkWithDisconnectTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BrokerQueueNetworkWithDisconnectTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NETWORK_DOWN_TIME
init|=
literal|5000
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|200
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HUB
init|=
literal|"HubBroker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPOKE
init|=
literal|"SpokeBroker"
decl_stmt|;
specifier|private
name|SocketProxy
name|socketProxy
decl_stmt|;
specifier|private
name|long
name|networkDownTimeStart
decl_stmt|;
specifier|public
name|boolean
name|useDuplexNetworkBridge
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|simulateStalledNetwork
decl_stmt|;
specifier|private
name|long
name|inactiveDuration
init|=
literal|1000
decl_stmt|;
specifier|private
name|boolean
name|useSocketProxy
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|initCombosForTestSendOnAReceiveOnBWithTransportDisconnect
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"useDuplexNetworkBridge"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|,
name|Boolean
operator|.
name|FALSE
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"simulateStalledNetwork"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendOnAReceiveOnBWithTransportDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|bridgeBrokers
argument_list|(
name|SPOKE
argument_list|,
name|HUB
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|MessageConsumer
name|client
init|=
name|createConsumer
argument_list|(
name|HUB
argument_list|,
name|dest
argument_list|)
decl_stmt|;
comment|// allow subscription information to flow back to Spoke
name|sleep
argument_list|(
literal|600
argument_list|)
expr_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
name|SPOKE
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|MessageIdList
name|msgs
init|=
name|getConsumerMessages
argument_list|(
name|HUB
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|msgs
operator|.
name|waitForMessagesToArrive
argument_list|(
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"At least message "
operator|+
name|MESSAGE_COUNT
operator|+
literal|" must be recieved, duplicates are expected, count="
operator|+
name|msgs
operator|.
name|getMessageCount
argument_list|()
argument_list|,
name|MESSAGE_COUNT
operator|<=
name|msgs
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoStuckConnectionsWithTransportDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|inactiveDuration
operator|=
literal|60000l
expr_stmt|;
name|useDuplexNetworkBridge
operator|=
literal|true
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|SPOKE
argument_list|,
name|HUB
argument_list|)
expr_stmt|;
specifier|final
name|BrokerItem
name|hub
init|=
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
decl_stmt|;
name|hub
operator|.
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
name|int
name|sleepCount
init|=
literal|2
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
while|while
condition|(
operator|--
name|sleepCount
operator|>=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sleeping for a bit in close impl to simulate load where reconnect fails due to a pending close"
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
name|super
operator|.
name|removeConnection
parameter_list|(
name|context
parameter_list|,
name|info
parameter_list|,
name|error
parameter_list|)
constructor_decl|;
block|}
end_class

begin_empty_stmt
unit|}         })
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|startAllBrokers
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// kill the initiator side, leaving remote end intact
end_comment

begin_comment
comment|// simulate async network breakage
end_comment

begin_comment
comment|// remote side will need to spot duplicate network and stop/kill the original
end_comment

begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|socketProxy
operator|.
name|halfClose
argument_list|()
expr_stmt|;
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
end_for

begin_comment
comment|// wait for full reformation of bridge
end_comment

begin_comment
comment|// verify no extra connections
end_comment

begin_decl_stmt
name|boolean
name|allGood
init|=
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|numConnections
init|=
name|hub
operator|.
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num connetions:"
operator|+
name|numConnections
argument_list|)
expr_stmt|;
return|return
name|numConnections
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|allGood
condition|)
block|{
name|dumpAllThreads
argument_list|(
literal|"ExtraHubConnection"
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|assertTrue
argument_list|(
literal|"should be only one transport connection for the single duplex network connector"
argument_list|,
name|allGood
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|allGood
operator|=
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|numVmConnections
init|=
name|VMTransportFactory
operator|.
name|SERVERS
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
operator|.
name|getConnectionCount
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num VM connetions:"
operator|+
name|numVmConnections
argument_list|)
expr_stmt|;
return|return
name|numVmConnections
operator|==
literal|2
return|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|allGood
condition|)
block|{
name|dumpAllThreads
argument_list|(
literal|"ExtraHubVMConnection"
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|assertTrue
argument_list|(
literal|"should be only 2 vm connections for the single network duplex network connector"
argument_list|,
name|allGood
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}          public
name|void
name|testTwoDuplexNCsAreAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|useDuplexNetworkBridge
operator|=
literal|true
expr_stmt|;
name|useSocketProxy
operator|=
literal|false
expr_stmt|;
name|NetworkConnector
name|connector
init|=
name|bridgeBrokers
argument_list|(
name|SPOKE
argument_list|,
name|HUB
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"FirstDuplex"
argument_list|)
expr_stmt|;
name|connector
operator|=
name|bridgeBrokers
argument_list|(
name|SPOKE
argument_list|,
name|HUB
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"SecondDuplex"
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
name|BrokerItem
name|hub
init|=
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Has two transport Connectors"
argument_list|,
literal|2
argument_list|,
name|hub
operator|.
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|void
name|startAllBrokers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensure HUB is started first so bridge will be active from the get go
name|BrokerItem
name|brokerItem
init|=
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
decl_stmt|;
name|brokerItem
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerItem
operator|=
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
expr_stmt|;
name|brokerItem
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|sleep
argument_list|(
literal|600
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|networkDownTimeStart
operator|=
literal|0
expr_stmt|;
name|inactiveDuration
operator|=
literal|1000
expr_stmt|;
name|useSocketProxy
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|String
name|options
init|=
literal|"?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"
decl_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/"
operator|+
name|HUB
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/"
operator|+
name|SPOKE
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|socketProxy
operator|!=
literal|null
condition|)
block|{
name|socketProxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|BrokerQueueNetworkWithDisconnectTest
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|void
name|onSend
parameter_list|(
name|int
name|i
parameter_list|,
name|TextMessage
name|msg
parameter_list|)
block|{
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|50
operator|||
name|i
operator|==
literal|150
condition|)
block|{
if|if
condition|(
name|simulateStalledNetwork
condition|)
block|{
name|socketProxy
operator|.
name|pause
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|socketProxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|networkDownTimeStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|networkDownTimeStart
operator|>
literal|0
condition|)
block|{
comment|// restart after NETWORK_DOWN_TIME seconds
if|if
condition|(
name|networkDownTimeStart
operator|+
name|NETWORK_DOWN_TIME
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
if|if
condition|(
name|simulateStalledNetwork
condition|)
block|{
name|socketProxy
operator|.
name|goOn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|socketProxy
operator|.
name|reopen
argument_list|()
expr_stmt|;
block|}
name|networkDownTimeStart
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// slow message production to allow bridge to recover and limit message duplication
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|onSend
argument_list|(
name|i
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|milliSecondTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliSecondTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|igonred
parameter_list|)
block|{         }
block|}
end_function

begin_function
annotation|@
name|Override
specifier|protected
name|NetworkConnector
name|bridgeBrokers
parameter_list|(
name|BrokerService
name|localBroker
parameter_list|,
name|BrokerService
name|remoteBroker
parameter_list|,
name|boolean
name|dynamicOnly
parameter_list|,
name|int
name|networkTTL
parameter_list|,
name|boolean
name|conduit
parameter_list|,
name|boolean
name|failover
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
name|remoteBroker
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
name|URI
name|remoteURI
decl_stmt|;
if|if
condition|(
operator|!
name|transportConnectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remoteURI
operator|=
operator|(
operator|(
name|TransportConnector
operator|)
name|transportConnectors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getConnectUri
argument_list|()
expr_stmt|;
if|if
condition|(
name|useSocketProxy
condition|)
block|{
name|socketProxy
operator|=
operator|new
name|SocketProxy
argument_list|(
name|remoteURI
argument_list|)
expr_stmt|;
name|remoteURI
operator|=
name|socketProxy
operator|.
name|getUrl
argument_list|()
expr_stmt|;
block|}
name|DiscoveryNetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
literal|"static:("
operator|+
name|remoteURI
operator|+
literal|"?wireFormat.maxInactivityDuration="
operator|+
name|inactiveDuration
operator|+
literal|"&wireFormat.maxInactivityDurationInitalDelay="
operator|+
name|inactiveDuration
operator|+
literal|")?useExponentialBackOff=false"
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setDynamicOnly
argument_list|(
name|dynamicOnly
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setNetworkTTL
argument_list|(
name|networkTTL
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|maxSetupTime
operator|=
literal|2000
expr_stmt|;
if|if
condition|(
name|useDuplexNetworkBridge
condition|)
block|{
name|connector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Remote broker has no registered connectors."
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

