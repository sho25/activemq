begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A simple implementation of {@link ByteBufferPool} which does no pooling and just  * creates new buffers each time  */
end_comment

begin_class
specifier|public
class|class
name|SimpleBufferPool
implements|implements
name|ByteBufferPool
block|{
specifier|private
name|int
name|defaultSize
decl_stmt|;
specifier|private
name|boolean
name|useDirect
decl_stmt|;
specifier|public
name|SimpleBufferPool
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleBufferPool
parameter_list|(
name|boolean
name|useDirect
parameter_list|)
block|{
name|this
operator|.
name|useDirect
operator|=
name|useDirect
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|ByteBuffer
name|borrowBuffer
parameter_list|()
block|{
return|return
name|createBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|setDefaultSize
parameter_list|(
name|int
name|defaultSize
parameter_list|)
block|{
name|this
operator|.
name|defaultSize
operator|=
name|defaultSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseDirect
parameter_list|()
block|{
return|return
name|useDirect
return|;
block|}
comment|/**      * Sets whether direct buffers are used or not      */
specifier|public
name|void
name|setUseDirect
parameter_list|(
name|boolean
name|useDirect
parameter_list|)
block|{
name|this
operator|.
name|useDirect
operator|=
name|useDirect
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|protected
name|ByteBuffer
name|createBuffer
parameter_list|()
block|{
if|if
condition|(
name|useDirect
condition|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|defaultSize
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|defaultSize
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

