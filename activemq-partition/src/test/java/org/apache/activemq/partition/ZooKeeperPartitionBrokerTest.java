begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|replicated
operator|.
name|groups
operator|.
name|ZKClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|NIOServerCnxnFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|persistence
operator|.
name|FileTxnSnapLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|util
operator|.
name|clock
operator|.
name|Timespan
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ZooKeeperPartitionBrokerTest
extends|extends
name|PartitionBrokerTest
block|{
name|NIOServerCnxnFactory
name|connector
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting ZooKeeper"
argument_list|)
expr_stmt|;
name|ZooKeeperServer
name|zk_server
init|=
operator|new
name|ZooKeeperServer
argument_list|()
decl_stmt|;
name|zk_server
operator|.
name|setTickTime
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|zk_server
operator|.
name|setTxnLogFactory
argument_list|(
operator|new
name|FileTxnSnapLog
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test-data/zk-log"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
literal|"target/test-data/zk-data"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|=
operator|new
name|NIOServerCnxnFactory
argument_list|()
expr_stmt|;
name|connector
operator|.
name|configure
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|connector
operator|.
name|startup
argument_list|(
name|zk_server
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ZooKeeper Started"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|connector
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|String
name|zkPath
init|=
literal|"/partition-config"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createBrokerCluster
parameter_list|(
name|int
name|brokerCount
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Store the partitioning in ZK.
name|ZKClient
name|zk_client
init|=
operator|new
name|ZKClient
argument_list|(
literal|"localhost:"
operator|+
name|connector
operator|.
name|getLocalPort
argument_list|()
argument_list|,
name|Timespan
operator|.
name|parse
argument_list|(
literal|"10s"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|zk_client
operator|.
name|start
argument_list|()
expr_stmt|;
name|zk_client
operator|.
name|waitForConnected
argument_list|(
name|Timespan
operator|.
name|parse
argument_list|(
literal|"30s"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|zk_client
operator|.
name|delete
argument_list|(
name|zkPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
name|zk_client
operator|.
name|create
argument_list|(
name|zkPath
argument_list|,
name|partitioning
operator|.
name|toString
argument_list|()
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zk_client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|createBrokerCluster
argument_list|(
name|brokerCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addPartitionBrokerPlugin
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
comment|// Have the borker plugin get the partition config via ZK.
name|ZooKeeperPartitionBrokerPlugin
name|plugin
init|=
operator|new
name|ZooKeeperPartitionBrokerPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getBrokerURL
parameter_list|(
name|PartitionBroker
name|partitionBroker
parameter_list|,
name|String
name|id
parameter_list|)
block|{
try|try
block|{
return|return
name|getConnectURL
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
decl_stmt|;
name|plugin
operator|.
name|setZkAddress
argument_list|(
literal|"localhost:"
operator|+
name|connector
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setZkPath
argument_list|(
name|zkPath
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
name|plugin
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

