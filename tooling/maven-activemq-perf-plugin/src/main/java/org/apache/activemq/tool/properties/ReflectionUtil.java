begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2005-2006 The Apache Software Foundation  *<p/>  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ReflectionUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReflectionUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ReflectionUtil
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|configureClass
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
comment|// Check if we will recognize the property first
if|if
condition|(
name|obj
operator|instanceof
name|ReflectionConfigurable
operator|&&
operator|!
operator|(
operator|(
name|ReflectionConfigurable
operator|)
name|obj
operator|)
operator|.
name|acceptConfig
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|String
name|debugInfo
decl_stmt|;
name|Object
name|target
init|=
name|obj
decl_stmt|;
name|Class
name|targetClass
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
comment|// DEBUG: Debugging Info
name|debugInfo
operator|=
literal|"Invoking: "
operator|+
name|targetClass
operator|.
name|getName
argument_list|()
expr_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|key
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|int
name|tokenCount
init|=
name|tokenizer
operator|.
name|countTokens
argument_list|()
decl_stmt|;
comment|// For nested settings, get the object first. -2, do not count the first and last token
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tokenCount
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
comment|// Find getter method first
name|String
name|name
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|getMethod
init|=
literal|"get"
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|targetClass
operator|.
name|getMethod
argument_list|(
name|getMethod
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|target
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|targetClass
operator|=
name|target
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|debugInfo
operator|+=
operator|(
literal|"."
operator|+
name|getMethod
operator|+
literal|"()"
operator|)
expr_stmt|;
block|}
comment|// Property name
name|String
name|property
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// Determine data type of property
name|Class
name|propertyType
init|=
name|getField
argument_list|(
name|targetClass
argument_list|,
name|property
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Get setter method
name|String
name|setterMethod
init|=
literal|"set"
operator|+
name|property
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|property
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set primitive type
name|debugInfo
operator|+=
operator|(
literal|"."
operator|+
name|setterMethod
operator|+
literal|"("
operator|+
name|propertyType
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|val
operator|+
literal|")"
operator|)
expr_stmt|;
if|if
condition|(
name|propertyType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
if|if
condition|(
name|propertyType
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|boolean
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|int
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|==
name|Long
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|long
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|double
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Double
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|==
name|Float
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|float
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Float
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|==
name|Short
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|short
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Short
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|==
name|Byte
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|byte
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|==
name|Character
operator|.
name|TYPE
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|char
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Character
argument_list|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Set String type
if|if
condition|(
name|propertyType
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|val
block|}
argument_list|)
expr_stmt|;
comment|// For unknown object type, try to call the valueOf method of the object
comment|// to convert the string to the target object type
block|}
else|else
block|{
comment|// Note valueOf method should be public and static
name|Object
name|param
init|=
name|propertyType
operator|.
name|getMethod
argument_list|(
literal|"valueOf"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|val
block|}
argument_list|)
decl_stmt|;
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setterMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|propertyType
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|param
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
name|debugInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|configureClass
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|configureClass
argument_list|(
name|obj
argument_list|,
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Let's catch any exception as this could be cause by the foreign class
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Properties
name|retrieveObjectProperties
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|props
operator|.
name|putAll
argument_list|(
name|retrieveClassProperties
argument_list|(
literal|""
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
argument_list|,
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|protected
specifier|static
name|Properties
name|retrieveClassProperties
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Class
name|targetClass
parameter_list|,
name|Object
name|targetObject
parameter_list|)
block|{
if|if
condition|(
name|targetClass
operator|==
literal|null
operator|||
name|targetObject
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Properties
argument_list|()
return|;
block|}
else|else
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Field
index|[]
name|fields
init|=
name|getAllFields
argument_list|(
name|targetClass
argument_list|)
decl_stmt|;
name|Method
name|getterMethod
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
operator|(
name|getterMethod
operator|=
name|isPropertyField
argument_list|(
name|targetClass
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
operator|||
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|Object
name|val
init|=
literal|null
decl_stmt|;
try|try
block|{
name|val
operator|=
name|getterMethod
operator|.
name|invoke
argument_list|(
name|targetObject
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|prefix
operator|+
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|val
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Object
name|val
init|=
name|getterMethod
operator|.
name|invoke
argument_list|(
name|targetObject
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|putAll
argument_list|(
name|retrieveClassProperties
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|,
name|val
operator|.
name|getClass
argument_list|()
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Let's catch any exception, cause this could be cause by the foreign class
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|props
return|;
block|}
block|}
specifier|protected
specifier|static
name|Method
name|isPropertyField
parameter_list|(
name|Class
name|targetClass
parameter_list|,
name|Field
name|targetField
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|targetField
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|getMethod
init|=
literal|"get"
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|isMethod
init|=
literal|"is"
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|setMethod
init|=
literal|"set"
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Check setter method
try|try
block|{
name|targetClass
operator|.
name|getMethod
argument_list|(
name|setMethod
argument_list|,
operator|new
name|Class
index|[]
block|{
name|targetField
operator|.
name|getType
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|// Check getter method and return it if it exists
try|try
block|{
return|return
name|targetClass
operator|.
name|getMethod
argument_list|(
name|getMethod
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e1
parameter_list|)
block|{
try|try
block|{
return|return
name|targetClass
operator|.
name|getMethod
argument_list|(
name|isMethod
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e2
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Field
name|getField
parameter_list|(
name|Class
name|targetClass
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|NoSuchFieldException
block|{
while|while
condition|(
name|targetClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|targetClass
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|targetClass
operator|=
name|targetClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|NoSuchFieldException
argument_list|(
name|fieldName
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|Field
index|[]
name|getAllFields
parameter_list|(
name|Class
name|targetClass
parameter_list|)
block|{
name|List
name|fieldList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|targetClass
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|fieldList
argument_list|,
name|targetClass
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
expr_stmt|;
name|targetClass
operator|=
name|targetClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|Field
index|[]
operator|)
name|fieldList
operator|.
name|toArray
argument_list|(
operator|new
name|Field
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

