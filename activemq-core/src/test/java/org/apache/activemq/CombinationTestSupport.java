begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Poor mans way of getting JUnit to run a test case through a few different  * combinations of options. Usage: If you have a test case called testFoo what  * you want to run through a few combinations, of of values for the attributes  * age and color, you would something like:<code>  *    public void initCombosForTestFoo() {      *        addCombinationValues( "age", new Object[]{ new Integer(21), new Integer(30) } );  *        addCombinationValues( "color", new Object[]{"blue", "green"} );  *    }  *</code>  * The testFoo test case would be run for each possible combination of age and  * color that you setup in the initCombosForTestFoo method. Before each  * combination is run, the age and color fields of the test class are set to one  * of the values defined. This is done before the normal setUp method is called.  * If you want the test combinations to show up as separate test runs in the  * JUnit reports, add a suite method to your test case similar to:<code>  *     public static Test suite() {  *         return suite(FooTest.class);  *     }  *</code>  *   *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CombinationTestSupport
extends|extends
name|AutoFailTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CombinationTestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|ComboOption
argument_list|>
name|comboOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ComboOption
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|combosEvaluated
decl_stmt|;
specifier|private
name|Map
name|options
decl_stmt|;
specifier|static
class|class
name|ComboOption
block|{
specifier|final
name|String
name|attribute
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ComboOption
parameter_list|(
name|String
name|attribute
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|attribute
operator|=
name|attribute
expr_stmt|;
name|this
operator|.
name|values
operator|.
name|addAll
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addCombinationValues
parameter_list|(
name|String
name|attribute
parameter_list|,
name|Object
index|[]
name|options
parameter_list|)
block|{
name|ComboOption
name|co
init|=
name|this
operator|.
name|comboOptions
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|comboOptions
operator|.
name|put
argument_list|(
name|attribute
argument_list|,
operator|new
name|ComboOption
argument_list|(
name|attribute
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|options
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|co
operator|.
name|values
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|runBare
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|combosEvaluated
condition|)
block|{
name|super
operator|.
name|runBare
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|CombinationTestSupport
index|[]
name|combinations
init|=
name|getCombinations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|combinations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CombinationTestSupport
name|test
init|=
name|combinations
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|test
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|test
operator|.
name|runBare
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setOptions
parameter_list|(
name|Map
name|options
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|options
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|attribute
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|options
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
try|try
block|{
name|Field
name|field
init|=
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not set field '"
operator|+
name|attribute
operator|+
literal|"' to value '"
operator|+
name|value
operator|+
literal|"', make sure the field exists and is public."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|CombinationTestSupport
index|[]
name|getCombinations
parameter_list|()
block|{
try|try
block|{
name|Method
name|method
init|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"initCombos"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
name|String
name|name
init|=
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|comboSetupMethodName
init|=
literal|"initCombosFor"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|comboSetupMethodName
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
try|try
block|{
name|ArrayList
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|expandedOptions
init|=
operator|new
name|ArrayList
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|expandCombinations
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ComboOption
argument_list|>
argument_list|(
name|comboOptions
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|expandedOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|expandedOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|combosEvaluated
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|CombinationTestSupport
index|[]
block|{
name|this
block|}
return|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|CombinationTestSupport
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|CombinationTestSupport
argument_list|>
argument_list|()
decl_stmt|;
comment|// Run the test case for each possible combination
for|for
control|(
name|Iterator
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|expandedOptions
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CombinationTestSupport
name|combo
init|=
operator|(
name|CombinationTestSupport
operator|)
name|TestSuite
operator|.
name|createTest
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|combo
operator|.
name|combosEvaluated
operator|=
literal|true
expr_stmt|;
name|combo
operator|.
name|setOptions
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|combo
argument_list|)
expr_stmt|;
block|}
name|CombinationTestSupport
name|rc
index|[]
init|=
operator|new
name|CombinationTestSupport
index|[
name|result
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|result
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|combosEvaluated
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|CombinationTestSupport
index|[]
block|{
name|this
block|}
return|;
block|}
block|}
specifier|private
name|void
name|expandCombinations
parameter_list|(
name|List
argument_list|<
name|ComboOption
argument_list|>
name|optionsLeft
parameter_list|,
name|List
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|expandedCombos
parameter_list|)
block|{
if|if
condition|(
operator|!
name|optionsLeft
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
if|if
condition|(
name|comboOptions
operator|.
name|size
argument_list|()
operator|==
name|optionsLeft
operator|.
name|size
argument_list|()
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|expandedCombos
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
name|expandedCombos
operator|.
name|get
argument_list|(
name|expandedCombos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|ComboOption
argument_list|>
name|l
init|=
operator|new
name|LinkedList
argument_list|<
name|ComboOption
argument_list|>
argument_list|(
name|optionsLeft
argument_list|)
decl_stmt|;
name|ComboOption
name|comboOption
init|=
name|l
operator|.
name|removeLast
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter
init|=
name|comboOption
operator|.
name|values
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|value
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|expandedCombos
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|comboOption
operator|.
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|expandCombinations
argument_list|(
name|l
argument_list|,
name|expandedCombos
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CombinationTestSupport
argument_list|>
name|clazz
parameter_list|)
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
operator|!
name|isPublicTestMethod
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Test
name|test
init|=
name|TestSuite
operator|.
name|createTest
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|instanceof
name|CombinationTestSupport
condition|)
block|{
name|CombinationTestSupport
index|[]
name|combinations
init|=
operator|(
operator|(
name|CombinationTestSupport
operator|)
name|test
operator|)
operator|.
name|getCombinations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|combinations
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|suite
operator|.
name|addTest
argument_list|(
name|combinations
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|suite
operator|.
name|addTest
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|suite
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isPublicTestMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
return|return
name|isTestMethod
argument_list|(
name|m
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isTestMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Class
index|[]
name|parameters
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Class
name|returnType
init|=
name|m
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
return|return
name|parameters
operator|.
name|length
operator|==
literal|0
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
operator|&&
name|returnType
operator|.
name|equals
argument_list|(
name|Void
operator|.
name|TYPE
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getName
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|boolean
name|original
parameter_list|)
block|{
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
operator|!
name|original
condition|)
block|{
return|return
name|super
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|options
return|;
block|}
return|return
name|super
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

