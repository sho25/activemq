begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ErrorBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|RedeliveryPolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RedeliveryPluginTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RedeliveryPluginTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|RedeliveryPlugin
name|underTest
init|=
operator|new
name|RedeliveryPlugin
argument_list|()
decl_stmt|;
specifier|public
name|void
name|testInstallPluginValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|RedeliveryPolicyMap
name|redeliveryPolicyMap
init|=
operator|new
name|RedeliveryPolicyMap
argument_list|()
decl_stmt|;
name|RedeliveryPolicy
name|defaultEntry
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|redeliveryPolicyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setRedeliveryPolicyMap
argument_list|(
name|redeliveryPolicyMap
argument_list|)
expr_stmt|;
specifier|final
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setSchedulerSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Broker
name|broker
init|=
operator|new
name|ErrorBroker
argument_list|(
literal|"hi"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|BrokerService
name|getBrokerService
parameter_list|()
block|{
return|return
name|brokerService
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|underTest
operator|.
name|installPlugin
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect exception on no scheduler support"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"expected: "
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
name|brokerService
operator|.
name|setSchedulerSupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|underTest
operator|.
name|installPlugin
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect exception on small initial delay"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"expected: "
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
name|defaultEntry
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setRedeliveryDelay
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setSchedulerSupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|underTest
operator|.
name|installPlugin
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect exception on small redelivery delay"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"expected: "
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

