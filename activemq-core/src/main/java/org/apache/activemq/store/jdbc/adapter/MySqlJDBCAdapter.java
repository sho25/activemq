begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|Statements
import|;
end_import

begin_comment
comment|/**  *   * @org.apache.xbean.XBean element="mysql-jdbc-adapter"  *   */
end_comment

begin_class
specifier|public
class|class
name|MySqlJDBCAdapter
extends|extends
name|DefaultJDBCAdapter
block|{
comment|// The transactional types..
specifier|public
specifier|static
specifier|final
name|String
name|INNODB
init|=
literal|"INNODB"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NDBCLUSTER
init|=
literal|"NDBCLUSTER"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BDB
init|=
literal|"BDB"
decl_stmt|;
comment|// The non transactional types..
specifier|public
specifier|static
specifier|final
name|String
name|MYISAM
init|=
literal|"MYISAM"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ISAM
init|=
literal|"ISAM"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MERGE
init|=
literal|"MERGE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEAP
init|=
literal|"HEAP"
decl_stmt|;
name|String
name|engineType
init|=
name|INNODB
decl_stmt|;
name|String
name|typeStatement
init|=
literal|"ENGINE"
decl_stmt|;
specifier|public
name|void
name|setStatements
parameter_list|(
name|Statements
name|statements
parameter_list|)
block|{
name|String
name|type
init|=
name|engineType
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|INNODB
argument_list|)
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|NDBCLUSTER
argument_list|)
condition|)
block|{
comment|// Don't use LOCK TABLE for the INNODB and NDBCLUSTER engine types...
name|statements
operator|.
name|setLockCreateStatement
argument_list|(
literal|"LOCK TABLE "
operator|+
name|statements
operator|.
name|getFullLockTableName
argument_list|()
operator|+
literal|" WRITE"
argument_list|)
expr_stmt|;
block|}
name|statements
operator|.
name|setBinaryDataType
argument_list|(
literal|"LONGBLOB"
argument_list|)
expr_stmt|;
name|String
name|typeClause
init|=
name|typeStatement
operator|+
literal|"="
operator|+
name|type
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|NDBCLUSTER
argument_list|)
condition|)
block|{
comment|// in the NDBCLUSTER case we will create as INNODB and then alter to NDBCLUSTER
name|typeClause
operator|=
name|typeStatement
operator|+
literal|"="
operator|+
name|INNODB
expr_stmt|;
block|}
comment|// Update the create statements so they use the right type of engine
name|String
index|[]
name|s
init|=
name|statements
operator|.
name|getCreateSchemaStatements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|s
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"CREATE TABLE"
argument_list|)
condition|)
block|{
name|s
index|[
name|i
index|]
operator|=
name|s
index|[
name|i
index|]
operator|+
literal|" "
operator|+
name|typeClause
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|NDBCLUSTER
argument_list|)
condition|)
block|{
comment|// Add the alter statements.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"ALTER TABLE "
operator|+
name|statements
operator|.
name|getFullMessageTableName
argument_list|()
operator|+
literal|" ENGINE="
operator|+
name|NDBCLUSTER
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"ALTER TABLE "
operator|+
name|statements
operator|.
name|getFullAckTableName
argument_list|()
operator|+
literal|" ENGINE="
operator|+
name|NDBCLUSTER
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"ALTER TABLE "
operator|+
name|statements
operator|.
name|getFullLockTableName
argument_list|()
operator|+
literal|" ENGINE="
operator|+
name|NDBCLUSTER
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
literal|"FLUSH TABLES"
argument_list|)
expr_stmt|;
name|s
operator|=
name|l
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|l
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setCreateSchemaStatements
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setStatements
argument_list|(
name|statements
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getEngineType
parameter_list|()
block|{
return|return
name|engineType
return|;
block|}
specifier|public
name|void
name|setEngineType
parameter_list|(
name|String
name|engineType
parameter_list|)
block|{
name|this
operator|.
name|engineType
operator|=
name|engineType
expr_stmt|;
block|}
specifier|public
name|String
name|getTypeStatement
parameter_list|()
block|{
return|return
name|typeStatement
return|;
block|}
specifier|public
name|void
name|setTypeStatement
parameter_list|(
name|String
name|typeStatement
parameter_list|)
block|{
name|this
operator|.
name|typeStatement
operator|=
name|typeStatement
expr_stmt|;
block|}
block|}
end_class

end_unit

