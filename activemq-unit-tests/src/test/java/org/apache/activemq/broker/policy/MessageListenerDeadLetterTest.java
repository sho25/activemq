begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MessageListenerDeadLetterTest
extends|extends
name|DeadLetterTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MessageListenerDeadLetterTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|rollbackCount
decl_stmt|;
specifier|private
name|Session
name|dlqSession
decl_stmt|;
specifier|private
specifier|final
name|Error
index|[]
name|error
init|=
operator|new
name|Error
index|[
literal|1
index|]
decl_stmt|;
specifier|protected
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|messageCount
operator|=
literal|200
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQConnection
name|amqConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|connection
decl_stmt|;
name|rollbackCount
operator|=
name|amqConnection
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getMaximumRedeliveries
argument_list|()
operator|+
literal|1
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Will redeliver messages: "
operator|+
name|rollbackCount
operator|+
literal|" times"
argument_list|)
expr_stmt|;
name|makeConsumer
argument_list|()
expr_stmt|;
name|makeDlqConsumer
argument_list|()
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
comment|// now lets receive and rollback N times
name|int
name|maxRollbacks
init|=
name|messageCount
operator|*
name|rollbackCount
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|RollbackMessageListener
argument_list|(
name|maxRollbacks
argument_list|,
name|rollbackCount
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|dlqConsumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
comment|// error from message listener
throw|throw
name|error
index|[
literal|0
index|]
throw|;
block|}
name|assertMessage
argument_list|(
name|msg
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should be a DLQ message for loop: "
operator|+
name|i
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
index|[
literal|0
index|]
throw|;
block|}
block|}
specifier|protected
name|void
name|makeDlqConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|dlqDestination
operator|=
name|createDlqDestination
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consuming from dead letter on: "
operator|+
name|dlqDestination
argument_list|)
expr_stmt|;
name|dlqConsumer
operator|=
name|dlqSession
operator|.
name|createConsumer
argument_list|(
name|dlqDestination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|transactedMode
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|dlqSession
operator|=
name|connection
operator|.
name|createSession
argument_list|(
name|transactedMode
argument_list|,
name|acknowledgeMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|dlqConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dlqSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|answer
init|=
name|super
operator|.
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|RedeliveryPolicy
name|policy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setBackOffMultiplier
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setRedeliveryPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|Destination
name|createDlqDestination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
return|;
block|}
class|class
name|RollbackMessageListener
implements|implements
name|MessageListener
block|{
specifier|final
name|int
name|maxRollbacks
decl_stmt|;
specifier|final
name|int
name|deliveryCount
decl_stmt|;
name|AtomicInteger
name|rollbacks
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|RollbackMessageListener
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|delvery
parameter_list|)
block|{
name|maxRollbacks
operator|=
name|c
expr_stmt|;
name|deliveryCount
operator|=
name|delvery
expr_stmt|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|int
name|expectedMessageId
init|=
name|rollbacks
operator|.
name|get
argument_list|()
operator|/
name|deliveryCount
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expecting messageId: "
operator|+
name|expectedMessageId
argument_list|)
expr_stmt|;
name|assertMessage
argument_list|(
name|message
argument_list|,
name|expectedMessageId
argument_list|)
expr_stmt|;
if|if
condition|(
name|rollbacks
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|maxRollbacks
condition|)
block|{
name|fail
argument_list|(
literal|"received too many messages, already done too many rollbacks: "
operator|+
name|rollbacks
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected exception:"
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// propagating assertError to execution task will cause a hang
comment|// at shutdown
if|if
condition|(
name|e
operator|instanceof
name|Error
condition|)
block|{
name|error
index|[
literal|0
index|]
operator|=
operator|(
name|Error
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

