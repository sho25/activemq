begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|buffer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Allows messages to be added to the end of the buffer such that they are kept  * around and evicted in a FIFO manner.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|MessageQueue
block|{
specifier|private
name|MessageBuffer
name|buffer
decl_stmt|;
specifier|private
name|LinkedList
argument_list|<
name|MessageReference
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|position
decl_stmt|;
specifier|public
name|MessageQueue
parameter_list|(
name|MessageBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|MessageReference
name|messageRef
parameter_list|)
block|{
name|Message
name|message
init|=
name|messageRef
operator|.
name|getMessageHardRef
argument_list|()
decl_stmt|;
name|int
name|delta
init|=
name|message
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|int
name|newSize
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|list
operator|.
name|add
argument_list|(
name|messageRef
argument_list|)
expr_stmt|;
name|size
operator|+=
name|delta
expr_stmt|;
name|newSize
operator|=
name|size
expr_stmt|;
block|}
name|buffer
operator|.
name|onSizeChanged
argument_list|(
name|this
argument_list|,
name|delta
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
block|{
name|int
name|delta
init|=
name|message
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|int
name|newSize
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|list
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|size
operator|+=
name|delta
expr_stmt|;
name|newSize
operator|=
name|size
expr_stmt|;
block|}
name|buffer
operator|.
name|onSizeChanged
argument_list|(
name|this
argument_list|,
name|delta
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|evictMessage
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|list
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|int
name|messageSize
init|=
name|message
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|size
operator|-=
name|messageSize
expr_stmt|;
return|return
name|messageSize
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**      * Returns a copy of the list      */
specifier|public
name|List
argument_list|<
name|MessageReference
argument_list|>
name|getList
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|appendMessages
parameter_list|(
name|List
argument_list|<
name|MessageReference
argument_list|>
name|answer
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|size
return|;
block|}
block|}
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
specifier|public
name|void
name|setPosition
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

