begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|LdapConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|message
operator|.
name|BindResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|message
operator|.
name|ModifyDnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|ldap
operator|.
name|client
operator|.
name|api
operator|.
name|message
operator|.
name|ModifyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ApplyLdifFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|FrameworkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|ldap
operator|.
name|ldif
operator|.
name|LdifEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|ldap
operator|.
name|ldif
operator|.
name|LdifReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|ldap
operator|.
name|message
operator|.
name|ResultCodeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|ldap
operator|.
name|name
operator|.
name|DN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|ldap
operator|.
name|name
operator|.
name|RDN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|FrameworkRunner
operator|.
name|class
argument_list|)
annotation|@
name|CreateLdapServer
argument_list|(
name|transports
operator|=
block|{
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAP"
argument_list|)
block|}
argument_list|)
annotation|@
name|ApplyLdifFiles
argument_list|(
literal|"org/apache/activemq/security/activemq-apacheds.ldif"
argument_list|)
specifier|public
class|class
name|CachedLDAPAuthorizationModuleTest
extends|extends
name|AbstractLdapTestUnit
block|{
specifier|static
specifier|final
name|GroupPrincipal
name|GUESTS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"guests"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|USERS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|ADMINS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"admins"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|readACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admin group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|Set
name|failedACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"FAILED"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|0
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildcards
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map1
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map1
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|fooACLs
init|=
name|map1
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"FOO.1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|fooACLs
argument_list|,
literal|2
argument_list|,
name|fooACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admin group"
argument_list|,
name|fooACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|fooACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|CachedLDAPAuthorizationMap
name|map2
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map2
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|barACLs
init|=
name|map2
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"BAR.2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|barACLs
argument_list|,
literal|2
argument_list|,
name|barACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admin group"
argument_list|,
name|barACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|barACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|readACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Connection"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admin group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTemporary
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|query
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Set
name|readACLs
init|=
name|map
operator|.
name|getTempDestinationReadACLs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admin group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|failedACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"FAILED"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|0
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LdapConnection
name|connection
init|=
operator|new
name|LdapConnection
argument_list|(
literal|"localhost"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|BindResponse
name|bindResponse
init|=
name|connection
operator|.
name|bind
argument_list|(
literal|"uid=admin,ou=system"
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bindResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCodeEnum
operator|.
name|SUCCESS
argument_list|,
name|bindResponse
operator|.
name|getLdapResult
argument_list|()
operator|.
name|getResultCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|isAuthenticated
argument_list|()
argument_list|)
expr_stmt|;
name|LdifReader
name|reader
init|=
operator|new
name|LdifReader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/activemq/security/add.ldif"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|entries
init|=
name|service
operator|.
name|getTestEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|LdifEntry
name|entry
range|:
name|reader
control|)
block|{
name|connection
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|failedACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"FAILED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|2
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|failedACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|2
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LdapConnection
name|connection
init|=
operator|new
name|LdapConnection
argument_list|(
literal|"localhost"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|BindResponse
name|bindResponse
init|=
name|connection
operator|.
name|bind
argument_list|(
literal|"uid=admin,ou=system"
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bindResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCodeEnum
operator|.
name|SUCCESS
argument_list|,
name|bindResponse
operator|.
name|getLdapResult
argument_list|()
operator|.
name|getResultCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|isAuthenticated
argument_list|()
argument_list|)
expr_stmt|;
name|LdifReader
name|reader
init|=
operator|new
name|LdifReader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/activemq/security/delete.ldif"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LdifEntry
argument_list|>
name|entries
init|=
name|service
operator|.
name|getTestEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|LdifEntry
name|entry
range|:
name|reader
control|)
block|{
name|connection
operator|.
name|delete
argument_list|(
name|entry
operator|.
name|getDn
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|failedACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|0
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|failedACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|2
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LdapConnection
name|connection
init|=
operator|new
name|LdapConnection
argument_list|(
literal|"localhost"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|BindResponse
name|bindResponse
init|=
name|connection
operator|.
name|bind
argument_list|(
literal|"uid=admin,ou=system"
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bindResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCodeEnum
operator|.
name|SUCCESS
argument_list|,
name|bindResponse
operator|.
name|getLdapResult
argument_list|()
operator|.
name|getResultCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|isAuthenticated
argument_list|()
argument_list|)
expr_stmt|;
name|ModifyDnResponse
name|resp
init|=
name|connection
operator|.
name|rename
argument_list|(
operator|new
name|DN
argument_list|(
literal|"cn=TEST.FOO,ou=Queue,ou=Destination,ou=ActiveMQ,ou=system"
argument_list|)
argument_list|,
operator|new
name|RDN
argument_list|(
literal|"cn=TEST.BAR"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|failedACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|0
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|failedACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.BAR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|2
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChange
parameter_list|()
throws|throws
name|Exception
block|{
name|CachedLDAPAuthorizationMap
name|map
init|=
operator|new
name|CachedLDAPAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|query
argument_list|()
expr_stmt|;
name|Set
name|failedACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|2
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LdapConnection
name|connection
init|=
operator|new
name|LdapConnection
argument_list|(
literal|"localhost"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|BindResponse
name|bindResponse
init|=
name|connection
operator|.
name|bind
argument_list|(
literal|"uid=admin,ou=system"
argument_list|,
literal|"secret"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bindResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCodeEnum
operator|.
name|SUCCESS
argument_list|,
name|bindResponse
operator|.
name|getLdapResult
argument_list|()
operator|.
name|getResultCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|.
name|isAuthenticated
argument_list|()
argument_list|)
expr_stmt|;
name|DN
name|dn
init|=
operator|new
name|DN
argument_list|(
literal|"cn=read,cn=TEST.FOO,ou=Queue,ou=Destination,ou=ActiveMQ,ou=system"
argument_list|)
decl_stmt|;
name|ModifyRequest
name|request
init|=
operator|new
name|ModifyRequest
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|request
operator|.
name|remove
argument_list|(
literal|"member"
argument_list|,
literal|"cn=users"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|modify
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|failedACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|failedACLs
argument_list|,
literal|1
argument_list|,
name|failedACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

