begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|JmsResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|TestSupport
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.9 $  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|JmsTransactionTestSupport
extends|extends
name|TestSupport
implements|implements
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
name|log
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JmsTransactionTestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|MessageProducer
name|producer
decl_stmt|;
specifier|protected
name|JmsResourceProvider
name|resourceProvider
decl_stmt|;
specifier|protected
name|Destination
name|destination
decl_stmt|;
comment|// for message listener test
specifier|private
specifier|final
name|int
name|messageCount
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
name|String
name|messageText
init|=
literal|"message"
decl_stmt|;
specifier|private
name|List
name|unackMessages
init|=
operator|new
name|ArrayList
argument_list|(
name|messageCount
argument_list|)
decl_stmt|;
specifier|private
name|List
name|ackMessages
init|=
operator|new
name|ArrayList
argument_list|(
name|messageCount
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|resendPhase
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|batchCount
init|=
literal|10
decl_stmt|;
specifier|protected
name|int
name|batchSize
init|=
literal|20
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|public
name|JmsTransactionTestSupport
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JmsTransactionTestSupport
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see junit.framework.TestCase#setUp()      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceProvider
operator|=
name|getJmsResourceProvider
argument_list|()
expr_stmt|;
name|topic
operator|=
name|resourceProvider
operator|.
name|isTopic
argument_list|()
expr_stmt|;
comment|// We will be using transacted sessions.
name|resourceProvider
operator|.
name|setTransacted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
name|resourceProvider
operator|.
name|createConnectionFactory
argument_list|()
expr_stmt|;
name|reconnect
argument_list|()
expr_stmt|;
block|}
comment|/**      */
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
throws|,
name|URISyntaxException
block|{
return|return
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker://()/localhost?persistent=false"
argument_list|)
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see junit.framework.TestCase#tearDown()      */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Closing down connection"
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Connection closed."
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|JmsResourceProvider
name|getJmsResourceProvider
parameter_list|()
function_decl|;
comment|/**      * Sends a batch of messages and validates that the messages are received.      *      * @throws Exception      */
specifier|public
name|void
name|testSendReceiveTransactedBatches
parameter_list|()
throws|throws
name|Exception
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Batch Message"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batchCount
condition|;
name|j
operator|++
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Producing bacth "
operator|+
name|j
operator|+
literal|" of "
operator|+
name|batchSize
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Consuming bacth "
operator|+
name|j
operator|+
literal|" of "
operator|+
name|batchSize
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
operator|*
literal|5
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Received only "
operator|+
name|i
operator|+
literal|" messages in batch "
operator|+
name|j
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Batch Message"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sends a batch of messages and validates that the rollbacked message was not consumed.      *      * @throws Exception      */
specifier|public
name|void
name|testSendRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|}
decl_stmt|;
comment|//sends a message
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//sends a message that gets rollbacked
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"I'm going to get rolled back."
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|//sends a message
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//receives the first message
name|ArrayList
name|messages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 1"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
comment|//receives the second message
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 2"
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
comment|//validates that the rollbacked was not consumed
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Message
name|inbound
index|[]
init|=
operator|new
name|Message
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|messages
operator|.
name|toArray
argument_list|(
name|inbound
argument_list|)
expr_stmt|;
name|assertTextMessagesEqual
argument_list|(
literal|"Rollback did not work."
argument_list|,
name|outbound
argument_list|,
name|inbound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a batch of messages and validates that the message sent before session close is not consumed.      *      * @throws Exception      */
specifier|public
name|void
name|testSendSessionClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|}
decl_stmt|;
comment|//sends a message
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//sends a message that gets rollbacked
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"I'm going to get rolled back."
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reconnectSession
argument_list|()
expr_stmt|;
comment|//sends a message
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//receives the first message
name|ArrayList
name|messages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 1"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
comment|//receives the second message
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 2"
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
comment|//validates that the rollbacked was not consumed
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Message
name|inbound
index|[]
init|=
operator|new
name|Message
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|messages
operator|.
name|toArray
argument_list|(
name|inbound
argument_list|)
expr_stmt|;
name|assertTextMessagesEqual
argument_list|(
literal|"Rollback did not work."
argument_list|,
name|outbound
argument_list|,
name|inbound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a batch of messages and validates that the message sent before session close is not consumed.      *      * @throws Exception      */
specifier|public
name|void
name|testSendSessionAndConnectionClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|}
decl_stmt|;
comment|//sends a message
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//sends a message that gets rollbacked
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"I'm going to get rolled back."
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|reconnect
argument_list|()
expr_stmt|;
comment|//sends a message
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//receives the first message
name|ArrayList
name|messages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 1"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
comment|//receives the second message
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 2"
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
comment|//validates that the rollbacked was not consumed
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Message
name|inbound
index|[]
init|=
operator|new
name|Message
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|messages
operator|.
name|toArray
argument_list|(
name|inbound
argument_list|)
expr_stmt|;
name|assertTextMessagesEqual
argument_list|(
literal|"Rollback did not work."
argument_list|,
name|outbound
argument_list|,
name|inbound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a batch of messages and validates that the rollbacked message was redelivered.      *      * @throws Exception      */
specifier|public
name|void
name|testReceiveRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|}
decl_stmt|;
comment|// lets consume any outstanding messages from prev test runs
while|while
condition|(
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
operator|!=
literal|null
condition|)
block|{         }
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//sent both messages
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sent 0: "
operator|+
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sent 1: "
operator|+
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ArrayList
name|messages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// rollback so we can get that last message again.
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// Consume again.. the prev message should
comment|// get redelivered.
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have re-received the message again!"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Message
name|inbound
index|[]
init|=
operator|new
name|Message
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|messages
operator|.
name|toArray
argument_list|(
name|inbound
argument_list|)
expr_stmt|;
name|assertTextMessagesEqual
argument_list|(
literal|"Rollback did not work"
argument_list|,
name|outbound
argument_list|,
name|inbound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a batch of messages and validates that the rollbacked message was redelivered.      *      * @throws Exception      */
specifier|public
name|void
name|testReceiveTwoThenRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|}
decl_stmt|;
comment|// lets consume any outstanding messages from prev test runs
while|while
condition|(
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
operator|!=
literal|null
condition|)
block|{         }
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sent 0: "
operator|+
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sent 1: "
operator|+
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ArrayList
name|messages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// Consume again.. the prev message should
comment|// get redelivered.
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have re-received the first message again!"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have re-received the second message again!"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveNoWait
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Message
name|inbound
index|[]
init|=
operator|new
name|Message
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|messages
operator|.
name|toArray
argument_list|(
name|inbound
argument_list|)
expr_stmt|;
name|assertTextMessagesEqual
argument_list|(
literal|"Rollback did not work"
argument_list|,
name|outbound
argument_list|,
name|inbound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a batch of messages and validates that the rollbacked message was not consumed.      *      * @throws Exception      */
specifier|public
name|void
name|testSendReceiveWithPrefetchOne
parameter_list|()
throws|throws
name|Exception
block|{
name|setPrefetchToOne
argument_list|()
expr_stmt|;
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Third Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Fourth Message"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outbound
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//sends a message
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//receives the first message
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outbound
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 1"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
comment|//validates that the rollbacked was not consumed
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * Perform the test that validates if the rollbacked message was redelivered multiple times.      *      * @throws Exception      */
specifier|public
name|void
name|testReceiveTwoThenRollbackManyTimes
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
name|testReceiveTwoThenRollback
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sends a batch of messages and validates that the rollbacked message was not consumed. This test differs by      * setting the message prefetch to one.      *      * @throws Exception      */
specifier|public
name|void
name|testSendRollbackWithPrefetchOfOne
parameter_list|()
throws|throws
name|Exception
block|{
name|setPrefetchToOne
argument_list|()
expr_stmt|;
name|testSendRollback
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sends a batch of messages and  and validates that the rollbacked message was redelivered. This test differs by      * setting the message prefetch to one.      *      * @throws Exception      */
specifier|public
name|void
name|testReceiveRollbackWithPrefetchOfOne
parameter_list|()
throws|throws
name|Exception
block|{
name|setPrefetchToOne
argument_list|()
expr_stmt|;
name|testReceiveRollback
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests if the messages can still be received if the consumer is closed (session is not closed).      *      * @throws Exception see http://jira.codehaus.org/browse/AMQ-143      */
specifier|public
name|void
name|testCloseConsumerBeforeCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|TextMessage
index|[]
name|outbound
init|=
operator|new
name|TextMessage
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|}
decl_stmt|;
comment|// lets consume any outstanding messages from prev test runs
while|while
condition|(
name|consumer
operator|.
name|receiveNoWait
argument_list|()
operator|!=
literal|null
condition|)
block|{         }
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|//sends the messages
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sent 0: "
operator|+
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sent 1: "
operator|+
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the consumer before the commit.  This should not cause the received message
comment|// to rollback.
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Create a new consumer
name|consumer
operator|=
name|resourceProvider
operator|.
name|createConsumer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created consumer: "
operator|+
name|consumer
argument_list|)
expr_stmt|;
name|message
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testChangeMutableObjectInObjectMessageThenRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"First"
argument_list|)
expr_stmt|;
name|Message
name|outbound
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setStringProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"About to consume message 1"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|List
name|body
init|=
name|assertReceivedObjectMessageWithListBody
argument_list|(
name|message
argument_list|)
decl_stmt|;
comment|// now lets try mutate it
try|try
block|{
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot change properties of the object!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Caught expected exception: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|body
operator|.
name|clear
argument_list|()
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
literal|"This should never be seen!"
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|List
name|secondBody
init|=
name|assertReceivedObjectMessageWithListBody
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"Second call should return a different body"
argument_list|,
name|secondBody
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|List
name|assertReceivedObjectMessageWithListBody
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|assertNotNull
argument_list|(
literal|"Should have received a message!"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo header"
argument_list|,
literal|"abc"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be an object message but was: "
operator|+
name|message
argument_list|,
name|message
operator|instanceof
name|ObjectMessage
argument_list|)
expr_stmt|;
name|ObjectMessage
name|objectMessage
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|List
name|body
init|=
operator|(
name|List
operator|)
name|objectMessage
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received body: "
operator|+
name|body
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of list should be 1"
argument_list|,
literal|1
argument_list|,
name|body
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"element 0 of list"
argument_list|,
literal|"First"
argument_list|,
name|body
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|body
return|;
block|}
comment|/**      * Recreates the connection.      *       * @throws JMSException      */
specifier|protected
name|void
name|reconnect
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
comment|// Close the prev connection.
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|session
operator|=
literal|null
expr_stmt|;
name|connection
operator|=
name|resourceProvider
operator|.
name|createConnection
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|reconnectSession
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Recreates the connection.      *       * @throws JMSException      */
specifier|protected
name|void
name|reconnectSession
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|session
operator|=
name|resourceProvider
operator|.
name|createSession
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|destination
operator|=
name|resourceProvider
operator|.
name|createDestination
argument_list|(
name|session
argument_list|,
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|=
name|resourceProvider
operator|.
name|createProducer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|resourceProvider
operator|.
name|createConsumer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the prefeftch policy to one.      */
specifier|protected
name|void
name|setPrefetchToOne
parameter_list|()
block|{
name|ActiveMQPrefetchPolicy
name|prefetchPolicy
init|=
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|getPrefetchPolicy
argument_list|()
decl_stmt|;
name|prefetchPolicy
operator|.
name|setQueuePrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefetchPolicy
operator|.
name|setTopicPrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefetchPolicy
operator|.
name|setDurableTopicPrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefetchPolicy
operator|.
name|setOptimizeDurableTopicPrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMessageListener
parameter_list|()
throws|throws
name|Exception
block|{
comment|//send messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
name|messageText
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//wait receive
name|waitReceiveUnack
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|unackMessages
operator|.
name|size
argument_list|()
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
comment|//resend phase
name|waitReceiveAck
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ackMessages
operator|.
name|size
argument_list|()
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
comment|//should no longer re-receive
name|consumer
operator|.
name|setMessageListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receive
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|reconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|resendPhase
condition|)
block|{
name|unackMessages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|unackMessages
operator|.
name|size
argument_list|()
operator|==
name|messageCount
condition|)
block|{
try|try
block|{
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|resendPhase
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ackMessages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|ackMessages
operator|.
name|size
argument_list|()
operator|==
name|messageCount
condition|)
block|{
try|try
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|waitReceiveUnack
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
operator|&&
operator|!
name|resendPhase
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|resendPhase
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitReceiveAck
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
operator|&&
name|ackMessages
operator|.
name|size
argument_list|()
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|ackMessages
operator|.
name|size
argument_list|()
operator|<
name|messageCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

