begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|JmsQueueSelectorTest
extends|extends
name|JmsTopicSelectorTest
block|{
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|topic
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRedeliveryWithSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|consumer
operator|=
name|createConsumer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// send a message that would go to this consumer, but not to the next consumer we open
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSType
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"stringProperty"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setLongProperty
argument_list|(
literal|"longProperty"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"booleanProperty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// don't consume any messages.. close the consumer so that messages that had
comment|// been dispatched get marked as delivered, and queued for redelivery
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send a message that will match the selector for the next consumer
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSType
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"stringProperty"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setLongProperty
argument_list|(
literal|"longProperty"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"booleanProperty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|createConsumer
argument_list|(
literal|"stringProperty = 'a' and longProperty = 1 and booleanProperty = true"
argument_list|)
expr_stmt|;
comment|// now we, should only receive 1 message, not two
name|int
name|remaining
init|=
literal|2
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|recievedMsg
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|recievedMsg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|recievedMsg
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|String
name|text
init|=
operator|(
operator|(
name|TextMessage
operator|)
name|recievedMsg
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
operator|&&
operator|!
name|text
operator|.
name|equals
argument_list|(
literal|"3"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"unexpected message: "
operator|+
name|text
argument_list|)
expr_stmt|;
block|}
name|remaining
operator|--
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumeMessages
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

