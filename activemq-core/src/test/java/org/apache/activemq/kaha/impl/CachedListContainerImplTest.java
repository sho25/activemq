begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|IndexTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|KahaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
operator|.
name|ListContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|DataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexManager
import|;
end_import

begin_comment
comment|/**  * Junit tests for CachedListContainerImpl  *   * @version $Revision: 439552 $  */
end_comment

begin_class
specifier|public
class|class
name|CachedListContainerImplTest
extends|extends
name|TestCase
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|KahaStore
name|store
decl_stmt|;
specifier|protected
name|int
name|MAX_CACHE_SIZE
init|=
literal|10
decl_stmt|;
specifier|protected
name|KahaStore
name|getStore
parameter_list|()
throws|throws
name|IOException
block|{
name|KahaStore
name|store
init|=
operator|new
name|KahaStore
argument_list|(
name|name
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|store
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|store
return|;
block|}
specifier|public
name|void
name|testAdds
parameter_list|()
throws|throws
name|Exception
block|{
name|ListContainerImpl
name|list
init|=
name|getStoreList
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
name|data
init|=
name|getDataList
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|cached
init|=
name|getCachedList
argument_list|(
name|MAX_CACHE_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cached
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cached
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAddsIntoCacheSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|ListContainerImpl
name|list
init|=
name|getStoreList
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|int
name|initialDataSize
init|=
literal|50
decl_stmt|;
name|List
name|data
init|=
name|getDataList
argument_list|(
name|initialDataSize
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|cached
init|=
name|getCachedList
argument_list|(
name|MAX_CACHE_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|MAX_CACHE_SIZE
operator|/
literal|2
init|;
name|i
operator|<
name|cached
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_CACHE_SIZE
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|MAX_CACHE_SIZE
operator|/
literal|2
init|;
name|i
operator|<
name|MAX_CACHE_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRemoves
parameter_list|()
throws|throws
name|Exception
block|{
name|ListContainerImpl
name|list
init|=
name|getStoreList
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|int
name|initialDataSize
init|=
literal|10
decl_stmt|;
name|List
name|data
init|=
name|getDataList
argument_list|(
name|initialDataSize
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|cached
init|=
name|getCachedList
argument_list|(
name|MAX_CACHE_SIZE
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|cached
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cached
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNotSame
argument_list|(
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialDataSize
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// repopulate the cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_CACHE_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cached
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCacheSize
parameter_list|()
throws|throws
name|Exception
block|{
name|ListContainerImpl
name|list
init|=
name|getStoreList
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
name|data
init|=
name|getDataList
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInserts
parameter_list|()
throws|throws
name|Exception
block|{
name|ListContainerImpl
name|list
init|=
name|getStoreList
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|List
name|data
init|=
name|getDataList
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|cached
init|=
name|getCachedList
argument_list|(
name|MAX_CACHE_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cached
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MAX_CACHE_SIZE
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cached
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cached
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|list
operator|.
name|getCacheList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ListContainerImpl
name|getStoreList
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|containerName
init|=
literal|"test"
decl_stmt|;
name|DataManager
name|dm
init|=
name|store
operator|.
name|getDataManager
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|IndexManager
name|im
init|=
name|store
operator|.
name|getIndexManager
argument_list|(
name|dm
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
operator|new
name|ContainerId
argument_list|()
decl_stmt|;
name|containerId
operator|.
name|setKey
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|containerId
operator|.
name|setDataContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|IndexItem
name|root
init|=
name|store
operator|.
name|getListsContainer
argument_list|()
operator|.
name|addRoot
argument_list|(
name|im
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|ListContainerImpl
name|result
init|=
operator|new
name|ListContainerImpl
argument_list|(
name|containerId
argument_list|,
name|root
argument_list|,
name|im
argument_list|,
name|dm
argument_list|,
name|IndexTypes
operator|.
name|DISK_INDEX
argument_list|)
decl_stmt|;
name|result
operator|.
name|expressDataInterest
argument_list|()
expr_stmt|;
name|result
operator|.
name|setMaximumCacheSize
argument_list|(
name|MAX_CACHE_SIZE
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|List
name|getDataList
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"data:"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|List
name|getCachedList
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"cached:"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|name
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/target/activemq-data/store-test.db"
expr_stmt|;
name|store
operator|=
name|getStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|rc
init|=
name|StoreFactory
operator|.
name|delete
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

