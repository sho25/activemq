begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|sasl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_comment
comment|/**  * Implements the SASL Plain mechanism.  */
end_comment

begin_class
specifier|public
class|class
name|PlainMechanism
extends|extends
name|AbstractSaslMechanism
block|{
annotation|@
name|Override
specifier|public
name|void
name|processSaslStep
parameter_list|(
name|Sasl
name|sasl
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|sasl
operator|.
name|pending
argument_list|()
index|]
decl_stmt|;
name|sasl
operator|.
name|recv
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|Buffer
index|[]
name|parts
init|=
operator|new
name|Buffer
argument_list|(
name|data
argument_list|)
operator|.
name|split
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|parts
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
comment|// Treat this as anonymous connect to support legacy behavior
comment|// which allowed this.  Connection will fail if broker is not
comment|// configured to allow anonymous connections.
break|break;
case|case
literal|2
case|:
name|username
operator|=
name|parts
index|[
literal|0
index|]
operator|.
name|utf8
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|password
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|utf8
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|username
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|utf8
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|password
operator|=
name|parts
index|[
literal|2
index|]
operator|.
name|utf8
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|setFailed
argument_list|(
literal|"Invalid encoding of Authentication credentials"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMechanismName
parameter_list|()
block|{
return|return
literal|"PLAIN"
return|;
block|}
block|}
end_class

end_unit

