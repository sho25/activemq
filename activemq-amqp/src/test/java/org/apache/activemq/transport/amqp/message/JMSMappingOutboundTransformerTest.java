begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_NULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_SEQUENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_UNKNOWN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_VALUE_BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_ORIGINAL_ENCODING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|JMSMappingOutboundTransformer
operator|.
name|JMS_DEST_TYPE_MSG_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|JMSMappingOutboundTransformer
operator|.
name|JMS_REPLY_TO_TYPE_MSG_ANNOTATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|JMSMappingOutboundTransformer
operator|.
name|QUEUE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|JMSMappingOutboundTransformer
operator|.
name|TEMP_QUEUE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|JMSMappingOutboundTransformer
operator|.
name|TEMP_TOPIC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|JMSMappingOutboundTransformer
operator|.
name|TOPIC_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|MessageAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|JMSMappingOutboundTransformerTest
block|{
specifier|private
specifier|final
name|UUID
name|TEST_OBJECT_VALUE
init|=
name|UUID
operator|.
name|fromString
argument_list|(
literal|"fee14b62-09e0-4ac6-a4c3-4206c630d844"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|TEST_ADDRESS
init|=
literal|"queue://testAddress"
decl_stmt|;
comment|//----- no-body Message type tests ---------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageToAmqpMessageWithNoBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|outbound
init|=
name|createMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertTextMessageToAmqpMessageWithNoBodyOriginalEncodingWasNull
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|outbound
init|=
name|createTextMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_NULL
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//----- BytesMessage type tests ---------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertEmptyBytesMessageToAmqpMessageWithDataBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQBytesMessage
name|outbound
init|=
name|createBytesMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertUncompressedBytesMessageToAmqpMessageWithDataBody
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expectedPayload
init|=
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|16
block|,
literal|24
block|,
literal|32
block|}
decl_stmt|;
name|ActiveMQBytesMessage
name|outbound
init|=
name|createBytesMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|writeBytes
argument_list|(
name|expectedPayload
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Binary
name|amqpData
init|=
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Binary
name|inputData
init|=
operator|new
name|Binary
argument_list|(
name|expectedPayload
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inputData
operator|.
name|equals
argument_list|(
name|amqpData
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedBytesMessageToAmqpMessageWithDataBody
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expectedPayload
init|=
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|16
block|,
literal|24
block|,
literal|32
block|}
decl_stmt|;
name|ActiveMQBytesMessage
name|outbound
init|=
name|createBytesMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|writeBytes
argument_list|(
name|expectedPayload
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Binary
name|amqpData
init|=
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Binary
name|inputData
init|=
operator|new
name|Binary
argument_list|(
name|expectedPayload
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inputData
operator|.
name|equals
argument_list|(
name|amqpData
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertEmptyBytesMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQBytesMessage
name|outbound
init|=
name|createBytesMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_VALUE_BINARY
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertUncompressedBytesMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expectedPayload
init|=
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|16
block|,
literal|24
block|,
literal|32
block|}
decl_stmt|;
name|ActiveMQBytesMessage
name|outbound
init|=
name|createBytesMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_VALUE_BINARY
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|writeBytes
argument_list|(
name|expectedPayload
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Binary
name|amqpData
init|=
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Binary
name|inputData
init|=
operator|new
name|Binary
argument_list|(
name|expectedPayload
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inputData
operator|.
name|equals
argument_list|(
name|amqpData
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedBytesMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expectedPayload
init|=
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|16
block|,
literal|24
block|,
literal|32
block|}
decl_stmt|;
name|ActiveMQBytesMessage
name|outbound
init|=
name|createBytesMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_VALUE_BINARY
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|writeBytes
argument_list|(
name|expectedPayload
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Binary
name|amqpData
init|=
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Binary
name|inputData
init|=
operator|new
name|Binary
argument_list|(
name|expectedPayload
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inputData
operator|.
name|equals
argument_list|(
name|amqpData
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//----- MapMessage type tests --------------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertMapMessageToAmqpMessageWithNoBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMapMessage
name|outbound
init|=
name|createMapMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMapMessageToAmqpMessageWithByteArrayValueInBody
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|ActiveMQMapMessage
name|outbound
init|=
name|createMapMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setBytes
argument_list|(
literal|"bytes"
argument_list|,
name|byteArray
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|amqpMap
init|=
call|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|amqpMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Binary
name|readByteArray
init|=
operator|(
name|Binary
operator|)
name|amqpMap
operator|.
name|get
argument_list|(
literal|"bytes"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|readByteArray
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMapMessageToAmqpMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMapMessage
name|outbound
init|=
name|createMapMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setString
argument_list|(
literal|"property-1"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|setInt
argument_list|(
literal|"property-2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|setBoolean
argument_list|(
literal|"property-3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|amqpMap
init|=
call|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amqpMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"string"
operator|.
name|equals
argument_list|(
name|amqpMap
operator|.
name|get
argument_list|(
literal|"property-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedMapMessageToAmqpMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMapMessage
name|outbound
init|=
name|createMapMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setString
argument_list|(
literal|"property-1"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|setInt
argument_list|(
literal|"property-2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|setBoolean
argument_list|(
literal|"property-3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|amqpMap
init|=
call|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amqpMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"string"
operator|.
name|equals
argument_list|(
name|amqpMap
operator|.
name|get
argument_list|(
literal|"property-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//----- StreamMessage type tests -----------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertStreamMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQStreamMessage
name|outbound
init|=
name|createStreamMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertStreamMessageToAmqpMessageWithAmqpSequencey
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQStreamMessage
name|outbound
init|=
name|createStreamMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_SEQUENCE
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpSequence
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpSequence
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedStreamMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQStreamMessage
name|outbound
init|=
name|createStreamMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|writeString
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|amqpList
init|=
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amqpList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedStreamMessageToAmqpMessageWithAmqpSequencey
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQStreamMessage
name|outbound
init|=
name|createStreamMessage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_SEQUENCE
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|writeString
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpSequence
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpSequence
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|amqpList
init|=
operator|(
operator|(
name|AmqpSequence
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amqpList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//----- ObjectMessage type tests -----------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertEmptyObjectMessageToAmqpMessageWithDataBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertEmptyObjectMessageToAmqpMessageUnknownEncodingGetsDataSection
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_UNKNOWN
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertEmptyObjectMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_VALUE_BINARY
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertObjectMessageToAmqpMessageWithDataBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|(
name|TEST_OBJECT_VALUE
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|deserialize
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|UUID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertObjectMessageToAmqpMessageUnknownEncodingGetsDataSection
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|(
name|TEST_OBJECT_VALUE
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_UNKNOWN
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|deserialize
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|UUID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertObjectMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|(
name|TEST_OBJECT_VALUE
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_VALUE_BINARY
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|deserialize
argument_list|(
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|UUID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedObjectMessageToAmqpMessageWithDataBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|(
name|TEST_OBJECT_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|deserialize
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|UUID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedObjectMessageToAmqpMessageUnknownEncodingGetsDataSection
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|(
name|TEST_OBJECT_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_UNKNOWN
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|deserialize
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|getArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|UUID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedObjectMessageToAmqpMessageWithAmqpValueBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|outbound
init|=
name|createObjectMessage
argument_list|(
name|TEST_OBJECT_VALUE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_VALUE_BINARY
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|deserialize
argument_list|(
operator|(
call|(
name|Binary
call|)
argument_list|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|UUID
argument_list|)
expr_stmt|;
block|}
comment|//----- TextMessage type tests -------------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertTextMessageToAmqpMessageWithNoBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|outbound
init|=
name|createTextMessage
argument_list|()
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertTextMessageCreatesBodyUsingOriginalEncodingWithDataSection
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentString
init|=
literal|"myTextMessageContent"
decl_stmt|;
name|ActiveMQTextMessage
name|outbound
init|=
name|createTextMessage
argument_list|(
name|contentString
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_DATA
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|Binary
name|data
init|=
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
operator|new
name|String
argument_list|(
name|data
operator|.
name|getArray
argument_list|()
argument_list|,
name|data
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|contentString
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertTextMessageContentNotStoredCreatesBodyUsingOriginalEncodingWithDataSection
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentString
init|=
literal|"myTextMessageContent"
decl_stmt|;
name|ActiveMQTextMessage
name|outbound
init|=
name|createTextMessage
argument_list|(
name|contentString
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_DATA
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|Binary
name|data
init|=
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
operator|new
name|String
argument_list|(
name|data
operator|.
name|getArray
argument_list|()
argument_list|,
name|data
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|contentString
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertTextMessageCreatesAmqpValueStringBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentString
init|=
literal|"myTextMessageContent"
decl_stmt|;
name|ActiveMQTextMessage
name|outbound
init|=
name|createTextMessage
argument_list|(
name|contentString
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|contentString
argument_list|,
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertTextMessageContentNotStoredCreatesAmqpValueStringBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentString
init|=
literal|"myTextMessageContent"
decl_stmt|;
name|ActiveMQTextMessage
name|outbound
init|=
name|createTextMessage
argument_list|(
name|contentString
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|AmqpValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|contentString
argument_list|,
operator|(
operator|(
name|AmqpValue
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertCompressedTextMessageCreatesDataSectionBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentString
init|=
literal|"myTextMessageContent"
decl_stmt|;
name|ActiveMQTextMessage
name|outbound
init|=
name|createTextMessage
argument_list|(
name|contentString
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|setShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|,
name|AMQP_DATA
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|outbound
operator|.
name|storeContent
argument_list|()
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|outbound
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amqp
operator|.
name|getBody
argument_list|()
operator|instanceof
name|Data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Binary
argument_list|)
expr_stmt|;
name|Binary
name|data
init|=
operator|(
operator|(
name|Data
operator|)
name|amqp
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
operator|new
name|String
argument_list|(
name|data
operator|.
name|getArray
argument_list|()
argument_list|,
name|data
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|contentString
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
comment|//----- Test JMSDestination Handling -------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSDestinationNull
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSDestination
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSDestinationQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSDestination
argument_list|(
name|createMockDestination
argument_list|(
name|QUEUE_TYPE
argument_list|)
argument_list|,
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSDestinationTemporaryQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSDestination
argument_list|(
name|createMockDestination
argument_list|(
name|TEMP_QUEUE_TYPE
argument_list|)
argument_list|,
name|TEMP_QUEUE_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSDestinationTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSDestination
argument_list|(
name|createMockDestination
argument_list|(
name|TOPIC_TYPE
argument_list|)
argument_list|,
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSDestinationTemporaryTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSDestination
argument_list|(
name|createMockDestination
argument_list|(
name|TEMP_TOPIC_TYPE
argument_list|)
argument_list|,
name|TEMP_TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestConvertMessageWithJMSDestination
parameter_list|(
name|ActiveMQDestination
name|jmsDestination
parameter_list|,
name|Object
name|expectedAnnotationValue
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|mockTextMessage
init|=
name|createMockTextMessage
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockTextMessage
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"myTextMessageContent"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockTextMessage
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jmsDestination
argument_list|)
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|mockTextMessage
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|MessageAnnotations
name|ma
init|=
name|amqp
operator|.
name|getMessageAnnotations
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|maMap
init|=
name|ma
operator|==
literal|null
condition|?
literal|null
else|:
name|ma
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|maMap
operator|!=
literal|null
condition|)
block|{
name|Object
name|actualValue
init|=
name|maMap
operator|.
name|get
argument_list|(
name|JMS_DEST_TYPE_MSG_ANNOTATION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected annotation value"
argument_list|,
name|expectedAnnotationValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedAnnotationValue
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Expected annotation value, but there were no annotations"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsDestination
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected 'to' address"
argument_list|,
name|jmsDestination
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|amqp
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//----- Test JMSReplyTo Handling -----------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSReplyToNull
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSReplyTo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSReplyToQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSReplyTo
argument_list|(
name|createMockDestination
argument_list|(
name|QUEUE_TYPE
argument_list|)
argument_list|,
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSReplyToTemporaryQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSReplyTo
argument_list|(
name|createMockDestination
argument_list|(
name|TEMP_QUEUE_TYPE
argument_list|)
argument_list|,
name|TEMP_QUEUE_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSReplyToTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSReplyTo
argument_list|(
name|createMockDestination
argument_list|(
name|TOPIC_TYPE
argument_list|)
argument_list|,
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertMessageWithJMSReplyToTemporaryTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConvertMessageWithJMSReplyTo
argument_list|(
name|createMockDestination
argument_list|(
name|TEMP_TOPIC_TYPE
argument_list|)
argument_list|,
name|TEMP_TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestConvertMessageWithJMSReplyTo
parameter_list|(
name|ActiveMQDestination
name|jmsReplyTo
parameter_list|,
name|Object
name|expectedAnnotationValue
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|mockTextMessage
init|=
name|createMockTextMessage
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockTextMessage
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"myTextMessageContent"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockTextMessage
operator|.
name|getReplyTo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|jmsReplyTo
argument_list|)
expr_stmt|;
name|JMSMappingOutboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingOutboundTransformer
argument_list|()
decl_stmt|;
name|EncodedMessage
name|encoded
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|mockTextMessage
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Message
name|amqp
init|=
name|encoded
operator|.
name|decode
argument_list|()
decl_stmt|;
name|MessageAnnotations
name|ma
init|=
name|amqp
operator|.
name|getMessageAnnotations
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|maMap
init|=
name|ma
operator|==
literal|null
condition|?
literal|null
else|:
name|ma
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|maMap
operator|!=
literal|null
condition|)
block|{
name|Object
name|actualValue
init|=
name|maMap
operator|.
name|get
argument_list|(
name|JMS_REPLY_TO_TYPE_MSG_ANNOTATION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected annotation value"
argument_list|,
name|expectedAnnotationValue
argument_list|,
name|actualValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedAnnotationValue
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Expected annotation value, but there were no annotations"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsReplyTo
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected 'reply-to' address"
argument_list|,
name|jmsReplyTo
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|amqp
operator|.
name|getReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//----- Utility Methods used for this Test -------------------------------//
specifier|private
name|ActiveMQTextMessage
name|createMockTextMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|mockTextMessage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQTextMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockTextMessage
operator|.
name|getPropertyNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|enumeration
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockTextMessage
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|byte
operator|)
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|mockTextMessage
return|;
block|}
specifier|private
name|ActiveMQDestination
name|createMockDestination
parameter_list|(
name|byte
name|destType
parameter_list|)
block|{
name|ActiveMQDestination
name|mockDestination
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|destType
condition|)
block|{
case|case
name|QUEUE_TYPE
case|:
name|mockDestination
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"queue://"
operator|+
name|TEST_ADDRESS
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|isQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|TOPIC_TYPE
case|:
name|mockDestination
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQTopic
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"topic://"
operator|+
name|TEST_ADDRESS
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|isTopic
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|TEMP_QUEUE_TYPE
case|:
name|mockDestination
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQTempQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"tempQueue://"
operator|+
name|TEST_ADDRESS
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|isQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|isTemporary
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|TEMP_TOPIC_TYPE
case|:
name|mockDestination
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQTempTopic
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"tempTopic://"
operator|+
name|TEST_ADDRESS
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|isTopic
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDestination
operator|.
name|isTemporary
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invliad Destination Type given/"
argument_list|)
throw|;
block|}
return|return
name|mockDestination
return|;
block|}
specifier|private
name|ActiveMQMessage
name|createMessage
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQMessage
argument_list|()
return|;
block|}
specifier|private
name|ActiveMQBytesMessage
name|createBytesMessage
parameter_list|()
block|{
return|return
name|createBytesMessage
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQBytesMessage
name|createBytesMessage
parameter_list|(
name|boolean
name|compression
parameter_list|)
block|{
name|ActiveMQBytesMessage
name|message
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|ActiveMQConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|isUseCompression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQMapMessage
name|createMapMessage
parameter_list|()
block|{
return|return
name|createMapMessage
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQMapMessage
name|createMapMessage
parameter_list|(
name|boolean
name|compression
parameter_list|)
block|{
name|ActiveMQMapMessage
name|message
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|ActiveMQConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|isUseCompression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQStreamMessage
name|createStreamMessage
parameter_list|()
block|{
return|return
name|createStreamMessage
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQStreamMessage
name|createStreamMessage
parameter_list|(
name|boolean
name|compression
parameter_list|)
block|{
name|ActiveMQStreamMessage
name|message
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|ActiveMQConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|isUseCompression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQObjectMessage
name|createObjectMessage
parameter_list|()
block|{
return|return
name|createObjectMessage
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQObjectMessage
name|createObjectMessage
parameter_list|(
name|Serializable
name|payload
parameter_list|)
block|{
return|return
name|createObjectMessage
argument_list|(
name|payload
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQObjectMessage
name|createObjectMessage
parameter_list|(
name|Serializable
name|payload
parameter_list|,
name|boolean
name|compression
parameter_list|)
block|{
name|ActiveMQObjectMessage
name|result
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|ActiveMQConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|isUseCompression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|setConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|result
operator|.
name|setObject
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Should not fail to setObject in this test"
argument_list|)
throw|;
block|}
name|result
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
name|result
argument_list|)
expr_stmt|;
try|try
block|{
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"invalid setObject"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|result
argument_list|)
operator|.
name|setObject
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Serializable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"invalid getObject"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|result
argument_list|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
return|return
name|result
return|;
block|}
specifier|private
name|ActiveMQTextMessage
name|createTextMessage
parameter_list|()
block|{
return|return
name|createTextMessage
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQTextMessage
name|createTextMessage
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|createTextMessage
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQTextMessage
name|createTextMessage
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|compression
parameter_list|)
block|{
name|ActiveMQTextMessage
name|result
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|compression
condition|)
block|{
name|ActiveMQConnection
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|isUseCompression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|setConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|result
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
return|return
name|result
return|;
block|}
specifier|private
name|Object
name|deserialize
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
argument_list|)
init|;
name|ObjectInputStream
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|bis
argument_list|)
init|;
init|)
block|{
return|return
name|ois
operator|.
name|readObject
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

