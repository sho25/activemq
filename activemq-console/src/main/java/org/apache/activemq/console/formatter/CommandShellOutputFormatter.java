begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|formatter
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|CommandShellOutputFormatter
implements|implements
name|OutputFormatter
block|{
specifier|private
name|OutputStream
name|outputStream
decl_stmt|;
specifier|private
name|PrintStream
name|out
decl_stmt|;
specifier|public
name|CommandShellOutputFormatter
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|outputStream
operator|=
name|out
expr_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|PrintStream
condition|)
block|{
name|this
operator|.
name|out
operator|=
operator|(
name|PrintStream
operator|)
name|out
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieve the output stream being used by the formatter      * @return      */
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|outputStream
return|;
block|}
comment|/**      * Print an ObjectInstance format of an mbean      * @param mbean - mbean to print      */
specifier|public
name|void
name|printMBean
parameter_list|(
name|ObjectInstance
name|mbean
parameter_list|)
block|{
name|printMBean
argument_list|(
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Print an ObjectName format of an mbean      * @param mbean - mbean to print      */
specifier|public
name|void
name|printMBean
parameter_list|(
name|ObjectName
name|mbean
parameter_list|)
block|{
name|printMBean
argument_list|(
name|mbean
operator|.
name|getKeyPropertyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Print an AttributeList format of an mbean      * @param mbean - mbean to print      */
specifier|public
name|void
name|printMBean
parameter_list|(
name|AttributeList
name|mbean
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|mbean
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|attrib
init|=
operator|(
name|Attribute
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|getValue
argument_list|()
operator|instanceof
name|ObjectName
condition|)
block|{
name|printMBean
argument_list|(
operator|(
name|ObjectName
operator|)
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attrib
operator|.
name|getValue
argument_list|()
operator|instanceof
name|ObjectInstance
condition|)
block|{
name|printMBean
argument_list|(
operator|(
name|ObjectInstance
operator|)
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|attrib
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|attrib
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Print a Map format of an mbean      * @param mbean - mbean to print      */
specifier|public
name|void
name|printMBean
parameter_list|(
name|Map
name|mbean
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|mbean
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|mbean
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" = "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      * Print a collection of mbean      * @param mbean - collection of mbeans      */
specifier|public
name|void
name|printMBean
parameter_list|(
name|Collection
name|mbean
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|mbean
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|obj
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|ObjectInstance
condition|)
block|{
name|printMBean
argument_list|(
operator|(
name|ObjectInstance
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ObjectName
condition|)
block|{
name|printMBean
argument_list|(
operator|(
name|ObjectName
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
name|printMBean
argument_list|(
operator|(
name|Map
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|AttributeList
condition|)
block|{
name|printMBean
argument_list|(
operator|(
name|AttributeList
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
name|printMessage
argument_list|(
operator|(
name|Collection
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unknown mbean type: "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Print a Map format of a JMS message      * @param msg      */
specifier|public
name|void
name|printMessage
parameter_list|(
name|Map
name|msg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|msg
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|msg
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" = "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      * Print a Message format of a JMS message      * @param msg - JMS message to print      */
specifier|public
name|void
name|printMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
comment|// TODO
block|}
comment|/**      * Print a collection of JMS messages      * @param msg - collection of JMS messages      */
specifier|public
name|void
name|printMessage
parameter_list|(
name|Collection
name|msg
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|msg
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|obj
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Message
condition|)
block|{
name|printMessage
argument_list|(
operator|(
name|Message
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
name|printMessage
argument_list|(
operator|(
name|Map
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
name|printMessage
argument_list|(
operator|(
name|Collection
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unknown message type: "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Print help messages      * @param helpMsgs - help messages to print      */
specifier|public
name|void
name|printHelp
parameter_list|(
name|String
index|[]
name|helpMsgs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|helpMsgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|helpMsgs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      * Print an information message      * @param info - information message to print      */
specifier|public
name|void
name|printInfo
parameter_list|(
name|String
name|info
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"INFO: "
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**      * Print an exception message      * @param e - exception to print      */
specifier|public
name|void
name|printException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Print a version information      * @param version - version info to print      */
specifier|public
name|void
name|printVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"ActiveMQ "
operator|+
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"For help or more information please see: http://www.logicblaze.com"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Print a generic key value mapping      * @param map to print      */
specifier|public
name|void
name|print
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" = "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      * Print a generic array of strings      * @param strings - string array to print      */
specifier|public
name|void
name|print
parameter_list|(
name|String
index|[]
name|strings
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      * Print a collection of objects      * @param collection - collection to print      */
specifier|public
name|void
name|print
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      * Print a java string      * @param string - string to print      */
specifier|public
name|void
name|print
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

