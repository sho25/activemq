begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|plist
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PListTest
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PListTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PListStore
name|store
decl_stmt|;
specifier|private
name|PList
name|plist
decl_stmt|;
specifier|final
name|ByteSequence
name|payload
init|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[
literal|400
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|idSeed
init|=
operator|new
name|String
argument_list|(
literal|"Seed"
operator|+
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|Vector
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAddLast
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|plist
operator|.
name|size
argument_list|()
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteSequence
name|bs
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|origStr
init|=
operator|new
name|String
argument_list|(
name|bs
operator|.
name|getData
argument_list|()
argument_list|,
name|bs
operator|.
name|getOffset
argument_list|()
argument_list|,
name|bs
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|PListEntry
name|entry
init|=
name|plist
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|String
name|plistString
init|=
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|origStr
argument_list|,
name|plistString
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFirst
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addFirst
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|plist
operator|.
name|size
argument_list|()
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|plist
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ByteSequence
name|bs
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|origStr
init|=
operator|new
name|String
argument_list|(
name|bs
operator|.
name|getData
argument_list|()
argument_list|,
name|bs
operator|.
name|getOffset
argument_list|()
argument_list|,
name|bs
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|PListEntry
name|entry
init|=
name|plist
operator|.
name|get
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|String
name|plistString
init|=
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|origStr
argument_list|,
name|plistString
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestRemove
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doTestRemove
parameter_list|(
specifier|final
name|int
name|COUNT
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|plist
operator|.
name|size
argument_list|()
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
name|PListEntry
name|entry
init|=
name|plist
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|plist
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|=
name|plist
operator|.
name|getFirst
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDestroy
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRemove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|plist
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDestroyNonEmpty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|test
init|=
operator|new
name|String
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|test
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
name|test
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
name|plist
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSecond
parameter_list|()
throws|throws
name|Exception
block|{
name|plist
operator|.
name|addLast
argument_list|(
literal|"First"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"A"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
literal|"Second"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"B"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|"Second"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|"First"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|"doesNotExist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSingleEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|plist
operator|.
name|addLast
argument_list|(
literal|"First"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"A"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|PListEntry
argument_list|>
name|iterator
init|=
name|plist
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSecondPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|plist
operator|.
name|addLast
argument_list|(
literal|"First"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"A"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|plist
operator|.
name|addLast
argument_list|(
literal|"Second"
argument_list|,
operator|new
name|ByteSequence
argument_list|(
literal|"B"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plist
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setCleanupInterval
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|1024
operator|*
literal|5
argument_list|)
expr_stmt|;
name|store
operator|.
name|setLazyInit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ByteSequence
name|payload
init|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[
literal|1024
operator|*
literal|2
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|Vector
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|numLists
init|=
literal|10
decl_stmt|;
specifier|final
name|PList
index|[]
name|lists
init|=
operator|new
name|PList
index|[
name|numLists
index|]
decl_stmt|;
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"C:"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|lists
index|[
name|i
index|]
operator|=
name|store
operator|.
name|getPList
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|100
argument_list|)
expr_stmt|;
class|class
name|A
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|PList
name|candidate
init|=
name|lists
index|[
name|i
operator|%
name|numLists
index|]
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"ALRF:"
operator|+
name|candidate
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|plistLocks
argument_list|(
name|candidate
argument_list|)
init|)
block|{
name|candidate
operator|.
name|addLast
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|candidate
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|candidate
operator|.
name|remove
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpcted ex"
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
class|class
name|B
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|PList
name|candidate
init|=
name|lists
index|[
name|i
operator|%
name|numLists
index|]
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"ALRF:"
operator|+
name|candidate
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|plistLocks
argument_list|(
name|candidate
argument_list|)
init|)
block|{
name|candidate
operator|.
name|addLast
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|candidate
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|candidate
operator|.
name|remove
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|A
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|boolean
name|finishedInTime
init|=
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions"
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"finished ok"
argument_list|,
name|finishedInTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddLast
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numThreads
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|1000
decl_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ITERATE
argument_list|,
name|iterations
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
operator|+
literal|20
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|boolean
name|finishedInTime
init|=
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|60
operator|*
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"finished ok"
argument_list|,
name|finishedInTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverFlow
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
literal|5
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"After Load index file: "
operator|+
name|store
operator|.
name|pageFile
operator|.
name|getFile
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After remove index file: "
operator|+
name|store
operator|.
name|pageFile
operator|.
name|getFile
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddRemoveWithPreload
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|1024
operator|*
literal|5
argument_list|)
expr_stmt|;
name|store
operator|.
name|setCleanupInterval
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|store
operator|.
name|setIndexWriteBatchSize
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|500
decl_stmt|;
specifier|final
name|int
name|numLists
init|=
literal|10
decl_stmt|;
comment|// prime the store
comment|// create/delete
name|LOG
operator|.
name|info
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|CREATE
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|DELETE
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"fill"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"remove"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|REMOVE
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"check empty"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"empty "
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|store
operator|.
name|getPList
argument_list|(
literal|"List-"
operator|+
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"delete again"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|DELETE
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"fill again"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"parallel add and remove"
argument_list|)
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numLists
operator|*
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|i
operator|>=
name|numLists
condition|?
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
else|:
name|PListTest
operator|.
name|TaskType
operator|.
name|REMOVE
argument_list|,
name|iterations
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wait for parallel work to complete"
argument_list|)
expr_stmt|;
name|boolean
name|finishedInTime
init|=
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|60
operator|*
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions"
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"finished ok"
argument_list|,
name|finishedInTime
argument_list|)
expr_stmt|;
block|}
comment|// for non determinant issues, increasing this may help diagnose
specifier|final
name|int
name|numRepeats
init|=
literal|1
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testRepeatStressWithCache
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRepeats
condition|;
name|i
operator|++
control|)
block|{
name|do_testConcurrentAddIterateRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepeatStressWithOutCache
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRepeats
condition|;
name|i
operator|++
control|)
block|{
name|do_testConcurrentAddIterateRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|do_testConcurrentAddIterateRemove
parameter_list|(
name|boolean
name|enablePageCache
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setIndexEnablePageCaching
argument_list|(
name|enablePageCache
argument_list|)
expr_stmt|;
name|store
operator|.
name|setIndexPageSize
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|500
decl_stmt|;
specifier|final
name|int
name|numLists
init|=
literal|10
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|CREATE
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"fill"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"parallel add and remove"
argument_list|)
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|400
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numProducer
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|numConsumer
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numProducer
condition|;
name|j
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
name|iterations
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numConsumer
condition|;
name|k
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|TaskType
operator|.
name|ITERATE_REMOVE
argument_list|,
name|iterations
operator|/
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|numLists
init|;
name|i
operator|<
name|numLists
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
name|iterations
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wait for parallel work to complete"
argument_list|)
expr_stmt|;
name|boolean
name|shutdown
init|=
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|60
operator|*
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"test did not  timeout "
argument_list|,
name|shutdown
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialAddIterate
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setIndexPageSize
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|store
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|100
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setCleanupInterval
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|setIndexEnablePageCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|setIndexWriteBatchSize
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|store
operator|.
name|setEnableIndexWriteAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|numLists
init|=
literal|1
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|CREATE
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"serial add and iterate"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
literal|0
argument_list|,
name|TaskType
operator|.
name|ADD
argument_list|,
name|i
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
operator|new
name|Job
argument_list|(
literal|0
argument_list|,
name|TaskType
operator|.
name|ITERATE
argument_list|,
literal|0
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num dataFiles:"
operator|+
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddIterate
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
name|store
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setIndexPageSize
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|store
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setCleanupInterval
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|setIndexEnablePageCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|setIndexWriteBatchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|250
decl_stmt|;
specifier|final
name|int
name|numLists
init|=
literal|10
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|CREATE
argument_list|,
name|iterations
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"parallel add and iterate"
argument_list|)
expr_stmt|;
comment|// We want a lot of adds occurring so that new free pages get created along
comment|// with overlapping seeks from the iterators so that we are likely to seek into
comment|// some bad area in the page file.
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|400
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numProducer
init|=
literal|300
decl_stmt|;
specifier|final
name|int
name|numConsumer
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLists
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numProducer
condition|;
name|j
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|PListTest
operator|.
name|TaskType
operator|.
name|ADD
argument_list|,
name|iterations
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numConsumer
condition|;
name|k
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Job
argument_list|(
name|i
argument_list|,
name|TaskType
operator|.
name|ITERATE
argument_list|,
name|iterations
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wait for parallel work to complete"
argument_list|)
expr_stmt|;
name|boolean
name|shutdown
init|=
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|60
operator|*
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"test did not  timeout "
argument_list|,
name|shutdown
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num dataFiles:"
operator|+
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
enum|enum
name|TaskType
block|{
name|CREATE
block|,
name|DELETE
block|,
name|ADD
block|,
name|REMOVE
block|,
name|ITERATE
block|,
name|ITERATE_REMOVE
block|}
class|class
name|Job
implements|implements
name|Runnable
block|{
name|int
name|id
decl_stmt|;
name|TaskType
name|task
decl_stmt|;
name|int
name|iterations
decl_stmt|;
specifier|public
name|Job
parameter_list|(
name|int
name|id
parameter_list|,
name|TaskType
name|t
parameter_list|,
name|int
name|iterations
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|PList
name|plist
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|task
condition|)
block|{
case|case
name|CREATE
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"C:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|plist
operator|=
name|store
operator|.
name|getPList
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job-"
operator|+
name|id
operator|+
literal|", CREATE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"D:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|store
operator|.
name|removePList
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADD
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"A:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|plist
operator|=
name|store
operator|.
name|getPList
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iterations
condition|;
name|j
operator|++
control|)
block|{
synchronized|synchronized
init|(
name|plistLocks
argument_list|(
name|plist
argument_list|)
init|)
block|{
if|if
condition|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|plist
operator|.
name|addLast
argument_list|(
literal|"PL>"
operator|+
name|id
operator|+
name|idSeed
operator|+
literal|"-"
operator|+
name|j
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job-"
operator|+
name|id
operator|+
literal|", Add, done: "
operator|+
name|iterations
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|REMOVE
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"R:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|plist
operator|=
name|store
operator|.
name|getPList
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|plistLocks
argument_list|(
name|plist
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|j
init|=
name|iterations
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|plist
operator|.
name|remove
argument_list|(
literal|"PL>"
operator|+
name|id
operator|+
name|idSeed
operator|+
literal|"-"
operator|+
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
operator|&&
name|j
operator|%
operator|(
name|iterations
operator|/
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job-"
operator|+
name|id
operator|+
literal|" Done remove: "
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|ITERATE
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"I:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|plist
operator|=
name|store
operator|.
name|getPList
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|iterateCount
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|plistLocks
argument_list|(
name|plist
argument_list|)
init|)
block|{
if|if
condition|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|PListEntry
argument_list|>
name|iterator
init|=
name|plist
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterateCount
operator|++
expr_stmt|;
block|}
comment|//LOG.info("Job-" + id + " Done iterate: it=" + iterator + ", count:" + iterateCount + ", size:" + plist.size());
if|if
condition|(
name|plist
operator|.
name|size
argument_list|()
operator|!=
name|iterateCount
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Count Wrong: "
operator|+
name|iterator
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"iterate got all "
operator|+
name|id
operator|+
literal|" iterator:"
operator|+
name|iterator
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|,
name|iterateCount
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|ITERATE_REMOVE
case|:
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"IRM:"
operator|+
name|id
argument_list|)
expr_stmt|;
name|plist
operator|=
name|store
operator|.
name|getPList
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|removeCount
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|plistLocks
argument_list|(
name|plist
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|PListEntry
argument_list|>
name|removeIterator
init|=
name|plist
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|removeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|removeIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|removeIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|removeCount
operator|++
operator|>
name|iterations
condition|)
block|{
break|break;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Job-"
operator|+
name|id
operator|+
literal|" Done remove: "
operator|+
name|removeCount
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Job["
operator|+
name|id
operator|+
literal|"] caught exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|PList
argument_list|,
name|Object
argument_list|>
name|locks
init|=
operator|new
name|HashMap
argument_list|<
name|PList
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Object
name|plistLocks
parameter_list|(
name|PList
name|plist
parameter_list|)
block|{
name|Object
name|lock
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|locks
init|)
block|{
if|if
condition|(
name|locks
operator|.
name|containsKey
argument_list|(
name|plist
argument_list|)
condition|)
block|{
name|lock
operator|=
name|locks
operator|.
name|get
argument_list|(
name|plist
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lock
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|plist
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lock
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
literal|"/tmp/target/test/PlistDB"
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|startStore
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startStore
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|=
operator|new
name|PListStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|plist
operator|=
name|store
operator|.
name|getPList
argument_list|(
literal|"main"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

