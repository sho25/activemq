begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|spring
operator|.
name|ConsumerBean
import|;
end_import

begin_comment
comment|/**  *  * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|VirtualTopicPubSubTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
name|Vector
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
operator|new
name|Vector
argument_list|<
name|Connection
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|int
name|ackMode
init|=
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
decl_stmt|;
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|VirtualTopicPubSubTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|void
name|initCombosForTestVirtualTopicCreation
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"ackMode"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|doneTwice
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|testVirtualTopicCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestVirtualTopicCreation
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestVirtualTopicCreation
parameter_list|(
name|int
name|total
parameter_list|)
throws|throws
name|Exception
block|{
name|ConsumerBean
name|messageList
init|=
operator|new
name|ConsumerBean
argument_list|()
block|{
specifier|public
specifier|synchronized
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|super
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|ackMode
operator|==
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
condition|)
block|{
try|try
block|{
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|messageList
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|queueAName
init|=
name|getVirtualTopicConsumerName
argument_list|()
decl_stmt|;
comment|// create consumer 'cluster'
name|ActiveMQQueue
name|queue1
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|queueAName
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|queue2
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|queueAName
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|createStartAndTrackConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|ackMode
argument_list|)
decl_stmt|;
name|MessageConsumer
name|c1
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue1
argument_list|)
decl_stmt|;
name|session
operator|=
name|createStartAndTrackConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|ackMode
argument_list|)
expr_stmt|;
name|MessageConsumer
name|c2
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue2
argument_list|)
decl_stmt|;
name|c1
operator|.
name|setMessageListener
argument_list|(
name|messageList
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setMessageListener
argument_list|(
name|messageList
argument_list|)
expr_stmt|;
comment|// create topic producer
name|Session
name|producerSession
init|=
name|createStartAndTrackConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|ackMode
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|producerSession
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|getVirtualTopicName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|producer
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|producerSession
operator|.
name|createTextMessage
argument_list|(
literal|"message: "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|messageList
operator|.
name|assertMessagesArrived
argument_list|(
name|total
argument_list|)
expr_stmt|;
comment|// do twice so we confirm messages do not get redelivered after client acknowledgement
if|if
condition|(
name|doneTwice
operator|==
literal|false
condition|)
block|{
name|doneTwice
operator|=
literal|true
expr_stmt|;
name|doTestVirtualTopicCreation
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Connection
name|createStartAndTrackConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|protected
name|String
name|getVirtualTopicName
parameter_list|()
block|{
return|return
literal|"VirtualTopic.TEST"
return|;
block|}
specifier|protected
name|String
name|getVirtualTopicConsumerName
parameter_list|()
block|{
return|return
literal|"Consumer.A.VirtualTopic.TEST"
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Connection
name|connection
range|:
name|connections
control|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

