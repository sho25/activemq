begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoBroker
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultConfigurationProcessor
implements|implements
name|ConfigurationProcessor
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultConfigurationProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|RuntimeConfigurationBroker
name|plugin
decl_stmt|;
name|Class
name|configurationClass
decl_stmt|;
name|Pattern
name|matchPassword
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"password=.*,"
argument_list|)
decl_stmt|;
specifier|public
name|DefaultConfigurationProcessor
parameter_list|(
name|RuntimeConfigurationBroker
name|plugin
parameter_list|,
name|Class
name|configurationClass
parameter_list|)
block|{
name|this
operator|.
name|plugin
operator|=
name|plugin
expr_stmt|;
name|this
operator|.
name|configurationClass
operator|=
name|configurationClass
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processChanges
parameter_list|(
name|DtoBroker
name|currentConfiguration
parameter_list|,
name|DtoBroker
name|modifiedConfiguration
parameter_list|)
block|{
name|List
name|current
init|=
name|filter
argument_list|(
name|currentConfiguration
argument_list|,
name|configurationClass
argument_list|)
decl_stmt|;
name|List
name|modified
init|=
name|filter
argument_list|(
name|modifiedConfiguration
argument_list|,
name|configurationClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|equals
argument_list|(
name|modified
argument_list|)
condition|)
block|{
name|plugin
operator|.
name|debug
argument_list|(
literal|"no changes to "
operator|+
name|configurationClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"changes to "
operator|+
name|configurationClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|processChanges
argument_list|(
name|current
argument_list|,
name|modified
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processChanges
parameter_list|(
name|List
name|current
parameter_list|,
name|List
name|modified
parameter_list|)
block|{
name|int
name|modIndex
init|=
literal|0
decl_stmt|,
name|currentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|modIndex
operator|<
name|modified
operator|.
name|size
argument_list|()
operator|&&
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
operator|,
name|currentIndex
operator|++
control|)
block|{
comment|// walk the list for mods
name|applyModifications
argument_list|(
name|getContents
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
argument_list|)
argument_list|,
name|getContents
argument_list|(
name|modified
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|modIndex
operator|<
name|modified
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
control|)
block|{
comment|// new element; add all
for|for
control|(
name|Object
name|nc
range|:
name|getContents
argument_list|(
name|modified
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
argument_list|)
control|)
block|{
name|ConfigurationProcessor
name|processor
init|=
name|findProcessor
argument_list|(
name|nc
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|addNew
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNew
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
init|;
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|currentIndex
operator|++
control|)
block|{
comment|// removal of element; remove all
for|for
control|(
name|Object
name|nc
range|:
name|getContents
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
argument_list|)
control|)
block|{
name|ConfigurationProcessor
name|processor
init|=
name|findProcessor
argument_list|(
name|nc
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|remove
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remove
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|applyModifications
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|current
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|modification
parameter_list|)
block|{
name|int
name|modIndex
init|=
literal|0
decl_stmt|,
name|currentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|modIndex
operator|<
name|modification
operator|.
name|size
argument_list|()
operator|&&
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
operator|,
name|currentIndex
operator|++
control|)
block|{
name|Object
name|existing
init|=
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
decl_stmt|;
name|Object
name|candidate
init|=
name|modification
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existing
operator|.
name|equals
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|plugin
operator|.
name|debug
argument_list|(
literal|"modification to:"
operator|+
name|existing
operator|+
literal|" , with: "
operator|+
name|candidate
argument_list|)
expr_stmt|;
name|ConfigurationProcessor
name|processor
init|=
name|findProcessor
argument_list|(
name|existing
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|modify
argument_list|(
name|existing
argument_list|,
name|candidate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modify
argument_list|(
name|existing
argument_list|,
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
init|;
name|modIndex
operator|<
name|modification
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
control|)
block|{
name|Object
name|mod
init|=
name|modification
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
decl_stmt|;
name|ConfigurationProcessor
name|processor
init|=
name|findProcessor
argument_list|(
name|mod
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|addNew
argument_list|(
name|mod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNew
argument_list|(
name|mod
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|currentIndex
operator|++
control|)
block|{
name|Object
name|mod
init|=
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
decl_stmt|;
name|ConfigurationProcessor
name|processor
init|=
name|findProcessor
argument_list|(
name|mod
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|remove
argument_list|(
name|mod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remove
argument_list|(
name|mod
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|modify
parameter_list|(
name|Object
name|existing
parameter_list|,
name|Object
name|candidate
parameter_list|)
block|{
name|remove
argument_list|(
name|existing
argument_list|)
expr_stmt|;
name|addNew
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addNew
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"No runtime support for additions of "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"No runtime support for removal of: "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConfigurationProcessor
name|findProcessor
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"No processor for "
operator|+
name|o
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// mapping all supported updatable elements to support getContents
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|getContents
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|val
init|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getContents"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
name|answer
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|val
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|mappingIncomplete
parameter_list|)
block|{
name|plugin
operator|.
name|debug
argument_list|(
name|filterPasswords
argument_list|(
name|o
argument_list|)
operator|+
literal|" has no modifiable elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"Failed to access getContents for "
operator|+
name|o
operator|+
literal|", runtime modifications not supported"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|String
name|filterPasswords
parameter_list|(
name|Object
name|toEscape
parameter_list|)
block|{
return|return
name|matchPassword
operator|.
name|matcher
argument_list|(
name|toEscape
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"password=???,"
argument_list|)
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Object
argument_list|>
name|filter
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|getContents
argument_list|(
name|obj
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Object
argument_list|>
name|filter
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objectList
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|objectList
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|JAXBElement
condition|)
block|{
name|JAXBElement
name|element
init|=
operator|(
name|JAXBElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|element
operator|.
name|getDeclaredType
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|element
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|fromDto
parameter_list|(
name|Object
name|dto
parameter_list|,
name|T
name|instance
parameter_list|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|dto
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|placeHolderUtil
operator|.
name|filter
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"applying props: "
operator|+
name|filterPasswords
argument_list|(
name|properties
argument_list|)
operator|+
literal|", to "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|instance
argument_list|,
name|properties
argument_list|)
expr_stmt|;
comment|// deal with nested elements
for|for
control|(
name|Object
name|nested
range|:
name|filter
argument_list|(
name|dto
argument_list|,
name|Object
operator|.
name|class
argument_list|)
control|)
block|{
name|String
name|elementName
init|=
name|nested
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|Method
name|setter
init|=
name|JAXBUtils
operator|.
name|findSetter
argument_list|(
name|instance
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|setter
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|argument
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|elementContent
range|:
name|filter
argument_list|(
name|nested
argument_list|,
name|Object
operator|.
name|class
argument_list|)
control|)
block|{
name|argument
operator|.
name|add
argument_list|(
name|fromDto
argument_list|(
name|elementContent
argument_list|,
name|JAXBUtils
operator|.
name|inferTargetObject
argument_list|(
name|elementContent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|setter
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|JAXBUtils
operator|.
name|matchType
argument_list|(
name|argument
argument_list|,
name|setter
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"failed to invoke "
operator|+
name|setter
operator|+
literal|" on "
operator|+
name|instance
operator|+
literal|" with args "
operator|+
name|argument
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"failed to find setter for "
operator|+
name|elementName
operator|+
literal|" on :"
operator|+
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
name|invokePostConstruct
argument_list|(
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|invokePostConstruct
parameter_list|(
name|T
name|instance
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|Method
name|m
range|:
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isAnnotationPresent
argument_list|(
name|PostConstruct
operator|.
name|class
argument_list|)
operator|&&
name|m
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|JAXBUtils
operator|.
name|ensureAccessible
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"failed to invoke @PostConstruct method "
operator|+
name|m
operator|+
literal|" on "
operator|+
name|instance
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

