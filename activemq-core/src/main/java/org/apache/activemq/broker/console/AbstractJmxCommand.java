begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJmxCommand
extends|extends
name|AbstractCommand
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_JMX_URL
init|=
literal|"service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi"
decl_stmt|;
specifier|private
name|JMXServiceURL
name|jmxServiceUrl
decl_stmt|;
specifier|private
name|JMXConnector
name|jmxConnector
decl_stmt|;
specifier|protected
name|JMXServiceURL
name|getJmxServiceUrl
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|jmxServiceUrl
return|;
block|}
specifier|protected
name|void
name|setJmxServiceUrl
parameter_list|(
name|JMXServiceURL
name|jmxServiceUrl
parameter_list|)
block|{
name|this
operator|.
name|jmxServiceUrl
operator|=
name|jmxServiceUrl
expr_stmt|;
block|}
specifier|protected
name|void
name|setJmxServiceUrl
parameter_list|(
name|String
name|jmxServiceUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|setJmxServiceUrl
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|jmxServiceUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|JMXConnector
name|createJmxConnector
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Reuse the previous connection
if|if
condition|(
name|jmxConnector
operator|!=
literal|null
condition|)
block|{
name|jmxConnector
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|jmxConnector
return|;
block|}
comment|// Create a new JMX connector
if|if
condition|(
name|getJmxServiceUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setJmxServiceUrl
argument_list|(
name|DEFAULT_JMX_URL
argument_list|)
expr_stmt|;
block|}
name|jmxConnector
operator|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|getJmxServiceUrl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jmxConnector
return|;
block|}
specifier|protected
name|void
name|closeJmxConnector
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|jmxConnector
operator|!=
literal|null
condition|)
block|{
name|jmxConnector
operator|.
name|close
argument_list|()
expr_stmt|;
name|jmxConnector
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
block|}
specifier|protected
name|void
name|handleOption
parameter_list|(
name|String
name|token
parameter_list|,
name|List
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Try to handle the options first
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--jmxurl"
argument_list|)
condition|)
block|{
comment|// If no jmx url specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"JMX URL not specified."
argument_list|)
expr_stmt|;
block|}
comment|// If jmx url already specified
if|if
condition|(
name|getJmxServiceUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|printError
argument_list|(
literal|"Multiple JMX URL cannot be specified."
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|String
name|strJmxUrl
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|setJmxServiceUrl
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|strJmxUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Invalid JMX URL format: "
operator|+
name|strJmxUrl
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Let the super class handle the option
name|super
operator|.
name|handleOption
argument_list|(
name|token
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

