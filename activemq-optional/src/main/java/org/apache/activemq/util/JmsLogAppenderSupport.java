begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An abstract base class for implementation inheritence for a log4j JMS appender  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JmsLogAppenderSupport
extends|extends
name|AppenderSkeleton
block|{
specifier|public
specifier|static
specifier|final
name|int
name|JMS_PUBLISH_ERROR_CODE
init|=
literal|61616
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|boolean
name|allowTextMessages
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|subjectPrefix
init|=
literal|"log4j."
decl_stmt|;
specifier|public
name|JmsLogAppenderSupport
parameter_list|()
block|{     }
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
specifier|public
name|void
name|setConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|session
operator|=
name|createSession
argument_list|()
expr_stmt|;
block|}
return|return
name|session
return|;
block|}
specifier|public
name|void
name|setSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|MessageProducer
name|getProducer
parameter_list|()
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
if|if
condition|(
name|producer
operator|==
literal|null
condition|)
block|{
name|producer
operator|=
name|createProducer
argument_list|()
expr_stmt|;
block|}
return|return
name|producer
return|;
block|}
specifier|public
name|void
name|setProducer
parameter_list|(
name|MessageProducer
name|producer
parameter_list|)
block|{
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|List
name|errors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|producer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|errors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JMSException
name|e
init|=
operator|(
name|JMSException
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|getErrorHandler
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error closing JMS resources: "
operator|+
name|e
argument_list|,
name|e
argument_list|,
name|JMS_PUBLISH_ERROR_CODE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|activateOptions
parameter_list|()
block|{
try|try
block|{
comment|// lets ensure we're all created
name|getProducer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getErrorHandler
argument_list|()
operator|.
name|error
argument_list|(
literal|"Could not create JMS resources: "
operator|+
name|e
argument_list|,
name|e
argument_list|,
name|JMS_PUBLISH_ERROR_CODE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
specifier|protected
specifier|abstract
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|JMSException
throws|,
name|NamingException
function_decl|;
specifier|protected
name|Session
name|createSession
parameter_list|()
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
return|return
name|getConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
return|;
block|}
specifier|protected
name|MessageProducer
name|createProducer
parameter_list|()
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
return|return
name|getSession
argument_list|()
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|void
name|append
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|getDestination
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|getProducer
argument_list|()
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getErrorHandler
argument_list|()
operator|.
name|error
argument_list|(
literal|"Could not send message due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|,
name|JMS_PUBLISH_ERROR_CODE
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
name|Message
name|answer
init|=
literal|null
decl_stmt|;
name|Object
name|value
init|=
name|event
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|allowTextMessages
operator|&&
name|value
operator|instanceof
name|String
condition|)
block|{
name|answer
operator|=
name|getSession
argument_list|()
operator|.
name|createTextMessage
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|getSession
argument_list|()
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setStringProperty
argument_list|(
literal|"level"
argument_list|,
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setIntProperty
argument_list|(
literal|"levelInt"
argument_list|,
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setStringProperty
argument_list|(
literal|"threadName"
argument_list|,
name|event
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|Destination
name|getDestination
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
name|String
name|name
init|=
name|subjectPrefix
operator|+
name|event
operator|.
name|getLoggerName
argument_list|()
decl_stmt|;
return|return
name|getSession
argument_list|()
operator|.
name|createTopic
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

