begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This transport initializes the SSLEngine and reads the first command before  * handing off to the detected transport.  *  */
end_comment

begin_class
specifier|public
class|class
name|AutoInitNioSSLTransport
extends|extends
name|NIOSSLTransport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AutoInitNioSSLTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|AutoInitNioSSLTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|,
name|URI
name|remoteLocation
parameter_list|,
name|URI
name|localLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socketFactory
argument_list|,
name|remoteLocation
argument_list|,
name|localLocation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutoInitNioSSLTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socket
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSslContext
parameter_list|(
name|SSLContext
name|sslContext
parameter_list|)
block|{
name|this
operator|.
name|sslContext
operator|=
name|sslContext
expr_stmt|;
block|}
specifier|public
name|ByteBuffer
name|getInputBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputBuffer
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeStreams
parameter_list|()
throws|throws
name|IOException
block|{
name|NIOOutputStream
name|outputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|channel
operator|=
name|socket
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|channel
operator|.
name|configureBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslContext
operator|==
literal|null
condition|)
block|{
name|sslContext
operator|=
name|SSLContext
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|String
name|remoteHost
init|=
literal|null
decl_stmt|;
name|int
name|remotePort
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|URI
name|remoteAddress
init|=
operator|new
name|URI
argument_list|(
name|this
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
decl_stmt|;
name|remoteHost
operator|=
name|remoteAddress
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|remotePort
operator|=
name|remoteAddress
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
comment|// initialize engine, the initial sslSession we get will need to be
comment|// updated once the ssl handshake process is completed.
if|if
condition|(
name|remoteHost
operator|!=
literal|null
operator|&&
name|remotePort
operator|!=
operator|-
literal|1
condition|)
block|{
name|sslEngine
operator|=
name|sslContext
operator|.
name|createSSLEngine
argument_list|(
name|remoteHost
argument_list|,
name|remotePort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sslEngine
operator|=
name|sslContext
operator|.
name|createSSLEngine
argument_list|()
expr_stmt|;
block|}
name|sslEngine
operator|.
name|setUseClientMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabledCipherSuites
operator|!=
literal|null
condition|)
block|{
name|sslEngine
operator|.
name|setEnabledCipherSuites
argument_list|(
name|enabledCipherSuites
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enabledProtocols
operator|!=
literal|null
condition|)
block|{
name|sslEngine
operator|.
name|setEnabledProtocols
argument_list|(
name|enabledProtocols
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wantClientAuth
condition|)
block|{
name|sslEngine
operator|.
name|setWantClientAuth
argument_list|(
name|wantClientAuth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needClientAuth
condition|)
block|{
name|sslEngine
operator|.
name|setNeedClientAuth
argument_list|(
name|needClientAuth
argument_list|)
expr_stmt|;
block|}
name|sslSession
operator|=
name|sslEngine
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|inputBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|sslSession
operator|.
name|getPacketBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|inputBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|outputStream
operator|=
operator|new
name|NIOOutputStream
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|setEngine
argument_list|(
name|sslEngine
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffOut
operator|=
name|outputStream
expr_stmt|;
name|sslEngine
operator|.
name|beginHandshake
argument_list|()
expr_stmt|;
name|handshakeStatus
operator|=
name|sslEngine
operator|.
name|getHandshakeStatus
argument_list|()
expr_stmt|;
name|doHandshake
argument_list|()
expr_stmt|;
comment|// detectReadyState();
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|outputStream
operator|!=
literal|null
condition|)
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|closeStreams
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOpenWireInit
parameter_list|()
throws|throws
name|Exception
block|{      }
annotation|@
name|Override
specifier|protected
name|void
name|finishHandshake
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|handshakeInProgress
condition|)
block|{
name|handshakeInProgress
operator|=
literal|false
expr_stmt|;
name|nextFrameSize
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Once handshake completes we need to ask for the now real sslSession
comment|// otherwise the session would return 'SSL_NULL_WITH_NULL_NULL' for the
comment|// cipher suite.
name|sslSession
operator|=
name|sslEngine
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SSLEngine
name|getSslSession
parameter_list|()
block|{
return|return
name|this
operator|.
name|sslEngine
return|;
block|}
specifier|public
specifier|volatile
name|byte
index|[]
name|read
decl_stmt|;
specifier|public
specifier|volatile
name|int
name|readSize
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|serviceRead
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|handshakeInProgress
condition|)
block|{
name|doHandshake
argument_list|()
expr_stmt|;
block|}
name|ByteBuffer
name|plain
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|sslSession
operator|.
name|getApplicationBufferSize
argument_list|()
argument_list|)
decl_stmt|;
name|plain
operator|.
name|position
argument_list|(
name|plain
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|plain
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|readCount
init|=
name|secureRead
argument_list|(
name|plain
argument_list|)
decl_stmt|;
comment|// channel is closed, cleanup
if|if
condition|(
name|readCount
operator|==
operator|-
literal|1
condition|)
block|{
name|onException
argument_list|(
operator|new
name|EOFException
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|receiveCounter
operator|+=
name|readCount
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|==
name|SSLEngineResult
operator|.
name|Status
operator|.
name|OK
operator|&&
name|handshakeStatus
operator|!=
name|SSLEngineResult
operator|.
name|HandshakeStatus
operator|.
name|NEED_UNWRAP
condition|)
block|{
name|processCommand
argument_list|(
name|plain
argument_list|)
expr_stmt|;
comment|//we have received enough bytes to detect the protocol
if|if
condition|(
name|receiveCounter
operator|>=
literal|8
condition|)
block|{
name|readSize
operator|=
name|receiveCounter
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processCommand
parameter_list|(
name|ByteBuffer
name|plain
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteBuffer
name|newBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|receiveCounter
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|!=
literal|null
condition|)
block|{
name|newBuffer
operator|.
name|put
argument_list|(
name|read
argument_list|)
expr_stmt|;
block|}
name|newBuffer
operator|.
name|put
argument_list|(
name|plain
argument_list|)
expr_stmt|;
name|newBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|read
operator|=
name|newBuffer
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|taskRunnerFactory
operator|=
operator|new
name|TaskRunnerFactory
argument_list|(
literal|"ActiveMQ NIOSSLTransport Task"
argument_list|)
expr_stmt|;
comment|// no need to init as we can delay that until demand (eg in doHandshake)
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|taskRunnerFactory
operator|!=
literal|null
condition|)
block|{
name|taskRunnerFactory
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|taskRunnerFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

