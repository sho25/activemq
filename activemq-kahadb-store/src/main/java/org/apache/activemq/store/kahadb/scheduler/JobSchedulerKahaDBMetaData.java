begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|AbstractKahaDBMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
operator|.
name|BTreeIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|IntegerMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LocationMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|StringMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The KahaDB MetaData used to house the Index data for the KahaDB implementation  * of a JobSchedulerStore.  */
end_comment

begin_class
specifier|public
class|class
name|JobSchedulerKahaDBMetaData
extends|extends
name|AbstractKahaDBMetaData
argument_list|<
name|JobSchedulerKahaDBMetaData
argument_list|>
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobSchedulerKahaDBMetaData
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|JobSchedulerStoreImpl
name|store
decl_stmt|;
specifier|private
name|UUID
name|token
init|=
name|JobSchedulerStoreImpl
operator|.
name|SCHEDULER_STORE_TOKEN
decl_stmt|;
specifier|private
name|int
name|version
init|=
name|JobSchedulerStoreImpl
operator|.
name|CURRENT_VERSION
decl_stmt|;
specifier|private
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|removeLocationTracker
decl_stmt|;
specifier|private
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|journalRC
decl_stmt|;
specifier|private
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|storedSchedulers
decl_stmt|;
comment|/**      * Creates a new instance of this meta data object with the assigned      * parent JobSchedulerStore instance.      *      * @param store      *        the store instance that owns this meta data.      */
specifier|public
name|JobSchedulerKahaDBMetaData
parameter_list|(
name|JobSchedulerStoreImpl
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
comment|/**      * @return the current value of the Scheduler store identification token.      */
specifier|public
name|UUID
name|getToken
parameter_list|()
block|{
return|return
name|this
operator|.
name|token
return|;
block|}
comment|/**      * @return the current value of the version tag for this meta data instance.      */
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**      * Gets the index that contains the location tracking information for Jobs      * that have been removed from the index but whose add operation has yet      * to be removed from the Journal.      *      * The Journal log file where a remove command is written cannot be released      * until the log file with the original add command has also been released,      * otherwise on a log replay the scheduled job could reappear in the scheduler      * since its corresponding remove might no longer be present.      *      * @return the remove command location tracker index.      */
specifier|public
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getRemoveLocationTracker
parameter_list|()
block|{
return|return
name|this
operator|.
name|removeLocationTracker
return|;
block|}
comment|/**      * Gets the index used to track the number of reference to a Journal log file.      *      * A log file in the Journal can only be considered for removal after all the      * references to it have been released.      *      * @return the journal log file reference counter index.      */
specifier|public
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getJournalRC
parameter_list|()
block|{
return|return
name|this
operator|.
name|journalRC
return|;
block|}
comment|/**      * Gets the index of JobScheduler instances that have been created and stored      * in the JobSchedulerStore instance.      *      * @return the index of stored JobScheduler instances.      */
specifier|public
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|getJobSchedulers
parameter_list|()
block|{
return|return
name|this
operator|.
name|storedSchedulers
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storedSchedulers
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeLocationTracker
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storedSchedulers
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|JobSchedulerMarshaller
argument_list|(
name|this
operator|.
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setKeyMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setValueMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeLocationTracker
operator|.
name|setKeyMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeLocationTracker
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|IntegerListMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeLocationTracker
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads all the stored JobScheduler instances into the provided map.      *      * @param tx      *        the Transaction under which the load operation should be executed.      * @param schedulers      *        a Map<String, JobSchedulerImpl> into which the loaded schedulers are stored.      *      * @throws IOException if an error occurs while performing the load operation.      */
specifier|public
name|void
name|loadScheduler
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|schedulers
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|storedSchedulers
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|schedulers
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|long
name|msb
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|this
operator|.
name|token
operator|=
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownStoreVersionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|token
operator|.
name|equals
argument_list|(
name|JobSchedulerStoreImpl
operator|.
name|SCHEDULER_STORE_TOKEN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownStoreVersionException
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|setLastUpdateLocation
argument_list|(
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setLastUpdateLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storedSchedulers
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|JobSchedulerImpl
argument_list|>
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|storedSchedulers
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|JobSchedulerMarshaller
argument_list|(
name|this
operator|.
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setKeyMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalRC
operator|.
name|setValueMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeLocationTracker
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeLocationTracker
operator|.
name|setKeyMarshaller
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|removeLocationTracker
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|IntegerListMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduler Store version {} loaded"
argument_list|,
name|this
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|token
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|token
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLastUpdateLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|getLastUpdateLocation
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|storedSchedulers
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|journalRC
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|removeLocationTracker
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|JobSchedulerMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|JobSchedulerImpl
argument_list|>
block|{
specifier|private
specifier|final
name|JobSchedulerStoreImpl
name|store
decl_stmt|;
name|JobSchedulerMarshaller
parameter_list|(
name|JobSchedulerStoreImpl
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|JobSchedulerImpl
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|JobSchedulerImpl
name|result
init|=
operator|new
name|JobSchedulerImpl
argument_list|(
name|this
operator|.
name|store
argument_list|)
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|JobSchedulerImpl
name|js
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|js
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|IntegerListMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|IntegerMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|dataIn
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|value
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|value
control|)
block|{
name|IntegerMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|integer
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

