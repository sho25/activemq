begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_NULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_SEQUENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_UNKNOWN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_VALUE_BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_VALUE_LIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|AMQP_VALUE_STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|CONTENT_ENCODING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|DELIVERY_ANNOTATION_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|EMPTY_BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|FIRST_ACQUIRER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|FOOTER_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|HEADER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_DELIVERY_ANNOTATION_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_FOOTER_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_MESSAGE_ANNOTATION_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_ORIGINAL_ENCODING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_PREFIX_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|MESSAGE_ANNOTATION_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|MESSAGE_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|NATIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|ORIGINAL_ENCODING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|REPLYTO_GROUP_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|getBinaryFromMessageBody
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|getMapFromMessageBody
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageEOFException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TypeConversionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|UnsignedByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|UnsignedInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|DeliveryAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Footer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|MessageAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|AMQPDefinedTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|DecoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|EncoderImpl
import|;
end_import

begin_class
specifier|public
class|class
name|JMSMappingOutboundTransformer
implements|implements
name|OutboundTransformer
block|{
specifier|public
specifier|static
specifier|final
name|Symbol
name|JMS_DEST_TYPE_MSG_ANNOTATION
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-jms-dest"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|JMS_REPLY_TO_TYPE_MSG_ANNOTATION
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-jms-reply-to"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AMQ_SCHEDULED_MESSAGE_PREFIX
init|=
literal|"AMQ_SCHEDULED_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|QUEUE_TYPE
init|=
literal|0x00
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|TOPIC_TYPE
init|=
literal|0x01
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|TEMP_QUEUE_TYPE
init|=
literal|0x02
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|TEMP_TOPIC_TYPE
init|=
literal|0x03
decl_stmt|;
specifier|private
specifier|final
name|UTF8BufferType
name|utf8BufferEncoding
decl_stmt|;
comment|// For now Proton requires that we create a decoder to create an encoder
specifier|private
specifier|final
name|DecoderImpl
name|decoder
init|=
operator|new
name|DecoderImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|EncoderImpl
name|encoder
init|=
operator|new
name|EncoderImpl
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
block|{
name|AMQPDefinedTypes
operator|.
name|registerAllTypes
parameter_list|(
name|decoder
parameter_list|,
name|encoder
parameter_list|)
constructor_decl|;
name|utf8BufferEncoding
operator|=
operator|new
name|UTF8BufferType
argument_list|(
name|encoder
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|register
parameter_list|(
name|utf8BufferEncoding
parameter_list|)
constructor_decl|;
block|}
annotation|@
name|Override
specifier|public
name|EncodedMessage
name|transform
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|messageFormat
init|=
literal|0
decl_stmt|;
name|Header
name|header
init|=
literal|null
decl_stmt|;
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|daMap
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|maMap
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|apMap
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|footerMap
init|=
literal|null
decl_stmt|;
name|Section
name|body
init|=
name|convertBody
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
name|header
operator|=
operator|new
name|Header
argument_list|()
expr_stmt|;
block|}
name|header
operator|.
name|setDurable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|byte
name|priority
init|=
name|message
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|priority
operator|!=
name|Message
operator|.
name|DEFAULT_PRIORITY
condition|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
name|header
operator|=
operator|new
name|Header
argument_list|()
expr_stmt|;
block|}
name|header
operator|.
name|setPriority
argument_list|(
name|UnsignedByte
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|message
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setSubject
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|MessageId
name|messageId
init|=
name|message
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setMessageId
argument_list|(
name|getOriginalMessageId
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ActiveMQDestination
name|destination
init|=
name|message
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setTo
argument_list|(
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maMap
operator|==
literal|null
condition|)
block|{
name|maMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|maMap
operator|.
name|put
argument_list|(
name|JMS_DEST_TYPE_MSG_ANNOTATION
argument_list|,
name|destinationType
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ActiveMQDestination
name|replyTo
init|=
name|message
operator|.
name|getReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setReplyTo
argument_list|(
name|replyTo
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maMap
operator|==
literal|null
condition|)
block|{
name|maMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|maMap
operator|.
name|put
argument_list|(
name|JMS_REPLY_TO_TYPE_MSG_ANNOTATION
argument_list|,
name|destinationType
argument_list|(
name|replyTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|correlationId
init|=
name|message
operator|.
name|getCorrelationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|correlationId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|properties
operator|.
name|setCorrelationId
argument_list|(
name|AMQPMessageIdHelper
operator|.
name|INSTANCE
operator|.
name|toIdObject
argument_list|(
name|correlationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|e
parameter_list|)
block|{
name|properties
operator|.
name|setCorrelationId
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|expiration
init|=
name|message
operator|.
name|getExpiration
argument_list|()
decl_stmt|;
if|if
condition|(
name|expiration
operator|!=
literal|0
condition|)
block|{
name|long
name|ttl
init|=
name|expiration
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttl
operator|<
literal|0
condition|)
block|{
name|ttl
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
name|header
operator|=
operator|new
name|Header
argument_list|()
expr_stmt|;
block|}
name|header
operator|.
name|setTtl
argument_list|(
operator|new
name|UnsignedInteger
argument_list|(
operator|(
name|int
operator|)
name|ttl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setAbsoluteExpiryTime
argument_list|(
operator|new
name|Date
argument_list|(
name|expiration
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|timeStamp
init|=
name|message
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeStamp
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setCreationTime
argument_list|(
operator|new
name|Date
argument_list|(
name|timeStamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// JMSX Message Properties
name|int
name|deliveryCount
init|=
name|message
operator|.
name|getRedeliveryCounter
argument_list|()
decl_stmt|;
if|if
condition|(
name|deliveryCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
name|header
operator|=
operator|new
name|Header
argument_list|()
expr_stmt|;
block|}
name|header
operator|.
name|setDeliveryCount
argument_list|(
name|UnsignedInteger
operator|.
name|valueOf
argument_list|(
name|deliveryCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|userId
init|=
name|message
operator|.
name|getUserID
argument_list|()
decl_stmt|;
if|if
condition|(
name|userId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setUserId
argument_list|(
operator|new
name|Binary
argument_list|(
name|userId
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|groupId
init|=
name|message
operator|.
name|getGroupID
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setGroupId
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
name|int
name|groupSequence
init|=
name|message
operator|.
name|getGroupSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupSequence
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setGroupSequence
argument_list|(
name|UnsignedInteger
operator|.
name|valueOf
argument_list|(
name|groupSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entries
decl_stmt|;
try|try
block|{
name|entries
operator|=
name|message
operator|.
name|getProperties
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|JMS_AMQP_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|NATIVE
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
comment|// skip transformer appended properties
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ORIGINAL_ENCODING
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
comment|// skip transformer appended properties
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|MESSAGE_FORMAT
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
name|messageFormat
operator|=
operator|(
name|long
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|HEADER
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
name|header
operator|=
operator|new
name|Header
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|PROPERTIES
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|MESSAGE_ANNOTATION_PREFIX
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|maMap
operator|==
literal|null
condition|)
block|{
name|maMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
name|JMS_AMQP_MESSAGE_ANNOTATION_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|maMap
operator|.
name|put
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|FIRST_ACQUIRER
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
name|header
operator|=
operator|new
name|Header
argument_list|()
expr_stmt|;
block|}
name|header
operator|.
name|setFirstAcquirer
argument_list|(
operator|(
name|boolean
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setContentType
argument_list|(
name|Symbol
operator|.
name|getSymbol
argument_list|(
operator|(
name|String
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|CONTENT_ENCODING
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setContentEncoding
argument_list|(
name|Symbol
operator|.
name|getSymbol
argument_list|(
operator|(
name|String
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|REPLYTO_GROUP_ID
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|setReplyToGroupId
argument_list|(
operator|(
name|String
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|DELIVERY_ANNOTATION_PREFIX
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|daMap
operator|==
literal|null
condition|)
block|{
name|daMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
name|JMS_AMQP_DELIVERY_ANNOTATION_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|daMap
operator|.
name|put
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|FOOTER_PREFIX
argument_list|,
name|JMS_AMQP_PREFIX_LENGTH
argument_list|)
condition|)
block|{
if|if
condition|(
name|footerMap
operator|==
literal|null
condition|)
block|{
name|footerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
name|JMS_AMQP_FOOTER_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|footerMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|AMQ_SCHEDULED_MESSAGE_PREFIX
argument_list|)
condition|)
block|{
comment|// strip off the scheduled message properties
continue|continue;
block|}
comment|// The property didn't map into any other slot so we store it in the
comment|// Application Properties section of the message.
if|if
condition|(
name|apMap
operator|==
literal|null
condition|)
block|{
name|apMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|apMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AmqpWritableBuffer
name|buffer
init|=
operator|new
name|AmqpWritableBuffer
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|setByteBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|writeObject
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|daMap
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|writeObject
argument_list|(
operator|new
name|DeliveryAnnotations
argument_list|(
name|daMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maMap
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|writeObject
argument_list|(
operator|new
name|MessageAnnotations
argument_list|(
name|maMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|writeObject
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|apMap
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|writeObject
argument_list|(
operator|new
name|ApplicationProperties
argument_list|(
name|apMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|writeObject
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|footerMap
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|writeObject
argument_list|(
operator|new
name|Footer
argument_list|(
name|footerMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EncodedMessage
argument_list|(
name|messageFormat
argument_list|,
name|buffer
operator|.
name|getArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getArrayLength
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Section
name|convertBody
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Section
name|body
init|=
literal|null
decl_stmt|;
name|short
name|orignalEncoding
init|=
name|AMQP_UNKNOWN
decl_stmt|;
try|try
block|{
name|orignalEncoding
operator|=
name|message
operator|.
name|getShortProperty
argument_list|(
name|JMS_AMQP_ORIGINAL_ENCODING
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Ignore and stick with UNKNOWN
block|}
name|int
name|messageType
init|=
name|message
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageType
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_BYTES_MESSAGE
condition|)
block|{
name|Binary
name|payload
init|=
name|getBinaryFromMessageBody
argument_list|(
operator|(
name|ActiveMQBytesMessage
operator|)
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|payload
operator|=
name|EMPTY_BINARY
expr_stmt|;
block|}
switch|switch
condition|(
name|orignalEncoding
condition|)
block|{
case|case
name|AMQP_NULL
case|:
break|break;
case|case
name|AMQP_VALUE_BINARY
case|:
name|body
operator|=
operator|new
name|AmqpValue
argument_list|(
name|payload
argument_list|)
expr_stmt|;
break|break;
case|case
name|AMQP_DATA
case|:
case|case
name|AMQP_UNKNOWN
case|:
default|default:
name|body
operator|=
operator|new
name|Data
argument_list|(
name|payload
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|messageType
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_TEXT_MESSAGE
condition|)
block|{
switch|switch
condition|(
name|orignalEncoding
condition|)
block|{
case|case
name|AMQP_NULL
case|:
break|break;
case|case
name|AMQP_DATA
case|:
name|body
operator|=
operator|new
name|Data
argument_list|(
name|getBinaryFromMessageBody
argument_list|(
operator|(
name|ActiveMQTextMessage
operator|)
name|message
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|AMQP_VALUE_STRING
case|:
case|case
name|AMQP_UNKNOWN
case|:
default|default:
name|body
operator|=
operator|new
name|AmqpValue
argument_list|(
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|messageType
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_MAP_MESSAGE
condition|)
block|{
name|body
operator|=
operator|new
name|AmqpValue
argument_list|(
name|getMapFromMessageBody
argument_list|(
operator|(
name|ActiveMQMapMessage
operator|)
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messageType
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_STREAM_MESSAGE
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ActiveMQStreamMessage
name|m
init|=
operator|(
name|ActiveMQStreamMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|m
operator|.
name|readObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MessageEOFException
name|e
parameter_list|)
block|{             }
switch|switch
condition|(
name|orignalEncoding
condition|)
block|{
case|case
name|AMQP_SEQUENCE
case|:
name|body
operator|=
operator|new
name|AmqpSequence
argument_list|(
name|list
argument_list|)
expr_stmt|;
break|break;
case|case
name|AMQP_VALUE_LIST
case|:
case|case
name|AMQP_UNKNOWN
case|:
default|default:
name|body
operator|=
operator|new
name|AmqpValue
argument_list|(
name|list
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|messageType
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_OBJECT_MESSAGE
condition|)
block|{
name|Binary
name|payload
init|=
name|getBinaryFromMessageBody
argument_list|(
operator|(
name|ActiveMQObjectMessage
operator|)
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|payload
operator|=
name|EMPTY_BINARY
expr_stmt|;
block|}
switch|switch
condition|(
name|orignalEncoding
condition|)
block|{
case|case
name|AMQP_VALUE_BINARY
case|:
name|body
operator|=
operator|new
name|AmqpValue
argument_list|(
name|payload
argument_list|)
expr_stmt|;
break|break;
case|case
name|AMQP_DATA
case|:
case|case
name|AMQP_UNKNOWN
case|:
default|default:
name|body
operator|=
operator|new
name|Data
argument_list|(
name|payload
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// For a non-AMQP message we tag the outbound content type as containing
comment|// a serialized Java object so that an AMQP client has a hint as to what
comment|// we are sending it.
if|if
condition|(
operator|!
name|message
operator|.
name|propertyExists
argument_list|(
name|JMS_AMQP_CONTENT_TYPE
argument_list|)
condition|)
block|{
name|message
operator|.
name|setReadOnlyProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
name|JMS_AMQP_CONTENT_TYPE
argument_list|,
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
argument_list|)
expr_stmt|;
name|message
operator|.
name|setReadOnlyProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|body
return|;
block|}
specifier|private
specifier|static
name|byte
name|destinationType
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
if|if
condition|(
name|destination
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return
name|TEMP_QUEUE_TYPE
return|;
block|}
else|else
block|{
return|return
name|QUEUE_TYPE
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|destination
operator|.
name|isTopic
argument_list|()
condition|)
block|{
if|if
condition|(
name|destination
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return
name|TEMP_TOPIC_TYPE
return|;
block|}
else|else
block|{
return|return
name|TOPIC_TYPE
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown Destination Type passed to JMS Transformer."
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|Object
name|getOriginalMessageId
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
name|MessageId
name|messageId
init|=
name|message
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageId
operator|.
name|getTextView
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|AMQPMessageIdHelper
operator|.
name|INSTANCE
operator|.
name|toIdObject
argument_list|(
name|messageId
operator|.
name|getTextView
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|e
parameter_list|)
block|{
name|result
operator|=
name|messageId
operator|.
name|getTextView
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|messageId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

