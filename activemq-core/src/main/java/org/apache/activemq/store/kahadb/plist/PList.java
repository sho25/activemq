begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|plist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
operator|.
name|ListIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LocationMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|StringMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PList
extends|extends
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PList
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PListStore
name|store
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
name|Object
name|indexLock
decl_stmt|;
name|PList
parameter_list|(
name|PListStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|indexLock
operator|=
name|store
operator|.
name|getIndexLock
argument_list|()
expr_stmt|;
name|setPageFile
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|)
expr_stmt|;
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|setValueMarshaller
argument_list|(
name|LocationMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
name|void
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|setHeadPageId
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|getHeadPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addLast
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|ByteSequence
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|store
operator|.
name|write
argument_list|(
name|bs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|add
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addFirst
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|ByteSequence
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|store
operator|.
name|write
argument_list|(
name|bs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|addFirst
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|result
operator|.
name|set
argument_list|(
name|remove
argument_list|(
name|tx
argument_list|,
name|id
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|iterator
init|=
name|iterator
argument_list|(
name|tx
argument_list|,
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|PListEntry
name|get
parameter_list|(
specifier|final
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|iterator
init|=
name|iterator
argument_list|(
name|tx
argument_list|,
name|position
argument_list|)
decl_stmt|;
name|ref
operator|.
name|set
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|PListEntry
name|getFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|set
argument_list|(
name|getFirst
argument_list|(
name|tx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|PListEntry
name|getLast
parameter_list|()
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|set
argument_list|(
name|getLast
argument_list|(
name|tx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|public
name|PListIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PListIterator
argument_list|()
return|;
block|}
specifier|public
specifier|final
class|class
name|PListIterator
implements|implements
name|Iterator
argument_list|<
name|PListEntry
argument_list|>
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|iterator
decl_stmt|;
specifier|final
name|Transaction
name|tx
decl_stmt|;
name|PListIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|tx
operator|=
name|store
operator|.
name|pageFile
operator|.
name|tx
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PListEntry
name|next
parameter_list|()
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|ByteSequence
name|bs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bs
operator|=
name|store
operator|.
name|getPayload
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|unexpected
parameter_list|)
block|{
name|NoSuchElementException
name|e
init|=
operator|new
name|NoSuchElementException
argument_list|(
name|unexpected
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|unexpected
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
operator|new
name|PListEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|bs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|tx
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|unexpected
parameter_list|)
block|{
name|IllegalStateException
name|e
init|=
operator|new
name|IllegalStateException
argument_list|(
name|unexpected
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|unexpected
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|release
parameter_list|()
block|{
try|try
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|unexpected
parameter_list|)
block|{
name|IllegalStateException
name|e
init|=
operator|new
name|IllegalStateException
argument_list|(
name|unexpected
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|unexpected
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|claimFileLocations
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
if|if
condition|(
name|loaded
operator|.
name|get
argument_list|()
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|>
name|iterator
init|=
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Location
name|location
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|candidates
operator|.
name|remove
argument_list|(
name|location
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|+
literal|"[headPageId="
operator|+
name|getHeadPageId
argument_list|()
operator|+
literal|",tailPageId="
operator|+
name|getTailPageId
argument_list|()
operator|+
literal|", size="
operator|+
name|size
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

