begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LinkedNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|RecoverableRandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * File Appender instance that performs batched writes in the thread where the write is  * queued.  This appender does not honor the maxFileLength value in the journal as the  * files created here are out-of-band logs used for other purposes such as journal level  * compaction.  */
end_comment

begin_class
specifier|public
class|class
name|TargetedDataFileAppender
implements|implements
name|FileAppender
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TargetedDataFileAppender
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Journal
name|journal
decl_stmt|;
specifier|private
specifier|final
name|DataFile
name|target
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Journal
operator|.
name|WriteKey
argument_list|,
name|Journal
operator|.
name|WriteCommand
argument_list|>
name|inflightWrites
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxWriteBatchSize
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|boolean
name|preallocate
decl_stmt|;
specifier|private
name|WriteBatch
name|nextWriteBatch
decl_stmt|;
specifier|private
name|int
name|statIdx
init|=
literal|0
decl_stmt|;
specifier|private
name|int
index|[]
name|stats
init|=
operator|new
name|int
index|[
name|maxStat
index|]
decl_stmt|;
specifier|public
class|class
name|WriteBatch
block|{
specifier|protected
specifier|final
name|int
name|offset
decl_stmt|;
specifier|public
specifier|final
name|DataFile
name|dataFile
decl_stmt|;
specifier|public
specifier|final
name|LinkedNodeList
argument_list|<
name|Journal
operator|.
name|WriteCommand
argument_list|>
name|writes
init|=
operator|new
name|LinkedNodeList
argument_list|<
name|Journal
operator|.
name|WriteCommand
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|int
name|size
init|=
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
decl_stmt|;
specifier|public
name|AtomicReference
argument_list|<
name|IOException
argument_list|>
name|exception
init|=
operator|new
name|AtomicReference
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|WriteBatch
parameter_list|(
name|DataFile
name|dataFile
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|dataFile
operator|=
name|dataFile
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|dataFile
operator|.
name|incrementLength
argument_list|(
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
expr_stmt|;
name|journal
operator|.
name|addToTotalLength
argument_list|(
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WriteBatch
parameter_list|(
name|DataFile
name|dataFile
parameter_list|,
name|int
name|offset
parameter_list|,
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|dataFile
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canAppend
parameter_list|(
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|)
block|{
name|int
name|newSize
init|=
name|size
operator|+
name|write
operator|.
name|location
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSize
operator|>=
name|maxWriteBatchSize
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writes
operator|.
name|addLast
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|write
operator|.
name|location
operator|.
name|setDataFileId
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|write
operator|.
name|location
operator|.
name|setOffset
argument_list|(
name|offset
operator|+
name|size
argument_list|)
expr_stmt|;
name|int
name|s
init|=
name|write
operator|.
name|location
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|size
operator|+=
name|s
expr_stmt|;
name|dataFile
operator|.
name|incrementLength
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|journal
operator|.
name|addToTotalLength
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Construct a Store writer      */
specifier|public
name|TargetedDataFileAppender
parameter_list|(
name|Journal
name|journal
parameter_list|,
name|DataFile
name|target
parameter_list|)
block|{
name|this
operator|.
name|journal
operator|=
name|journal
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|inflightWrites
operator|=
name|this
operator|.
name|journal
operator|.
name|getInflightWrites
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxWriteBatchSize
operator|=
name|this
operator|.
name|journal
operator|.
name|getWriteBatchSize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Location
name|storeItem
parameter_list|(
name|ByteSequence
name|data
parameter_list|,
name|byte
name|type
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// Write the packet our internal buffer.
name|int
name|size
init|=
name|data
operator|.
name|getLength
argument_list|()
operator|+
name|Journal
operator|.
name|RECORD_HEAD_SPACE
decl_stmt|;
specifier|final
name|Location
name|location
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Journal
operator|.
name|WriteCommand
name|write
init|=
operator|new
name|Journal
operator|.
name|WriteCommand
argument_list|(
name|location
argument_list|,
name|data
argument_list|,
name|sync
argument_list|)
decl_stmt|;
name|enqueueWrite
argument_list|(
name|write
argument_list|)
expr_stmt|;
if|if
condition|(
name|sync
condition|)
block|{
name|writePendingBatch
argument_list|()
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
annotation|@
name|Override
specifier|public
name|Location
name|storeItem
parameter_list|(
name|ByteSequence
name|data
parameter_list|,
name|byte
name|type
parameter_list|,
name|Runnable
name|onComplete
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// Write the packet our internal buffer.
name|int
name|size
init|=
name|data
operator|.
name|getLength
argument_list|()
operator|+
name|Journal
operator|.
name|RECORD_HEAD_SPACE
decl_stmt|;
specifier|final
name|Location
name|location
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Journal
operator|.
name|WriteCommand
name|write
init|=
operator|new
name|Journal
operator|.
name|WriteCommand
argument_list|(
name|location
argument_list|,
name|data
argument_list|,
name|onComplete
argument_list|)
decl_stmt|;
name|enqueueWrite
argument_list|(
name|write
argument_list|)
expr_stmt|;
return|return
name|location
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
if|if
condition|(
name|nextWriteBatch
operator|!=
literal|null
condition|)
block|{
comment|// force sync of current in-progress batched write.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Close of targeted appender flushing last batch."
argument_list|)
expr_stmt|;
name|writePendingBatch
argument_list|()
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//----- Appender Configuration -------------------------------------------//
specifier|public
name|boolean
name|isPreallocate
parameter_list|()
block|{
return|return
name|preallocate
return|;
block|}
specifier|public
name|void
name|setPreallocate
parameter_list|(
name|boolean
name|preallocate
parameter_list|)
block|{
name|this
operator|.
name|preallocate
operator|=
name|preallocate
expr_stmt|;
block|}
comment|//----- Internal Implementation ------------------------------------------//
specifier|private
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The appender is clsoed"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|WriteBatch
name|enqueueWrite
parameter_list|(
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|nextWriteBatch
operator|==
literal|null
condition|)
block|{
name|nextWriteBatch
operator|=
operator|new
name|WriteBatch
argument_list|(
name|target
argument_list|,
name|target
operator|.
name|getLength
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// Append to current batch if possible..
if|if
condition|(
name|nextWriteBatch
operator|.
name|canAppend
argument_list|(
name|write
argument_list|)
condition|)
block|{
name|nextWriteBatch
operator|.
name|append
argument_list|(
name|write
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// Flush current batch and start a new one.
name|writePendingBatch
argument_list|()
expr_stmt|;
name|nextWriteBatch
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|write
operator|.
name|sync
condition|)
block|{
name|inflightWrites
operator|.
name|put
argument_list|(
operator|new
name|Journal
operator|.
name|WriteKey
argument_list|(
name|write
operator|.
name|location
argument_list|)
argument_list|,
name|write
argument_list|)
expr_stmt|;
block|}
return|return
name|nextWriteBatch
return|;
block|}
specifier|private
name|void
name|writePendingBatch
parameter_list|()
throws|throws
name|IOException
block|{
name|DataFile
name|dataFile
init|=
name|nextWriteBatch
operator|.
name|dataFile
decl_stmt|;
try|try
init|(
name|RecoverableRandomAccessFile
name|file
init|=
name|dataFile
operator|.
name|openRandomAccessFile
argument_list|()
init|;
name|DataByteArrayOutputStream
name|buff
operator|=
operator|new
name|DataByteArrayOutputStream
argument_list|(
name|maxWriteBatchSize
argument_list|)
init|;
init|)
block|{
comment|// preallocate on first open of new file (length == 0) if configured to do so.
comment|// NOTE: dataFile.length cannot be used because it is updated in enqueue
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|==
literal|0L
operator|&&
name|isPreallocate
argument_list|()
condition|)
block|{
name|journal
operator|.
name|preallocateEntireJournalDataFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|Journal
operator|.
name|WriteCommand
name|write
init|=
name|nextWriteBatch
operator|.
name|writes
operator|.
name|getHead
argument_list|()
decl_stmt|;
comment|// Write an empty batch control record.
name|buff
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buff
operator|.
name|writeInt
argument_list|(
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeByte
argument_list|(
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_TYPE
argument_list|)
expr_stmt|;
name|buff
operator|.
name|write
argument_list|(
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_MAGIC
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|write
operator|!=
literal|null
condition|)
block|{
name|buff
operator|.
name|writeInt
argument_list|(
name|write
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeByte
argument_list|(
name|write
operator|.
name|location
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|write
argument_list|(
name|write
operator|.
name|data
operator|.
name|getData
argument_list|()
argument_list|,
name|write
operator|.
name|data
operator|.
name|getOffset
argument_list|()
argument_list|,
name|write
operator|.
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|write
operator|=
name|write
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
comment|// append 'unset' next batch (5 bytes) so read can always find eof
name|buff
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ByteSequence
name|sequence
init|=
name|buff
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
comment|// Now we can fill in the batch control record properly.
name|buff
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buff
operator|.
name|skip
argument_list|(
literal|5
operator|+
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_MAGIC
operator|.
name|length
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeInt
argument_list|(
name|sequence
operator|.
name|getLength
argument_list|()
operator|-
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
operator|-
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|journal
operator|.
name|isChecksum
argument_list|()
condition|)
block|{
name|Checksum
name|checksum
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
operator|+
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
operator|-
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
operator|-
literal|5
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeLong
argument_list|(
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now do the 1 big write.
name|file
operator|.
name|seek
argument_list|(
name|nextWriteBatch
operator|.
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxStat
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|statIdx
operator|<
name|maxStat
condition|)
block|{
name|stats
index|[
name|statIdx
operator|++
index|]
operator|=
name|sequence
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|long
name|all
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|statIdx
operator|>
literal|0
condition|;
control|)
block|{
name|all
operator|+=
name|stats
index|[
operator|--
name|statIdx
index|]
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ave writeSize: {}"
argument_list|,
name|all
operator|/
name|maxStat
argument_list|)
expr_stmt|;
block|}
block|}
name|file
operator|.
name|write
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationTarget
name|replicationTarget
init|=
name|journal
operator|.
name|getReplicationTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicationTarget
operator|!=
literal|null
condition|)
block|{
name|replicationTarget
operator|.
name|replicate
argument_list|(
name|nextWriteBatch
operator|.
name|writes
operator|.
name|getHead
argument_list|()
operator|.
name|location
argument_list|,
name|sequence
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|sync
argument_list|()
expr_stmt|;
name|signalDone
argument_list|(
name|nextWriteBatch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Journal failed while writing at: {}"
argument_list|,
name|nextWriteBatch
operator|.
name|offset
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|signalDone
parameter_list|(
name|WriteBatch
name|writeBatch
parameter_list|)
block|{
comment|// Now that the data is on disk, remove the writes from the in
comment|// flight cache and signal any onComplete requests.
name|Journal
operator|.
name|WriteCommand
name|write
init|=
name|writeBatch
operator|.
name|writes
operator|.
name|getHead
argument_list|()
decl_stmt|;
while|while
condition|(
name|write
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|write
operator|.
name|sync
condition|)
block|{
name|inflightWrites
operator|.
name|remove
argument_list|(
operator|new
name|Journal
operator|.
name|WriteKey
argument_list|(
name|write
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|write
operator|.
name|onComplete
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|write
operator|.
name|onComplete
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Add exception was raised while executing the run command for onComplete"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|write
operator|=
name|write
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

