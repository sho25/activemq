begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|MarshallingWithCachingTest
extends|extends
name|TestCase
block|{
specifier|protected
name|long
name|commandCount
init|=
name|Short
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|protected
name|String
name|connectionId
init|=
literal|"Cheese"
decl_stmt|;
specifier|protected
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Foo"
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|endOfStreamMarker
init|=
literal|0x12345678
decl_stmt|;
specifier|protected
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|protected
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
specifier|protected
name|OpenWireFormat
name|openWireformat
decl_stmt|;
specifier|protected
name|long
name|logGroup
init|=
literal|10000
decl_stmt|;
specifier|public
name|void
name|testReadAndWriteLotsOfCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Marshalling: "
operator|+
name|commandCount
operator|+
literal|" objects"
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commandCount
condition|;
name|i
operator|++
control|)
block|{
name|logProgress
argument_list|(
literal|"Marshalling"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|DataStructure
name|object
init|=
name|createDataStructure
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
name|ds
operator|.
name|writeInt
argument_list|(
name|endOfStreamMarker
argument_list|)
expr_stmt|;
comment|// now lets read from the stream
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unmarshalling: "
operator|+
name|commandCount
operator|+
literal|" objects"
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commandCount
condition|;
name|i
operator|++
control|)
block|{
name|logProgress
argument_list|(
literal|"Unmarshalling"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|DataStructure
name|command
init|=
literal|null
decl_stmt|;
try|try
block|{
name|command
operator|=
operator|(
name|DataStructure
operator|)
name|openWireformat
operator|.
name|unmarshal
argument_list|(
name|dis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to unmarshal object: "
operator|+
name|i
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertDataStructureExpected
argument_list|(
name|command
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|marker
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Marker int"
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|endOfStreamMarker
argument_list|)
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|marker
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets try read and we should get an exception
try|try
block|{
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have reached the end of the stream"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// worked!
block|}
block|}
specifier|protected
name|void
name|logProgress
parameter_list|(
name|String
name|message
parameter_list|,
name|long
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|%
name|logGroup
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
operator|+
literal|" at object: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|openWireformat
operator|=
name|createOpenWireFormat
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|OpenWireFormat
name|createOpenWireFormat
parameter_list|()
block|{
name|OpenWireFormat
name|wf
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|wf
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wf
operator|.
name|setStackTraceEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wf
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|wf
return|;
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|openWireformat
operator|.
name|marshal
argument_list|(
name|object
argument_list|,
name|ds
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DataStructure
name|createDataStructure
parameter_list|(
name|long
name|index
parameter_list|)
block|{
name|ProducerId
name|id
init|=
operator|new
name|ProducerId
argument_list|()
decl_stmt|;
name|id
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|id
operator|.
name|setSessionId
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|id
operator|.
name|setValue
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|ProducerInfo
name|object
init|=
operator|new
name|ProducerInfo
argument_list|()
decl_stmt|;
name|object
operator|.
name|setProducerId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|object
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
specifier|protected
name|void
name|assertDataStructureExpected
parameter_list|(
name|DataStructure
name|object
parameter_list|,
name|long
name|i
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Type of object for index: "
operator|+
name|i
argument_list|,
name|ProducerInfo
operator|.
name|class
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|ProducerInfo
name|command
init|=
operator|(
name|ProducerInfo
operator|)
name|object
decl_stmt|;
name|ProducerId
name|id
init|=
name|command
operator|.
name|getProducerId
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ProducerID for object at index: "
operator|+
name|i
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"connection ID in object: "
operator|+
name|i
argument_list|,
name|connectionId
argument_list|,
name|id
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|id
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value of object: "
operator|+
name|i
operator|+
literal|" was: "
operator|+
name|actual
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value of object: "
operator|+
name|i
operator|+
literal|" was: "
operator|+
name|actual
argument_list|,
name|i
argument_list|,
name|id
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

