begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTCodec
block|{
specifier|private
specifier|final
name|MQTTFrameSink
name|frameSink
decl_stmt|;
specifier|private
specifier|final
name|DataByteArrayOutputStream
name|currentCommand
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|private
name|byte
name|header
decl_stmt|;
specifier|private
name|int
name|contentLength
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|payLoadRead
init|=
literal|0
decl_stmt|;
specifier|public
interface|interface
name|MQTTFrameSink
block|{
name|void
name|onFrame
parameter_list|(
name|MQTTFrame
name|mqttFrame
parameter_list|)
function_decl|;
block|}
specifier|private
name|FrameParser
name|currentParser
decl_stmt|;
comment|// Internal parsers implement this and we switch to the next as we go.
specifier|private
interface|interface
name|FrameParser
block|{
name|void
name|parse
parameter_list|(
name|DataByteArrayInputStream
name|data
parameter_list|,
name|int
name|readSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
name|MQTTCodec
parameter_list|(
name|MQTTFrameSink
name|sink
parameter_list|)
block|{
name|this
operator|.
name|frameSink
operator|=
name|sink
expr_stmt|;
block|}
specifier|public
name|MQTTCodec
parameter_list|(
specifier|final
name|TcpTransport
name|transport
parameter_list|)
block|{
name|this
operator|.
name|frameSink
operator|=
operator|new
name|MQTTFrameSink
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFrame
parameter_list|(
name|MQTTFrame
name|mqttFrame
parameter_list|)
block|{
name|transport
operator|.
name|doConsume
argument_list|(
name|mqttFrame
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|DataByteArrayInputStream
name|input
parameter_list|,
name|int
name|readSize
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|currentParser
operator|==
literal|null
condition|)
block|{
name|currentParser
operator|=
name|initializeHeaderParser
argument_list|()
expr_stmt|;
block|}
comment|// Parser stack will run until current incoming data has all been consumed.
name|currentParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|readSize
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processCommand
parameter_list|()
throws|throws
name|IOException
block|{
name|MQTTFrame
name|frame
init|=
operator|new
name|MQTTFrame
argument_list|(
name|currentCommand
operator|.
name|toBuffer
argument_list|()
operator|.
name|deepCopy
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|frameSink
operator|.
name|onFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
comment|//----- Prepare the current frame parser for use -------------------------//
specifier|private
name|FrameParser
name|initializeHeaderParser
parameter_list|()
throws|throws
name|IOException
block|{
name|headerParser
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|headerParser
return|;
block|}
specifier|private
name|FrameParser
name|initializeVariableLengthParser
parameter_list|()
throws|throws
name|IOException
block|{
name|variableLengthParser
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|variableLengthParser
return|;
block|}
specifier|private
name|FrameParser
name|initializeContentParser
parameter_list|()
throws|throws
name|IOException
block|{
name|contentParser
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|contentParser
return|;
block|}
comment|//----- Frame parser implementations -------------------------------------//
specifier|private
specifier|final
name|FrameParser
name|headerParser
init|=
operator|new
name|FrameParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|DataByteArrayInputStream
name|data
parameter_list|,
name|int
name|readSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|readSize
condition|)
block|{
name|byte
name|b
init|=
name|data
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// skip repeating nulls
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|header
operator|=
name|b
expr_stmt|;
name|currentParser
operator|=
name|initializeVariableLengthParser
argument_list|()
expr_stmt|;
name|currentParser
operator|.
name|parse
argument_list|(
name|data
argument_list|,
name|readSize
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|header
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|FrameParser
name|contentParser
init|=
operator|new
name|FrameParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|DataByteArrayInputStream
name|data
parameter_list|,
name|int
name|readSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|readSize
condition|)
block|{
name|currentCommand
operator|.
name|write
argument_list|(
name|data
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|payLoadRead
operator|++
expr_stmt|;
if|if
condition|(
name|payLoadRead
operator|==
name|contentLength
condition|)
block|{
name|processCommand
argument_list|()
expr_stmt|;
name|currentParser
operator|=
name|initializeHeaderParser
argument_list|()
expr_stmt|;
name|currentParser
operator|.
name|parse
argument_list|(
name|data
argument_list|,
name|readSize
operator|-
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|contentLength
operator|=
operator|-
literal|1
expr_stmt|;
name|payLoadRead
operator|=
literal|0
expr_stmt|;
name|currentCommand
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|FrameParser
name|variableLengthParser
init|=
operator|new
name|FrameParser
argument_list|()
block|{
specifier|private
name|byte
name|digit
decl_stmt|;
specifier|private
name|int
name|multiplier
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|length
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|DataByteArrayInputStream
name|data
parameter_list|,
name|int
name|readSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|readSize
condition|)
block|{
name|digit
operator|=
name|data
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|length
operator|+=
operator|(
name|digit
operator|&
literal|0x7F
operator|)
operator|*
name|multiplier
expr_stmt|;
name|multiplier
operator|<<=
literal|7
expr_stmt|;
if|if
condition|(
operator|(
name|digit
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|processCommand
argument_list|()
expr_stmt|;
name|currentParser
operator|=
name|initializeHeaderParser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentParser
operator|=
name|initializeContentParser
argument_list|()
expr_stmt|;
name|contentLength
operator|=
name|length
expr_stmt|;
block|}
name|currentParser
operator|.
name|parse
argument_list|(
name|data
argument_list|,
name|readSize
operator|-
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|digit
operator|=
literal|0
expr_stmt|;
name|multiplier
operator|=
literal|1
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

