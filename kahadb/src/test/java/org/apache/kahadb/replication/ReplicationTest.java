begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_class
specifier|public
class|class
name|ReplicationTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BROKER1_URI
init|=
literal|"tcp://localhost:61001"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER2_URI
init|=
literal|"tcp://localhost:61002"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER1_REPLICATION_ID
init|=
literal|"kdbr://localhost:60001"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER2_REPLICATION_ID
init|=
literal|"kdbr://localhost:60002"
decl_stmt|;
specifier|private
name|Destination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST_QUEUE"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testReplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This cluster object will control who becomes the master.
name|StaticClusterStateManager
name|cluster
init|=
operator|new
name|StaticClusterStateManager
argument_list|()
decl_stmt|;
name|ReplicationService
name|rs1
init|=
operator|new
name|ReplicationService
argument_list|()
decl_stmt|;
name|rs1
operator|.
name|setMinimumReplicas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rs1
operator|.
name|setUri
argument_list|(
name|BROKER1_REPLICATION_ID
argument_list|)
expr_stmt|;
name|rs1
operator|.
name|setCluster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|rs1
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/replication-test/broker1"
argument_list|)
argument_list|)
expr_stmt|;
name|rs1
operator|.
name|setBrokerURI
argument_list|(
literal|"broker://("
operator|+
name|BROKER1_URI
operator|+
literal|")/broker1"
argument_list|)
expr_stmt|;
name|rs1
operator|.
name|start
argument_list|()
expr_stmt|;
name|ReplicationService
name|rs2
init|=
operator|new
name|ReplicationService
argument_list|()
decl_stmt|;
name|rs2
operator|.
name|setMinimumReplicas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|setUri
argument_list|(
name|BROKER2_REPLICATION_ID
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|setCluster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/replication-test/broker2"
argument_list|)
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|setBrokerURI
argument_list|(
literal|"broker://("
operator|+
name|BROKER2_URI
operator|+
literal|")/broker2"
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//		// None of the brokers should be accepting connections since they are not masters.
comment|//		try {
comment|//			sendMesagesTo(1, BROKER1_URI);
comment|//			fail("Connection failure expected.");
comment|//		} catch( JMSException e ) {
comment|//		}
comment|// Make b1 the master.
name|ClusterState
name|clusterState
init|=
operator|new
name|ClusterState
argument_list|()
decl_stmt|;
name|clusterState
operator|.
name|setMaster
argument_list|(
name|BROKER1_REPLICATION_ID
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setClusterState
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
try|try
block|{
name|sendMesagesTo
argument_list|(
name|BROKER1_URI
argument_list|,
literal|100
argument_list|,
literal|"Pass 1: "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"b1 did not become a master."
argument_list|)
expr_stmt|;
block|}
comment|// Make broker 2 a salve.
name|clusterState
operator|=
operator|new
name|ClusterState
argument_list|()
expr_stmt|;
name|clusterState
operator|.
name|setMaster
argument_list|(
name|BROKER1_REPLICATION_ID
argument_list|)
expr_stmt|;
name|String
index|[]
name|slaves
init|=
block|{
name|BROKER2_REPLICATION_ID
block|}
decl_stmt|;
name|clusterState
operator|.
name|setSlaves
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|slaves
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setClusterState
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|sendMesagesTo
argument_list|(
name|BROKER1_URI
argument_list|,
literal|100
argument_list|,
literal|"Pass 2: "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to send more messages..."
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Make broker 2 the master.
name|clusterState
operator|=
operator|new
name|ClusterState
argument_list|()
expr_stmt|;
name|clusterState
operator|.
name|setMaster
argument_list|(
name|BROKER2_REPLICATION_ID
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setClusterState
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertReceived
argument_list|(
literal|200
argument_list|,
name|BROKER2_URI
argument_list|)
expr_stmt|;
name|rs2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rs1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertReceived
parameter_list|(
name|int
name|count
parameter_list|,
name|String
name|brokerUri
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUri
argument_list|)
decl_stmt|;
name|Connection
name|con
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|m
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to receive message: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got: "
operator|+
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{}
block|}
block|}
specifier|private
name|void
name|sendMesagesTo
parameter_list|(
name|String
name|brokerUri
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUri
argument_list|)
decl_stmt|;
name|Connection
name|con
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
name|msg
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
end_class

end_unit

