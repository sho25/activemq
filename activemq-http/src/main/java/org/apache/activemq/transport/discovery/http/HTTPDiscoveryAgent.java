begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DiscoveryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|DiscoveryAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|DiscoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Suspendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HTTPDiscoveryAgent
implements|implements
name|DiscoveryAgent
implements|,
name|Suspendable
block|{
specifier|static
enum|enum
name|UpdateState
block|{
name|SUSPENDED
block|,
name|RESUMING
block|,
name|RESUMED
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HTTPDiscoveryAgent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|registryURL
init|=
literal|"http://localhost:8080/discovery-registry/default"
decl_stmt|;
specifier|private
name|HttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|DiscoveryListener
argument_list|>
name|discoveryListener
init|=
operator|new
name|AtomicReference
argument_list|<
name|DiscoveryListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|registeredServices
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|SimpleDiscoveryEvent
argument_list|>
name|discoveredServices
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SimpleDiscoveryEvent
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
name|long
name|updateInterval
init|=
literal|1000
operator|*
literal|10
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|String
name|brokerName
decl_stmt|;
specifier|private
name|boolean
name|startEmbeddRegistry
init|=
literal|false
decl_stmt|;
specifier|private
name|Service
name|jetty
decl_stmt|;
specifier|private
name|AtomicInteger
name|startCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|long
name|initialReconnectDelay
init|=
literal|1000
decl_stmt|;
specifier|private
name|long
name|maxReconnectDelay
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
specifier|private
name|long
name|backOffMultiplier
init|=
literal|2
decl_stmt|;
specifier|private
name|boolean
name|useExponentialBackOff
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxReconnectAttempts
decl_stmt|;
specifier|private
specifier|final
name|Object
name|sleepMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|updateMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|UpdateState
name|updateState
init|=
name|UpdateState
operator|.
name|RESUMED
decl_stmt|;
specifier|private
name|long
name|minConnectTime
init|=
literal|5000
decl_stmt|;
class|class
name|SimpleDiscoveryEvent
extends|extends
name|DiscoveryEvent
block|{
specifier|private
name|int
name|connectFailures
decl_stmt|;
specifier|private
name|long
name|reconnectDelay
init|=
name|initialReconnectDelay
decl_stmt|;
specifier|private
name|long
name|connectTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|AtomicBoolean
name|removed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|SimpleDiscoveryEvent
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|super
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|registerService
parameter_list|(
name|String
name|service
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|registeredServices
init|)
block|{
name|registeredServices
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
name|doRegister
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
specifier|private
name|void
name|doRegister
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|String
name|url
init|=
name|registryURL
decl_stmt|;
try|try
block|{
name|HttpPut
name|method
init|=
operator|new
name|HttpPut
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|method
operator|.
name|addHeader
argument_list|(
literal|"service"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|ResponseHandler
argument_list|<
name|String
argument_list|>
name|handler
init|=
operator|new
name|BasicResponseHandler
argument_list|()
decl_stmt|;
name|String
name|responseBody
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|method
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"PUT to "
operator|+
name|url
operator|+
literal|" got a "
operator|+
name|responseBody
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PUT to "
operator|+
name|url
operator|+
literal|" failed with: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|synchronized
specifier|private
name|void
name|doUnRegister
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|String
name|url
init|=
name|registryURL
decl_stmt|;
try|try
block|{
name|HttpDelete
name|method
init|=
operator|new
name|HttpDelete
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|method
operator|.
name|addHeader
argument_list|(
literal|"service"
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|ResponseHandler
argument_list|<
name|String
argument_list|>
name|handler
init|=
operator|new
name|BasicResponseHandler
argument_list|()
decl_stmt|;
name|String
name|responseBody
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|method
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DELETE to "
operator|+
name|url
operator|+
literal|" got a "
operator|+
name|responseBody
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DELETE to "
operator|+
name|url
operator|+
literal|" failed with: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|doLookup
parameter_list|(
name|long
name|freshness
parameter_list|)
block|{
name|String
name|url
init|=
name|registryURL
operator|+
literal|"?freshness="
operator|+
name|freshness
decl_stmt|;
try|try
block|{
name|HttpGet
name|method
init|=
operator|new
name|HttpGet
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|ResponseHandler
argument_list|<
name|String
argument_list|>
name|handler
init|=
operator|new
name|BasicResponseHandler
argument_list|()
decl_stmt|;
name|String
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|method
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"GET to "
operator|+
name|url
operator|+
literal|" got a "
operator|+
name|response
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rc
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|response
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|service
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GET to "
operator|+
name|url
operator|+
literal|" failed with: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|serviceFailed
parameter_list|(
name|DiscoveryEvent
name|devent
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SimpleDiscoveryEvent
name|event
init|=
operator|(
name|SimpleDiscoveryEvent
operator|)
name|devent
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|failed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|discoveryListener
operator|.
name|get
argument_list|()
operator|.
name|onServiceRemove
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|event
operator|.
name|removed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Setup a thread to re-raise the event...
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We detect a failed connection attempt because the
comment|// service
comment|// fails right away.
if|if
condition|(
name|event
operator|.
name|connectTime
operator|+
name|minConnectTime
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure occured soon after the discovery event was generated.  "
operator|+
literal|"It will be clasified as a connection failure: "
operator|+
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|connectFailures
operator|++
expr_stmt|;
if|if
condition|(
name|maxReconnectAttempts
operator|>
literal|0
operator|&&
name|event
operator|.
name|connectFailures
operator|>=
name|maxReconnectAttempts
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reconnect attempts exceeded "
operator|+
name|maxReconnectAttempts
operator|+
literal|" tries.  Reconnecting has been disabled."
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|sleepMutex
init|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|running
operator|.
name|get
argument_list|()
operator|||
name|event
operator|.
name|removed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting "
operator|+
name|event
operator|.
name|reconnectDelay
operator|+
literal|" ms before attepting to reconnect."
argument_list|)
expr_stmt|;
name|sleepMutex
operator|.
name|wait
argument_list|(
name|event
operator|.
name|reconnectDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|useExponentialBackOff
condition|)
block|{
name|event
operator|.
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
else|else
block|{
comment|// Exponential increment of reconnect delay.
name|event
operator|.
name|reconnectDelay
operator|*=
name|backOffMultiplier
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|reconnectDelay
operator|>
name|maxReconnectDelay
condition|)
block|{
name|event
operator|.
name|reconnectDelay
operator|=
name|maxReconnectDelay
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|event
operator|.
name|connectFailures
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|running
operator|.
name|get
argument_list|()
operator|||
name|event
operator|.
name|removed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|event
operator|.
name|connectTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|event
operator|.
name|failed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|discoveryListener
operator|.
name|get
argument_list|()
operator|.
name|onServiceAdd
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|this
operator|.
name|brokerName
operator|=
name|brokerName
expr_stmt|;
block|}
specifier|public
name|void
name|setDiscoveryListener
parameter_list|(
name|DiscoveryListener
name|discoveryListener
parameter_list|)
block|{
name|this
operator|.
name|discoveryListener
operator|.
name|set
argument_list|(
name|discoveryListener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{     }
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|startCounter
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|startEmbeddRegistry
condition|)
block|{
name|jetty
operator|=
name|createEmbeddedJettyServer
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"agent"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|jetty
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|running
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
literal|"HTTPDiscovery Agent"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|update
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|updateMutex
init|)
block|{
do|do
block|{
if|if
condition|(
name|updateState
operator|==
name|UpdateState
operator|.
name|RESUMING
condition|)
block|{
name|updateState
operator|=
name|UpdateState
operator|.
name|RESUMED
expr_stmt|;
block|}
else|else
block|{
name|updateMutex
operator|.
name|wait
argument_list|(
name|updateInterval
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|updateState
operator|==
name|UpdateState
operator|.
name|SUSPENDED
operator|&&
name|running
operator|.
name|get
argument_list|()
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Create the EmbeddedJettyServer instance via reflection so that we can      * avoid a hard runtime dependency on jetty.      *      * @return      * @throws Exception      */
specifier|private
name|Service
name|createEmbeddedJettyServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|HTTPDiscoveryAgent
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.apache.activemq.transport.discovery.http.EmbeddedJettyServer"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Service
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
specifier|private
name|void
name|update
parameter_list|()
block|{
comment|// Register all our services...
synchronized|synchronized
init|(
name|registeredServices
init|)
block|{
for|for
control|(
name|String
name|service
range|:
name|registeredServices
control|)
block|{
name|doRegister
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Find new registered services...
name|DiscoveryListener
name|discoveryListener
init|=
name|this
operator|.
name|discoveryListener
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|discoveryListener
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|activeServices
init|=
name|doLookup
argument_list|(
name|updateInterval
operator|*
literal|3
argument_list|)
decl_stmt|;
comment|// If there is error talking the the central server, then
comment|// activeServices == null
if|if
condition|(
name|activeServices
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|discoveredServices
init|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|removedServices
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|discoveredServices
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|removedServices
operator|.
name|removeAll
argument_list|(
name|activeServices
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|addedServices
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|activeServices
argument_list|)
decl_stmt|;
name|addedServices
operator|.
name|removeAll
argument_list|(
name|discoveredServices
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|addedServices
operator|.
name|removeAll
argument_list|(
name|removedServices
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|addedServices
control|)
block|{
name|SimpleDiscoveryEvent
name|e
init|=
operator|new
name|SimpleDiscoveryEvent
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|discoveredServices
operator|.
name|put
argument_list|(
name|service
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|discoveryListener
operator|.
name|onServiceAdd
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|service
range|:
name|removedServices
control|)
block|{
name|SimpleDiscoveryEvent
name|e
init|=
name|discoveredServices
operator|.
name|remove
argument_list|(
name|service
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|removed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|discoveryListener
operator|.
name|onServiceRemove
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|startCounter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|resume
argument_list|()
expr_stmt|;
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|thread
operator|!=
literal|null
condition|)
block|{
name|thread
operator|.
name|join
argument_list|(
name|updateInterval
operator|*
literal|3
argument_list|)
expr_stmt|;
name|thread
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|jetty
operator|!=
literal|null
condition|)
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jetty
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getRegistryURL
parameter_list|()
block|{
return|return
name|registryURL
return|;
block|}
specifier|public
name|void
name|setRegistryURL
parameter_list|(
name|String
name|discoveryRegistryURL
parameter_list|)
block|{
name|this
operator|.
name|registryURL
operator|=
name|discoveryRegistryURL
expr_stmt|;
block|}
specifier|public
name|long
name|getUpdateInterval
parameter_list|()
block|{
return|return
name|updateInterval
return|;
block|}
specifier|public
name|void
name|setUpdateInterval
parameter_list|(
name|long
name|updateInterval
parameter_list|)
block|{
name|this
operator|.
name|updateInterval
operator|=
name|updateInterval
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStartEmbeddRegistry
parameter_list|()
block|{
return|return
name|startEmbeddRegistry
return|;
block|}
specifier|public
name|void
name|setStartEmbeddRegistry
parameter_list|(
name|boolean
name|startEmbeddRegistry
parameter_list|)
block|{
name|this
operator|.
name|startEmbeddRegistry
operator|=
name|startEmbeddRegistry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|suspend
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|updateMutex
init|)
block|{
name|updateState
operator|=
name|UpdateState
operator|.
name|SUSPENDED
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|resume
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|updateMutex
init|)
block|{
name|updateState
operator|=
name|UpdateState
operator|.
name|RESUMING
expr_stmt|;
name|updateMutex
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

