begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|CommandMessageListener
implements|implements
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommandMessageListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|CommandHandler
name|handler
decl_stmt|;
specifier|public
name|CommandMessageListener
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received command: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|request
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
name|Destination
name|replyTo
init|=
name|message
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyTo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignored message as no JMSReplyTo set: "
operator|+
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
name|Message
name|response
init|=
name|processCommand
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|addReplyHeaders
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|getProducer
argument_list|()
operator|.
name|send
argument_list|(
name|replyTo
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process message due to: "
operator|+
name|e
operator|+
literal|". Message: "
operator|+
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring invalid message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addReplyHeaders
parameter_list|(
name|TextMessage
name|request
parameter_list|,
name|Message
name|response
parameter_list|)
throws|throws
name|JMSException
block|{
name|String
name|correlationID
init|=
name|request
operator|.
name|getJMSCorrelationID
argument_list|()
decl_stmt|;
if|if
condition|(
name|correlationID
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Processes an incoming JMS message returning the response message      */
specifier|public
name|Message
name|processCommand
parameter_list|(
name|TextMessage
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|TextMessage
name|response
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|getHandler
argument_list|()
operator|.
name|processCommand
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**      * Processes an incoming command from a console and returning the text to      * output      */
specifier|public
name|String
name|processCommandText
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
name|TextMessage
name|request
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|request
operator|.
name|setText
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|TextMessage
name|response
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|getHandler
argument_list|()
operator|.
name|processCommand
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
specifier|public
name|MessageProducer
name|getProducer
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|producer
operator|==
literal|null
condition|)
block|{
name|producer
operator|=
name|getSession
argument_list|()
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|producer
return|;
block|}
specifier|public
name|CommandHandler
name|getHandler
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|InstantiationException
throws|,
name|ClassNotFoundException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|handler
operator|=
name|createHandler
argument_list|()
expr_stmt|;
block|}
return|return
name|handler
return|;
block|}
specifier|private
name|CommandHandler
name|createHandler
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
block|{
name|FactoryFinder
name|factoryFinder
init|=
operator|new
name|FactoryFinder
argument_list|(
literal|"META-INF/services/org/apache/activemq/broker/"
argument_list|)
decl_stmt|;
return|return
operator|(
name|CommandHandler
operator|)
name|factoryFinder
operator|.
name|newInstance
argument_list|(
literal|"agent"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

