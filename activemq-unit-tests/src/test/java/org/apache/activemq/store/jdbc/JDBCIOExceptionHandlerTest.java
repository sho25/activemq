begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LeaseLockerIOExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test to see if the JDBCExceptionIOHandler will restart the transport connectors correctly after  * the underlying DB has been stopped and restarted  *  * see AMQ-4575  */
end_comment

begin_class
specifier|public
class|class
name|JDBCIOExceptionHandlerTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCIOExceptionHandlerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRANSPORT_URL
init|=
literal|"tcp://0.0.0.0:0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE_NAME
init|=
literal|"DERBY_OVERRIDE"
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|factory
decl_stmt|;
specifier|private
name|ReconnectingEmbeddedDataSource
name|dataSource
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|dbHomeSysProp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"derby.system.home"
argument_list|,
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|withJMX
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBroker
argument_list|(
literal|"localhost"
argument_list|,
name|withJMX
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|withJMX
parameter_list|,
name|boolean
name|leaseLocker
parameter_list|,
name|boolean
name|startStopConnectors
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
name|withJMX
argument_list|)
expr_stmt|;
name|EmbeddedDataSource
name|embeddedDataSource
init|=
operator|new
name|EmbeddedDataSource
argument_list|()
decl_stmt|;
name|embeddedDataSource
operator|.
name|setDatabaseName
argument_list|(
name|DATABASE_NAME
argument_list|)
expr_stmt|;
name|embeddedDataSource
operator|.
name|setCreateDatabase
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
comment|// create a wrapper to EmbeddedDataSource to allow the connection be
comment|// reestablished to derby db
name|dataSource
operator|=
operator|new
name|ReconnectingEmbeddedDataSource
argument_list|(
name|embeddedDataSource
argument_list|)
expr_stmt|;
name|JDBCPersistenceAdapter
name|jdbc
init|=
operator|new
name|JDBCPersistenceAdapter
argument_list|()
decl_stmt|;
name|jdbc
operator|.
name|setDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLockKeepAlivePeriod
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
if|if
condition|(
name|leaseLocker
condition|)
block|{
name|LeaseDatabaseLocker
name|leaseDatabaseLocker
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|leaseDatabaseLocker
operator|.
name|setHandleStartException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|leaseDatabaseLocker
operator|.
name|setLockAcquireSleepInterval
argument_list|(
literal|2000l
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLocker
argument_list|(
name|leaseDatabaseLocker
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|jdbc
argument_list|)
expr_stmt|;
name|LeaseLockerIOExceptionHandler
name|ioExceptionHandler
init|=
operator|new
name|LeaseLockerIOExceptionHandler
argument_list|()
decl_stmt|;
name|ioExceptionHandler
operator|.
name|setResumeCheckSleepPeriod
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
name|ioExceptionHandler
operator|.
name|setStopStartConnectors
argument_list|(
name|startStopConnectors
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setIoExceptionHandler
argument_list|(
name|ioExceptionHandler
argument_list|)
expr_stmt|;
name|String
name|connectionUri
init|=
name|broker
operator|.
name|addConnector
argument_list|(
name|TRANSPORT_URL
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
comment|/*      * run test without JMX enabled      */
annotation|@
name|Test
specifier|public
name|void
name|testRecoverWithOutJMX
parameter_list|()
throws|throws
name|Exception
block|{
name|recoverFromDisconnectDB
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*      * run test with JMX enabled      */
annotation|@
name|Test
specifier|public
name|void
name|testRecoverWithJMX
parameter_list|()
throws|throws
name|Exception
block|{
name|recoverFromDisconnectDB
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSlaveStoppedLease
parameter_list|()
throws|throws
name|Exception
block|{
name|testSlaveStopped
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSlaveStoppedDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|testSlaveStopped
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSlaveStopped
parameter_list|(
specifier|final
name|boolean
name|lease
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|master
init|=
name|createBroker
argument_list|(
literal|"master"
argument_list|,
literal|true
argument_list|,
name|lease
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
name|master
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|BrokerService
argument_list|>
name|slave
init|=
operator|new
name|AtomicReference
argument_list|<
name|BrokerService
argument_list|>
argument_list|()
decl_stmt|;
name|Thread
name|slaveThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"slave"
argument_list|)
expr_stmt|;
name|JDBCPersistenceAdapter
name|jdbc
init|=
operator|new
name|JDBCPersistenceAdapter
argument_list|()
decl_stmt|;
name|jdbc
operator|.
name|setDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLockKeepAlivePeriod
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
if|if
condition|(
name|lease
condition|)
block|{
name|LeaseDatabaseLocker
name|leaseDatabaseLocker
init|=
operator|new
name|LeaseDatabaseLocker
argument_list|()
decl_stmt|;
name|leaseDatabaseLocker
operator|.
name|setHandleStartException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|leaseDatabaseLocker
operator|.
name|setLockAcquireSleepInterval
argument_list|(
literal|2000l
argument_list|)
expr_stmt|;
name|jdbc
operator|.
name|setLocker
argument_list|(
name|leaseDatabaseLocker
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|jdbc
argument_list|)
expr_stmt|;
name|LeaseLockerIOExceptionHandler
name|ioExceptionHandler
init|=
operator|new
name|LeaseLockerIOExceptionHandler
argument_list|()
decl_stmt|;
name|ioExceptionHandler
operator|.
name|setResumeCheckSleepPeriod
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
name|ioExceptionHandler
operator|.
name|setStopStartConnectors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setIoExceptionHandler
argument_list|(
name|ioExceptionHandler
argument_list|)
expr_stmt|;
name|slave
operator|.
name|set
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|slaveThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|dataSource
operator|.
name|stopDB
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Master hasn't been stopped"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isStopped
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Slave hasn't been stopped"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|slave
operator|.
name|get
argument_list|()
operator|.
name|isStopped
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recoverFromDisconnectDB
parameter_list|(
name|boolean
name|withJMX
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|broker
operator|=
name|createBroker
argument_list|(
name|withJMX
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// broker started - stop db underneath it
name|dataSource
operator|.
name|stopDB
argument_list|()
expr_stmt|;
comment|// wait - allow the leaselocker to kick the JDBCIOExceptionHandler
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// check connector has shutdown
name|checkTransportConnectorStopped
argument_list|()
expr_stmt|;
comment|// restart db underneath
name|dataSource
operator|.
name|restartDB
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** checking connector to start..."
argument_list|)
expr_stmt|;
try|try
block|{
name|checkTransportConnectorStarted
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** broker is stopping..."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkTransportConnectorStopped
parameter_list|()
block|{
comment|// connection is expected to fail
try|try
block|{
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Transport connector should be stopped"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expected an exception
name|LOG
operator|.
name|debug
argument_list|(
literal|" checkTransportConnectorStopped() threw"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkTransportConnectorStarted
parameter_list|()
block|{
comment|// connection is expected to succeed
try|try
block|{
name|Connection
name|conn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"checkTransportConnectorStarted() threw"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Transport connector should have been started"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Wrapped the derby datasource object to get DB reconnect functionality as I not      * manage to get that working directly on the EmbeddedDataSource      *      * NOTE: Not a thread Safe but for this unit test it should be fine      */
specifier|public
class|class
name|ReconnectingEmbeddedDataSource
implements|implements
name|javax
operator|.
name|sql
operator|.
name|DataSource
block|{
specifier|private
name|EmbeddedDataSource
name|realDatasource
decl_stmt|;
specifier|public
name|ReconnectingEmbeddedDataSource
parameter_list|(
name|EmbeddedDataSource
name|datasource
parameter_list|)
block|{
name|this
operator|.
name|realDatasource
operator|=
name|datasource
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PrintWriter
name|getLogWriter
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|this
operator|.
name|realDatasource
operator|.
name|getLogWriter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLogWriter
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|realDatasource
operator|.
name|setLogWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLoginTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|realDatasource
operator|.
name|setLoginTimeout
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLoginTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|this
operator|.
name|realDatasource
operator|.
name|getLoginTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|this
operator|.
name|unwrap
argument_list|(
name|iface
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|this
operator|.
name|isWrapperFor
argument_list|(
name|iface
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|java
operator|.
name|sql
operator|.
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|this
operator|.
name|realDatasource
operator|.
name|getConnection
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|java
operator|.
name|sql
operator|.
name|Connection
name|getConnection
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|this
operator|.
name|getConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
return|;
block|}
comment|/**          *          * To simulate a db reconnect I just create a new EmbeddedDataSource .          *          * @throws SQLException          */
specifier|public
name|void
name|restartDB
parameter_list|()
throws|throws
name|SQLException
block|{
name|EmbeddedDataSource
name|newDatasource
init|=
operator|new
name|EmbeddedDataSource
argument_list|()
decl_stmt|;
name|newDatasource
operator|.
name|setDatabaseName
argument_list|(
name|DATABASE_NAME
argument_list|)
expr_stmt|;
name|newDatasource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"*** DB restarted now..."
argument_list|)
expr_stmt|;
name|this
operator|.
name|realDatasource
operator|=
name|newDatasource
expr_stmt|;
block|}
specifier|public
name|void
name|stopDB
parameter_list|()
block|{
try|try
block|{
name|realDatasource
operator|.
name|setShutdownDatabase
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***DB is being shutdown..."
argument_list|)
expr_stmt|;
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown a db closed exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
name|getParentLogger
parameter_list|()
throws|throws
name|SQLFeatureNotSupportedException
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

