begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTWillTest
extends|extends
name|MQTTTestSupport
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testWillMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockingConnection
name|conn1
init|=
literal|null
decl_stmt|;
name|BlockingConnection
name|conn2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MQTT
name|mqtt1
init|=
name|createMQTTConnection
argument_list|(
literal|"client1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mqtt1
operator|.
name|setWillMessage
argument_list|(
literal|"last will"
argument_list|)
expr_stmt|;
name|mqtt1
operator|.
name|setWillQos
argument_list|(
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|mqtt1
operator|.
name|setWillTopic
argument_list|(
literal|"wills"
argument_list|)
expr_stmt|;
name|conn1
operator|=
name|mqtt1
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|conn1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt2
init|=
name|createMQTTConnection
argument_list|(
literal|"client2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conn2
operator|=
name|mqtt2
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
literal|"#"
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|publish
argument_list|(
literal|"test"
argument_list|,
literal|"hello world"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|conn2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|kill
argument_list|()
expr_stmt|;
name|msg
operator|=
name|conn2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last will"
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wills"
argument_list|,
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn1
operator|!=
literal|null
condition|)
block|{
name|conn1
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn2
operator|!=
literal|null
condition|)
block|{
name|conn2
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testRetainWillMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockingConnection
name|conn1
init|=
literal|null
decl_stmt|;
name|BlockingConnection
name|conn2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MQTT
name|mqtt1
init|=
name|createMQTTConnection
argument_list|(
literal|"client1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mqtt1
operator|.
name|setWillMessage
argument_list|(
literal|"last will"
argument_list|)
expr_stmt|;
name|mqtt1
operator|.
name|setWillQos
argument_list|(
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|mqtt1
operator|.
name|setWillTopic
argument_list|(
literal|"wills"
argument_list|)
expr_stmt|;
name|mqtt1
operator|.
name|setWillRetain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn1
operator|=
name|mqtt1
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|conn1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt2
init|=
name|createMQTTConnection
argument_list|(
literal|"client2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conn2
operator|=
name|mqtt2
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
literal|"#"
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|publish
argument_list|(
literal|"test"
argument_list|,
literal|"hello world"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|conn2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|kill
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conn2
operator|=
name|mqtt2
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
literal|"#"
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|msg
operator|=
name|conn2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
operator|.
name|getTopic
argument_list|()
operator|+
literal|" "
operator|+
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last will"
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wills"
argument_list|,
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn1
operator|!=
literal|null
condition|)
block|{
name|conn1
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn2
operator|!=
literal|null
condition|)
block|{
name|conn2
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

