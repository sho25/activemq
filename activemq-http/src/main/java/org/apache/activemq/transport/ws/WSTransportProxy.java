begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ws
operator|.
name|WSTransport
operator|.
name|WSTransportSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|api
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|api
operator|.
name|WebSocketListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A proxy class that manages sending WebSocket events to the wrapped protocol level  * WebSocket Transport.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|WSTransportProxy
extends|extends
name|TransportSupport
implements|implements
name|Transport
implements|,
name|WebSocketListener
implements|,
name|BrokerServiceAware
implements|,
name|WSTransportSink
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WSTransportProxy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|ORDERLY_CLOSE_TIMEOUT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|protocolLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|socketTransportStarted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|remoteAddress
decl_stmt|;
specifier|private
specifier|final
name|Transport
name|transport
decl_stmt|;
specifier|private
specifier|final
name|WSTransport
name|wsTransport
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
comment|/**      * Create a WebSocket Transport Proxy instance that will pass      * along WebSocket event to the underlying protocol level transport.      *      * @param remoteAddress      *      the provided remote address to report being connected to.      * @param transport      *      The protocol level WebSocket Transport      */
specifier|public
name|WSTransportProxy
parameter_list|(
name|String
name|remoteAddress
parameter_list|,
name|Transport
name|transport
parameter_list|)
block|{
name|this
operator|.
name|remoteAddress
operator|=
name|remoteAddress
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|wsTransport
operator|=
name|transport
operator|.
name|narrow
argument_list|(
name|WSTransport
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsTransport
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Provided Transport does not contains a WSTransport implementation"
argument_list|)
throw|;
block|}
else|else
block|{
name|wsTransport
operator|.
name|setTransportSink
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return the sub-protocol of the proxied transport.      */
specifier|public
name|String
name|getSubProtocol
parameter_list|()
block|{
return|return
name|wsTransport
operator|.
name|getSubProtocol
argument_list|()
return|;
block|}
comment|/**      * Apply any configure Transport options on the wrapped Transport and its contained      * wireFormat instance.      */
specifier|public
name|void
name|setTransportOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|wireFormatOptions
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"wireFormat."
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|transport
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|transport
operator|.
name|getWireFormat
argument_list|()
argument_list|,
name|wireFormatOptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
if|if
condition|(
name|transport
operator|instanceof
name|BrokerServiceAware
condition|)
block|{
operator|(
operator|(
name|BrokerServiceAware
operator|)
name|transport
operator|)
operator|.
name|setBrokerService
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|oneway
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|protocolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|transport
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|protocolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|X509Certificate
index|[]
name|getPeerCertificates
parameter_list|()
block|{
return|return
name|transport
operator|.
name|getPeerCertificates
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPeerCertificates
parameter_list|(
name|X509Certificate
index|[]
name|certificates
parameter_list|)
block|{
name|transport
operator|.
name|setPeerCertificates
argument_list|(
name|certificates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|remoteAddress
return|;
block|}
annotation|@
name|Override
specifier|public
name|WireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|transport
operator|.
name|getWireFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReceiveCounter
parameter_list|()
block|{
return|return
name|transport
operator|.
name|getReceiveCounter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|socketTransportStarted
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|transport
operator|.
name|setTransportListener
argument_list|(
name|getTransportListener
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|//----- WebSocket methods being proxied to the WS Transport --------------//
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketBinary
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|transportStartedAtLeastOnce
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for WebSocket to be properly started..."
argument_list|)
expr_stmt|;
try|try
block|{
name|socketTransportStarted
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions..."
argument_list|)
expr_stmt|;
block|}
block|}
name|protocolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|wsTransport
operator|.
name|onWebSocketBinary
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|payload
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|protocolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketText
parameter_list|(
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|transportStartedAtLeastOnce
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for WebSocket to be properly started..."
argument_list|)
expr_stmt|;
try|try
block|{
name|socketTransportStarted
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions..."
argument_list|)
expr_stmt|;
block|}
block|}
name|protocolLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|wsTransport
operator|.
name|onWebSocketText
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|protocolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketClose
parameter_list|(
name|int
name|statusCode
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|protocolLock
operator|.
name|tryLock
argument_list|()
operator|||
name|protocolLock
operator|.
name|tryLock
argument_list|(
name|ORDERLY_CLOSE_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"WebSocket closed: code[{}] message[{}]"
argument_list|,
name|statusCode
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|wsTransport
operator|.
name|onWebSocketClosed
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to close WebSocket cleanly"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|protocolLock
operator|.
name|isHeldByCurrentThread
argument_list|()
condition|)
block|{
name|protocolLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketConnect
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketError
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSocketOutboundText
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|transportStartedAtLeastOnce
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for WebSocket to be properly started..."
argument_list|)
expr_stmt|;
try|try
block|{
name|socketTransportStarted
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions..."
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"WS Proxy sending string of size {} out"
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|getRemote
argument_list|()
operator|.
name|sendStringByFuture
argument_list|(
name|data
argument_list|)
operator|.
name|get
argument_list|(
name|getDefaultSendTimeOut
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSocketOutboundBinary
parameter_list|(
name|ByteBuffer
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|transportStartedAtLeastOnce
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for WebSocket to be properly started..."
argument_list|)
expr_stmt|;
try|try
block|{
name|socketTransportStarted
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"While waiting for WebSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions..."
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"WS Proxy sending {} bytes out"
argument_list|,
name|data
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|limit
init|=
name|data
operator|.
name|limit
argument_list|()
decl_stmt|;
try|try
block|{
name|session
operator|.
name|getRemote
argument_list|()
operator|.
name|sendBytesByFuture
argument_list|(
name|data
argument_list|)
operator|.
name|get
argument_list|(
name|getDefaultSendTimeOut
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Reset back to original limit and move position to match limit indicating
comment|// that we read everything, the websocket sender clears the passed buffer
comment|// which can make it look as if nothing was written.
name|data
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|data
operator|.
name|position
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
comment|//----- Internal implementation ------------------------------------------//
specifier|private
name|boolean
name|transportStartedAtLeastOnce
parameter_list|()
block|{
return|return
name|socketTransportStarted
operator|.
name|getCount
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|private
specifier|static
name|int
name|getDefaultSendTimeOut
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"org.apache.activemq.transport.ws.WSTransportProxy.sendTimeout"
argument_list|,
literal|30
argument_list|)
return|;
block|}
block|}
end_class

end_unit

