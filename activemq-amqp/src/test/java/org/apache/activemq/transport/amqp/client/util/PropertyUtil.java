begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|BeanInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Introspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_comment
comment|/**  * Utilities for properties  */
end_comment

begin_class
specifier|public
class|class
name|PropertyUtil
block|{
comment|/**      * Creates a URI from the original URI and the given parameters.      *      * @param originalURI      *        The URI whose current parameters are removed and replaced with the given remainder value.      * @param params      *        The URI params that should be used to replace the current ones in the target.      *      * @return a new URI that matches the original one but has its query options replaced with      *         the given ones.      *      * @throws URISyntaxException if the given URI is invalid.      */
specifier|public
specifier|static
name|URI
name|replaceQuery
parameter_list|(
name|URI
name|originalURI
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|s
init|=
name|createQueryString
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|s
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|replaceQuery
argument_list|(
name|originalURI
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/**      * Creates a URI with the given query, removing an previous query value from the given URI.      *      * @param uri      *        The source URI whose existing query is replaced with the newly supplied one.      * @param query      *        The new URI query string that should be appended to the given URI.      *      * @return a new URI that is a combination of the original URI and the given query string.      *      * @throws URISyntaxException if the given URI is invalid.      */
specifier|public
specifier|static
name|URI
name|replaceQuery
parameter_list|(
name|URI
name|uri
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|schemeSpecificPart
init|=
name|uri
operator|.
name|getRawSchemeSpecificPart
argument_list|()
decl_stmt|;
comment|// strip existing query if any
name|int
name|questionMark
init|=
name|schemeSpecificPart
operator|.
name|lastIndexOf
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
comment|// make sure question mark is not within parentheses
if|if
condition|(
name|questionMark
operator|<
name|schemeSpecificPart
operator|.
name|lastIndexOf
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
name|questionMark
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|questionMark
operator|>
literal|0
condition|)
block|{
name|schemeSpecificPart
operator|=
name|schemeSpecificPart
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|questionMark
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|schemeSpecificPart
operator|+=
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
return|return
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|schemeSpecificPart
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a URI with the given query, removing an previous query value from the given URI.      *      * @param uri      *        The source URI whose existing query is replaced with the newly supplied one.      *      * @return a new URI that is a combination of the original URI and the given query string.      *      * @throws URISyntaxException if the given URI is invalid.      */
specifier|public
specifier|static
name|URI
name|eraseQuery
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
name|replaceQuery
argument_list|(
name|uri
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Given a key / value mapping, create and return a URI formatted query string that is valid      * and can be appended to a URI.      *      * @param options      *        The Mapping that will create the new Query string.      *      * @return a URI formatted query string.      *      * @throws URISyntaxException if the given URI is invalid.      */
specifier|public
specifier|static
name|String
name|createQueryString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|options
parameter_list|)
throws|throws
name|URISyntaxException
block|{
try|try
block|{
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuffer
name|rc
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|rc
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|URISyntaxException
operator|)
operator|new
name|URISyntaxException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Invalid encoding"
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get properties from a URI and return them in a new {@code Map<String, String>} instance.      *      * If the URI is null or the query string of the URI is null an empty Map is returned.      *      * @param uri      *        the URI whose parameters are to be parsed.      *      * @return<Code>Map</Code> of properties      *      * @throws Exception if an error occurs while parsing the query options.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseParameters
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|getQuery
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
return|return
name|parseQuery
argument_list|(
name|stripPrefix
argument_list|(
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|,
literal|"?"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Parse properties from a named resource -eg. a URI or a simple name e.g.      * {@literal foo?name="fred"&size=2}      *      * @param uri      *        the URI whose parameters are to be parsed.      *      * @return<Code>Map</Code> of properties      *      * @throws Exception if an error occurs while parsing the query options.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseParameters
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
return|return
name|parseQuery
argument_list|(
name|stripUpto
argument_list|(
name|uri
argument_list|,
literal|'?'
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get properties from a URI query string.      *      * @param queryString      *        the string value returned from a call to the URI class getQuery method.      *      * @return<Code>Map</Code> of properties from the parsed string.      *      * @throws Exception if an error occurs while parsing the query options.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|queryString
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|queryString
operator|!=
literal|null
operator|&&
operator|!
name|queryString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|parameters
init|=
name|queryString
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|p
init|=
name|parameters
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|>=
literal|0
condition|)
block|{
name|String
name|name
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|parameters
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|parameters
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|.
name|put
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|/**      * Given a map of properties, filter out only those prefixed with the given value, the      * values filtered are returned in a new Map instance.      *      * @param properties      *        The map of properties to filter.      * @param optionPrefix      *        The prefix value to use when filtering.      *      * @return a filter map with only values that match the given prefix.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|String
name|optionPrefix
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The given properties object was null."
argument_list|)
throw|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|optionPrefix
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|optionPrefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Enumerate the properties of the target object and add them as additional entries      * to the query string of the given string URI.      *      * @param uri      *        The string URI value to append the object properties to.      * @param bean      *        The Object whose properties will be added to the target URI.      *      * @return a new String value that is the original URI with the added bean properties.      *      * @throws Exception if an error occurs while enumerating the bean properties.      */
specifier|public
specifier|static
name|String
name|addPropertiesToURIFromBean
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
name|bean
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|PropertyUtil
operator|.
name|getProperties
argument_list|(
name|bean
argument_list|)
decl_stmt|;
return|return
name|PropertyUtil
operator|.
name|addPropertiesToURI
argument_list|(
name|uri
argument_list|,
name|properties
argument_list|)
return|;
block|}
comment|/**      * Enumerate the properties of the target object and add them as additional entries      * to the query string of the given URI.      *      * @param uri      *        The URI value to append the object properties to.      * @param properties      *        The Object whose properties will be added to the target URI.      *      * @return a new String value that is the original URI with the added bean properties.      *      * @throws Exception if an error occurs while enumerating the bean properties.      */
specifier|public
specifier|static
name|String
name|addPropertiesToURI
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addPropertiesToURI
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|properties
argument_list|)
return|;
block|}
comment|/**      * Append the given properties to the query portion of the given URI.      *      * @param uri      *        The string URI value to append the object properties to.      * @param properties      *        The properties that will be added to the target URI.      *      * @return a new String value that is the original URI with the added properties.      *      * @throws Exception if an error occurs while building the new URI string.      */
specifier|public
specifier|static
name|String
name|addPropertiesToURI
parameter_list|(
name|String
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|properties
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|base
init|=
operator|new
name|StringBuilder
argument_list|(
name|stripBefore
argument_list|(
name|uri
argument_list|,
literal|'?'
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|parseParameters
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
name|properties
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|base
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|base
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|base
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|base
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Set properties on an object using the provided map. The return value      * indicates if all properties from the given map were set on the target object.      *      * @param target      *        the object whose properties are to be set from the map options.      * @param properties      *        the properties that should be applied to the given object.      *      * @return true if all values in the properties map were applied to the target object.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setProperties
parameter_list|(
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"target object cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given Properties object cannot be null"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|unmatched
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|setProperty
argument_list|(
name|target
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|unmatched
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|unmatched
argument_list|)
return|;
block|}
comment|//TODO: common impl for above and below methods.
comment|/**      * Set properties on an object using the provided Properties object. The return value      * indicates if all properties from the given map were set on the target object.      *      * @param target      *        the object whose properties are to be set from the map options.      * @param properties      *        the properties that should be applied to the given object.      *      * @return an unmodifiable map with any values that could not be applied to the target.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|setProperties
parameter_list|(
name|Object
name|target
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"target object cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given Properties object cannot be null"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|unmatched
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|setProperty
argument_list|(
name|target
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|unmatched
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|unmodifiableMap
argument_list|(
name|unmatched
argument_list|)
return|;
block|}
comment|/**      * Get properties from an object using reflection.  If the passed object is null an      * empty<code>Map</code> is returned.      *      * @param object      *        the Object whose properties are to be extracted.      *      * @return<Code>Map</Code> of properties extracted from the given object.      *      * @throws Exception if an error occurs while examining the object's properties.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|BeanInfo
name|beanInfo
init|=
name|Introspector
operator|.
name|getBeanInfo
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Object
index|[]
name|NULL_ARG
init|=
block|{}
decl_stmt|;
name|PropertyDescriptor
index|[]
name|propertyDescriptors
init|=
name|beanInfo
operator|.
name|getPropertyDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyDescriptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyDescriptors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PropertyDescriptor
name|pd
init|=
name|propertyDescriptors
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|pd
operator|.
name|getReadMethod
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|pd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"class"
argument_list|)
operator|&&
operator|!
name|pd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"properties"
argument_list|)
operator|&&
operator|!
name|pd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"reference"
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|pd
operator|.
name|getReadMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|NULL_ARG
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
operator|||
name|value
operator|instanceof
name|Number
operator|||
name|value
operator|instanceof
name|String
operator|||
name|value
operator|instanceof
name|URI
operator|||
name|value
operator|instanceof
name|URL
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|pd
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
literal|""
operator|+
name|value
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|SSLContext
condition|)
block|{
comment|// ignore this one..
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inner
init|=
name|getProperties
argument_list|(
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|inner
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|pd
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|properties
return|;
block|}
comment|/**      * Find a specific property getter in a given object based on a property name.      *      * @param object      *        the object to search.      * @param name      *        the property name to search for.      *      * @return the result of invoking the specific property get method.      *      * @throws Exception if an error occurs while searching the object's bean info.      */
specifier|public
specifier|static
name|Object
name|getProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|BeanInfo
name|beanInfo
init|=
name|Introspector
operator|.
name|getBeanInfo
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|PropertyDescriptor
index|[]
name|propertyDescriptors
init|=
name|beanInfo
operator|.
name|getPropertyDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyDescriptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyDescriptors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PropertyDescriptor
name|pd
init|=
name|propertyDescriptors
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|pd
operator|.
name|getReadMethod
argument_list|()
operator|!=
literal|null
operator|&&
name|pd
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|pd
operator|.
name|getReadMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Set a property named property on a given Object.      *<p>      * The object is searched for an set method that would match the given named      * property and if one is found.  If necessary an attempt will be made to convert      * the new value to an acceptable type.      *      * @param target      *        The object whose property is to be set.      * @param name      *        The name of the property to set.      * @param value      *        The new value to set for the named property.      *      * @return true if the property was able to be set on the target object.      */
specifier|public
specifier|static
name|boolean
name|setProperty
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
try|try
block|{
name|int
name|dotPos
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
while|while
condition|(
name|dotPos
operator|>=
literal|0
condition|)
block|{
name|String
name|getterName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotPos
argument_list|)
decl_stmt|;
name|target
operator|=
name|getProperty
argument_list|(
name|target
argument_list|,
name|getterName
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|dotPos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dotPos
operator|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
init|=
name|target
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Method
name|setter
init|=
name|findSetterMethod
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|setter
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If the type is null or it matches the needed type, just use the
comment|// value directly
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|getClass
argument_list|()
operator|==
name|setter
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
condition|)
block|{
name|setter
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setter
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
operator|new
name|Object
index|[]
block|{
name|convert
argument_list|(
name|value
argument_list|,
name|setter
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Return a String minus the given prefix.  If the string does not start      * with the given prefix the original string value is returned.      *      * @param value      *        The String whose prefix is to be removed.      * @param prefix      *        The prefix string to remove from the target string.      *      * @return stripped version of the original input string.      */
specifier|public
specifier|static
name|String
name|stripPrefix
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|prefix
operator|!=
literal|null
operator|&&
name|value
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Return a portion of a String value by looking beyond the given      * character.      *      * @param value      *        The string value to split      * @param c      *        The character that marks the split point.      *      * @return the sub-string value starting beyond the given character.      */
specifier|public
specifier|static
name|String
name|stripUpto
parameter_list|(
name|String
name|value
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|value
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|value
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Return a String up to and including character      *      * @param value      *        The string value to split      * @param c      *        The character that marks the start of split point.      *      * @return the sub-string value starting from the given character.      */
specifier|public
specifier|static
name|String
name|stripBefore
parameter_list|(
name|String
name|value
parameter_list|,
name|char
name|c
parameter_list|)
block|{
name|String
name|result
init|=
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|value
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|Method
name|findSetterMethod
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|// Build the method name.
name|name
operator|=
literal|"set"
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|method
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|params
index|[]
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|params
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|boolean
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|// special for String[] as we do not want to use a PropertyEditor for that
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
condition|)
block|{
return|return
name|StringArrayConverter
operator|.
name|convertToStringArray
argument_list|(
name|value
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|URI
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|URI
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

