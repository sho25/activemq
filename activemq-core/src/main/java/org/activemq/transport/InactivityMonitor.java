begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|KeepAliveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|management
operator|.
name|CountStatisticImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Used to make sure that commands are arriving periodically from the peer of the transport.    *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|InactivityMonitor
extends|extends
name|TransportFilter
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|long
name|maxInactivityDuration
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|cancled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|byte
name|runIteration
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|lastReadCount
decl_stmt|;
specifier|private
name|long
name|lastWriteCount
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|readCounter
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|writeCounter
decl_stmt|;
specifier|public
name|InactivityMonitor
parameter_list|(
name|Transport
name|next
parameter_list|,
name|long
name|maxInactivityDuration
parameter_list|,
name|CountStatisticImpl
name|readCounter
parameter_list|,
name|CountStatisticImpl
name|writeCounter
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxInactivityDuration
operator|=
name|maxInactivityDuration
expr_stmt|;
name|this
operator|.
name|readCounter
operator|=
name|readCounter
expr_stmt|;
name|this
operator|.
name|writeCounter
operator|=
name|writeCounter
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|next
operator|.
name|start
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|executePeriodically
argument_list|(
name|this
argument_list|,
name|maxInactivityDuration
operator|/
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cancled
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Scheduler
operator|.
name|cancel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|next
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
switch|switch
condition|(
name|runIteration
condition|)
block|{
case|case
literal|1
case|:
case|case
literal|2
case|:
name|long
name|wc
init|=
name|writeCounter
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|wc
operator|==
name|lastWriteCount
condition|)
block|{
try|try
block|{
name|oneway
argument_list|(
operator|new
name|KeepAliveInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lastWriteCount
operator|=
name|wc
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
name|long
name|rc
init|=
name|readCounter
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|==
name|lastReadCount
condition|)
block|{
name|onException
argument_list|(
operator|new
name|InactivityIOException
argument_list|(
literal|"Channel was inactive for too long."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastReadCount
operator|=
name|rc
expr_stmt|;
block|}
block|}
name|runIteration
operator|++
expr_stmt|;
if|if
condition|(
name|runIteration
operator|>=
literal|5
condition|)
name|runIteration
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
name|cancled
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Scheduler
operator|.
name|cancel
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|commandListener
operator|.
name|onException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

