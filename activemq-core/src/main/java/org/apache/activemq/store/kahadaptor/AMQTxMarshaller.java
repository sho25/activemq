begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadaptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|async
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQTx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQTxOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_comment
comment|/**  * Marshall an AMQTx  *   *   */
end_comment

begin_class
specifier|public
class|class
name|AMQTxMarshaller
implements|implements
name|Marshaller
argument_list|<
name|AMQTx
argument_list|>
block|{
specifier|private
name|WireFormat
name|wireFormat
decl_stmt|;
specifier|public
name|AMQTxMarshaller
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|AMQTx
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|location
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|location
operator|.
name|readExternal
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|AMQTx
name|result
init|=
operator|new
name|AMQTx
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AMQTxOperation
name|op
init|=
operator|new
name|AMQTxOperation
argument_list|()
decl_stmt|;
name|op
operator|.
name|readExternal
argument_list|(
name|wireFormat
argument_list|,
name|dataIn
argument_list|)
expr_stmt|;
name|result
operator|.
name|getOperations
argument_list|()
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|AMQTx
name|amqtx
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|amqtx
operator|.
name|getLocation
argument_list|()
operator|.
name|writeExternal
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AMQTxOperation
argument_list|>
name|list
init|=
name|amqtx
operator|.
name|getOperations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AMQTxOperation
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|AMQTxOperation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AMQTxOperation
name|op
range|:
name|list
control|)
block|{
if|if
condition|(
name|op
operator|.
name|getOperationType
argument_list|()
operator|==
name|op
operator|.
name|ADD_OPERATION_TYPE
condition|)
block|{
name|ops
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
name|dataOut
operator|.
name|writeInt
argument_list|(
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AMQTxOperation
name|op
range|:
name|ops
control|)
block|{
name|op
operator|.
name|writeExternal
argument_list|(
name|wireFormat
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

