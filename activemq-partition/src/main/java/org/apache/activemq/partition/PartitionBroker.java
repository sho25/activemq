begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|partition
operator|.
name|dto
operator|.
name|Partitioning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|partition
operator|.
name|dto
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConsumerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A BrokerFilter which partitions client connections over a cluster of brokers.  *  * It can use a client identifier like client id, authenticated user name, source ip  * address or even destination being used by the connection to figure out which  * is the best broker in the cluster that the connection should be using and then  * redirects failover clients to that broker.  */
end_comment

begin_class
specifier|public
class|class
name|PartitionBroker
extends|extends
name|BrokerFilter
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PartitionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|PartitionBrokerPlugin
name|plugin
decl_stmt|;
specifier|protected
name|boolean
name|reloadConfigOnPoll
init|=
literal|true
decl_stmt|;
specifier|public
name|PartitionBroker
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|PartitionBrokerPlugin
name|plugin
parameter_list|)
block|{
name|super
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|this
operator|.
name|plugin
operator|=
name|plugin
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|getExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Partition Monitor"
argument_list|)
expr_stmt|;
name|onMonitorStart
argument_list|()
expr_stmt|;
try|try
block|{
name|runPartitionMonitor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onMonitorStop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onMonitorStart
parameter_list|()
block|{     }
specifier|protected
name|void
name|onMonitorStop
parameter_list|()
block|{     }
specifier|protected
name|void
name|runPartitionMonitor
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|monitorWait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
if|if
condition|(
name|reloadConfigOnPoll
condition|)
block|{
try|try
block|{
name|reloadConfiguration
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
for|for
control|(
name|ConnectionMonitor
name|monitor
range|:
name|monitors
operator|.
name|values
argument_list|()
control|)
block|{
name|checkTarget
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|monitorWait
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|monitorWakeup
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|reloadConfiguration
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|protected
name|void
name|checkTarget
parameter_list|(
name|ConnectionMonitor
name|monitor
parameter_list|)
block|{
comment|// can we find a preferred target for the connection?
name|Target
name|targetDTO
init|=
name|pickBestBroker
argument_list|(
name|monitor
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetDTO
operator|==
literal|null
operator|||
name|targetDTO
operator|.
name|ids
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No partition target found for connection: "
operator|+
name|monitor
operator|.
name|context
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Are we one the the targets?
if|if
condition|(
name|targetDTO
operator|.
name|ids
operator|.
name|contains
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"We are a partition target for connection: "
operator|+
name|monitor
operator|.
name|context
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Then we need to move the connection over.
name|String
name|connectionString
init|=
name|getConnectionString
argument_list|(
name|targetDTO
operator|.
name|ids
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionString
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not convert to partition targets to connection string: "
operator|+
name|targetDTO
operator|.
name|ids
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Redirecting connection to: "
operator|+
name|connectionString
argument_list|)
expr_stmt|;
name|TransportConnection
name|connection
init|=
operator|(
name|TransportConnection
operator|)
name|monitor
operator|.
name|context
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|ConnectionControl
name|cc
init|=
operator|new
name|ConnectionControl
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setConnectedBrokers
argument_list|(
name|connectionString
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setRebalanceConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|dispatchAsync
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getConnectionString
parameter_list|(
name|HashSet
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
name|StringBuilder
name|rc
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|String
name|url
init|=
name|plugin
operator|.
name|getBrokerURL
argument_list|(
name|this
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rc
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|rc
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|rc
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
specifier|private
class|class
name|Score
block|{
name|int
name|value
decl_stmt|;
block|}
specifier|protected
name|Target
name|pickBestBroker
parameter_list|(
name|ConnectionMonitor
name|monitor
parameter_list|)
block|{
if|if
condition|(
name|getConfig
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|bySourceIp
operator|!=
literal|null
operator|&&
operator|!
name|getConfig
argument_list|()
operator|.
name|bySourceIp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TransportConnection
name|connection
init|=
operator|(
name|TransportConnection
operator|)
name|monitor
operator|.
name|context
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|Transport
name|transport
init|=
name|connection
operator|.
name|getTransport
argument_list|()
decl_stmt|;
name|Socket
name|socket
init|=
name|transport
operator|.
name|narrow
argument_list|(
name|Socket
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|SocketAddress
name|address
init|=
name|socket
operator|.
name|getRemoteSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|instanceof
name|InetSocketAddress
condition|)
block|{
name|String
name|ip
init|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|address
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
name|Target
name|targetDTO
init|=
name|getConfig
argument_list|()
operator|.
name|bySourceIp
operator|.
name|get
argument_list|(
name|ip
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetDTO
operator|!=
literal|null
condition|)
block|{
return|return
name|targetDTO
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|byUserName
operator|!=
literal|null
operator|&&
operator|!
name|getConfig
argument_list|()
operator|.
name|byUserName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|userName
init|=
name|monitor
operator|.
name|context
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Target
name|targetDTO
init|=
name|getConfig
argument_list|()
operator|.
name|byUserName
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetDTO
operator|!=
literal|null
condition|)
block|{
return|return
name|targetDTO
return|;
block|}
block|}
block|}
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|byClientId
operator|!=
literal|null
operator|&&
operator|!
name|getConfig
argument_list|()
operator|.
name|byClientId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|clientId
init|=
name|monitor
operator|.
name|context
operator|.
name|getClientId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|Target
name|targetDTO
init|=
name|getConfig
argument_list|()
operator|.
name|byClientId
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetDTO
operator|!=
literal|null
condition|)
block|{
return|return
name|targetDTO
return|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|getConfig
argument_list|()
operator|.
name|byQueue
operator|!=
literal|null
operator|&&
operator|!
name|getConfig
argument_list|()
operator|.
name|byQueue
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|getConfig
argument_list|()
operator|.
name|byTopic
operator|!=
literal|null
operator|&&
operator|!
name|getConfig
argument_list|()
operator|.
name|byTopic
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// Collect the destinations the connection is consuming from...
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
name|dests
init|=
operator|new
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SessionState
name|session
range|:
name|monitor
operator|.
name|context
operator|.
name|getConnectionState
argument_list|()
operator|.
name|getSessionStates
argument_list|()
control|)
block|{
for|for
control|(
name|ConsumerState
name|consumer
range|:
name|session
operator|.
name|getConsumerStates
argument_list|()
control|)
block|{
name|ActiveMQDestination
name|destination
init|=
name|consumer
operator|.
name|getInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|.
name|isComposite
argument_list|()
condition|)
block|{
name|dests
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|destination
operator|.
name|getCompositeDestinations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dests
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Group them by the partitioning target for the destinations and score them..
name|HashMap
argument_list|<
name|Target
argument_list|,
name|Score
argument_list|>
name|targetScores
init|=
operator|new
name|HashMap
argument_list|<
name|Target
argument_list|,
name|Score
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|dests
control|)
block|{
name|Target
name|target
init|=
name|getTarget
argument_list|(
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|Score
name|score
init|=
name|targetScores
operator|.
name|get
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|score
operator|==
literal|null
condition|)
block|{
name|score
operator|=
operator|new
name|Score
argument_list|()
expr_stmt|;
name|targetScores
operator|.
name|put
argument_list|(
name|target
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
name|score
operator|.
name|value
operator|++
expr_stmt|;
block|}
block|}
comment|// The target with largest score wins..
if|if
condition|(
operator|!
name|targetScores
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Target
name|bestTarget
init|=
literal|null
decl_stmt|;
name|int
name|bestScore
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Target
argument_list|,
name|Score
argument_list|>
name|entry
range|:
name|targetScores
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|value
operator|>
name|bestScore
condition|)
block|{
name|bestTarget
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|bestScore
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|value
expr_stmt|;
block|}
block|}
return|return
name|bestTarget
return|;
block|}
comment|// If we get here is because there were no consumers, or the destinations for those
comment|// consumers did not have an assigned destination..  So partition based on producer
comment|// usage.
name|Target
name|best
init|=
name|monitor
operator|.
name|findBestProducerTarget
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|best
operator|!=
literal|null
condition|)
block|{
return|return
name|best
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Target
name|getTarget
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|)
block|{
name|Partitioning
name|config
init|=
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|isQueue
argument_list|()
operator|&&
name|config
operator|.
name|byQueue
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|byQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|config
operator|.
name|byQueue
operator|.
name|get
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|.
name|isTopic
argument_list|()
operator|&&
name|config
operator|.
name|byTopic
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|byTopic
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|config
operator|.
name|byTopic
operator|.
name|get
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionMonitor
argument_list|>
name|monitors
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionMonitor
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|info
operator|.
name|isFaultTolerant
argument_list|()
condition|)
block|{
name|ConnectionMonitor
name|monitor
init|=
operator|new
name|ConnectionMonitor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|monitors
operator|.
name|put
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|monitor
argument_list|)
expr_stmt|;
name|super
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|checkTarget
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|removeConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|error
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|isFaultTolerant
argument_list|()
condition|)
block|{
name|monitors
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionMonitor
name|monitor
init|=
name|monitors
operator|.
name|get
argument_list|(
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|onSend
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Partitioning
name|getConfig
parameter_list|()
block|{
return|return
name|plugin
operator|.
name|getConfig
argument_list|()
return|;
block|}
specifier|static
class|class
name|Traffic
block|{
name|long
name|messages
decl_stmt|;
name|long
name|bytes
decl_stmt|;
block|}
specifier|static
class|class
name|ConnectionMonitor
block|{
specifier|final
name|ConnectionContext
name|context
decl_stmt|;
name|LRUCache
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Traffic
argument_list|>
name|trafficPerDestination
init|=
operator|new
name|LRUCache
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Traffic
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ConnectionMonitor
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|Target
name|findBestProducerTarget
parameter_list|(
name|PartitionBroker
name|broker
parameter_list|)
block|{
name|Target
name|best
init|=
literal|null
decl_stmt|;
name|long
name|bestSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Traffic
argument_list|>
name|entry
range|:
name|trafficPerDestination
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Traffic
name|t
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Once we get enough messages...
if|if
condition|(
name|t
operator|.
name|messages
operator|<
name|broker
operator|.
name|plugin
operator|.
name|getMinTransferCount
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|t
operator|.
name|bytes
operator|>
name|bestSize
condition|)
block|{
name|bestSize
operator|=
name|t
operator|.
name|bytes
expr_stmt|;
name|Target
name|target
init|=
name|broker
operator|.
name|getTarget
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|best
operator|=
name|target
expr_stmt|;
block|}
block|}
block|}
return|return
name|best
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|onSend
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|ActiveMQDestination
name|dest
init|=
name|message
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|Traffic
name|traffic
init|=
name|trafficPerDestination
operator|.
name|get
argument_list|(
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|traffic
operator|==
literal|null
condition|)
block|{
name|traffic
operator|=
operator|new
name|Traffic
argument_list|()
expr_stmt|;
name|trafficPerDestination
operator|.
name|put
argument_list|(
name|dest
argument_list|,
name|traffic
argument_list|)
expr_stmt|;
block|}
name|traffic
operator|.
name|messages
operator|+=
literal|1
expr_stmt|;
name|traffic
operator|.
name|bytes
operator|+=
name|message
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

