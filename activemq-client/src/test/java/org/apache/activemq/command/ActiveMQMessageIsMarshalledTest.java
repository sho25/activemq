begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Test to make sure message.isMarshalled() returns the correct value  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ActiveMQMessageIsMarshalledTest
block|{
specifier|protected
enum|enum
name|MessageType
block|{
name|BYTES
block|,
name|MAP
block|,
name|TEXT
block|,
name|OBJECT
block|,
name|STREAM
block|,
name|MESSAGE
block|}
specifier|private
specifier|final
name|MessageType
name|messageType
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"messageType={0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|MessageType
operator|.
name|BYTES
block|}
block|,
block|{
name|MessageType
operator|.
name|MAP
block|}
block|,
block|{
name|MessageType
operator|.
name|TEXT
block|}
block|,
block|{
name|MessageType
operator|.
name|OBJECT
block|}
block|,
block|{
name|MessageType
operator|.
name|STREAM
block|}
block|,
block|{
name|MessageType
operator|.
name|MESSAGE
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|ActiveMQMessageIsMarshalledTest
parameter_list|(
specifier|final
name|MessageType
name|messageType
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|messageType
operator|=
name|messageType
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMarshalledWithBodyAndProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|message
init|=
name|getMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertIsMarshalled
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMarshalledWithPropertyEmptyBody
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|message
init|=
name|getMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertIsMarshalled
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMarshalledWithBodyEmptyProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|message
init|=
name|getMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertIsMarshalled
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMarshalledWithEmptyBodyEmptyProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|message
init|=
name|getMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//No body or properties so the message should be considered marshalled already
name|assertTrue
argument_list|(
name|message
operator|.
name|isMarshalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ActiveMQMessage
name|getMessage
parameter_list|(
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|MessageType
operator|.
name|BYTES
operator|==
name|messageType
condition|)
block|{
return|return
name|getBytesMessage
argument_list|(
name|includeBody
argument_list|,
name|includeProperties
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|MessageType
operator|.
name|TEXT
operator|==
name|messageType
condition|)
block|{
return|return
name|getTextMessage
argument_list|(
name|includeBody
argument_list|,
name|includeProperties
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|MessageType
operator|.
name|MAP
operator|==
name|messageType
condition|)
block|{
return|return
name|getMapMessage
argument_list|(
name|includeBody
argument_list|,
name|includeProperties
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|MessageType
operator|.
name|OBJECT
operator|==
name|messageType
condition|)
block|{
return|return
name|getObjectMessage
argument_list|(
name|includeBody
argument_list|,
name|includeProperties
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|MessageType
operator|.
name|STREAM
operator|==
name|messageType
condition|)
block|{
return|return
name|getStreamMessage
argument_list|(
name|includeBody
argument_list|,
name|includeProperties
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|MessageType
operator|.
name|MESSAGE
operator|==
name|messageType
condition|)
block|{
return|return
name|getActiveMQMessage
argument_list|(
name|includeBody
argument_list|,
name|includeProperties
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|ActiveMQBytesMessage
name|getBytesMessage
parameter_list|(
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQBytesMessage
name|message
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBody
condition|)
block|{
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeProperties
condition|)
block|{
name|message
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQMapMessage
name|getMapMessage
parameter_list|(
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQMapMessage
name|message
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBody
condition|)
block|{
name|message
operator|.
name|setString
argument_list|(
literal|"stringbody"
argument_list|,
literal|"stringbody"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeProperties
condition|)
block|{
name|message
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQTextMessage
name|getTextMessage
parameter_list|(
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBody
condition|)
block|{
name|message
operator|.
name|setText
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeProperties
condition|)
block|{
name|message
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQObjectMessage
name|getObjectMessage
parameter_list|(
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|message
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|con
init|=
name|ActiveMQConnection
operator|.
name|makeConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setObjectMessageSerializationDefered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setConnection
argument_list|(
name|con
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeBody
condition|)
block|{
name|message
operator|.
name|setObject
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeProperties
condition|)
block|{
name|message
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQStreamMessage
name|getStreamMessage
parameter_list|(
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQStreamMessage
name|message
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBody
condition|)
block|{
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeProperties
condition|)
block|{
name|message
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|ActiveMQMessage
name|getActiveMQMessage
parameter_list|(
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|message
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBody
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeProperties
condition|)
block|{
name|message
operator|.
name|setProperty
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|void
name|assertIsMarshalled
parameter_list|(
specifier|final
name|ActiveMQMessage
name|message
parameter_list|,
name|boolean
name|includeBody
parameter_list|,
name|boolean
name|includeProperties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ActiveMQMessage
operator|.
name|class
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
comment|//content is either not set or already marshalled for ActiveMQMessage so this only
comment|//relies on
name|assertFalse
argument_list|(
name|message
operator|.
name|isMarshalled
argument_list|()
operator|==
name|includeProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|message
operator|.
name|isMarshalled
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|message
operator|.
name|beforeMarshall
argument_list|(
operator|new
name|OpenWireFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|isMarshalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getMarshalledProperties
argument_list|()
operator|!=
literal|null
operator|==
name|includeProperties
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
operator|==
name|includeBody
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

