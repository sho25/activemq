begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|transform
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** * @author<a href="http://hiramchirino.com">Hiram Chirino</a> */
end_comment

begin_class
specifier|public
class|class
name|JMSMappingInboundTransformer
extends|extends
name|InboundTransformer
block|{
name|String
name|prefixDeliveryAnnotations
init|=
literal|"DA_"
decl_stmt|;
name|String
name|prefixMessageAnnotations
init|=
literal|"MA_"
decl_stmt|;
name|String
name|prefixFooter
init|=
literal|"FT_"
decl_stmt|;
specifier|public
name|JMSMappingInboundTransformer
parameter_list|(
name|JMSVendor
name|vendor
parameter_list|)
block|{
name|super
argument_list|(
name|vendor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|transform
parameter_list|(
name|EncodedMessage
name|amqpMessage
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
name|amqp
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|amqpMessage
operator|.
name|getArrayOffset
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|amqpMessage
operator|.
name|getLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|decoded
init|=
name|amqp
operator|.
name|decode
argument_list|(
name|amqpMessage
operator|.
name|getArray
argument_list|()
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
assert|assert
name|decoded
operator|>
literal|0
operator|:
literal|"Make progress decoding the message"
assert|;
name|offset
operator|+=
name|decoded
expr_stmt|;
name|len
operator|-=
name|decoded
expr_stmt|;
block|}
name|Message
name|rc
decl_stmt|;
specifier|final
name|Section
name|body
init|=
name|amqp
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
name|vendor
operator|.
name|createMessage
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|Data
condition|)
block|{
name|Binary
name|d
init|=
operator|(
operator|(
name|Data
operator|)
name|body
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|BytesMessage
name|m
init|=
name|vendor
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
name|d
operator|.
name|getArray
argument_list|()
argument_list|,
name|d
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|d
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|AmqpSequence
condition|)
block|{
name|AmqpSequence
name|sequence
init|=
operator|(
name|AmqpSequence
operator|)
name|body
decl_stmt|;
name|StreamMessage
name|m
init|=
name|vendor
operator|.
name|createStreamMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|item
range|:
name|sequence
operator|.
name|getValue
argument_list|()
control|)
block|{
name|m
operator|.
name|writeObject
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|rc
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|AmqpValue
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|AmqpValue
operator|)
name|body
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
name|vendor
operator|.
name|createObjectMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|TextMessage
name|m
init|=
name|vendor
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setText
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
name|rc
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Binary
condition|)
block|{
name|Binary
name|d
init|=
operator|(
name|Binary
operator|)
name|value
decl_stmt|;
name|BytesMessage
name|m
init|=
name|vendor
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
name|d
operator|.
name|getArray
argument_list|()
argument_list|,
name|d
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|d
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|List
condition|)
block|{
name|StreamMessage
name|m
init|=
name|vendor
operator|.
name|createStreamMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|item
range|:
operator|(
name|List
operator|)
name|value
control|)
block|{
name|m
operator|.
name|writeObject
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|rc
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
name|MapMessage
name|m
init|=
name|vendor
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|set
init|=
operator|(
operator|(
name|Map
operator|)
name|value
operator|)
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|set
control|)
block|{
name|m
operator|.
name|setObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rc
operator|=
name|m
expr_stmt|;
block|}
else|else
block|{
name|ObjectMessage
name|m
init|=
name|vendor
operator|.
name|createObjectMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setObject
argument_list|(
operator|(
name|Serializable
operator|)
name|value
argument_list|)
expr_stmt|;
name|rc
operator|=
name|m
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected body type: "
operator|+
name|body
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|rc
operator|.
name|setJMSDeliveryMode
argument_list|(
name|defaultDeliveryMode
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setJMSPriority
argument_list|(
name|defaultPriority
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setJMSExpiration
argument_list|(
name|defaultTtl
argument_list|)
expr_stmt|;
specifier|final
name|Header
name|header
init|=
name|amqp
operator|.
name|getHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|header
operator|.
name|getDurable
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSDeliveryMode
argument_list|(
name|header
operator|.
name|getDurable
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
name|DeliveryMode
operator|.
name|PERSISTENT
else|:
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getPriority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSPriority
argument_list|(
name|header
operator|.
name|getPriority
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getTtl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSExpiration
argument_list|(
name|header
operator|.
name|getTtl
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getFirstAcquirer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setBooleanProperty
argument_list|(
name|prefixVendor
operator|+
literal|"FirstAcquirer"
argument_list|,
name|header
operator|.
name|getFirstAcquirer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getDeliveryCount
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|vendor
operator|.
name|setJMSXDeliveryCount
argument_list|(
name|rc
argument_list|,
name|header
operator|.
name|getDeliveryCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|DeliveryAnnotations
name|da
init|=
name|amqp
operator|.
name|getDeliveryAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|da
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|da
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|rc
argument_list|,
name|prefixVendor
operator|+
name|prefixDeliveryAnnotations
operator|+
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|MessageAnnotations
name|ma
init|=
name|amqp
operator|.
name|getMessageAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|ma
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|ma
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|rc
argument_list|,
name|prefixVendor
operator|+
name|prefixMessageAnnotations
operator|+
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Properties
name|properties
init|=
name|amqp
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|properties
operator|.
name|getMessageId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSMessageID
argument_list|(
name|properties
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Binary
name|userId
init|=
name|properties
operator|.
name|getUserId
argument_list|()
decl_stmt|;
if|if
condition|(
name|userId
operator|!=
literal|null
condition|)
block|{
name|vendor
operator|.
name|setJMSXUserID
argument_list|(
name|rc
argument_list|,
operator|new
name|String
argument_list|(
name|userId
operator|.
name|getArray
argument_list|()
argument_list|,
name|userId
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|userId
operator|.
name|getLength
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSDestination
argument_list|(
name|vendor
operator|.
name|createDestination
argument_list|(
name|properties
operator|.
name|getTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setStringProperty
argument_list|(
name|prefixVendor
operator|+
literal|"Subject"
argument_list|,
name|properties
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getReplyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSReplyTo
argument_list|(
name|vendor
operator|.
name|createDestination
argument_list|(
name|properties
operator|.
name|getReplyTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getCorrelationId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSCorrelationID
argument_list|(
name|properties
operator|.
name|getCorrelationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setStringProperty
argument_list|(
name|prefixVendor
operator|+
literal|"ContentType"
argument_list|,
name|properties
operator|.
name|getContentType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getContentEncoding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setStringProperty
argument_list|(
name|prefixVendor
operator|+
literal|"ContentEncoding"
argument_list|,
name|properties
operator|.
name|getContentEncoding
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getCreationTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setJMSTimestamp
argument_list|(
name|properties
operator|.
name|getCreationTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getGroupId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|vendor
operator|.
name|setJMSXGroupID
argument_list|(
name|rc
argument_list|,
name|properties
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getGroupSequence
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|vendor
operator|.
name|setJMSXGroupSequence
argument_list|(
name|rc
argument_list|,
name|properties
operator|.
name|getGroupSequence
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getReplyToGroupId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setStringProperty
argument_list|(
name|prefixVendor
operator|+
literal|"ReplyToGroupID"
argument_list|,
name|properties
operator|.
name|getReplyToGroupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ApplicationProperties
name|ap
init|=
name|amqp
operator|.
name|getApplicationProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|da
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|ap
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|rc
argument_list|,
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Footer
name|fp
init|=
name|amqp
operator|.
name|getFooter
argument_list|()
decl_stmt|;
if|if
condition|(
name|da
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|fp
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|rc
argument_list|,
name|prefixVendor
operator|+
name|prefixFooter
operator|+
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rc
operator|.
name|setLongProperty
argument_list|(
name|prefixVendor
operator|+
literal|"MESSAGE_FORMAT"
argument_list|,
name|amqpMessage
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setBooleanProperty
argument_list|(
name|prefixVendor
operator|+
literal|"NATIVE"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Message
name|msg
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|msg
operator|.
name|setStringProperty
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
comment|//        } else if( value instanceof Integer ) {
comment|//            msg.setIntProperty(key, ((Integer) value).intValue());
comment|//        } else if( value instanceof Long ) {
comment|//            msg.setLongProperty(key, ((Long) value).longValue());
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected value type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

