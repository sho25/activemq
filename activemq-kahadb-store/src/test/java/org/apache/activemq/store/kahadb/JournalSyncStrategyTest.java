begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|FileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
operator|.
name|JournalDiskSyncStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_class
specifier|public
class|class
name|JournalSyncStrategyTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dataFileDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
specifier|private
name|KahaDBStore
name|store
decl_stmt|;
specifier|private
name|int
name|defaultJournalLength
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeriodicSync
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
name|configureStore
argument_list|(
name|JournalDiskSyncStrategy
operator|.
name|PERIODIC
argument_list|)
expr_stmt|;
name|store
operator|.
name|setJournalDiskSyncInterval
argument_list|(
literal|800
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Journal
name|journal
init|=
name|store
operator|.
name|getJournal
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|journal
operator|.
name|isJournalDiskSyncPeriodic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|isEnableJournalDiskSyncs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournalDiskSyncStrategy
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|PERIODIC
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournalDiskSyncStrategyEnum
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|PERIODIC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|getJournalDiskSyncStrategy
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|PERIODIC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournalDiskSyncInterval
argument_list|()
argument_list|,
literal|800
argument_list|)
expr_stmt|;
name|Location
name|l
init|=
name|store
operator|.
name|lastAsyncJournalUpdate
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//write a message to the store
name|MessageStore
name|messageStore
init|=
name|store
operator|.
name|createQueueMessageStore
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|writeMessage
argument_list|(
name|messageStore
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//make sure message write causes the lastAsyncJournalUpdate to be set with a new value
name|assertFalse
argument_list|(
name|store
operator|.
name|lastAsyncJournalUpdate
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlwaysSync
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
name|configureStore
argument_list|(
name|JournalDiskSyncStrategy
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|isJournalDiskSyncPeriodic
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|isEnableJournalDiskSyncs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournalDiskSyncStrategy
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|ALWAYS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournalDiskSyncStrategyEnum
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|getJournalDiskSyncStrategy
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|MessageStore
name|messageStore
init|=
name|store
operator|.
name|createQueueMessageStore
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|writeMessage
argument_list|(
name|messageStore
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|lastAsyncJournalUpdate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeverSync
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
name|configureStore
argument_list|(
name|JournalDiskSyncStrategy
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|isJournalDiskSyncPeriodic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|isEnableJournalDiskSyncs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournalDiskSyncStrategy
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|NEVER
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournalDiskSyncStrategyEnum
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|getJournalDiskSyncStrategy
argument_list|()
argument_list|,
name|JournalDiskSyncStrategy
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|MessageStore
name|messageStore
init|=
name|store
operator|.
name|createQueueMessageStore
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|writeMessage
argument_list|(
name|messageStore
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|store
operator|.
name|lastAsyncJournalUpdate
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|KahaDBStore
name|configureStore
parameter_list|(
name|JournalDiskSyncStrategy
name|strategy
parameter_list|)
throws|throws
name|Exception
block|{
name|KahaDBStore
name|store
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setJournalMaxFileLength
argument_list|(
name|defaultJournalLength
argument_list|)
expr_stmt|;
name|store
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|dataFileDir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|strategy
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|setJournalDiskSyncStrategy
argument_list|(
name|strategy
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
specifier|private
name|void
name|writeMessage
parameter_list|(
specifier|final
name|MessageStore
name|messageStore
parameter_list|,
name|int
name|num
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"testtesttest"
argument_list|)
expr_stmt|;
name|MessageId
name|messageId
init|=
operator|new
name|MessageId
argument_list|(
literal|"ID:localhost-56913-1254499826208-0:0:1:1:"
operator|+
name|num
argument_list|)
decl_stmt|;
name|messageId
operator|.
name|setBrokerSequenceId
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
name|messageStore
operator|.
name|addMessage
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

