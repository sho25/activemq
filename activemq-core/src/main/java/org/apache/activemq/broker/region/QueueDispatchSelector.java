begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SimpleDispatchSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Queue dispatch policy that determines if a message can be sent to a subscription  *   * @org.apache.xbean.XBean  *   */
end_comment

begin_class
specifier|public
class|class
name|QueueDispatchSelector
extends|extends
name|SimpleDispatchSelector
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueDispatchSelector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Subscription
name|exclusiveConsumer
decl_stmt|;
comment|/**      * @param destination      */
specifier|public
name|QueueDispatchSelector
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Subscription
name|getExclusiveConsumer
parameter_list|()
block|{
return|return
name|exclusiveConsumer
return|;
block|}
specifier|public
name|void
name|setExclusiveConsumer
parameter_list|(
name|Subscription
name|exclusiveConsumer
parameter_list|)
block|{
name|this
operator|.
name|exclusiveConsumer
operator|=
name|exclusiveConsumer
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExclusiveConsumer
parameter_list|(
name|Subscription
name|s
parameter_list|)
block|{
return|return
name|s
operator|==
name|this
operator|.
name|exclusiveConsumer
return|;
block|}
specifier|public
name|boolean
name|canSelect
parameter_list|(
name|Subscription
name|subscription
parameter_list|,
name|MessageReference
name|m
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|result
init|=
name|super
operator|.
name|canDispatch
argument_list|(
name|subscription
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|&&
operator|!
name|subscription
operator|.
name|isBrowser
argument_list|()
condition|)
block|{
name|result
operator|=
name|exclusiveConsumer
operator|==
literal|null
operator|||
name|exclusiveConsumer
operator|==
name|subscription
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

