begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protocolbuffer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|PerformanceTest
extends|extends
name|TestCase
block|{
specifier|protected
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
specifier|protected
name|String
name|fileName
init|=
literal|"target/messages.openwire"
decl_stmt|;
specifier|public
name|void
name|testPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|BufferedOutputStream
name|out
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|CodedOutputStream
name|cout
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|OpenWire
operator|.
name|Destination
name|destination
init|=
name|OpenWire
operator|.
name|Destination
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"FOO.BAR"
argument_list|)
operator|.
name|setType
argument_list|(
name|OpenWire
operator|.
name|Destination
operator|.
name|DestinationType
operator|.
name|QUEUE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|OpenWire
operator|.
name|Message
name|message
init|=
name|OpenWire
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
operator|.
name|setProducerId
argument_list|(
literal|1234
argument_list|)
operator|.
name|setProducerCounter
argument_list|(
name|i
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type:"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing message: "
operator|+
name|i
operator|+
literal|" = "
operator|+
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeTo
argument_list|(
name|cout
argument_list|)
expr_stmt|;
comment|//cout.flush();
block|}
name|cout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now lets try read them!
name|BufferedInputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|CodedInputStream
name|cin
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|OpenWire
operator|.
name|Message
name|message
init|=
name|OpenWire
operator|.
name|Message
operator|.
name|parseFrom
argument_list|(
name|cin
argument_list|)
decl_stmt|;
comment|// todo test its not null or something?
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reading message: "
operator|+
name|i
operator|+
literal|" = "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

