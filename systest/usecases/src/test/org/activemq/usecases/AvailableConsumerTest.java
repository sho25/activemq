begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|impl
operator|.
name|BrokerContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|store
operator|.
name|vm
operator|.
name|VMPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * TODO this test case relies on a perfect distribution of messages, dispatched one by one to each consumer.  * So this test case can only really work with an explicit setting of 'prefetch = 1' or something similar.  * The default out of the box dispatcher eagerly dispatches messages as quickly as possible.  *   * Ensures that if there is a network of brokers that a message is always dispatched to an available consumer * regardless of which broker it is on.  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|AvailableConsumerTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AvailableConsumerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|BROKER_INITIALIZATION_DELAY
init|=
literal|7000
decl_stmt|;
specifier|public
name|void
name|testOneBroker
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|urls
init|=
operator|new
name|String
index|[]
block|{
literal|"tcp://localhost:9000"
block|}
decl_stmt|;
name|runSimulation
argument_list|(
name|urls
argument_list|,
literal|2
argument_list|,
literal|"QUEUE_NAME"
argument_list|)
expr_stmt|;
comment|//runSimulation(urls, 5, "QUEUE_NAME");
comment|//runSimulation(urls, 10, "QUEUE_NAME");
block|}
specifier|public
name|void
name|testTwoBrokers
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|urls
init|=
operator|new
name|String
index|[]
block|{
literal|"tcp://localhost:9000"
block|,
literal|"tcp://localhost:9001"
block|}
decl_stmt|;
name|runSimulation
argument_list|(
name|urls
argument_list|,
literal|2
argument_list|,
literal|"QUEUE_NAME"
argument_list|)
expr_stmt|;
name|runSimulation
argument_list|(
name|urls
argument_list|,
literal|5
argument_list|,
literal|"QUEUE_NAME"
argument_list|)
expr_stmt|;
name|runSimulation
argument_list|(
name|urls
argument_list|,
literal|10
argument_list|,
literal|"QUEUE_NAME"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTenBrokers
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|urls
init|=
operator|new
name|String
index|[]
block|{
literal|"tcp://localhost:9000"
block|,
literal|"tcp://localhost:9001"
block|,
literal|"tcp://localhost:9002"
block|,
literal|"tcp://localhost:9003"
block|,
literal|"tcp://localhost:9004"
block|,
literal|"tcp://localhost:9005"
block|,
literal|"tcp://localhost:9006"
block|,
literal|"tcp://localhost:9007"
block|,
literal|"tcp://localhost:9008"
block|,
literal|"tcp://localhost:9009"
block|}
decl_stmt|;
name|runSimulation
argument_list|(
name|urls
argument_list|,
literal|2
argument_list|,
literal|"QUEUE_NAME"
argument_list|)
expr_stmt|;
name|runSimulation
argument_list|(
name|urls
argument_list|,
literal|5
argument_list|,
literal|"QUEUE_NAME"
argument_list|)
expr_stmt|;
name|runSimulation
argument_list|(
name|urls
argument_list|,
literal|10
argument_list|,
literal|"QUEUE_NAME"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runSimulation
parameter_list|(
name|String
index|[]
name|brokerURLs
parameter_list|,
name|int
name|numConsumers
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
literal|"More than one consumer is required"
argument_list|,
name|numConsumers
operator|>
literal|1
argument_list|)
expr_stmt|;
name|BrokerThread
index|[]
name|brokers
init|=
literal|null
decl_stmt|;
name|BlockingConsumer
index|[]
name|consumers
init|=
literal|null
decl_stmt|;
name|MessagePublisher
index|[]
name|publishers
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|reliableURL
init|=
name|createReliableURL
argument_list|(
name|brokerURLs
argument_list|)
decl_stmt|;
name|brokers
operator|=
name|createBrokers
argument_list|(
name|brokerURLs
argument_list|)
expr_stmt|;
name|consumers
operator|=
name|createConsumers
argument_list|(
name|reliableURL
argument_list|,
name|numConsumers
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|publishers
operator|=
name|createPublishers
argument_list|(
name|reliableURL
argument_list|,
literal|1
argument_list|,
name|queue
argument_list|)
expr_stmt|;
comment|// Now get all of the consumers blocked except for one
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|publishers
index|[
literal|0
index|]
operator|.
name|sendMessage
argument_list|()
expr_stmt|;
block|}
name|waitUntilNumBlocked
argument_list|(
name|consumers
argument_list|,
name|consumers
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Now send one more message which should cause all of the consumers to be blocked
block|{
name|publishers
index|[
literal|0
index|]
operator|.
name|sendMessage
argument_list|()
expr_stmt|;
name|waitUntilNumBlocked
argument_list|(
name|consumers
argument_list|,
name|consumers
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Unblock a consumer and make sure it is unblocked
block|{
synchronized|synchronized
init|(
name|consumers
index|[
literal|0
index|]
init|)
block|{
name|consumers
index|[
literal|0
index|]
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|waitUntilNumBlocked
argument_list|(
name|consumers
argument_list|,
name|consumers
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Send another message and make sure it is blocked again
block|{
name|publishers
index|[
literal|0
index|]
operator|.
name|sendMessage
argument_list|()
expr_stmt|;
name|waitUntilNumBlocked
argument_list|(
name|consumers
argument_list|,
name|consumers
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Finally queue up a message for each consumer but one, then unblock them all and make sure one is still unblocked
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|publishers
index|[
literal|0
index|]
operator|.
name|sendMessage
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
synchronized|synchronized
init|(
name|consumers
index|[
name|i
index|]
init|)
block|{
name|consumers
index|[
name|i
index|]
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|waitUntilNumBlocked
argument_list|(
name|consumers
argument_list|,
name|consumers
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cleanupSimulation
argument_list|(
name|brokers
argument_list|,
name|publishers
argument_list|,
name|consumers
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|cleanupSimulation
parameter_list|(
name|BrokerThread
index|[]
name|brokers
parameter_list|,
name|MessagePublisher
index|[]
name|publishers
parameter_list|,
name|BlockingConsumer
index|[]
name|consumers
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|publishers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|publishers
index|[
name|i
index|]
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Non-fatal error during cleanup"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Unblock it in case it is blocked
synchronized|synchronized
init|(
name|consumers
index|[
name|i
index|]
init|)
block|{
name|consumers
index|[
name|i
index|]
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|consumers
index|[
name|i
index|]
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Non-fatal error during cleanup"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|brokers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|brokers
index|[
name|i
index|]
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Non-fatal error during cleanup"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|BrokerThread
index|[]
name|createBrokers
parameter_list|(
name|String
index|[]
name|brokerURLs
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|BrokerThread
index|[]
name|threads
init|=
operator|new
name|BrokerThread
index|[
name|brokerURLs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|BrokerThread
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|brokerURLs
index|[
name|i
index|]
argument_list|,
name|brokerURLs
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Delay so that the brokers have a chance to come up fully and connect to each other
name|log
operator|.
name|debug
argument_list|(
literal|"Created "
operator|+
name|threads
operator|.
name|length
operator|+
literal|" brokers, giving them time to initialize..."
argument_list|)
expr_stmt|;
name|Object
name|temp
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|temp
init|)
block|{
name|temp
operator|.
name|wait
argument_list|(
name|BROKER_INITIALIZATION_DELAY
operator|*
name|brokerURLs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Brokers should be initialized now"
argument_list|)
expr_stmt|;
return|return
name|threads
return|;
block|}
specifier|private
specifier|static
name|BlockingConsumer
index|[]
name|createConsumers
parameter_list|(
name|String
name|brokerURL
parameter_list|,
name|int
name|numConsumers
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|JMSException
block|{
name|BlockingConsumer
index|[]
name|consumers
init|=
operator|new
name|BlockingConsumer
index|[
name|numConsumers
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|consumers
index|[
name|i
index|]
operator|=
operator|new
name|BlockingConsumer
argument_list|(
name|brokerURL
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
return|return
name|consumers
return|;
block|}
specifier|private
specifier|static
name|MessagePublisher
index|[]
name|createPublishers
parameter_list|(
name|String
name|brokerURL
parameter_list|,
name|int
name|numPublishers
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessagePublisher
index|[]
name|publishers
init|=
operator|new
name|MessagePublisher
index|[
name|numPublishers
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|publishers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|publishers
index|[
name|i
index|]
operator|=
operator|new
name|MessagePublisher
argument_list|(
name|brokerURL
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
return|return
name|publishers
return|;
block|}
specifier|private
specifier|static
name|String
name|createReliableURL
parameter_list|(
name|String
index|[]
name|brokerURLs
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"reliable:"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|brokerURLs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|brokerURLs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|waitUntilNumBlocked
parameter_list|(
name|BlockingConsumer
index|[]
name|consumers
parameter_list|,
name|int
name|expectedNumBlocked
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|maxIterations
init|=
literal|50
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|maxIterations
condition|;
name|iteration
operator|++
control|)
block|{
name|int
name|numBlocked
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|numBlocked
operator|+=
name|consumers
index|[
name|i
index|]
operator|.
name|isBlocked
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|numBlocked
operator|==
name|expectedNumBlocked
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Waiting for "
operator|+
name|expectedNumBlocked
operator|+
literal|" consumers to block, currently only "
operator|+
name|numBlocked
operator|+
literal|" are blocked."
argument_list|)
expr_stmt|;
name|Object
name|temp
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|temp
init|)
block|{
name|temp
operator|.
name|wait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Never saw "
operator|+
name|expectedNumBlocked
operator|+
literal|" consumers blocked"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|BrokerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|String
name|m_id
decl_stmt|;
specifier|private
specifier|final
name|String
name|m_myURL
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|m_linkedURLs
decl_stmt|;
specifier|private
name|BrokerContainer
name|m_container
decl_stmt|;
specifier|public
name|BrokerThread
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|myURL
parameter_list|,
name|String
index|[]
name|linkedURLs
parameter_list|)
block|{
name|m_id
operator|=
name|id
expr_stmt|;
name|m_myURL
operator|=
name|myURL
expr_stmt|;
name|m_linkedURLs
operator|=
name|linkedURLs
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|m_container
operator|=
operator|new
name|BrokerContainerImpl
argument_list|(
name|m_id
argument_list|)
expr_stmt|;
name|m_container
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|VMPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|m_container
operator|.
name|addConnector
argument_list|(
name|m_myURL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_linkedURLs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|m_myURL
operator|.
name|equals
argument_list|(
name|m_linkedURLs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|m_container
operator|.
name|addNetworkConnector
argument_list|(
literal|"reliable:"
operator|+
name|m_linkedURLs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|m_container
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|done
parameter_list|()
block|{
try|try
block|{
name|m_container
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MessagePublisher
block|{
specifier|private
specifier|final
name|String
name|m_url
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|m_connection
decl_stmt|;
specifier|private
specifier|final
name|Session
name|m_session
decl_stmt|;
specifier|private
specifier|final
name|Queue
name|m_queue
decl_stmt|;
specifier|private
specifier|final
name|MessageProducer
name|m_producer
decl_stmt|;
specifier|public
name|MessagePublisher
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
argument_list|(
name|url
argument_list|,
name|queue
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MessagePublisher
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|deliveryMode
parameter_list|)
throws|throws
name|JMSException
block|{
name|m_url
operator|=
name|url
expr_stmt|;
name|m_connection
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|m_url
argument_list|)
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|m_connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|m_session
operator|=
name|m_connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|m_queue
operator|=
name|m_session
operator|.
name|createQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|m_producer
operator|=
name|m_session
operator|.
name|createProducer
argument_list|(
name|m_queue
argument_list|)
expr_stmt|;
name|m_producer
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|done
parameter_list|()
block|{
try|try
block|{
name|m_producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|m_session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|m_connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
block|}
specifier|public
name|void
name|sendMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Message
name|message
init|=
name|m_session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|m_producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|BlockingConsumer
implements|implements
name|MessageListener
block|{
specifier|private
specifier|final
name|String
name|m_url
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|m_connection
decl_stmt|;
specifier|private
specifier|final
name|Session
name|m_session
decl_stmt|;
specifier|private
specifier|final
name|Queue
name|m_queue
decl_stmt|;
specifier|private
specifier|final
name|MessageConsumer
name|m_consumer
decl_stmt|;
specifier|private
name|boolean
name|m_blocked
decl_stmt|;
specifier|public
name|BlockingConsumer
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|JMSException
block|{
name|m_url
operator|=
name|url
expr_stmt|;
name|m_connection
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|m_url
argument_list|)
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|m_connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|m_session
operator|=
name|m_connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|m_queue
operator|=
name|m_session
operator|.
name|createQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|m_consumer
operator|=
name|m_session
operator|.
name|createConsumer
argument_list|(
name|m_queue
argument_list|)
expr_stmt|;
name|m_consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_blocked
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBlocked
parameter_list|()
block|{
return|return
name|m_blocked
return|;
block|}
specifier|public
name|void
name|done
parameter_list|()
block|{
try|try
block|{
name|m_consumer
operator|.
name|setMessageListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|m_consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|m_session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|m_connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{             }
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|m_blocked
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected InterruptedException during onMessage"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|m_blocked
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

