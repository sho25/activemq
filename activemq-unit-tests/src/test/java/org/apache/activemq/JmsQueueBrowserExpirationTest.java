begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This test shows that when all messages are expired the QueueBrowser will  * still finish properly and not hang indefinitely.  If a queue browser subscription  * detects an expired message, it will tell the broker to expire the message but still  * dispatch the message to the client as we want to get a snapshot in time.  This prevents  * the problem of the browser enumeration returning true for hasMoreElements and then  * hanging forever because all messages expired on dispatch.  *  * See: https://issues.apache.org/jira/browse/AMQ-5340  *  *<p>  * This test is based on a test case submitted by Henno Vermeulen for AMQ-5340  */
end_comment

begin_class
specifier|public
class|class
name|JmsQueueBrowserExpirationTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGES_TO_SEND
init|=
literal|50
decl_stmt|;
comment|// Message expires after 1 second
specifier|private
specifier|static
specifier|final
name|long
name|TTL
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JmsQueueBrowserExpirationTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|URI
name|connectUri
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"vm://localhost"
argument_list|)
decl_stmt|;
name|broker
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|connectUri
operator|=
name|connector
operator|.
name|getConnectUri
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
comment|//This should finish in under 3 seconds because the messages should be expired
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
specifier|public
name|void
name|testBrowsingExpiration
parameter_list|()
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|sendTestMessages
argument_list|()
expr_stmt|;
comment|// Browse the queue.
name|Connection
name|browserConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|browserConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|browsed
init|=
name|browse
argument_list|(
name|queue
argument_list|,
name|browserConnection
argument_list|)
decl_stmt|;
comment|// The number of messages browsed should be equal to the number of
comment|// messages sent.
name|assertEquals
argument_list|(
name|MESSAGES_TO_SEND
argument_list|,
name|browsed
argument_list|)
expr_stmt|;
name|long
name|begin
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|browsed
operator|!=
literal|0
condition|)
block|{
comment|// Give JMS threads more opportunity to do their work.
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|browsed
operator|=
name|browse
argument_list|(
name|queue
argument_list|,
name|browserConnection
argument_list|)
expr_stmt|;
name|String
name|time
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|begin
argument_list|)
operator|+
literal|" ms"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|time
operator|+
literal|"] found "
operator|+
name|browsed
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished"
argument_list|)
expr_stmt|;
name|browserConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|browse
parameter_list|(
name|ActiveMQQueue
name|queue
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|JMSException
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|enumeration
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
decl_stmt|;
name|int
name|browsed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|TextMessage
name|m
init|=
operator|(
name|TextMessage
operator|)
name|enumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|browsed
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"B[{}]: {}"
argument_list|,
name|browsed
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|browser
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|browsed
return|;
block|}
specifier|protected
name|void
name|sendTestMessages
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// Send the messages to the Queue.
name|Connection
name|prodConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|prodConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|prodSession
init|=
name|prodConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|prodSession
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|TTL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MESSAGES_TO_SEND
condition|;
name|i
operator|++
control|)
block|{
name|String
name|msgStr
init|=
literal|"Message: "
operator|+
name|i
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|prodSession
operator|.
name|createTextMessage
argument_list|(
name|msgStr
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"P&C: {}"
argument_list|,
name|msgStr
argument_list|)
expr_stmt|;
block|}
name|prodSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

