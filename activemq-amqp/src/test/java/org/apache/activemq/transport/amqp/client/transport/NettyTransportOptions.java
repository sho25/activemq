begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|transport
package|;
end_package

begin_comment
comment|/**  * Encapsulates all the TCP Transport options in one configuration object.  */
end_comment

begin_class
specifier|public
class|class
name|NettyTransportOptions
implements|implements
name|Cloneable
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SEND_BUFFER_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RECEIVE_BUFFER_SIZE
init|=
name|DEFAULT_SEND_BUFFER_SIZE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TRAFFIC_CLASS
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_TCP_NO_DELAY
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_TCP_KEEP_ALIVE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SO_LINGER
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SO_TIMEOUT
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CONNECT_TIMEOUT
init|=
literal|60000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TCP_PORT
init|=
literal|5672
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|NettyTransportOptions
name|INSTANCE
init|=
operator|new
name|NettyTransportOptions
argument_list|()
decl_stmt|;
specifier|private
name|int
name|sendBufferSize
init|=
name|DEFAULT_SEND_BUFFER_SIZE
decl_stmt|;
specifier|private
name|int
name|receiveBufferSize
init|=
name|DEFAULT_RECEIVE_BUFFER_SIZE
decl_stmt|;
specifier|private
name|int
name|trafficClass
init|=
name|DEFAULT_TRAFFIC_CLASS
decl_stmt|;
specifier|private
name|int
name|connectTimeout
init|=
name|DEFAULT_CONNECT_TIMEOUT
decl_stmt|;
specifier|private
name|int
name|soTimeout
init|=
name|DEFAULT_SO_TIMEOUT
decl_stmt|;
specifier|private
name|int
name|soLinger
init|=
name|DEFAULT_SO_LINGER
decl_stmt|;
specifier|private
name|boolean
name|tcpKeepAlive
init|=
name|DEFAULT_TCP_KEEP_ALIVE
decl_stmt|;
specifier|private
name|boolean
name|tcpNoDelay
init|=
name|DEFAULT_TCP_NO_DELAY
decl_stmt|;
specifier|private
name|int
name|defaultTcpPort
init|=
name|DEFAULT_TCP_PORT
decl_stmt|;
comment|/**      * @return the currently set send buffer size in bytes.      */
specifier|public
name|int
name|getSendBufferSize
parameter_list|()
block|{
return|return
name|sendBufferSize
return|;
block|}
comment|/**      * Sets the send buffer size in bytes, the value must be greater than zero      * or an {@link IllegalArgumentException} will be thrown.      *      * @param sendBufferSize      *        the new send buffer size for the TCP Transport.      *      * @throws IllegalArgumentException if the value given is not in the valid range.      */
specifier|public
name|void
name|setSendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
if|if
condition|(
name|sendBufferSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The send buffer size must be> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sendBufferSize
operator|=
name|sendBufferSize
expr_stmt|;
block|}
comment|/**      * @return the currently configured receive buffer size in bytes.      */
specifier|public
name|int
name|getReceiveBufferSize
parameter_list|()
block|{
return|return
name|receiveBufferSize
return|;
block|}
comment|/**      * Sets the receive buffer size in bytes, the value must be greater than zero      * or an {@link IllegalArgumentException} will be thrown.      *      * @param receiveBufferSize      *        the new receive buffer size for the TCP Transport.      *      * @throws IllegalArgumentException if the value given is not in the valid range.      */
specifier|public
name|void
name|setReceiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
if|if
condition|(
name|receiveBufferSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The send buffer size must be> 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|receiveBufferSize
operator|=
name|receiveBufferSize
expr_stmt|;
block|}
comment|/**      * @return the currently configured traffic class value.      */
specifier|public
name|int
name|getTrafficClass
parameter_list|()
block|{
return|return
name|trafficClass
return|;
block|}
comment|/**      * Sets the traffic class value used by the TCP connection, valid      * range is between 0 and 255.      *      * @param trafficClass      *        the new traffic class value.      *      * @throws IllegalArgumentException if the value given is not in the valid range.      */
specifier|public
name|void
name|setTrafficClass
parameter_list|(
name|int
name|trafficClass
parameter_list|)
block|{
if|if
condition|(
name|trafficClass
argument_list|<
literal|0
operator|||
name|trafficClass
argument_list|>
literal|255
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Traffic class must be in the range [0..255]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|trafficClass
operator|=
name|trafficClass
expr_stmt|;
block|}
specifier|public
name|int
name|getSoTimeout
parameter_list|()
block|{
return|return
name|soTimeout
return|;
block|}
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|soTimeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|soTimeout
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTcpNoDelay
parameter_list|()
block|{
return|return
name|tcpNoDelay
return|;
block|}
specifier|public
name|void
name|setTcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|this
operator|.
name|tcpNoDelay
operator|=
name|tcpNoDelay
expr_stmt|;
block|}
specifier|public
name|int
name|getSoLinger
parameter_list|()
block|{
return|return
name|soLinger
return|;
block|}
specifier|public
name|void
name|setSoLinger
parameter_list|(
name|int
name|soLinger
parameter_list|)
block|{
name|this
operator|.
name|soLinger
operator|=
name|soLinger
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTcpKeepAlive
parameter_list|()
block|{
return|return
name|tcpKeepAlive
return|;
block|}
specifier|public
name|void
name|setTcpKeepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|this
operator|.
name|tcpKeepAlive
operator|=
name|keepAlive
expr_stmt|;
block|}
specifier|public
name|int
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
specifier|public
name|void
name|setConnectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
specifier|public
name|int
name|getDefaultTcpPort
parameter_list|()
block|{
return|return
name|defaultTcpPort
return|;
block|}
specifier|public
name|void
name|setDefaultTcpPort
parameter_list|(
name|int
name|defaultTcpPort
parameter_list|)
block|{
name|this
operator|.
name|defaultTcpPort
operator|=
name|defaultTcpPort
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSSL
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NettyTransportOptions
name|clone
parameter_list|()
block|{
return|return
name|copyOptions
argument_list|(
operator|new
name|NettyTransportOptions
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|NettyTransportOptions
name|copyOptions
parameter_list|(
name|NettyTransportOptions
name|copy
parameter_list|)
block|{
name|copy
operator|.
name|setConnectTimeout
argument_list|(
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setReceiveBufferSize
argument_list|(
name|getReceiveBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setSendBufferSize
argument_list|(
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setSoLinger
argument_list|(
name|getSoLinger
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setSoTimeout
argument_list|(
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setTcpKeepAlive
argument_list|(
name|isTcpKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setTcpNoDelay
argument_list|(
name|isTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setTrafficClass
argument_list|(
name|getTrafficClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
end_class

end_unit

