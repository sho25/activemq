begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Hiram Chirino  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|FilterAsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|PacketData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|RequestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|RequestListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|AppendedPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Creates a {@see org.activeio.RequestChannel} out of a {@see org.activeio.AsyncChannel}.  This   * {@see org.activeio.RequestChannel} is thread safe and mutiplexes concurrent requests and responses over  * the underlying {@see org.activeio.AsyncChannel}.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|AsyncChannelToConcurrentRequestChannel
extends|extends
name|FilterAsyncChannel
implements|implements
name|RequestChannel
block|{
specifier|private
specifier|static
specifier|final
name|byte
name|PASSTHROUGH
init|=
literal|0x00
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|REQUEST
init|=
literal|0x01
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|RESPONSE
init|=
literal|0x02
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ByteArrayPacket
name|PASSTHROUGH_PACKET
init|=
operator|new
name|ByteArrayPacket
argument_list|(
operator|new
name|byte
index|[]
block|{
name|PASSTHROUGH
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
name|requestMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|requestExecutor
decl_stmt|;
specifier|private
name|short
name|nextRequestId
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Object
name|writeMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|RequestListener
name|requestListener
decl_stmt|;
specifier|public
name|AsyncChannelToConcurrentRequestChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|)
block|{
name|this
argument_list|(
name|next
argument_list|,
name|ChannelFactory
operator|.
name|DEFAULT_EXECUTOR
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AsyncChannelToConcurrentRequestChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|,
name|Executor
name|requestExecutor
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestExecutor
operator|=
name|requestExecutor
expr_stmt|;
block|}
specifier|synchronized
name|short
name|getNextRequestId
parameter_list|()
block|{
return|return
name|nextRequestId
operator|++
return|;
block|}
comment|/**      * @see org.activeio.FilterAsyncChannel#write(org.activeio.Packet)      */
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|Packet
name|passThrough
init|=
name|AppendedPacket
operator|.
name|join
argument_list|(
name|PASSTHROUGH_PACKET
operator|.
name|duplicate
argument_list|()
argument_list|,
name|packet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|writeMutex
init|)
block|{
name|super
operator|.
name|write
argument_list|(
name|passThrough
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.activeio.FilterAsyncChannel#onPacket(org.activeio.Packet)      */
specifier|public
name|void
name|onPacket
parameter_list|(
specifier|final
name|Packet
name|packet
parameter_list|)
block|{
switch|switch
condition|(
name|packet
operator|.
name|read
argument_list|()
condition|)
block|{
case|case
name|PASSTHROUGH
case|:
name|super
operator|.
name|onPacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
break|break;
case|case
name|REQUEST
case|:
name|requestExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|serviceRequest
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|RESPONSE
case|:
name|serviceReponse
argument_list|(
name|packet
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|serviceRequest
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|requestListener
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The RequestListener has not been set."
argument_list|)
throw|;
name|PacketData
name|data
init|=
operator|new
name|PacketData
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|short
name|requestId
init|=
name|data
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|Packet
name|reponse
init|=
name|requestListener
operator|.
name|onRequest
argument_list|(
name|packet
argument_list|)
decl_stmt|;
comment|// Send the response...
name|Packet
name|header
init|=
name|createHeaderPacket
argument_list|(
name|RESPONSE
argument_list|,
name|requestId
argument_list|)
decl_stmt|;
name|Packet
name|rc
init|=
name|AppendedPacket
operator|.
name|join
argument_list|(
name|header
argument_list|,
name|packet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|writeMutex
init|)
block|{
name|super
operator|.
name|write
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|super
operator|.
name|onPacketError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|serviceReponse
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
try|try
block|{
name|PacketData
name|data
init|=
operator|new
name|PacketData
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|short
name|requestId
init|=
name|data
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|ArrayBlockingQueue
name|responseSlot
init|=
operator|(
name|ArrayBlockingQueue
operator|)
name|requestMap
operator|.
name|get
argument_list|(
operator|new
name|Short
argument_list|(
name|requestId
argument_list|)
argument_list|)
decl_stmt|;
name|responseSlot
operator|.
name|put
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|super
operator|.
name|onPacketError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Packet
name|request
parameter_list|(
name|Packet
name|request
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|Short
name|requestId
init|=
operator|new
name|Short
argument_list|(
name|getNextRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayBlockingQueue
name|responseSlot
init|=
operator|new
name|ArrayBlockingQueue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|requestId
argument_list|,
name|responseSlot
argument_list|)
expr_stmt|;
name|Packet
name|header
init|=
name|createHeaderPacket
argument_list|(
name|REQUEST
argument_list|,
name|requestId
operator|.
name|shortValue
argument_list|()
argument_list|)
decl_stmt|;
name|Packet
name|packet
init|=
name|AppendedPacket
operator|.
name|join
argument_list|(
name|header
argument_list|,
name|request
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|writeMutex
init|)
block|{
name|super
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|timeout
operator|==
name|WAIT_FOREVER_TIMEOUT
condition|)
block|{
return|return
operator|(
name|Packet
operator|)
name|responseSlot
operator|.
name|take
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|timeout
operator|==
name|NO_WAIT_TIMEOUT
condition|)
block|{
return|return
operator|(
name|Packet
operator|)
name|responseSlot
operator|.
name|poll
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|Packet
operator|)
name|responseSlot
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|requestMap
operator|.
name|remove
argument_list|(
name|requestId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Packet
name|createHeaderPacket
parameter_list|(
name|byte
name|type
parameter_list|,
name|short
name|requestId
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayPacket
name|header
init|=
operator|new
name|ByteArrayPacket
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
decl_stmt|;
name|PacketData
name|data
init|=
operator|new
name|PacketData
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|data
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeShort
argument_list|(
name|requestId
argument_list|)
expr_stmt|;
name|header
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|header
return|;
block|}
specifier|public
name|void
name|setRequestListener
parameter_list|(
name|RequestListener
name|requestListener
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|requestListener
operator|=
name|requestListener
expr_stmt|;
block|}
specifier|public
name|RequestListener
name|getRequestListener
parameter_list|()
block|{
return|return
name|requestListener
return|;
block|}
block|}
end_class

end_unit

