begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jndi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|StringRefAddr
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_comment
comment|/**  * Converts objects implementing JNDIStorable into a property fields so they can  * be stored and regenerated from JNDI  */
end_comment

begin_class
specifier|public
class|class
name|JNDIReferenceFactory
implements|implements
name|ObjectFactory
block|{
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JNDIReferenceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This will be called by a JNDIprovider when a Reference is retrieved from      * a JNDI store - and generates the orignal instance      *      * @param object      the Reference object      * @param name        the JNDI name      * @param nameCtx     the context      * @param environment the environment settings used by JNDI      * @return the instance built from the Reference object      * @throws Exception if building the instance from Reference fails (usually class      *                   not found)      */
specifier|public
name|Object
name|getObjectInstance
parameter_list|(
name|Object
name|object
parameter_list|,
name|Name
name|name
parameter_list|,
name|Context
name|nameCtx
parameter_list|,
name|Hashtable
name|environment
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Reference
condition|)
block|{
name|Reference
name|reference
init|=
operator|(
name|Reference
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Getting instance of "
operator|+
name|reference
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Class
name|theClass
init|=
name|loadClass
argument_list|(
name|this
argument_list|,
name|reference
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|JNDIStorableInterface
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|theClass
argument_list|)
condition|)
block|{
name|JNDIStorableInterface
name|store
init|=
operator|(
name|JNDIStorableInterface
operator|)
name|theClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|iter
init|=
name|reference
operator|.
name|getAll
argument_list|()
init|;
name|iter
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|StringRefAddr
name|addr
init|=
operator|(
name|StringRefAddr
operator|)
name|iter
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getType
argument_list|()
argument_list|,
operator|(
name|addr
operator|.
name|getContent
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|addr
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Object "
operator|+
name|object
operator|+
literal|" is not a reference - cannot load"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Object "
operator|+
name|object
operator|+
literal|" is not a reference"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Create a Reference instance from a JNDIStorable object      *      * @param instanceClassName      * @param po      * @return @throws      *         NamingException      */
specifier|public
specifier|static
name|Reference
name|createReference
parameter_list|(
name|String
name|instanceClassName
parameter_list|,
name|JNDIStorableInterface
name|po
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Creating reference: "
operator|+
name|instanceClassName
operator|+
literal|","
operator|+
name|po
argument_list|)
expr_stmt|;
block|}
name|Reference
name|result
init|=
operator|new
name|Reference
argument_list|(
name|instanceClassName
argument_list|,
name|JNDIReferenceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
name|po
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|iter
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|iter
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|javax
operator|.
name|naming
operator|.
name|StringRefAddr
name|addr
init|=
operator|new
name|javax
operator|.
name|naming
operator|.
name|StringRefAddr
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NamingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Retrieve the class loader for a named class      *      * @param thisObj      * @param className      * @return @throws      *         ClassNotFoundException      */
specifier|public
specifier|static
name|Class
name|loadClass
parameter_list|(
name|Object
name|thisObj
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
comment|// tryu local ClassLoader first.
name|ClassLoader
name|loader
init|=
name|thisObj
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Class
name|theClass
decl_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|theClass
operator|=
name|loader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Will be null in jdk1.1.8
comment|// use default classLoader
name|theClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
return|return
name|theClass
return|;
block|}
block|}
end_class

end_unit

