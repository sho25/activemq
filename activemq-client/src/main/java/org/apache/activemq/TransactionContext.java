begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TransactionInProgressException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TransactionRolledBackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataArrayResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|IntegerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|XATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A TransactionContext provides the means to control a JMS transaction. It  * provides a local transaction interface and also an XAResource interface.<p/>  * An application server controls the transactional assignment of an XASession  * by obtaining its XAResource. It uses the XAResource to assign the session to  * a transaction, prepare and commit work on the transaction, and so on.<p/> An  * XAResource provides some fairly sophisticated facilities for interleaving  * work on multiple transactions, recovering a list of transactions in progress,  * and so on. A JTA aware JMS provider must fully implement this functionality.  * This could be done by using the services of a database that supports XA, or a  * JMS provider may choose to implement this functionality from scratch.<p/>  *  *  * @see javax.jms.Session  * @see javax.jms.QueueSession  * @see javax.jms.TopicSession  * @see javax.jms.XASession  */
end_comment

begin_class
specifier|public
class|class
name|TransactionContext
implements|implements
name|XAResource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransactionContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// XATransactionId -> ArrayList of TransactionContext objects
specifier|private
specifier|final
specifier|static
name|HashMap
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|TransactionContext
argument_list|>
argument_list|>
name|ENDED_XA_TRANSACTION_CONTEXTS
init|=
operator|new
name|HashMap
argument_list|<
name|TransactionId
argument_list|,
name|List
argument_list|<
name|TransactionContext
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|localTransactionIdGenerator
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Synchronization
argument_list|>
name|synchronizations
decl_stmt|;
comment|// To track XA transactions.
specifier|private
name|Xid
name|associatedXid
decl_stmt|;
specifier|private
name|TransactionId
name|transactionId
decl_stmt|;
specifier|private
name|LocalTransactionEventListener
name|localTransactionEventListener
decl_stmt|;
specifier|private
name|int
name|beforeEndIndex
decl_stmt|;
specifier|public
name|TransactionContext
parameter_list|(
name|ActiveMQConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|localTransactionIdGenerator
operator|=
name|connection
operator|.
name|getLocalTransactionIdGenerator
argument_list|()
expr_stmt|;
name|this
operator|.
name|connectionId
operator|=
name|connection
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInXATransaction
parameter_list|()
block|{
if|if
condition|(
name|transactionId
operator|!=
literal|null
operator|&&
name|transactionId
operator|.
name|isXATransaction
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
for|for
control|(
name|List
argument_list|<
name|TransactionContext
argument_list|>
name|transactions
range|:
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|transactions
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isInLocalTransaction
parameter_list|()
block|{
return|return
name|transactionId
operator|!=
literal|null
operator|&&
name|transactionId
operator|.
name|isLocalTransaction
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isInTransaction
parameter_list|()
block|{
return|return
name|transactionId
operator|!=
literal|null
return|;
block|}
comment|/**      * @return Returns the localTransactionEventListener.      */
specifier|public
name|LocalTransactionEventListener
name|getLocalTransactionEventListener
parameter_list|()
block|{
return|return
name|localTransactionEventListener
return|;
block|}
comment|/**      * Used by the resource adapter to listen to transaction events.      *      * @param localTransactionEventListener The localTransactionEventListener to      *                set.      */
specifier|public
name|void
name|setLocalTransactionEventListener
parameter_list|(
name|LocalTransactionEventListener
name|localTransactionEventListener
parameter_list|)
block|{
name|this
operator|.
name|localTransactionEventListener
operator|=
name|localTransactionEventListener
expr_stmt|;
block|}
comment|// ///////////////////////////////////////////////////////////
comment|//
comment|// Methods that work with the Synchronization objects registered with
comment|// the transaction.
comment|//
comment|// ///////////////////////////////////////////////////////////
specifier|public
name|void
name|addSynchronization
parameter_list|(
name|Synchronization
name|s
parameter_list|)
block|{
if|if
condition|(
name|synchronizations
operator|==
literal|null
condition|)
block|{
name|synchronizations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Synchronization
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|synchronizations
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|afterRollback
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|synchronizations
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Throwable
name|firstException
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
name|synchronizations
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|synchronizations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|afterRollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception from afterRollback on "
operator|+
name|synchronizations
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstException
operator|==
literal|null
condition|)
block|{
name|firstException
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
name|synchronizations
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|firstException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|firstException
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|afterCommit
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|synchronizations
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Throwable
name|firstException
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
name|synchronizations
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|synchronizations
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|afterCommit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception from afterCommit on "
operator|+
name|synchronizations
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstException
operator|==
literal|null
condition|)
block|{
name|firstException
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
name|synchronizations
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|firstException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|firstException
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|beforeEnd
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|synchronizations
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|size
init|=
name|synchronizations
operator|.
name|size
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
init|;
name|beforeEndIndex
operator|<
name|size
condition|;
control|)
block|{
name|synchronizations
operator|.
name|get
argument_list|(
name|beforeEndIndex
operator|++
argument_list|)
operator|.
name|beforeEnd
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|TransactionId
name|getTransactionId
parameter_list|()
block|{
return|return
name|transactionId
return|;
block|}
comment|// ///////////////////////////////////////////////////////////
comment|//
comment|// Local transaction interface.
comment|//
comment|// ///////////////////////////////////////////////////////////
comment|/**      * Start a local transaction.      * @throws javax.jms.JMSException on internal error      */
specifier|public
name|void
name|begin
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isInXATransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TransactionInProgressException
argument_list|(
literal|"Cannot start local transaction.  XA transaction is already in progress."
argument_list|)
throw|;
block|}
if|if
condition|(
name|transactionId
operator|==
literal|null
condition|)
block|{
name|synchronizations
operator|=
literal|null
expr_stmt|;
name|beforeEndIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|transactionId
operator|=
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|localTransactionIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|transactionId
argument_list|,
name|TransactionInfo
operator|.
name|BEGIN
argument_list|)
decl_stmt|;
name|this
operator|.
name|connection
operator|.
name|ensureConnectionInfoSent
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|asyncSendPacket
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Notify the listener that the tx was started.
if|if
condition|(
name|localTransactionEventListener
operator|!=
literal|null
condition|)
block|{
name|localTransactionEventListener
operator|.
name|beginEvent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin:"
operator|+
name|transactionId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Rolls back any work done in this transaction and releases any locks      * currently held.      *      * @throws JMSException if the JMS provider fails to roll back the      *                 transaction due to some internal error.      * @throws javax.jms.IllegalStateException if the method is not called by a      *                 transacted session.      */
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isInXATransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TransactionInProgressException
argument_list|(
literal|"Cannot rollback() if an XA transaction is already in progress "
argument_list|)
throw|;
block|}
try|try
block|{
name|beforeEnd
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionRolledBackException
name|canOcurrOnFailover
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"rollback processing error"
argument_list|,
name|canOcurrOnFailover
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transactionId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rollback: "
operator|+
name|transactionId
operator|+
literal|" syncCount: "
operator|+
operator|(
name|synchronizations
operator|!=
literal|null
condition|?
name|synchronizations
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|transactionId
argument_list|,
name|TransactionInfo
operator|.
name|ROLLBACK
argument_list|)
decl_stmt|;
name|this
operator|.
name|transactionId
operator|=
literal|null
expr_stmt|;
comment|//make this synchronous - see https://issues.apache.org/activemq/browse/AMQ-2364
name|this
operator|.
name|connection
operator|.
name|syncSendPacket
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Notify the listener that the tx was rolled back
if|if
condition|(
name|localTransactionEventListener
operator|!=
literal|null
condition|)
block|{
name|localTransactionEventListener
operator|.
name|rollbackEvent
argument_list|()
expr_stmt|;
block|}
block|}
name|afterRollback
argument_list|()
expr_stmt|;
block|}
comment|/**      * Commits all work done in this transaction and releases any locks      * currently held.      *      * @throws JMSException if the JMS provider fails to commit the transaction      *                 due to some internal error.      * @throws javax.jms.IllegalStateException if the method is not called by a      *                 transacted session.      */
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isInXATransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TransactionInProgressException
argument_list|(
literal|"Cannot commit() if an XA transaction is already in progress "
argument_list|)
throw|;
block|}
try|try
block|{
name|beforeEnd
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// Only send commit if the transaction was started.
if|if
condition|(
name|transactionId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commit: "
operator|+
name|transactionId
operator|+
literal|" syncCount: "
operator|+
operator|(
name|synchronizations
operator|!=
literal|null
condition|?
name|synchronizations
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|transactionId
argument_list|,
name|TransactionInfo
operator|.
name|COMMIT_ONE_PHASE
argument_list|)
decl_stmt|;
name|this
operator|.
name|transactionId
operator|=
literal|null
expr_stmt|;
comment|// Notify the listener that the tx was committed back
try|try
block|{
name|syncSendPacketWithInterruptionHandling
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|localTransactionEventListener
operator|!=
literal|null
condition|)
block|{
name|localTransactionEventListener
operator|.
name|commitEvent
argument_list|()
expr_stmt|;
block|}
name|afterCommit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|cause
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"commit failed for transaction "
operator|+
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|localTransactionEventListener
operator|!=
literal|null
condition|)
block|{
name|localTransactionEventListener
operator|.
name|rollbackEvent
argument_list|()
expr_stmt|;
block|}
name|afterRollback
argument_list|()
expr_stmt|;
throw|throw
name|cause
throw|;
block|}
block|}
block|}
comment|// ///////////////////////////////////////////////////////////
comment|//
comment|// XAResource Implementation
comment|//
comment|// ///////////////////////////////////////////////////////////
comment|/**      * Associates a transaction with the resource.      */
specifier|public
name|void
name|start
parameter_list|(
name|Xid
name|xid
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start: "
operator|+
name|xid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInLocalTransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
comment|// Are we already associated?
if|if
condition|(
name|associatedXid
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
comment|// if ((flags& TMJOIN) == TMJOIN) {
comment|// TODO: verify that the server has seen the xid
comment|// // }
comment|// if ((flags& TMJOIN) == TMRESUME) {
comment|// // TODO: verify that the xid was suspended.
comment|// }
comment|// associate
name|synchronizations
operator|=
literal|null
expr_stmt|;
name|beforeEndIndex
operator|=
literal|0
expr_stmt|;
name|setXid
argument_list|(
name|xid
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return connectionId for connection      */
specifier|private
name|ConnectionId
name|getConnectionId
parameter_list|()
block|{
return|return
name|connection
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
return|;
block|}
specifier|public
name|void
name|end
parameter_list|(
name|Xid
name|xid
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"End: "
operator|+
name|xid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInLocalTransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
name|TMSUSPEND
operator||
name|TMFAIL
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// You can only suspend the associated xid.
if|if
condition|(
operator|!
name|equals
argument_list|(
name|associatedXid
argument_list|,
name|xid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
comment|// TODO: we may want to put the xid in a suspended list.
try|try
block|{
name|beforeEnd
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|setXid
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|TMSUCCESS
operator|)
operator|==
name|TMSUCCESS
condition|)
block|{
comment|// set to null if this is the current xid.
comment|// otherwise this could be an asynchronous success call
if|if
condition|(
name|equals
argument_list|(
name|associatedXid
argument_list|,
name|xid
argument_list|)
condition|)
block|{
try|try
block|{
name|beforeEnd
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|setXid
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_INVAL
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|equals
parameter_list|(
name|Xid
name|xid1
parameter_list|,
name|Xid
name|xid2
parameter_list|)
block|{
if|if
condition|(
name|xid1
operator|==
name|xid2
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|xid1
operator|==
literal|null
operator|^
name|xid2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|xid1
operator|.
name|getFormatId
argument_list|()
operator|==
name|xid2
operator|.
name|getFormatId
argument_list|()
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|xid1
operator|.
name|getBranchQualifier
argument_list|()
argument_list|,
name|xid2
operator|.
name|getBranchQualifier
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|xid1
operator|.
name|getGlobalTransactionId
argument_list|()
argument_list|,
name|xid2
operator|.
name|getGlobalTransactionId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|prepare
parameter_list|(
name|Xid
name|xid
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Prepare: "
operator|+
name|xid
argument_list|)
expr_stmt|;
block|}
comment|// We allow interleaving multiple transactions, so
comment|// we don't limit prepare to the associated xid.
name|XATransactionId
name|x
decl_stmt|;
comment|// THIS SHOULD NEVER HAPPEN because end(xid, TMSUCCESS) should have been
comment|// called first
if|if
condition|(
name|xid
operator|==
literal|null
operator|||
operator|(
name|equals
argument_list|(
name|associatedXid
argument_list|,
name|xid
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
else|else
block|{
comment|// TODO: cache the known xids so we don't keep recreating this one??
name|x
operator|=
operator|new
name|XATransactionId
argument_list|(
name|xid
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|x
argument_list|,
name|TransactionInfo
operator|.
name|PREPARE
argument_list|)
decl_stmt|;
comment|// Find out if the server wants to commit or rollback.
name|IntegerResponse
name|response
init|=
operator|(
name|IntegerResponse
operator|)
name|syncSendPacketWithInterruptionHandling
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|XAResource
operator|.
name|XA_RDONLY
operator|==
name|response
operator|.
name|getResult
argument_list|()
condition|)
block|{
comment|// transaction stops now, may be syncs that need a callback
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
name|List
argument_list|<
name|TransactionContext
argument_list|>
name|l
init|=
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|remove
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"firing afterCommit callbacks on XA_RDONLY from prepare: "
operator|+
name|xid
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TransactionContext
name|ctx
range|:
name|l
control|)
block|{
name|ctx
operator|.
name|afterCommit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|response
operator|.
name|getResult
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"prepare of: "
operator|+
name|x
operator|+
literal|" failed with: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
name|List
argument_list|<
name|TransactionContext
argument_list|>
name|l
init|=
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|remove
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TransactionContext
name|ctx
range|:
name|l
control|)
block|{
try|try
block|{
name|ctx
operator|.
name|afterRollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to firing afterRollback callbacks on prepare failure, txid: "
operator|+
name|x
operator|+
literal|", context: "
operator|+
name|ctx
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|rollback
parameter_list|(
name|Xid
name|xid
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rollback: "
operator|+
name|xid
argument_list|)
expr_stmt|;
block|}
comment|// We allow interleaving multiple transactions, so
comment|// we don't limit rollback to the associated xid.
name|XATransactionId
name|x
decl_stmt|;
if|if
condition|(
name|xid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
if|if
condition|(
name|equals
argument_list|(
name|associatedXid
argument_list|,
name|xid
argument_list|)
condition|)
block|{
comment|// I think this can happen even without an end(xid) call. Need to
comment|// check spec.
name|x
operator|=
operator|(
name|XATransactionId
operator|)
name|transactionId
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
operator|new
name|XATransactionId
argument_list|(
name|xid
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|checkClosedOrFailed
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|ensureConnectionInfoSent
argument_list|()
expr_stmt|;
comment|// Let the server know that the tx is rollback.
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|x
argument_list|,
name|TransactionInfo
operator|.
name|ROLLBACK
argument_list|)
decl_stmt|;
name|syncSendPacketWithInterruptionHandling
argument_list|(
name|info
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
name|List
argument_list|<
name|TransactionContext
argument_list|>
name|l
init|=
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|remove
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TransactionContext
name|ctx
range|:
name|l
control|)
block|{
name|ctx
operator|.
name|afterRollback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// XAResource interface
specifier|public
name|void
name|commit
parameter_list|(
name|Xid
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Commit: "
operator|+
name|xid
operator|+
literal|", onePhase="
operator|+
name|onePhase
argument_list|)
expr_stmt|;
block|}
comment|// We allow interleaving multiple transactions, so
comment|// we don't limit commit to the associated xid.
name|XATransactionId
name|x
decl_stmt|;
if|if
condition|(
name|xid
operator|==
literal|null
operator|||
operator|(
name|equals
argument_list|(
name|associatedXid
argument_list|,
name|xid
argument_list|)
operator|)
condition|)
block|{
comment|// should never happen, end(xid,TMSUCCESS) must have been previously
comment|// called
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
else|else
block|{
name|x
operator|=
operator|new
name|XATransactionId
argument_list|(
name|xid
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|checkClosedOrFailed
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|ensureConnectionInfoSent
argument_list|()
expr_stmt|;
comment|// Notify the server that the tx was committed back
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|x
argument_list|,
name|onePhase
condition|?
name|TransactionInfo
operator|.
name|COMMIT_ONE_PHASE
else|:
name|TransactionInfo
operator|.
name|COMMIT_TWO_PHASE
argument_list|)
decl_stmt|;
name|syncSendPacketWithInterruptionHandling
argument_list|(
name|info
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
name|List
argument_list|<
name|TransactionContext
argument_list|>
name|l
init|=
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|remove
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TransactionContext
name|ctx
range|:
name|l
control|)
block|{
try|try
block|{
name|ctx
operator|.
name|afterCommit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ignoring exception from after completion on ended transaction: "
operator|+
name|ignored
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"commit of: "
operator|+
name|x
operator|+
literal|" failed with: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|onePhase
condition|)
block|{
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
name|List
argument_list|<
name|TransactionContext
argument_list|>
name|l
init|=
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|remove
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TransactionContext
name|ctx
range|:
name|l
control|)
block|{
try|try
block|{
name|ctx
operator|.
name|afterRollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to firing afterRollback callbacks commit failure, txid: "
operator|+
name|x
operator|+
literal|", context: "
operator|+
name|ctx
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|forget
parameter_list|(
name|Xid
name|xid
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Forget: "
operator|+
name|xid
argument_list|)
expr_stmt|;
block|}
comment|// We allow interleaving multiple transactions, so
comment|// we don't limit forget to the associated xid.
name|XATransactionId
name|x
decl_stmt|;
if|if
condition|(
name|xid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XAException
argument_list|(
name|XAException
operator|.
name|XAER_PROTO
argument_list|)
throw|;
block|}
if|if
condition|(
name|equals
argument_list|(
name|associatedXid
argument_list|,
name|xid
argument_list|)
condition|)
block|{
comment|// TODO determine if this can happen... I think not.
name|x
operator|=
operator|(
name|XATransactionId
operator|)
name|transactionId
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
operator|new
name|XATransactionId
argument_list|(
name|xid
argument_list|)
expr_stmt|;
block|}
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|x
argument_list|,
name|TransactionInfo
operator|.
name|FORGET
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Tell the server to forget the transaction.
name|syncSendPacketWithInterruptionHandling
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSameRM
parameter_list|(
name|XAResource
name|xaResource
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|xaResource
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|xaResource
operator|instanceof
name|TransactionContext
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TransactionContext
name|xar
init|=
operator|(
name|TransactionContext
operator|)
name|xaResource
decl_stmt|;
try|try
block|{
return|return
name|getResourceManagerId
argument_list|()
operator|.
name|equals
argument_list|(
name|xar
operator|.
name|getResourceManagerId
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|XAException
operator|)
operator|new
name|XAException
argument_list|(
literal|"Could not get resource manager id."
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Xid
index|[]
name|recover
parameter_list|(
name|int
name|flag
parameter_list|)
throws|throws
name|XAException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recover: "
operator|+
name|flag
argument_list|)
expr_stmt|;
block|}
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|checkClosedOrFailed
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|ensureConnectionInfoSent
argument_list|()
expr_stmt|;
name|DataArrayResponse
name|receipt
init|=
operator|(
name|DataArrayResponse
operator|)
name|this
operator|.
name|connection
operator|.
name|syncSendPacket
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|DataStructure
index|[]
name|data
init|=
name|receipt
operator|.
name|getData
argument_list|()
decl_stmt|;
name|XATransactionId
index|[]
name|answer
decl_stmt|;
if|if
condition|(
name|data
operator|instanceof
name|XATransactionId
index|[]
condition|)
block|{
name|answer
operator|=
operator|(
name|XATransactionId
index|[]
operator|)
name|data
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|XATransactionId
index|[
name|data
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|answer
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getTransactionTimeout
parameter_list|()
throws|throws
name|XAException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|setTransactionTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|XAException
block|{
return|return
literal|false
return|;
block|}
comment|// ///////////////////////////////////////////////////////////
comment|//
comment|// Helper methods.
comment|//
comment|// ///////////////////////////////////////////////////////////
specifier|private
name|String
name|getResourceManagerId
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|getResourceManagerId
argument_list|()
return|;
block|}
specifier|private
name|void
name|setXid
parameter_list|(
name|Xid
name|xid
parameter_list|)
throws|throws
name|XAException
block|{
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|checkClosedOrFailed
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|ensureConnectionInfoSent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|xid
operator|!=
literal|null
condition|)
block|{
comment|// associate
name|associatedXid
operator|=
name|xid
expr_stmt|;
name|transactionId
operator|=
operator|new
name|XATransactionId
argument_list|(
name|xid
argument_list|)
expr_stmt|;
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionId
argument_list|,
name|transactionId
argument_list|,
name|TransactionInfo
operator|.
name|BEGIN
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|asyncSendPacket
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started XA transaction: "
operator|+
name|transactionId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|transactionId
operator|!=
literal|null
condition|)
block|{
name|TransactionInfo
name|info
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionId
argument_list|,
name|transactionId
argument_list|,
name|TransactionInfo
operator|.
name|END
argument_list|)
decl_stmt|;
try|try
block|{
name|syncSendPacketWithInterruptionHandling
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ended XA transaction: "
operator|+
name|transactionId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|toXAException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Add our self to the list of contexts that are interested in
comment|// post commit/rollback events.
synchronized|synchronized
init|(
name|ENDED_XA_TRANSACTION_CONTEXTS
init|)
block|{
name|List
argument_list|<
name|TransactionContext
argument_list|>
name|l
init|=
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|get
argument_list|(
name|transactionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|TransactionContext
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ENDED_XA_TRANSACTION_CONTEXTS
operator|.
name|put
argument_list|(
name|transactionId
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|l
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// dis-associate
name|associatedXid
operator|=
literal|null
expr_stmt|;
name|transactionId
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Sends the given command. Also sends the command in case of interruption,      * so that important commands like rollback and commit are never interrupted.      * If interruption occurred, set the interruption state of the current      * after performing the action again.      *      * @return the response      */
specifier|private
name|Response
name|syncSendPacketWithInterruptionHandling
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|syncSendPacket
argument_list|(
name|command
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLinkedException
argument_list|()
operator|instanceof
name|InterruptedIOException
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|connection
operator|.
name|syncSendPacket
argument_list|(
name|command
argument_list|)
return|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Converts a JMSException from the server to an XAException. if the      * JMSException contained a linked XAException that is returned instead.      *      * @param e JMSException to convert      * @return XAException wrapping original exception or its message      */
specifier|private
name|XAException
name|toXAException
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|XAException
condition|)
block|{
name|XAException
name|original
init|=
operator|(
name|XAException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|XAException
name|xae
init|=
operator|new
name|XAException
argument_list|(
name|original
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|xae
operator|.
name|errorCode
operator|=
name|original
operator|.
name|errorCode
expr_stmt|;
name|xae
operator|.
name|initCause
argument_list|(
name|original
argument_list|)
expr_stmt|;
return|return
name|xae
return|;
block|}
name|XAException
name|xae
init|=
operator|new
name|XAException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|xae
operator|.
name|errorCode
operator|=
name|XAException
operator|.
name|XAER_RMFAIL
expr_stmt|;
name|xae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|xae
return|;
block|}
specifier|public
name|ActiveMQConnection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|associatedXid
operator|=
literal|null
expr_stmt|;
name|transactionId
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TransactionContext{"
operator|+
literal|"transactionId="
operator|+
name|transactionId
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

