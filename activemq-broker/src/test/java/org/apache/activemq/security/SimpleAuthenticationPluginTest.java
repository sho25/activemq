begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleAuthenticationPluginTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSetUsers
parameter_list|()
block|{
name|AuthenticationUser
name|alice
init|=
operator|new
name|AuthenticationUser
argument_list|(
literal|"alice"
argument_list|,
literal|"password"
argument_list|,
literal|"group1"
argument_list|)
decl_stmt|;
name|AuthenticationUser
name|bob
init|=
operator|new
name|AuthenticationUser
argument_list|(
literal|"bob"
argument_list|,
literal|"security"
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|SimpleAuthenticationPlugin
name|authenticationPlugin
init|=
operator|new
name|SimpleAuthenticationPlugin
argument_list|()
decl_stmt|;
name|authenticationPlugin
operator|.
name|setUsers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|alice
argument_list|,
name|bob
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|authenticationPlugin
operator|.
name|isAnonymousAccessAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userPasswords
init|=
name|authenticationPlugin
operator|.
name|getUserPasswords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|userPasswords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
name|userPasswords
operator|.
name|get
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"security"
argument_list|,
name|userPasswords
operator|.
name|get
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
argument_list|>
name|userGroups
init|=
name|authenticationPlugin
operator|.
name|getUserGroups
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|userGroups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|aliceGroups
init|=
name|userGroups
operator|.
name|get
argument_list|(
literal|"alice"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|aliceGroups
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aliceGroups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group1"
argument_list|,
name|aliceGroups
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|bobGroups
init|=
name|userGroups
operator|.
name|get
argument_list|(
literal|"bob"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bobGroups
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bobGroups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group2"
argument_list|,
name|bobGroups
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetUsersNoGroups
parameter_list|()
block|{
name|AuthenticationUser
name|alice
init|=
operator|new
name|AuthenticationUser
argument_list|(
literal|"alice"
argument_list|,
literal|"password"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AuthenticationUser
name|bob
init|=
operator|new
name|AuthenticationUser
argument_list|(
literal|"bob"
argument_list|,
literal|"security"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleAuthenticationPlugin
name|authenticationPlugin
init|=
operator|new
name|SimpleAuthenticationPlugin
argument_list|()
decl_stmt|;
name|authenticationPlugin
operator|.
name|setUsers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|alice
argument_list|,
name|bob
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|authenticationPlugin
operator|.
name|isAnonymousAccessAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userPasswords
init|=
name|authenticationPlugin
operator|.
name|getUserPasswords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|userPasswords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
name|userPasswords
operator|.
name|get
argument_list|(
literal|"alice"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"security"
argument_list|,
name|userPasswords
operator|.
name|get
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
argument_list|>
name|userGroups
init|=
name|authenticationPlugin
operator|.
name|getUserGroups
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|userGroups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|aliceGroups
init|=
name|userGroups
operator|.
name|get
argument_list|(
literal|"alice"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|aliceGroups
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aliceGroups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|bobGroups
init|=
name|userGroups
operator|.
name|get
argument_list|(
literal|"bob"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bobGroups
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bobGroups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

