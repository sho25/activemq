begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|XATransactionId
import|;
end_import

begin_comment
comment|/**  * Used to simulate the recovery that occurs when a broker shuts down.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|RecoveryBrokerTest
extends|extends
name|BrokerRestartTestSupport
block|{
comment|/**      * Used to verify that after a broker restart durable subscriptions that use      * wild cards are still wild card subscription after broker restart.      *       * @throws Exception      */
comment|//need to revist!!!
specifier|public
name|void
name|XtestWildCardSubscriptionPreservedOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|dest1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.A"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|dest2
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.B"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|dest3
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.C"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|wildDest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.>"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|MessageId
argument_list|>
name|sentBeforeRestart
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageId
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|MessageId
argument_list|>
name|sentBeforeCreateConsumer
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageId
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|MessageId
argument_list|>
name|sentAfterCreateConsumer
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageId
argument_list|>
argument_list|()
decl_stmt|;
comment|// Setup a first connection
block|{
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo1
operator|.
name|setClientId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
comment|// Create the durable subscription.
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|wildDest
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Close the subscription.
name|connection1
operator|.
name|send
argument_list|(
name|closeConsumerInfo
argument_list|(
name|consumerInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send the messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|dest1
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|sentBeforeRestart
operator|.
name|add
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection1
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Get a connection to the new broker.
block|{
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo2
operator|.
name|setClientId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
comment|// Send messages before the durable subscription is re-activated.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|dest2
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|sentBeforeCreateConsumer
operator|.
name|add
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-open the subscription.
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|wildDest
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Send messages after the subscription is activated.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|dest3
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|sentAfterCreateConsumer
operator|.
name|add
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We should get the recovered messages...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Recovered message missing: "
operator|+
name|i
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sentBeforeRestart
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We should get get the messages that were sent before the sub was
comment|// reactivated.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Before activated message missing: "
operator|+
name|i
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sentBeforeCreateConsumer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We should get get the messages that were sent after the sub was
comment|// reactivated.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"After activated message missing: "
operator|+
name|i
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|sentAfterCreateConsumer
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|m2
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testConsumedQueuePersistentMessagesLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// The we should get the messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
block|}
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// No messages should be delivered.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentUncommitedMessagesLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|LocalTransactionId
name|txid
init|=
name|createLocalTransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Don't commit
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// No messages should be delivered.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicDurableConsumerHoldsPersistentMessageAfterRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo1
operator|.
name|setClientId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo1
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo1
argument_list|)
expr_stmt|;
comment|// Create the durable subscription.
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Close the subscription.
name|connection1
operator|.
name|send
argument_list|(
name|closeConsumerInfo
argument_list|(
name|consumerInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send the messages
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo1
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Get a connection to the new broker.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo2
operator|.
name|setClientId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
comment|// Re-open the subscription.
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setSubscriptionName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// The we should get the messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not get message "
operator|+
name|i
argument_list|,
name|m2
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentMessagesNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Message should have been dropped due to broker restart.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have received a message by now!"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueueNonPersistentMessagesLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Message should have been dropped due to broker restart.
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentCommitedMessagesNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|LocalTransactionId
name|txid
init|=
name|createLocalTransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Commit
name|connection
operator|.
name|send
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentCommitedAcksNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Setup the consumer and receive the message.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|LocalTransactionId
name|txid
init|=
name|createLocalTransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
comment|// Commit
name|connection
operator|.
name|send
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// No messages should be delivered.
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentUncommitedAcksLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Setup the consumer and receive the message.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|LocalTransactionId
name|txid
init|=
name|createLocalTransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
comment|// Don't commit
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// All messages should be re-delivered.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentXAUncommitedAcksLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|NUMBER
init|=
literal|100
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Setup the consumer and receive the message.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
comment|// Don't commit
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// All messages should be re-delivered.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|RecoveryBrokerTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

