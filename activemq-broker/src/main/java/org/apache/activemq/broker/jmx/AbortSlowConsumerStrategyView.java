begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|AbortSlowConsumerStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SlowConsumerEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|AbortSlowConsumerStrategyView
implements|implements
name|AbortSlowConsumerStrategyViewMBean
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbortSlowConsumerStrategyView
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ManagedRegionBroker
name|broker
decl_stmt|;
specifier|private
name|AbortSlowConsumerStrategy
name|strategy
decl_stmt|;
specifier|public
name|AbortSlowConsumerStrategyView
parameter_list|(
name|ManagedRegionBroker
name|managedRegionBroker
parameter_list|,
name|AbortSlowConsumerStrategy
name|slowConsumerStrategy
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|managedRegionBroker
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|slowConsumerStrategy
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxSlowCount
parameter_list|()
block|{
return|return
name|strategy
operator|.
name|getMaxSlowCount
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMaxSlowCount
parameter_list|(
name|long
name|maxSlowCount
parameter_list|)
block|{
name|strategy
operator|.
name|setMaxSlowCount
argument_list|(
name|maxSlowCount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxSlowDuration
parameter_list|()
block|{
return|return
name|strategy
operator|.
name|getMaxSlowDuration
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMaxSlowDuration
parameter_list|(
name|long
name|maxSlowDuration
parameter_list|)
block|{
name|strategy
operator|.
name|setMaxSlowDuration
argument_list|(
name|maxSlowDuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getCheckPeriod
parameter_list|()
block|{
return|return
name|strategy
operator|.
name|getCheckPeriod
argument_list|()
return|;
block|}
specifier|public
name|TabularData
name|getSlowConsumers
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|OpenTypeSupport
operator|.
name|OpenTypeFactory
name|factory
init|=
name|OpenTypeSupport
operator|.
name|getFactory
argument_list|(
name|SlowConsumerEntry
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|factory
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"SlowConsumers"
argument_list|,
literal|"Table of current slow Consumers"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"subscription"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|rc
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Subscription
argument_list|,
name|SlowConsumerEntry
argument_list|>
name|slowConsumers
init|=
name|strategy
operator|.
name|getSlowConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Subscription
argument_list|,
name|SlowConsumerEntry
argument_list|>
name|entry
range|:
name|slowConsumers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|setSubscription
argument_list|(
name|broker
operator|.
name|getSubscriberObjectName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|OpenTypeSupport
operator|.
name|convert
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|abortConsumer
parameter_list|(
name|ObjectName
name|consumerToAbort
parameter_list|)
block|{
name|Subscription
name|sub
init|=
name|broker
operator|.
name|getSubscriber
argument_list|(
name|consumerToAbort
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"aborting consumer via jmx: {}"
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|abortConsumer
argument_list|(
name|sub
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"cannot resolve subscription matching name: {}"
argument_list|,
name|consumerToAbort
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|abortConnection
parameter_list|(
name|ObjectName
name|consumerToAbort
parameter_list|)
block|{
name|Subscription
name|sub
init|=
name|broker
operator|.
name|getSubscriber
argument_list|(
name|consumerToAbort
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"aborting consumer connection via jmx: {}"
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|abortConsumer
argument_list|(
name|sub
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"cannot resolve subscription matching name: {}"
argument_list|,
name|consumerToAbort
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|abortConsumer
parameter_list|(
name|String
name|objectNameOfConsumerToAbort
parameter_list|)
block|{
name|abortConsumer
argument_list|(
name|toObjectName
argument_list|(
name|objectNameOfConsumerToAbort
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|abortConnection
parameter_list|(
name|String
name|objectNameOfConsumerToAbort
parameter_list|)
block|{
name|abortConnection
argument_list|(
name|toObjectName
argument_list|(
name|objectNameOfConsumerToAbort
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ObjectName
name|toObjectName
parameter_list|(
name|String
name|objectName
parameter_list|)
block|{
name|ObjectName
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"cannot create subscription ObjectName to abort, from string: {}"
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

