begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CronParserTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeMinutes
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|test
init|=
literal|"30 * * * *"
decl_stmt|;
name|long
name|current
init|=
literal|20
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|long
name|result
init|=
name|next
operator|-
name|current
decl_stmt|;
name|assertEquals
argument_list|(
literal|60
operator|*
literal|10
operator|*
literal|1000
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeHours
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|test
init|=
literal|"* 1 * * *"
decl_stmt|;
name|long
name|current
init|=
literal|60
operator|*
literal|1000
operator|*
literal|60
operator|*
literal|5
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|long
name|result
init|=
name|next
operator|-
name|current
decl_stmt|;
name|long
name|expected
init|=
literal|60
operator|*
literal|1000
operator|*
literal|60
operator|*
literal|18
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
try|try
block|{
name|CronParser
operator|.
name|validate
argument_list|(
literal|"30 08 10 06 * "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"* * * * * "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"* * * * 1-6 "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"* * * * 1,2,5 "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"*/10 0-4,8-12 * * 1-2,3-6/2 "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be valid "
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|CronParser
operator|.
name|validate
argument_list|(
literal|"61 08 10 06 * "
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be valid "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
try|try
block|{
name|CronParser
operator|.
name|validate
argument_list|(
literal|"61 08 06 * "
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be valid "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNextCommaSeparated
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|token
init|=
literal|"3,5,7"
decl_stmt|;
comment|// test minimum values
name|int
name|next
init|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNextRange
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|token
init|=
literal|"3-5"
decl_stmt|;
comment|// test minimum values
name|int
name|next
init|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNextExact
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|token
init|=
literal|"3"
decl_stmt|;
name|int
name|next
init|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize
parameter_list|()
block|{
name|String
name|test
init|=
literal|"*/5 * * * *"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|CronParser
operator|.
name|tokenize
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|test
operator|=
literal|"*/5 * * * * *"
expr_stmt|;
try|try
block|{
name|list
operator|=
name|CronParser
operator|.
name|tokenize
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have throw an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
name|test
operator|=
literal|"*/5 * * * *"
expr_stmt|;
try|try
block|{
name|list
operator|=
name|CronParser
operator|.
name|tokenize
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have throw an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testGetNextScheduledTime
parameter_list|()
block|{
name|fail
argument_list|(
literal|"Not yet implemented"
argument_list|)
expr_stmt|;
block|}
name|CronParser
operator|.
name|CronEntry
name|createEntry
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
operator|new
name|CronParser
operator|.
name|CronEntry
argument_list|(
literal|"test"
argument_list|,
name|str
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
end_class

end_unit

