begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|GroovyShell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|control
operator|.
name|CompilationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JamService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JamServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JamServiceParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|manager
operator|.
name|ArchiverManager
import|;
end_import

begin_comment
comment|/**  * Greates a Mojo for Gram.  *   * This module is largly based on the Gram class here:  * http://cvs.groovy.codehaus.org/browse/groovy/groovy/modules/gram/src/main/org/codehaus/gram/Gram.java?r=1.4  *   * We need to get this moved over the groovy project eventually.. Putting in ActiveMQ for now so we can keep going.  *   * @goal gram  * @description Runs the Gram code generator  */
end_comment

begin_class
specifier|public
class|class
name|GramMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Source directories of the project.      *      * @parameter expression="${project.compileSourceRoots}"      * @required      * @readonly      */
specifier|private
name|List
name|sourceDirs
decl_stmt|;
comment|/**      * @parameter      * @required      */
name|String
name|scripts
init|=
literal|""
decl_stmt|;
comment|/**      * @parameter      */
name|Map
name|groovyProperties
init|=
name|Collections
operator|.
name|EMPTY_MAP
decl_stmt|;
comment|/**      * To look up Archiver/UnArchiver implementations      *      * @parameter expression="${component.org.codehaus.plexus.archiver.manager.ArchiverManager}"      * @required      */
specifier|protected
name|ArchiverManager
name|archiverManager
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parsing source files in: "
operator|+
name|sourceDirs
argument_list|)
expr_stmt|;
name|JamServiceFactory
name|jamServiceFactory
init|=
name|JamServiceFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|JamServiceParams
name|params
init|=
name|jamServiceFactory
operator|.
name|createServiceParams
argument_list|()
decl_stmt|;
name|File
index|[]
name|dirs
init|=
operator|new
name|File
index|[
name|sourceDirs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|sourceDirs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|dirs
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|params
operator|.
name|includeSourcePattern
argument_list|(
name|dirs
argument_list|,
literal|"**/*.java"
argument_list|)
expr_stmt|;
name|JamService
name|jam
init|=
name|jamServiceFactory
operator|.
name|createService
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|String
index|[]
name|scriptsArray
init|=
name|scripts
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|scriptsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|script
init|=
name|scriptsArray
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Evaluating Groovy script: "
operator|+
name|script
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|jam
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|JamService
name|jam
parameter_list|,
name|String
name|script
parameter_list|)
throws|throws
name|CompilationFailedException
throws|,
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|GroovyShell
name|shell
init|=
name|createShell
argument_list|(
name|jam
argument_list|)
decl_stmt|;
name|shell
operator|.
name|evaluate
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets try load the script on the classpath
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|script
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No script called: "
operator|+
name|script
operator|+
literal|" could be found on the classpath or the file system"
argument_list|)
throw|;
block|}
block|}
name|GroovyShell
name|shell
init|=
name|createShell
argument_list|(
name|jam
argument_list|)
decl_stmt|;
name|shell
operator|.
name|evaluate
argument_list|(
name|in
argument_list|,
name|script
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|GroovyShell
name|createShell
parameter_list|(
name|JamService
name|jam
parameter_list|)
block|{
name|GroovyShell
name|answer
init|=
operator|new
name|GroovyShell
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|groovyProperties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setProperty
argument_list|(
literal|"jam"
argument_list|,
name|jam
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setProperty
argument_list|(
literal|"classes"
argument_list|,
name|jam
operator|.
name|getAllClasses
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

