begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_class
specifier|public
class|class
name|DurableTopicSubscription
extends|extends
name|PrefetchSubscription
block|{
specifier|final
specifier|protected
name|String
name|clientId
decl_stmt|;
specifier|final
specifier|protected
name|String
name|subscriptionName
decl_stmt|;
specifier|final
name|ConcurrentHashMap
name|redeliveredMessages
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
name|boolean
name|active
init|=
literal|true
decl_stmt|;
name|boolean
name|recovered
init|=
literal|true
decl_stmt|;
specifier|public
name|DurableTopicSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|InvalidSelectorException
block|{
name|super
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientId
operator|=
name|context
operator|.
name|getClientId
argument_list|()
expr_stmt|;
name|this
operator|.
name|subscriptionName
operator|=
name|info
operator|.
name|getSubcriptionName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DurableTopicSubscription
parameter_list|(
name|SubscriptionInfo
name|info
parameter_list|)
throws|throws
name|InvalidSelectorException
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|createFakeConsumerInfo
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientId
operator|=
name|info
operator|.
name|getClientId
argument_list|()
expr_stmt|;
name|this
operator|.
name|subscriptionName
operator|=
name|info
operator|.
name|getSubcriptionName
argument_list|()
expr_stmt|;
name|active
operator|=
literal|false
expr_stmt|;
name|recovered
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
specifier|static
name|ConsumerInfo
name|createFakeConsumerInfo
parameter_list|(
name|SubscriptionInfo
name|info
parameter_list|)
block|{
name|ConsumerInfo
name|rc
init|=
operator|new
name|ConsumerInfo
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setSelector
argument_list|(
name|info
operator|.
name|getSelector
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setSubcriptionName
argument_list|(
name|info
operator|.
name|getSubcriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setDestination
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|isRecovered
parameter_list|()
block|{
return|return
name|recovered
return|;
block|}
specifier|protected
name|boolean
name|isFull
parameter_list|()
block|{
return|return
operator|!
name|active
operator|||
name|super
operator|.
name|isFull
argument_list|()
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|gc
parameter_list|()
block|{
if|if
condition|(
operator|!
name|active
operator|&&
name|recovered
condition|)
block|{
name|recovered
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|dispatched
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageReference
name|node
init|=
operator|(
name|MessageReference
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// node.decrementTargetCount();
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|matched
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageReference
name|node
init|=
operator|(
name|MessageReference
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// node.decrementTargetCount();
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|delivered
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|active
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|dispatched
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageReference
name|node
init|=
operator|(
name|MessageReference
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|count
init|=
operator|(
name|Integer
operator|)
name|redeliveredMessages
operator|.
name|get
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|redeliveredMessages
operator|.
name|put
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
name|count
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|redeliveredMessages
operator|.
name|put
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Undo the dispatch.
name|matched
operator|.
name|addFirst
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|delivered
operator|=
literal|0
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|activate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|active
condition|)
block|{
name|this
operator|.
name|active
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
if|if
condition|(
operator|!
name|recovered
condition|)
block|{
name|recovered
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|destinations
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Topic
name|topic
init|=
operator|(
name|Topic
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|topic
operator|.
name|recover
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isFull
argument_list|()
condition|)
block|{
name|dispatchMatched
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|MessageDispatch
name|createMessageDispatch
parameter_list|(
name|MessageReference
name|node
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|MessageDispatch
name|md
init|=
name|super
operator|.
name|createMessageDispatch
argument_list|(
name|node
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|Integer
name|count
init|=
operator|(
name|Integer
operator|)
name|redeliveredMessages
operator|.
name|get
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|setRedeliveryCounter
argument_list|(
name|count
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|md
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|add
parameter_list|(
name|MessageReference
name|node
parameter_list|)
throws|throws
name|Throwable
block|{
assert|assert
name|recovered
assert|;
name|node
operator|=
operator|new
name|IndirectMessageReference
argument_list|(
name|node
operator|.
name|getRegionDestination
argument_list|()
argument_list|,
operator|(
name|Message
operator|)
name|node
argument_list|)
expr_stmt|;
name|super
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|canDispatch
parameter_list|(
name|MessageReference
name|node
parameter_list|)
block|{
return|return
name|active
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Throwable
block|{
assert|assert
name|recovered
assert|;
name|super
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|,
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|ack
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|redeliveredMessages
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|IndirectMessageReference
operator|)
name|node
operator|)
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getSubscriptionName
parameter_list|()
block|{
return|return
name|subscriptionName
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DurableTopicSubscription:"
operator|+
literal|" consumer="
operator|+
name|info
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|", destinations="
operator|+
name|destinations
operator|.
name|size
argument_list|()
operator|+
literal|", dispatched="
operator|+
name|dispatched
operator|.
name|size
argument_list|()
operator|+
literal|", delivered="
operator|+
name|this
operator|.
name|delivered
operator|+
literal|", matched="
operator|+
name|this
operator|.
name|matched
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
block|}
end_class

end_unit

