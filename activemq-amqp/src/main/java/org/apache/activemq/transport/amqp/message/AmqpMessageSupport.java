begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Support class containing constant values and static methods that are  * used to map to / from AMQP Message types being sent or received.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AmqpMessageSupport
block|{
specifier|public
specifier|static
specifier|final
name|Binary
name|EMPTY_BINARY
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Data
name|EMPTY_BODY
init|=
operator|new
name|Data
argument_list|(
name|EMPTY_BINARY
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Data
name|NULL_OBJECT_BODY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AMQP_ORIGINAL_ENCODING_KEY
init|=
literal|"JMS_AMQP_ORIGINAL_ENCODING"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_UNKNOWN
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_NULL
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_DATA
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_SEQUENCE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_NULL
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_STRING
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_BINARY
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_MAP
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_LIST
init|=
literal|8
decl_stmt|;
static|static
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|getSerializedBytes
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to initialise null object body"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NULL_OBJECT_BODY
operator|=
operator|new
name|Data
argument_list|(
operator|new
name|Binary
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Content type used to mark Data sections as containing a serialized java object.      */
specifier|public
specifier|static
specifier|final
name|String
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
init|=
literal|"application/x-java-serialized-object"
decl_stmt|;
comment|/**      * Content type used to mark Data sections as containing arbitrary bytes.      */
specifier|public
specifier|static
specifier|final
name|String
name|OCTET_STREAM_CONTENT_TYPE
init|=
literal|"application/octet-stream"
decl_stmt|;
comment|/**      * Lookup and return the correct Proton Symbol instance based on the given key.      *      * @param key      *        the String value name of the Symbol to locate.      *      * @return the Symbol value that matches the given key.      */
specifier|public
specifier|static
name|Symbol
name|getSymbol
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Symbol
operator|.
name|valueOf
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Safe way to access message annotations which will check internal structure and      * either return the annotation if it exists or null if the annotation or any annotations      * are present.      *      * @param key      *        the String key to use to lookup an annotation.      * @param message      *        the AMQP message object that is being examined.      *      * @return the given annotation value or null if not present in the message.      */
specifier|public
specifier|static
name|Object
name|getMessageAnnotation
parameter_list|(
name|String
name|key
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getMessageAnnotations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|annotations
init|=
name|message
operator|.
name|getMessageAnnotations
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|annotations
operator|.
name|get
argument_list|(
name|AmqpMessageSupport
operator|.
name|getSymbol
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Check whether the content-type field of the properties section (if present) in      * the given message matches the provided string (where null matches if there is      * no content type present.      *      * @param contentType      *        content type string to compare against, or null if none      * @param message      *        the AMQP message object that is being examined.      *      * @return true if content type matches      */
specifier|public
specifier|static
name|boolean
name|isContentType
parameter_list|(
name|String
name|contentType
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
return|return
name|message
operator|.
name|getContentType
argument_list|()
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|contentType
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * @param contentType the contentType of the received message      * @return the character set to use, or null if not to treat the message as text      */
specifier|public
specifier|static
name|Charset
name|getCharsetForTextualContent
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
try|try
block|{
return|return
name|AmqpContentTypeSupport
operator|.
name|parseContentTypeForTextualCharset
argument_list|(
name|contentType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidContentTypeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|getSerializedBytes
parameter_list|(
name|Serializable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;
name|ObjectOutputStream
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
init|)
block|{
name|oos
operator|.
name|writeObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

