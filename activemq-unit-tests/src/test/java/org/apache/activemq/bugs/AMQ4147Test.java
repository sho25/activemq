begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DemandForwardingBridgeSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_comment
comment|/**  * This test demonstrates a bug in {@link DemandForwardingBridgeSupport} when  * bridges are VM-to-VM. Specifically, memory usage from the local broker is  * manipulated by the remote broker.  */
end_comment

begin_class
specifier|public
class|class
name|AMQ4147Test
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
comment|/**      * This test demonstrates the bug: namely, when a message is bridged over      * the VMTransport, its memory usage continues to refer to the originating      * broker. As a result, memory usage is never accounted for on the remote      * broker, and the local broker's memory usage is only decreased once the      * message is consumed on the remote broker.      */
specifier|public
name|void
name|testVMTransportRemoteMemoryUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker1
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(vm://broker1)/broker1?persistent=false"
argument_list|)
argument_list|)
decl_stmt|;
name|BrokerService
name|broker2
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(vm://broker2)/broker2?persistent=false"
argument_list|)
argument_list|)
decl_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Forward messages from broker1 to broker2 over the VM transport.
name|bridgeBrokers
argument_list|(
literal|"broker1"
argument_list|,
literal|"broker2"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Verify that broker1 and broker2's test queues have no memory usage.
name|ActiveMQDestination
name|testQueue
init|=
name|createDestination
argument_list|(
name|AMQ4147Test
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".queue"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|broker1TestQueue
init|=
name|broker1
operator|.
name|getDestination
argument_list|(
name|testQueue
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|broker2TestQueue
init|=
name|broker2
operator|.
name|getDestination
argument_list|(
name|testQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Produce a message to broker1's test queue and verify that broker1's
comment|// memory usage has increased, but broker2 still has no memory usage.
name|sendMessages
argument_list|(
literal|"broker1"
argument_list|,
name|testQueue
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a consumer on broker2 that is synchronized to allow detection
comment|// of "in flight" messages to the consumer.
name|MessageIdList
name|broker2Messages
init|=
name|getBrokerMessages
argument_list|(
literal|"broker2"
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|consumerReady
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|consumerProceed
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|broker2Messages
operator|.
name|setParent
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|consumerReady
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
block|{
name|consumerProceed
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"broker2"
argument_list|,
name|testQueue
argument_list|)
expr_stmt|;
comment|// Verify that when broker2's consumer receives the message, the memory
comment|// usage has moved broker1 to broker2. The first assertion is expected
comment|// to fail due to the bug; the try/finally ensures the consumer is
comment|// released prior to failure so that the broker can shut down.
name|consumerReady
operator|.
name|acquire
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
literal|"Memory Usage Should be Zero: "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Consume the message and verify that there is no more memory
comment|// usage.
name|consumerProceed
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Memory Usage Should be Zero: "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Memory Usage Should be Zero: "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test demonstrates that the bug is VMTransport-specific and does not      * occur when bridges occur using other protocols.      */
specifier|public
name|void
name|testTcpTransportRemoteMemoryUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker1
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(vm://broker1)/broker1?persistent=false"
argument_list|)
argument_list|)
decl_stmt|;
name|BrokerService
name|broker2
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/broker2?persistent=false"
argument_list|)
argument_list|)
decl_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Forward messages from broker1 to broker2 over the TCP transport.
name|bridgeBrokers
argument_list|(
literal|"broker1"
argument_list|,
literal|"broker2"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Verify that broker1 and broker2's test queues have no memory usage.
name|ActiveMQDestination
name|testQueue
init|=
name|createDestination
argument_list|(
name|AMQ4147Test
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".queue"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|broker1TestQueue
init|=
name|broker1
operator|.
name|getDestination
argument_list|(
name|testQueue
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|broker2TestQueue
init|=
name|broker2
operator|.
name|getDestination
argument_list|(
name|testQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Produce a message to broker1's test queue and verify that broker1's
comment|// memory usage has increased, but broker2 still has no memory usage.
name|sendMessages
argument_list|(
literal|"broker1"
argument_list|,
name|testQueue
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a consumer on broker2 that is synchronized to allow detection
comment|// of "in flight" messages to the consumer.
name|MessageIdList
name|broker2Messages
init|=
name|getBrokerMessages
argument_list|(
literal|"broker2"
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|consumerReady
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|consumerProceed
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|broker2Messages
operator|.
name|setParent
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|consumerReady
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
block|{
name|consumerProceed
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"broker2"
argument_list|,
name|testQueue
argument_list|)
expr_stmt|;
comment|// Verify that when broker2's consumer receives the message, the memory
comment|// usage has moved broker1 to broker2.
name|consumerReady
operator|.
name|acquire
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
literal|"Memory Usage Should be Zero: "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Consume the message and verify that there is no more memory
comment|// usage.
name|consumerProceed
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
comment|// Pause to allow ACK to be processed.
name|assertTrue
argument_list|(
literal|"Memory Usage Should be Zero: "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker1TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Memory Usage Should be Zero: "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker2TestQueue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

