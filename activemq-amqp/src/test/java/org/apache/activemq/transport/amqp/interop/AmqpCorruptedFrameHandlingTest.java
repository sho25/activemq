begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|interop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClientTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test that broker closes connection and allows a new one when the transport  * receives a bad chunk of data after a successful connect.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpCorruptedFrameHandlingTest
extends|extends
name|AmqpClientTestSupport
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getAdditionalConfig
parameter_list|()
block|{
return|return
literal|"?transport.wireFormat.maxFrameSize=65535"
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testHandlingCorruptedFramePayload
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|client
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setContainerId
argument_list|(
literal|"ClientID:"
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send frame with valid size prefix, but corrupted payload.
name|byte
index|[]
name|corruptedFrame
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|corruptedFrame
argument_list|)
expr_stmt|;
name|corruptedFrame
index|[
literal|0
index|]
operator|=
literal|0x0
expr_stmt|;
name|corruptedFrame
index|[
literal|1
index|]
operator|=
literal|0x0
expr_stmt|;
name|corruptedFrame
index|[
literal|2
index|]
operator|=
literal|0x4
expr_stmt|;
name|corruptedFrame
index|[
literal|3
index|]
operator|=
literal|0x0
expr_stmt|;
name|connection
operator|.
name|sendRawBytes
argument_list|(
name|corruptedFrame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connection should have dropped."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Should be able to recycle the client ID now.
name|connection
operator|=
name|client
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setContainerId
argument_list|(
literal|"ClientID:"
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testHandleFrameWithNegativeSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|client
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setContainerId
argument_list|(
literal|"ClientID:"
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send frame with valid size prefix, but corrupted payload.
name|byte
index|[]
name|corruptedFrame
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|corruptedFrame
argument_list|)
expr_stmt|;
name|corruptedFrame
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
literal|0xFF
expr_stmt|;
name|corruptedFrame
index|[
literal|1
index|]
operator|=
literal|0x0
expr_stmt|;
name|corruptedFrame
index|[
literal|2
index|]
operator|=
literal|0x4
expr_stmt|;
name|corruptedFrame
index|[
literal|3
index|]
operator|=
literal|0x0
expr_stmt|;
name|connection
operator|.
name|sendRawBytes
argument_list|(
name|corruptedFrame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connection should have dropped."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Should be able to recycle the client ID now.
name|connection
operator|=
name|client
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setContainerId
argument_list|(
literal|"ClientID:"
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testHandleFrameSizeExceedsMaxFrameSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|setSeed
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|client
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setContainerId
argument_list|(
literal|"ClientID:"
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send frame with valid size prefix, but corrupted payload.
name|byte
index|[]
name|corruptedFrame
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|corruptedFrame
argument_list|)
expr_stmt|;
name|corruptedFrame
index|[
literal|0
index|]
operator|=
literal|0x0
expr_stmt|;
name|corruptedFrame
index|[
literal|1
index|]
operator|=
literal|0x7F
expr_stmt|;
name|corruptedFrame
index|[
literal|2
index|]
operator|=
literal|0x7F
expr_stmt|;
name|corruptedFrame
index|[
literal|3
index|]
operator|=
literal|0x7F
expr_stmt|;
name|connection
operator|.
name|sendRawBytes
argument_list|(
name|corruptedFrame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connection should have dropped."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Should be able to recycle the client ID now.
name|connection
operator|=
name|client
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setContainerId
argument_list|(
literal|"ClientID:"
operator|+
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

