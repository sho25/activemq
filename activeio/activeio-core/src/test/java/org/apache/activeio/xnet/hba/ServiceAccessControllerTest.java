begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|hba
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|ServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|hba
operator|.
name|IPAddressPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|hba
operator|.
name|IPAddressPermissionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|hba
operator|.
name|ServiceAccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|ServiceAccessControllerTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testWrongExactIPAddressPermission1
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.123.a"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testWrongExactIPAddressPermission2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.123.256"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testExactIPAddressPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
name|permission
init|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.123.124"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
literal|124
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
literal|125
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWrongStartWithIPAddressPermission1
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.0.123.0"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testStartWithIPAddressPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
name|permission
init|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.0.0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
literal|124
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|123
block|,
literal|123
block|,
literal|124
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFactorizedIPAddressPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
name|permission
init|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.123.{1,2,3}"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
literal|4
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|permission
operator|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.{1,2,3}"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|4
block|,
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNetmaskIPAddressPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
name|permission
init|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.123.254/31"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
operator|(
name|byte
operator|)
literal|254
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
operator|(
name|byte
operator|)
literal|255
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
operator|(
name|byte
operator|)
literal|253
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|permission
operator|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.123.254/255.255.255.254"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
operator|(
name|byte
operator|)
literal|254
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
operator|(
name|byte
operator|)
literal|255
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|123
block|,
operator|(
name|byte
operator|)
literal|253
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExactIPv6AddressPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
name|permission
init|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"101:102:103:104:105:106:107:108"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
literal|1
block|,
literal|8
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
literal|1
block|,
literal|9
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNetmaskIPv6AddressPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
name|permission
init|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"101:102:103:104:105:106:107:FFFE/127"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
operator|(
name|byte
operator|)
literal|255
block|,
operator|(
name|byte
operator|)
literal|254
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
operator|(
name|byte
operator|)
literal|255
block|,
operator|(
name|byte
operator|)
literal|255
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
operator|(
name|byte
operator|)
literal|255
block|,
operator|(
name|byte
operator|)
literal|253
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|permission
operator|=
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"101:102:103:104:105:106:107:FFFE/FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
operator|(
name|byte
operator|)
literal|255
block|,
operator|(
name|byte
operator|)
literal|254
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
operator|(
name|byte
operator|)
literal|255
block|,
operator|(
name|byte
operator|)
literal|255
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permission
operator|.
name|implies
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|1
block|,
literal|6
block|,
literal|1
block|,
literal|7
block|,
operator|(
name|byte
operator|)
literal|255
block|,
operator|(
name|byte
operator|)
literal|253
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testServiceOKWithConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
index|[]
name|masks
init|=
operator|new
name|IPAddressPermission
index|[]
block|{
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.{56,57}"
argument_list|)
block|}
decl_stmt|;
name|MockServerService
name|mockServerService
init|=
operator|new
name|MockServerService
argument_list|()
decl_stmt|;
name|ServiceAccessController
name|controller
init|=
operator|new
name|ServiceAccessController
argument_list|(
literal|null
argument_list|,
name|mockServerService
argument_list|,
name|masks
argument_list|)
decl_stmt|;
name|executeTestServiceOK
argument_list|(
name|mockServerService
argument_list|,
name|controller
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testServiceNOK
parameter_list|()
throws|throws
name|Exception
block|{
name|IPAddressPermission
index|[]
name|masks
init|=
operator|new
name|IPAddressPermission
index|[]
block|{
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
literal|"121.122.{56,57}"
argument_list|)
block|}
decl_stmt|;
name|MockServerService
name|mockServerService
init|=
operator|new
name|MockServerService
argument_list|()
decl_stmt|;
name|ServiceAccessController
name|controller
init|=
operator|new
name|ServiceAccessController
argument_list|(
literal|null
argument_list|,
name|mockServerService
argument_list|,
name|masks
argument_list|)
decl_stmt|;
name|executeTestServiceNOK
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testServiceOKWithInit
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"only_from"
argument_list|,
literal|"121.122.{56,57}"
argument_list|)
expr_stmt|;
name|MockServerService
name|mockServerService
init|=
operator|new
name|MockServerService
argument_list|()
decl_stmt|;
name|ServiceAccessController
name|controller
init|=
operator|new
name|ServiceAccessController
argument_list|(
name|mockServerService
argument_list|)
decl_stmt|;
name|controller
operator|.
name|init
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|executeTestServiceOK
argument_list|(
name|mockServerService
argument_list|,
name|controller
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testServiceNOKWithInit
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"only_from"
argument_list|,
literal|"121.122.{56,57}"
argument_list|)
expr_stmt|;
name|MockServerService
name|mockServerService
init|=
operator|new
name|MockServerService
argument_list|()
decl_stmt|;
name|ServiceAccessController
name|controller
init|=
operator|new
name|ServiceAccessController
argument_list|(
name|mockServerService
argument_list|)
decl_stmt|;
name|controller
operator|.
name|init
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|executeTestServiceOK
argument_list|(
name|mockServerService
argument_list|,
name|controller
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeTestServiceOK
parameter_list|(
name|MockServerService
name|mockServerService
parameter_list|,
name|ServiceAccessController
name|controller
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|ServiceException
throws|,
name|IOException
block|{
name|MockSocket
name|mockSocket
init|=
operator|new
name|MockSocket
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|56
block|,
literal|123
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|controller
operator|.
name|service
argument_list|(
name|mockSocket
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|mockSocket
argument_list|,
name|mockServerService
operator|.
name|socket
argument_list|)
expr_stmt|;
name|mockSocket
operator|=
operator|new
name|MockSocket
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|57
block|,
literal|123
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|controller
operator|.
name|service
argument_list|(
name|mockSocket
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|mockSocket
argument_list|,
name|mockServerService
operator|.
name|socket
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeTestServiceNOK
parameter_list|(
name|ServiceAccessController
name|controller
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|ServiceException
throws|,
name|IOException
block|{
name|MockSocket
name|mockSocket
init|=
operator|new
name|MockSocket
argument_list|(
name|InetAddress
operator|.
name|getByAddress
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|121
block|,
literal|122
block|,
literal|58
block|,
literal|123
block|}
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|controller
operator|.
name|service
argument_list|(
name|mockSocket
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{         }
block|}
specifier|private
specifier|static
class|class
name|MockSocket
extends|extends
name|Socket
block|{
specifier|private
specifier|final
name|InetAddress
name|address
decl_stmt|;
specifier|private
name|MockSocket
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
specifier|public
name|InetAddress
name|getInetAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MockServerService
implements|implements
name|ServerService
block|{
specifier|private
name|Socket
name|socket
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|ServiceException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|ServiceException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|public
name|String
name|getIP
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
specifier|public
name|void
name|service
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|IOException
block|{
name|this
operator|.
name|socket
operator|=
name|socket
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

