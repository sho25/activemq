begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagedRegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|LocalBrokerFacadeTest
block|{
annotation|@
name|Mock
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|BrokerView
name|brokerView
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Queue
name|queue
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Queue
name|otherQueue
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ManagedRegionBroker
name|managedRegionBroker
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Region
name|region
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ActiveMQDestination
name|destination
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPurgeQueueWorksForSimpleQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalBrokerFacade
name|facade
init|=
operator|new
name|LocalBrokerFacade
argument_list|(
name|brokerService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|brokerService
operator|.
name|getAdminView
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|brokerView
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|brokerView
operator|.
name|getBroker
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|managedRegionBroker
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|managedRegionBroker
operator|.
name|getQueueRegion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getDestinations
argument_list|(
name|destination
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newHashSet
argument_list|(
operator|(
name|Destination
operator|)
name|queue
argument_list|)
argument_list|)
expr_stmt|;
name|facade
operator|.
name|purgeQueue
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|queue
argument_list|)
operator|.
name|purge
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeQueueWorksForMultipleDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|Queue
name|queue1
init|=
name|mock
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
decl_stmt|;
name|Queue
name|queue2
init|=
name|mock
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalBrokerFacade
name|facade
init|=
operator|new
name|LocalBrokerFacade
argument_list|(
name|brokerService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|brokerService
operator|.
name|getAdminView
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|brokerView
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|brokerView
operator|.
name|getBroker
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|managedRegionBroker
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|managedRegionBroker
operator|.
name|getQueueRegion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getDestinations
argument_list|(
name|destination
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newHashSet
argument_list|(
operator|(
name|Destination
operator|)
name|queue1
argument_list|,
name|queue2
argument_list|)
argument_list|)
expr_stmt|;
name|facade
operator|.
name|purgeQueue
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|queue1
argument_list|)
operator|.
name|purge
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|queue2
argument_list|)
operator|.
name|purge
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeQueueWorksForFilterWrappedQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalBrokerFacade
name|facade
init|=
operator|new
name|LocalBrokerFacade
argument_list|(
name|brokerService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|brokerService
operator|.
name|getAdminView
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|brokerView
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|brokerView
operator|.
name|getBroker
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|managedRegionBroker
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|managedRegionBroker
operator|.
name|getQueueRegion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getDestinations
argument_list|(
name|destination
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newHashSet
argument_list|(
operator|(
name|Destination
operator|)
operator|new
name|DestinationFilter
argument_list|(
name|queue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|facade
operator|.
name|purgeQueue
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|queue
argument_list|)
operator|.
name|purge
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeQueueWorksForMultipleFiltersWrappingAQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalBrokerFacade
name|facade
init|=
operator|new
name|LocalBrokerFacade
argument_list|(
name|brokerService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|brokerService
operator|.
name|getAdminView
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|brokerView
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|brokerView
operator|.
name|getBroker
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|managedRegionBroker
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|managedRegionBroker
operator|.
name|getQueueRegion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getDestinations
argument_list|(
name|destination
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newHashSet
argument_list|(
operator|(
name|Destination
operator|)
operator|new
name|DestinationFilter
argument_list|(
operator|new
name|DestinationFilter
argument_list|(
name|queue
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|facade
operator|.
name|purgeQueue
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|queue
argument_list|)
operator|.
name|purge
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

