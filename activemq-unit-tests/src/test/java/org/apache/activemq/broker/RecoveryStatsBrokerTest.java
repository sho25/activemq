begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStoreStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
operator|.
name|JournalDiskSyncStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RecoveryStatsBrokerTest
extends|extends
name|BrokerRestartTestSupport
block|{
specifier|private
name|RestartType
name|restartType
decl_stmt|;
enum|enum
name|RestartType
block|{
name|NORMAL
block|,
name|FULL_RECOVERY
block|,
name|UNCLEAN_SHUTDOWN
block|}
annotation|@
name|Override
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|KahaDBPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|persistenceAdapter
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
comment|//persistenceAdapter.setConcurrentStoreAndDispatchQueues(false);
name|persistenceAdapter
operator|.
name|setDirectory
argument_list|(
name|broker
operator|.
name|getBrokerDataDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|restartBroker
parameter_list|(
name|RestartType
name|restartType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|restartType
operator|==
name|RestartType
operator|.
name|FULL_RECOVERY
condition|)
block|{
name|stopBroker
argument_list|()
expr_stmt|;
name|KahaDBPersistenceAdapter
name|kahaDBPersistenceAdapter
init|=
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
name|File
name|dir
init|=
name|kahaDBPersistenceAdapter
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"db.data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|restartType
operator|==
name|RestartType
operator|.
name|UNCLEAN_SHUTDOWN
condition|)
block|{
comment|//Simulate an unclean  shutdown
name|File
name|dir
init|=
name|broker
operator|.
name|getBrokerDataDirectory
argument_list|()
decl_stmt|;
name|File
name|backUpDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"bk"
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"bk"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|IOHelper
operator|.
name|copyFile
argument_list|(
name|f
argument_list|,
operator|new
name|File
argument_list|(
name|backUpDir
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|stopBroker
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|backUpDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|IOHelper
operator|.
name|copyFile
argument_list|(
name|f
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|restartBroker
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getTestParameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|RestartType
operator|.
name|NORMAL
block|}
block|,
block|{
name|RestartType
operator|.
name|FULL_RECOVERY
block|}
block|,
block|{
name|RestartType
operator|.
name|UNCLEAN_SHUTDOWN
block|}
block|,         }
argument_list|)
return|;
block|}
specifier|public
name|RecoveryStatsBrokerTest
parameter_list|(
name|RestartType
name|restartType
parameter_list|)
block|{
name|this
operator|.
name|restartType
operator|=
name|restartType
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testStaticsRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ActiveMQDestination
argument_list|>
name|destinations
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.A"
argument_list|)
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.B"
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Integer
argument_list|>
name|consumedMessages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|destinations
operator|.
name|forEach
argument_list|(
name|destination
lambda|->
name|consumedMessages
operator|.
name|put
argument_list|(
name|destination
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numberOfMessages
init|=
literal|400
decl_stmt|;
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|destinations
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setProducerId
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|MessageStoreStatistics
argument_list|>
name|originalStatistics
init|=
name|getCurrentStatistics
argument_list|(
name|destinations
argument_list|)
decl_stmt|;
name|checkStatistics
argument_list|(
name|destinations
argument_list|,
name|originalStatistics
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|restartType
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|destinations
argument_list|,
name|originalStatistics
argument_list|)
expr_stmt|;
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|destinations
control|)
block|{
name|consume
argument_list|(
name|destination
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|checkStatistics
argument_list|(
name|destinations
argument_list|,
name|originalStatistics
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|restartType
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|destinations
argument_list|,
name|originalStatistics
argument_list|)
expr_stmt|;
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|destinations
control|)
block|{
name|int
name|messagesToConsume
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|numberOfMessages
argument_list|)
decl_stmt|;
name|consume
argument_list|(
name|destination
argument_list|,
name|messagesToConsume
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|consumedMessages
operator|.
name|compute
argument_list|(
name|destination
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|value
operator|=
name|value
operator|+
name|messagesToConsume
argument_list|)
expr_stmt|;
block|}
name|originalStatistics
operator|=
name|getCurrentStatistics
argument_list|(
name|destinations
argument_list|)
expr_stmt|;
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|destinations
control|)
block|{
name|int
name|consumedCount
init|=
name|consumedMessages
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|numberOfMessages
operator|-
name|consumedCount
argument_list|,
name|originalStatistics
operator|.
name|get
argument_list|(
name|destination
argument_list|)
operator|.
name|getMessageCount
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkStatistics
argument_list|(
name|destinations
argument_list|,
name|originalStatistics
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|restartType
argument_list|)
expr_stmt|;
name|checkStatistics
argument_list|(
name|destinations
argument_list|,
name|originalStatistics
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|MessageStoreStatistics
argument_list|>
name|getCurrentStatistics
parameter_list|(
specifier|final
name|List
argument_list|<
name|ActiveMQDestination
argument_list|>
name|destinations
parameter_list|)
block|{
return|return
name|destinations
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|destination
lambda|->
name|getDestination
argument_list|(
name|broker
argument_list|,
name|destination
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|destination
lambda|->
operator|new
name|ActiveMQQueue
argument_list|(
name|destination
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|destination2
lambda|->
name|destination2
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageStoreStatistics
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|consume
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|,
name|int
name|numberOfMessages
parameter_list|,
name|boolean
name|shouldAck
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Setup the consumer and receive the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// The we should get the messages.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m2
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m2
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldAck
condition|)
block|{
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m2
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkStatistics
parameter_list|(
specifier|final
name|List
argument_list|<
name|ActiveMQDestination
argument_list|>
name|destinations
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|MessageStoreStatistics
argument_list|>
name|originalStatistics
parameter_list|)
block|{
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|destinations
control|)
block|{
name|MessageStoreStatistics
name|original
init|=
name|originalStatistics
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageStoreStatistics
name|actual
init|=
name|getDestination
argument_list|(
name|broker
argument_list|,
name|destination
argument_list|)
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageStoreStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Have Same Count"
argument_list|,
name|original
operator|.
name|getMessageCount
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|actual
operator|.
name|getMessageCount
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Have Same TotalSize"
argument_list|,
name|original
operator|.
name|getMessageSize
argument_list|()
operator|.
name|getTotalSize
argument_list|()
argument_list|,
name|getDestination
argument_list|(
name|broker
argument_list|,
name|destination
argument_list|)
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageStoreStatistics
argument_list|()
operator|.
name|getMessageSize
argument_list|()
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Destination
name|getDestination
parameter_list|(
name|BrokerService
name|target
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|target
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return
name|destination
operator|.
name|isQueue
argument_list|()
condition|?
name|regionBroker
operator|.
name|getTempQueueRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|destination
argument_list|)
else|:
name|regionBroker
operator|.
name|getTempTopicRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|destination
argument_list|)
return|;
block|}
return|return
name|destination
operator|.
name|isQueue
argument_list|()
condition|?
name|regionBroker
operator|.
name|getQueueRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|destination
argument_list|)
else|:
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|destination
argument_list|)
return|;
block|}
block|}
end_class

end_unit

