begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SelectionKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteBufferPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|nio
operator|.
name|NIOAsyncChannelSelectorManager
operator|.
name|SelectorManagerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|nio
operator|.
name|NIOAsyncChannelSelectorManager
operator|.
name|SocketChannelAsyncChannelSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|nio
operator|.
name|NIOBaseChannel
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|NIOAsyncChannel
extends|extends
name|NIOBaseChannel
implements|implements
name|AsyncChannel
block|{
specifier|private
name|AsyncChannelListener
name|channelListener
decl_stmt|;
specifier|private
name|SocketChannelAsyncChannelSelection
name|selection
decl_stmt|;
specifier|private
name|ByteBuffer
name|inputByteBuffer
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|public
name|NIOAsyncChannel
parameter_list|(
name|SocketChannel
name|socketChannel
parameter_list|,
name|boolean
name|useDirect
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|socketChannel
argument_list|,
name|useDirect
argument_list|)
expr_stmt|;
name|socketChannel
operator|.
name|configureBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|selection
operator|=
name|NIOAsyncChannelSelectorManager
operator|.
name|register
argument_list|(
name|socketChannel
argument_list|,
operator|new
name|SelectorManagerListener
argument_list|()
block|{
specifier|public
name|void
name|onSelect
parameter_list|(
name|SocketChannelAsyncChannelSelection
name|selection
parameter_list|)
block|{
name|String
name|origName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|selection
operator|.
name|isReadable
argument_list|()
condition|)
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|NIOAsyncChannel
operator|.
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|serviceRead
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ActiveIO unexpected error: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|origName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|serviceRead
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|inputByteBuffer
operator|==
literal|null
operator|||
operator|!
name|inputByteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|inputByteBuffer
operator|=
name|allocateBuffer
argument_list|()
expr_stmt|;
block|}
name|int
name|size
init|=
name|socketChannel
operator|.
name|read
argument_list|(
name|inputByteBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|channelListener
operator|.
name|onPacket
argument_list|(
name|EOSPacket
operator|.
name|EOS_PACKET
argument_list|)
expr_stmt|;
name|selection
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
break|break;
block|}
comment|// Per Mike Spile, some plaforms read 1 byte of data on the first read, and then
comment|// a but load of data on the second read.  Try to load the butload here
if|if
condition|(
name|size
operator|==
literal|1
operator|&&
name|inputByteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|size2
init|=
name|socketChannel
operator|.
name|read
argument_list|(
name|inputByteBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|size2
operator|>
literal|0
condition|)
name|size
operator|+=
name|size2
expr_stmt|;
block|}
name|ByteBuffer
name|remaining
init|=
name|inputByteBuffer
operator|.
name|slice
argument_list|()
decl_stmt|;
name|Packet
name|data
init|=
operator|new
name|ByteBufferPacket
argument_list|(
operator|(
operator|(
name|ByteBuffer
operator|)
name|inputByteBuffer
operator|.
name|flip
argument_list|()
operator|)
operator|.
name|slice
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|channelListener
operator|.
name|onPacket
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Keep the remaining buffer around to fill with data.
name|inputByteBuffer
operator|=
name|remaining
expr_stmt|;
if|if
condition|(
name|inputByteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|channelListener
operator|.
name|onPacketError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|data
decl_stmt|;
if|if
condition|(
name|packet
operator|.
name|getClass
argument_list|()
operator|==
name|ByteBufferPacket
operator|.
name|class
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|ByteBufferPacket
operator|)
name|packet
operator|)
operator|.
name|getByteBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ByteSequence
name|sequence
init|=
name|packet
operator|.
name|asByteSequence
argument_list|()
decl_stmt|;
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|delay
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|data
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
comment|// Since the write is non-blocking, all the data may not have been written.
name|int
name|r1
init|=
name|data
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|socketChannel
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|int
name|r2
init|=
name|data
operator|.
name|remaining
argument_list|()
decl_stmt|;
comment|// We may need to do a little bit of sleeping to avoid a busy loop.
comment|// Slow down if no data was written out..
if|if
condition|(
name|r2
operator|>
literal|0
operator|&&
name|r1
operator|-
name|r2
operator|==
literal|0
condition|)
block|{
try|try
block|{
comment|// Use exponential rollback to increase sleep time.
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|delay
operator|*=
literal|5
expr_stmt|;
if|if
condition|(
name|delay
operator|>
literal|1000
operator|*
literal|1
condition|)
block|{
name|delay
operator|=
literal|1000
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|delay
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{     }
specifier|public
name|void
name|setAsyncChannelListener
parameter_list|(
name|AsyncChannelListener
name|channelListener
parameter_list|)
block|{
name|this
operator|.
name|channelListener
operator|=
name|channelListener
expr_stmt|;
block|}
specifier|public
name|AsyncChannelListener
name|getAsyncChannelListener
parameter_list|()
block|{
return|return
name|channelListener
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|running
operator|&&
name|channelListener
operator|!=
literal|null
condition|)
block|{
name|channelListener
operator|.
name|onPacketError
argument_list|(
operator|new
name|SocketException
argument_list|(
literal|"Socket closed."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|selection
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|running
condition|)
return|return;
name|running
operator|=
literal|true
expr_stmt|;
name|selection
operator|.
name|setInterestOps
argument_list|(
name|SelectionKey
operator|.
name|OP_READ
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|running
condition|)
return|return;
name|running
operator|=
literal|false
expr_stmt|;
name|selection
operator|.
name|setInterestOps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

