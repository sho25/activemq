begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|encryption
operator|.
name|pbe
operator|.
name|StandardPBEStringEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|encryption
operator|.
name|pbe
operator|.
name|config
operator|.
name|EnvironmentStringPBEConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|properties
operator|.
name|EncryptableProperties
import|;
end_import

begin_comment
comment|/**  * LDAPLoginModule that supports encryption  */
end_comment

begin_class
specifier|public
class|class
name|EncryptableLDAPLoginModule
extends|extends
name|LDAPLoginModule
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ENCRYPTION_PASSWORD
init|=
literal|"encryptionPassword"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD_ENV_NAME
init|=
literal|"passwordEnvName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD_ALGORITHM
init|=
literal|"encryptionAlgorithm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PASSWORD_ENV_NAME
init|=
literal|"ACTIVEMQ_ENCRYPTION_PASSWORD"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PASSWORD_ALGORITHM
init|=
literal|"PBEWithMD5AndDES"
decl_stmt|;
specifier|private
specifier|final
name|StandardPBEStringEncryptor
name|configurationEncryptor
init|=
operator|new
name|StandardPBEStringEncryptor
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
name|sharedState
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|String
name|encryptionPassword
init|=
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
name|ENCRYPTION_PASSWORD
argument_list|)
decl_stmt|;
name|String
name|passwordEnvName
init|=
name|options
operator|.
name|get
argument_list|(
name|PASSWORD_ENV_NAME
argument_list|)
operator|!=
literal|null
condition|?
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
name|PASSWORD_ENV_NAME
argument_list|)
else|:
name|DEFAULT_PASSWORD_ENV_NAME
decl_stmt|;
name|String
name|passwordAlgorithm
init|=
name|options
operator|.
name|get
argument_list|(
name|PASSWORD_ALGORITHM
argument_list|)
operator|!=
literal|null
condition|?
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
name|PASSWORD_ALGORITHM
argument_list|)
else|:
name|DEFAULT_PASSWORD_ALGORITHM
decl_stmt|;
name|EnvironmentStringPBEConfig
name|envConfig
init|=
operator|new
name|EnvironmentStringPBEConfig
argument_list|()
decl_stmt|;
name|envConfig
operator|.
name|setAlgorithm
argument_list|(
name|passwordAlgorithm
argument_list|)
expr_stmt|;
comment|//If the password was set, use it
comment|//else look up the password from the environment
if|if
condition|(
name|encryptionPassword
operator|==
literal|null
condition|)
block|{
name|envConfig
operator|.
name|setPasswordEnvName
argument_list|(
name|passwordEnvName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|envConfig
operator|.
name|setPassword
argument_list|(
name|encryptionPassword
argument_list|)
expr_stmt|;
block|}
name|configurationEncryptor
operator|.
name|setConfig
argument_list|(
name|envConfig
argument_list|)
expr_stmt|;
name|EncryptableProperties
name|encryptableOptions
init|=
operator|new
name|EncryptableProperties
argument_list|(
name|configurationEncryptor
argument_list|)
decl_stmt|;
name|encryptableOptions
operator|.
name|putAll
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|super
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|callbackHandler
argument_list|,
name|sharedState
argument_list|,
name|encryptableOptions
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

