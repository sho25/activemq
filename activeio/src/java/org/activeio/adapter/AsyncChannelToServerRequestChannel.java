begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Hiram Chirino  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AsyncChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|RequestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|RequestListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_comment
comment|/**  * Creates a {@see org.activeio.RequestChannel} out of a {@see org.activeio.AsyncChannel}.  * Does not support sending requests.  It can only be used to handle requests.    *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|AsyncChannelToServerRequestChannel
implements|implements
name|RequestChannel
implements|,
name|AsyncChannelListener
block|{
specifier|private
specifier|final
name|AsyncChannel
name|next
decl_stmt|;
specifier|private
name|RequestListener
name|requestListener
decl_stmt|;
specifier|public
name|AsyncChannelToServerRequestChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|.
name|setAsyncChannelListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Packet
name|request
parameter_list|(
name|Packet
name|request
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Operation not supported."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setRequestListener
parameter_list|(
name|RequestListener
name|requestListener
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|requestListener
operator|=
name|requestListener
expr_stmt|;
block|}
specifier|public
name|RequestListener
name|getRequestListener
parameter_list|()
block|{
return|return
name|requestListener
return|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
return|return
name|next
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|next
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|next
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|next
operator|.
name|stop
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
if|if
condition|(
name|packet
operator|==
name|EOSPacket
operator|.
name|EOS_PACKET
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Packet
name|response
init|=
name|requestListener
operator|.
name|onRequest
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|next
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|next
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|requestListener
operator|.
name|onRquestError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onPacketError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|requestListener
operator|.
name|onRquestError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

