begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_comment
comment|/**  * Broker manager for use with Maven; uses the original singleton to track the broker instance.  */
end_comment

begin_class
specifier|public
class|class
name|MavenBrokerSingletonManager
implements|implements
name|MavenBrokerManager
block|{
specifier|public
name|void
name|start
parameter_list|(
name|boolean
name|fork
parameter_list|,
name|String
name|configUri
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|Broker
operator|.
name|start
argument_list|(
name|fork
argument_list|,
name|configUri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|Broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Wait for a shutdown invocation elsewhere      *      * @throws Exception      */
specifier|protected
name|void
name|waitForShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|Broker
operator|.
name|waitForShutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Return the broker service created.      */
specifier|public
name|BrokerService
name|getBroker
parameter_list|()
block|{
return|return
name|Broker
operator|.
name|getBroker
argument_list|()
return|;
block|}
comment|/**      * Override the default creation of the broker service.  Primarily added for testing purposes.      *      * @param broker      */
specifier|public
name|void
name|setBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|Broker
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

