begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
operator|.
name|JmsConsumerProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
operator|.
name|JmsClientProperties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
specifier|public
class|class
name|JmsConsumerClient
extends|extends
name|AbstractJmsMeasurableClient
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JmsConsumerClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|MessageConsumer
name|jmsConsumer
decl_stmt|;
specifier|protected
name|JmsConsumerProperties
name|client
decl_stmt|;
specifier|public
name|JmsConsumerClient
parameter_list|(
name|ConnectionFactory
name|factory
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|JmsConsumerProperties
argument_list|()
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JmsConsumerClient
parameter_list|(
name|JmsConsumerProperties
name|clientProps
parameter_list|,
name|ConnectionFactory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|client
operator|=
name|clientProps
expr_stmt|;
block|}
specifier|public
name|void
name|receiveMessages
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|client
operator|.
name|isAsyncRecv
argument_list|()
condition|)
block|{
if|if
condition|(
name|client
operator|.
name|getRecvType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|JmsConsumerProperties
operator|.
name|TIME_BASED_RECEIVING
argument_list|)
condition|)
block|{
name|receiveAsyncTimeBasedMessages
argument_list|(
name|client
operator|.
name|getRecvDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiveAsyncCountBasedMessages
argument_list|(
name|client
operator|.
name|getRecvCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|client
operator|.
name|getRecvType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|JmsConsumerProperties
operator|.
name|TIME_BASED_RECEIVING
argument_list|)
condition|)
block|{
name|receiveSyncTimeBasedMessages
argument_list|(
name|client
operator|.
name|getRecvDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiveSyncCountBasedMessages
argument_list|(
name|client
operator|.
name|getRecvCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|receiveMessages
parameter_list|(
name|int
name|destCount
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|destCount
operator|=
name|destCount
expr_stmt|;
name|receiveMessages
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|receiveMessages
parameter_list|(
name|int
name|destIndex
parameter_list|,
name|int
name|destCount
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|destIndex
operator|=
name|destIndex
expr_stmt|;
name|receiveMessages
argument_list|(
name|destCount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|receiveSyncTimeBasedMessages
parameter_list|(
name|long
name|duration
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getJmsConsumer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|createJmsConsumer
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting to synchronously receive messages for "
operator|+
name|duration
operator|+
literal|" ms..."
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|getJmsConsumer
argument_list|()
operator|.
name|receive
argument_list|()
expr_stmt|;
name|incThroughput
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|.
name|isDurable
argument_list|()
operator|&&
name|client
operator|.
name|isUnsubscribe
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unsubscribing durable subscriber: "
operator|+
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|getJmsConsumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|unsubscribe
argument_list|(
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|receiveSyncCountBasedMessages
parameter_list|(
name|long
name|count
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getJmsConsumer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|createJmsConsumer
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting to synchronously receive "
operator|+
name|count
operator|+
literal|" messages..."
argument_list|)
expr_stmt|;
name|int
name|recvCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|recvCount
operator|<
name|count
condition|)
block|{
name|getJmsConsumer
argument_list|()
operator|.
name|receive
argument_list|()
expr_stmt|;
name|incThroughput
argument_list|()
expr_stmt|;
name|recvCount
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|.
name|isDurable
argument_list|()
operator|&&
name|client
operator|.
name|isUnsubscribe
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unsubscribing durable subscriber: "
operator|+
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|getJmsConsumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|unsubscribe
argument_list|(
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|receiveAsyncTimeBasedMessages
parameter_list|(
name|long
name|duration
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getJmsConsumer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|createJmsConsumer
argument_list|()
expr_stmt|;
block|}
name|getJmsConsumer
argument_list|()
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|incThroughput
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting to asynchronously receive messages for "
operator|+
name|duration
operator|+
literal|" ms..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"JMS consumer thread sleep has been interrupted. Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|.
name|isDurable
argument_list|()
operator|&&
name|client
operator|.
name|isUnsubscribe
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unsubscribing durable subscriber: "
operator|+
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|getJmsConsumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|unsubscribe
argument_list|(
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|receiveAsyncCountBasedMessages
parameter_list|(
name|long
name|count
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getJmsConsumer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|createJmsConsumer
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AtomicInteger
name|recvCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|getJmsConsumer
argument_list|()
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|incThroughput
argument_list|()
expr_stmt|;
name|recvCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|recvCount
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting to asynchronously receive "
operator|+
name|client
operator|.
name|getRecvCount
argument_list|()
operator|+
literal|" messages..."
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|recvCount
operator|.
name|get
argument_list|()
operator|<
name|count
condition|)
block|{
name|recvCount
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"JMS consumer thread wait has been interrupted. Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|.
name|isDurable
argument_list|()
operator|&&
name|client
operator|.
name|isUnsubscribe
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unsubscribing durable subscriber: "
operator|+
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|getJmsConsumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|getSession
argument_list|()
operator|.
name|unsubscribe
argument_list|(
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|MessageConsumer
name|createJmsConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|Destination
index|[]
name|dest
init|=
name|createDestination
argument_list|(
name|destIndex
argument_list|,
name|destCount
argument_list|)
decl_stmt|;
return|return
name|createJmsConsumer
argument_list|(
name|dest
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|MessageConsumer
name|createJmsConsumer
parameter_list|(
name|Destination
name|dest
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|client
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|String
name|clientName
init|=
name|getClientName
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientName
operator|==
literal|null
condition|)
block|{
name|clientName
operator|=
literal|"JmsConsumer"
expr_stmt|;
name|setClientName
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Creating durable subscriber ("
operator|+
name|clientName
operator|+
literal|") to: "
operator|+
name|dest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|dest
argument_list|,
name|clientName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating non-durable consumer to: "
operator|+
name|dest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
return|return
name|jmsConsumer
return|;
block|}
specifier|public
name|MessageConsumer
name|createJmsConsumer
parameter_list|(
name|Destination
name|dest
parameter_list|,
name|String
name|selector
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|client
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|String
name|clientName
init|=
name|getClientName
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientName
operator|==
literal|null
condition|)
block|{
name|clientName
operator|=
literal|"JmsConsumer"
expr_stmt|;
name|setClientName
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Creating durable subscriber ("
operator|+
name|clientName
operator|+
literal|") to: "
operator|+
name|dest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|dest
argument_list|,
name|clientName
argument_list|,
name|selector
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating non-durable consumer to: "
operator|+
name|dest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|,
name|selector
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
block|}
return|return
name|jmsConsumer
return|;
block|}
specifier|public
name|MessageConsumer
name|getJmsConsumer
parameter_list|()
block|{
return|return
name|jmsConsumer
return|;
block|}
specifier|public
name|JmsClientProperties
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
specifier|public
name|void
name|setClient
parameter_list|(
name|JmsClientProperties
name|clientProps
parameter_list|)
block|{
name|client
operator|=
operator|(
name|JmsConsumerProperties
operator|)
name|clientProps
expr_stmt|;
block|}
block|}
end_class

end_unit

