begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobSchedulerStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ProxyMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ProxyTopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RedeliveryRestartWithExceptionTest
extends|extends
name|TestSupport
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RedeliveryRestartWithExceptionTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|connection
decl_stmt|;
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
name|String
name|queueName
init|=
literal|"redeliveryRestartQ"
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|configureBroker
argument_list|(
name|broker
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|,
name|boolean
name|throwExceptionOnUpdate
parameter_list|)
throws|throws
name|Exception
block|{
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setPersistJMSRedelivered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|KahaDBWithUpdateExceptionPersistenceAdapter
argument_list|(
name|throwExceptionOnUpdate
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateRedeliveryFlagAfterRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
decl_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|populateDestination
argument_list|(
literal|10
argument_list|,
name|destination
argument_list|,
name|connection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TextMessage
name|msg
init|=
literal|null
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Exception
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"not redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not receive the 5th message"
argument_list|,
name|i
operator|<
literal|4
argument_list|)
expr_stmt|;
comment|//The first 4 messages will be ok but the 5th one should hit an exception in updateMessage and should not be delivered
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//Expecting an exception and disconnect on the 5th message
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Expecting an exception when updateMessage fails"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
comment|// consume the messages that were previously delivered
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message again"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"re delivery flag"
argument_list|,
literal|true
argument_list|,
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"redelivery count survives restart"
argument_list|,
name|msg
operator|.
name|getLongProperty
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|)
operator|>
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
comment|// consume the rest that were not redeliveries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"not redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not a redelivery"
argument_list|,
literal|false
argument_list|,
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first delivery"
argument_list|,
literal|1
argument_list|,
name|msg
operator|.
name|getLongProperty
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateRedeliveryFlagAfterTransientFailureConnectionDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
decl_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|populateDestination
argument_list|(
literal|10
argument_list|,
name|destination
argument_list|,
name|connection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TextMessage
name|msg
init|=
literal|null
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Exception
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"not redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not receive the 5th message"
argument_list|,
name|i
operator|<
literal|4
argument_list|)
expr_stmt|;
comment|//The first 4 messages will be ok but the 5th one should hit an exception in updateMessage and should not be delivered
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//Expecting an exception and disconnect on the 5th message
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Expecting an exception when updateMessage fails"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
comment|// consume the messages that were previously delivered
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message again"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"re delivery flag on:"
operator|+
name|i
argument_list|,
literal|true
argument_list|,
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"redelivery count survives reconnect for:"
operator|+
name|i
argument_list|,
name|msg
operator|.
name|getLongProperty
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|)
operator|>
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
comment|// consume the rest that were not redeliveries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"not redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not a redelivery"
argument_list|,
literal|false
argument_list|,
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first delivery"
argument_list|,
literal|1
argument_list|,
name|msg
operator|.
name|getLongProperty
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testValidateRedeliveryFlagOnNonPersistentAfterTransientFailureConnectionDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
decl_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|populateDestination
argument_list|(
literal|10
argument_list|,
name|destination
argument_list|,
name|connection
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TextMessage
name|msg
init|=
literal|null
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"not redelivered"
argument_list|,
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|getTransport
argument_list|()
operator|.
name|narrow
argument_list|(
name|TcpTransport
operator|.
name|class
argument_list|)
operator|.
name|getTransportListener
argument_list|()
operator|.
name|onException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Die"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
comment|// consume the messages that were previously delivered
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message again"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"redelivery flag set on:"
operator|+
name|i
argument_list|,
literal|true
argument_list|,
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"redelivery count survives reconnect for:"
operator|+
name|i
argument_list|,
name|msg
operator|.
name|getLongProperty
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|)
operator|>
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
comment|// consume the rest that were not redeliveries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"not redelivered? got: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got the message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not a redelivery"
argument_list|,
literal|false
argument_list|,
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first delivery"
argument_list|,
literal|1
argument_list|,
name|msg
operator|.
name|getLongProperty
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|restartBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|broker
operator|=
name|createRestartedBroker
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|BrokerService
name|createRestartedBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|configureBroker
argument_list|(
name|broker
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|private
name|void
name|populateDestination
parameter_list|(
specifier|final
name|int
name|nbMessages
parameter_list|,
specifier|final
name|Destination
name|destination
parameter_list|,
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
parameter_list|,
name|boolean
name|persistent
parameter_list|)
throws|throws
name|JMSException
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|persistent
condition|?
name|DeliveryMode
operator|.
name|PERSISTENT
else|:
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|nbMessages
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"<hello id='"
operator|+
name|i
operator|+
literal|"'/>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|KahaDBWithUpdateExceptionPersistenceAdapter
implements|implements
name|PersistenceAdapter
block|{
specifier|private
name|KahaDBPersistenceAdapter
name|kahaDB
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|throwExceptionOnUpdate
decl_stmt|;
specifier|public
name|KahaDBWithUpdateExceptionPersistenceAdapter
parameter_list|(
name|boolean
name|throwExceptionOnUpdate
parameter_list|)
block|{
name|this
operator|.
name|throwExceptionOnUpdate
operator|=
name|throwExceptionOnUpdate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|kahaDB
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|kahaDB
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|getDestinations
parameter_list|()
block|{
return|return
name|kahaDB
operator|.
name|getDestinations
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageStore
name|proxyMessageStoreWithException
init|=
operator|new
name|ProxyMessageStoreWithUpdateException
argument_list|(
name|kahaDB
operator|.
name|createQueueMessageStore
argument_list|(
name|destination
argument_list|)
argument_list|,
name|throwExceptionOnUpdate
argument_list|)
decl_stmt|;
return|return
name|proxyMessageStoreWithException
return|;
block|}
annotation|@
name|Override
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|TopicMessageStore
name|proxyMessageStoreWithException
init|=
operator|new
name|ProxyTopicMessageStoreWithUpdateException
argument_list|(
name|kahaDB
operator|.
name|createTopicMessageStore
argument_list|(
name|destination
argument_list|)
argument_list|,
name|throwExceptionOnUpdate
argument_list|)
decl_stmt|;
return|return
name|proxyMessageStoreWithException
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobSchedulerStore
name|createJobSchedulerStore
parameter_list|()
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
return|return
name|kahaDB
operator|.
name|createJobSchedulerStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
block|{
name|kahaDB
operator|.
name|removeQueueMessageStore
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
block|{
name|kahaDB
operator|.
name|removeTopicMessageStore
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TransactionStore
name|createTransactionStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|kahaDB
operator|.
name|createTransactionStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|kahaDB
operator|.
name|beginTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|kahaDB
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|kahaDB
operator|.
name|rollbackTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|kahaDB
operator|.
name|getLastMessageBrokerSequenceId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|kahaDB
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUsageManager
parameter_list|(
name|SystemUsage
name|usageManager
parameter_list|)
block|{
name|kahaDB
operator|.
name|setUsageManager
argument_list|(
name|usageManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|kahaDB
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|kahaDB
operator|.
name|setDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|kahaDB
operator|.
name|getDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkpoint
parameter_list|(
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|kahaDB
operator|.
name|checkpoint
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|kahaDB
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastProducerSequenceId
parameter_list|(
name|ProducerId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|kahaDB
operator|.
name|getLastProducerSequenceId
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|ProxyMessageStoreWithUpdateException
extends|extends
name|ProxyMessageStore
block|{
specifier|private
name|boolean
name|throwExceptionOnUpdate
decl_stmt|;
specifier|private
name|int
name|numBeforeException
init|=
literal|4
decl_stmt|;
specifier|public
name|ProxyMessageStoreWithUpdateException
parameter_list|(
name|MessageStore
name|delegate
parameter_list|,
name|boolean
name|throwExceptionOnUpdate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|throwExceptionOnUpdate
operator|=
name|throwExceptionOnUpdate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|throwExceptionOnUpdate
condition|)
block|{
if|if
condition|(
name|numBeforeException
operator|>
literal|0
condition|)
block|{
name|numBeforeException
operator|--
expr_stmt|;
name|super
operator|.
name|updateMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets only do it once so we can validate transient store failure
name|throwExceptionOnUpdate
operator|=
literal|false
expr_stmt|;
comment|//A message that has never been delivered will hit this exception
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Hit our simulated exception writing the update to disk"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|updateMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|ProxyTopicMessageStoreWithUpdateException
extends|extends
name|ProxyTopicMessageStore
block|{
specifier|private
name|boolean
name|throwExceptionOnUpdate
decl_stmt|;
specifier|private
name|int
name|numBeforeException
init|=
literal|4
decl_stmt|;
specifier|public
name|ProxyTopicMessageStoreWithUpdateException
parameter_list|(
name|TopicMessageStore
name|delegate
parameter_list|,
name|boolean
name|throwExceptionOnUpdate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|throwExceptionOnUpdate
operator|=
name|throwExceptionOnUpdate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|throwExceptionOnUpdate
condition|)
block|{
if|if
condition|(
name|numBeforeException
operator|>
literal|0
condition|)
block|{
name|numBeforeException
operator|--
expr_stmt|;
name|super
operator|.
name|updateMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//A message that has never been delivered will hit this exception
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Hit our simulated exception writing the update to disk"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|updateMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

