begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ6387Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ6387Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|QUEUE_NAME
init|=
literal|"testQueue"
decl_stmt|;
specifier|private
specifier|final
name|String
name|TOPIC_NAME
init|=
literal|"testTopic"
decl_stmt|;
specifier|private
specifier|final
name|String
name|SUBSCRIPTION_NAME
init|=
literal|"subscriberId"
decl_stmt|;
specifier|private
specifier|final
name|String
name|CLIENT_ID
init|=
literal|"client1"
decl_stmt|;
specifier|private
specifier|final
name|int
name|MSG_COUNT
init|=
literal|150
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"=============== Starting test: {} ===================="
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setKeepDurableSubsActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerService
operator|.
name|getVmConnectorURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"=============== Finished test: {} ===================="
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueMessagesKeptAfterDelivery
parameter_list|()
throws|throws
name|Exception
block|{
name|createDurableSubscription
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|sendBytesMessage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|receiveMessages
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getCurrentMemoryUsage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueMessagesKeptAfterPurge
parameter_list|()
throws|throws
name|Exception
block|{
name|createDurableSubscription
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|sendBytesMessage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|getProxyToQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
operator|.
name|purge
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getCurrentMemoryUsage
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurableTopicSubscriptionMessagesKeptAfterDelivery
parameter_list|()
throws|throws
name|Exception
block|{
name|createDurableSubscription
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|sendBytesMessage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|receiveMessages
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getCurrentMemoryUsage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurableTopicSubscriptionMessagesKeptAfterUnsubscribe
parameter_list|()
throws|throws
name|Exception
block|{
name|createDurableSubscription
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|sendBytesMessage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|unsubscribeDurableSubscription
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|logBrokerMemoryUsage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getCurrentMemoryUsage
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createDurableSubscription
parameter_list|()
throws|throws
name|JMSException
block|{
specifier|final
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|CLIENT_ID
argument_list|)
expr_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|TOPIC_NAME
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|SUBSCRIPTION_NAME
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created durable subscription."
argument_list|)
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|receiveMessages
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|destType
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|CLIENT_ID
argument_list|)
expr_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|destination
decl_stmt|;
if|if
condition|(
name|destType
operator|.
name|equals
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
condition|)
block|{
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|TOPIC_NAME
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MessageConsumer
name|consumer
decl_stmt|;
if|if
condition|(
name|destType
operator|.
name|equals
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
condition|)
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|SUBSCRIPTION_NAME
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|assertNotNull
argument_list|(
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|sendBytesMessage
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|destType
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|destination
decl_stmt|;
if|if
condition|(
name|destType
operator|.
name|equals
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
condition|)
block|{
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|TOPIC_NAME
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|BytesMessage
name|bytesMessage
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|bytesMessage
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|bytesMessage
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|unsubscribeDurableSubscription
parameter_list|()
throws|throws
name|JMSException
block|{
specifier|final
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|CLIENT_ID
argument_list|)
expr_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|unsubscribe
argument_list|(
name|SUBSCRIPTION_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Unsubscribed durable subscription."
argument_list|)
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|long
name|getCurrentMemoryUsage
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|destType
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MemoryUsage
name|usage
decl_stmt|;
if|if
condition|(
name|destType
operator|.
name|equals
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
condition|)
block|{
name|usage
operator|=
name|brokerService
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|QUEUE_NAME
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|usage
operator|=
name|brokerService
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|TOPIC_NAME
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
block|}
return|return
name|usage
operator|.
name|getUsage
argument_list|()
return|;
block|}
specifier|private
name|void
name|logBrokerMemoryUsage
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|destType
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Memory usage: broker={}% destination={}"
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|,
name|getCurrentMemoryUsage
argument_list|(
name|destType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|QueueViewMBean
name|getProxyToQueue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|JMSException
block|{
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|name
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|brokerService
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
block|}
end_class

end_unit

