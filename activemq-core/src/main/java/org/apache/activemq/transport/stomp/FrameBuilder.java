begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
class|class
name|FrameBuilder
block|{
specifier|private
name|String
name|command
decl_stmt|;
specifier|private
name|Properties
name|headers
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|body
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|public
name|FrameBuilder
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|FrameBuilder
name|addHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|headers
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|FrameBuilder
name|addHeader
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Long
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FrameBuilder
name|addHeaders
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|DESTINATION
argument_list|,
name|DestinationNamer
operator|.
name|convert
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|MESSAGE_ID
argument_list|,
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|CORRELATION_ID
argument_list|,
name|message
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|EXPIRATION_TIME
argument_list|,
name|message
operator|.
name|getJMSExpiration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getJMSRedelivered
argument_list|()
condition|)
block|{
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|REDELIVERED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|PRORITY
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|REPLY_TO
argument_list|,
name|DestinationNamer
operator|.
name|convert
argument_list|(
name|message
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|TIMESTAMP
argument_list|,
name|message
operator|.
name|getJMSTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|TYPE
argument_list|,
name|message
operator|.
name|getJMSType
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lets add all the message headers
name|Map
name|properties
init|=
name|message
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|FrameBuilder
name|setBody
parameter_list|(
name|byte
index|[]
name|body
parameter_list|)
block|{
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|headers
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|property
init|=
name|headers
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|SEPERATOR
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
name|byte
index|[]
name|toFrame
parameter_list|()
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|bout
operator|.
name|write
argument_list|(
name|command
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|bout
operator|.
name|write
argument_list|(
name|Stomp
operator|.
name|NEWLINE
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|headers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|property
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|bout
operator|.
name|write
argument_list|(
name|key
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|bout
operator|.
name|write
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|SEPERATOR
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|bout
operator|.
name|write
argument_list|(
name|property
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|bout
operator|.
name|write
argument_list|(
name|Stomp
operator|.
name|NEWLINE
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|bout
operator|.
name|write
argument_list|(
name|Stomp
operator|.
name|NEWLINE
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|bout
operator|.
name|write
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|bout
operator|.
name|write
argument_list|(
name|Stomp
operator|.
name|NULL
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|bout
operator|.
name|write
argument_list|(
name|Stomp
operator|.
name|NEWLINE
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"World is caving in, we just got io error writing to"
operator|+
literal|"a byte array output stream we instantiated!"
argument_list|)
throw|;
block|}
return|return
name|bout
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

