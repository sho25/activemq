begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jndi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|InitialContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSslConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQSslInitialContextFactoryTest
block|{
specifier|protected
name|Context
name|context
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|InitialContextFactory
name|factory
init|=
operator|new
name|ActiveMQSslInitialContextFactory
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"java.naming.provider.url"
argument_list|,
literal|"vm://0"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.userName"
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.userPassword"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.keyStore"
argument_list|,
literal|"keystore.jks"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.keyStorePassword"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.keyStoreType"
argument_list|,
literal|"JKS"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.trustStore"
argument_list|,
literal|"truststore.jks"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.trustStorePassword"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"connection.ConnectionFactory.trustStoreType"
argument_list|,
literal|"JKS"
argument_list|)
expr_stmt|;
name|context
operator|=
name|factory
operator|.
name|getInitialContext
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No context created"
argument_list|,
name|context
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateConnectionFactory
parameter_list|()
throws|throws
name|NamingException
block|{
name|assertTrue
argument_list|(
name|context
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
operator|instanceof
name|ActiveMQSslConnectionFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssertConnectionFactoryProperties
parameter_list|()
throws|throws
name|NamingException
block|{
name|Object
name|c
init|=
name|context
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ActiveMQSslConnectionFactory
condition|)
block|{
name|ActiveMQSslConnectionFactory
name|factory
init|=
operator|(
name|ActiveMQSslConnectionFactory
operator|)
name|c
decl_stmt|;
name|assertEquals
argument_list|(
name|factory
operator|.
name|getKeyStore
argument_list|()
argument_list|,
literal|"keystore.jks"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|factory
operator|.
name|getKeyStorePassword
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|factory
operator|.
name|getKeyStoreType
argument_list|()
argument_list|,
literal|"JKS"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|factory
operator|.
name|getTrustStore
argument_list|()
argument_list|,
literal|"truststore.jks"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|factory
operator|.
name|getTrustStorePassword
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|factory
operator|.
name|getTrustStoreType
argument_list|()
argument_list|,
literal|"JKS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Did not find an ActiveMQSslConnectionFactory"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

