begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|OpenTypeSupport
operator|.
name|OpenTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|JobSchedulerView
implements|implements
name|JobSchedulerViewMBean
block|{
specifier|private
specifier|final
name|JobScheduler
name|jobScheduler
decl_stmt|;
specifier|public
name|JobSchedulerView
parameter_list|(
name|JobScheduler
name|jobScheduler
parameter_list|)
block|{
name|this
operator|.
name|jobScheduler
operator|=
name|jobScheduler
expr_stmt|;
block|}
specifier|public
name|TabularData
name|getAllJobs
parameter_list|()
throws|throws
name|Exception
block|{
name|OpenTypeFactory
name|factory
init|=
name|OpenTypeSupport
operator|.
name|getFactory
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|factory
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"Scheduled Jobs"
argument_list|,
literal|"Scheduled Jobs"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"jobId"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|rc
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Job
argument_list|>
name|jobs
init|=
name|this
operator|.
name|jobScheduler
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|Job
name|job
range|:
name|jobs
control|)
block|{
name|rc
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|factory
operator|.
name|getFields
argument_list|(
name|job
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|TabularData
name|getAllJobs
parameter_list|(
name|String
name|startTime
parameter_list|,
name|String
name|finishTime
parameter_list|)
throws|throws
name|Exception
block|{
name|OpenTypeFactory
name|factory
init|=
name|OpenTypeSupport
operator|.
name|getFactory
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|factory
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"Scheduled Jobs"
argument_list|,
literal|"Scheduled Jobs"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"jobId"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|rc
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|JobSupport
operator|.
name|getDataTime
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
name|long
name|finish
init|=
name|JobSupport
operator|.
name|getDataTime
argument_list|(
name|finishTime
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Job
argument_list|>
name|jobs
init|=
name|this
operator|.
name|jobScheduler
operator|.
name|getAllJobs
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
decl_stmt|;
for|for
control|(
name|Job
name|job
range|:
name|jobs
control|)
block|{
name|rc
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|factory
operator|.
name|getFields
argument_list|(
name|job
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|TabularData
name|getNextScheduleJobs
parameter_list|()
throws|throws
name|Exception
block|{
name|OpenTypeFactory
name|factory
init|=
name|OpenTypeSupport
operator|.
name|getFactory
argument_list|(
name|Job
operator|.
name|class
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|factory
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"Scheduled Jobs"
argument_list|,
literal|"Scheduled Jobs"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"jobId"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|rc
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Job
argument_list|>
name|jobs
init|=
name|this
operator|.
name|jobScheduler
operator|.
name|getNextScheduleJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|Job
name|job
range|:
name|jobs
control|)
block|{
name|rc
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|factory
operator|.
name|getFields
argument_list|(
name|job
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|String
name|getNextScheduleTime
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|time
init|=
name|this
operator|.
name|jobScheduler
operator|.
name|getNextScheduleTime
argument_list|()
decl_stmt|;
return|return
name|JobSupport
operator|.
name|getDateTime
argument_list|(
name|time
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeAllJobs
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|jobScheduler
operator|.
name|removeAllJobs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|removeAllJobs
parameter_list|(
name|String
name|startTime
parameter_list|,
name|String
name|finishTime
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|JobSupport
operator|.
name|getDataTime
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
name|long
name|finish
init|=
name|JobSupport
operator|.
name|getDataTime
argument_list|(
name|finishTime
argument_list|)
decl_stmt|;
name|this
operator|.
name|jobScheduler
operator|.
name|removeAllJobs
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeJob
parameter_list|(
name|String
name|jobId
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|jobScheduler
operator|.
name|remove
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeJobAtScheduledTime
parameter_list|(
name|String
name|time
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

