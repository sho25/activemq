begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|activeio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|SyncToAsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|AsyncChannelToAsyncCommandChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|net
operator|.
name|SocketMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|InactivityMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|MutexTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCorrelator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|WireFormatNegotiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveIOTransportFactory
extends|extends
name|TransportFactory
block|{
specifier|public
name|Transport
name|doConnect
parameter_list|(
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
name|options
init|=
operator|new
name|HashMap
argument_list|(
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|location
operator|=
name|convertToActiveIOURI
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|Transport
name|rc
init|=
name|connect
argument_list|(
name|location
argument_list|,
name|createWireFormat
argument_list|(
name|options
argument_list|)
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid connect parameters: "
operator|+
name|options
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Do a connect to get the transport      * @param location       * @param ex       * @return the transport      * @throws IOException       *       */
specifier|public
name|Transport
name|doConnect
parameter_list|(
name|URI
name|location
parameter_list|,
name|Executor
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
name|options
init|=
operator|new
name|HashMap
argument_list|(
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|location
operator|=
name|convertToActiveIOURI
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|Transport
name|rc
init|=
name|connect
argument_list|(
name|location
argument_list|,
name|createWireFormat
argument_list|(
name|options
argument_list|)
argument_list|,
name|options
argument_list|,
name|ex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid connect parameters: "
operator|+
name|options
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * do a Composite connect      * @param location       * @return the Transport      * @throws IOException       *       */
specifier|public
name|Transport
name|doCompositeConnect
parameter_list|(
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
name|options
init|=
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|location
operator|=
name|convertToActiveIOURI
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|Transport
name|rc
init|=
name|compositeConnect
argument_list|(
name|location
argument_list|,
name|createWireFormat
argument_list|(
name|options
argument_list|)
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid connect parameters: "
operator|+
name|options
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Do a Composite Connect      * @param location       * @param ex       * @return the Transport      * @throws IOException       *       */
specifier|public
name|Transport
name|doCompositeConnect
parameter_list|(
name|URI
name|location
parameter_list|,
name|Executor
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
name|options
init|=
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|location
operator|=
name|convertToActiveIOURI
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|Transport
name|rc
init|=
name|compositeConnect
argument_list|(
name|location
argument_list|,
name|createWireFormat
argument_list|(
name|options
argument_list|)
argument_list|,
name|options
argument_list|,
name|ex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid connect parameters: "
operator|+
name|options
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|TransportServer
name|doBind
parameter_list|(
name|String
name|brokerId
parameter_list|,
specifier|final
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
name|options
init|=
operator|new
name|HashMap
argument_list|(
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveIOTransportServer
name|server
init|=
operator|new
name|ActiveIOTransportServer
argument_list|(
name|convertToActiveIOURI
argument_list|(
name|location
argument_list|)
argument_list|,
name|options
argument_list|)
block|{
specifier|public
name|URI
name|getBindURI
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|URI
name|getConnectURI
parameter_list|()
block|{
return|return
name|convertFromActiveIOURI
argument_list|(
name|super
operator|.
name|getConnectURI
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|server
operator|.
name|setWireFormatFactory
argument_list|(
name|createWireFormatFactory
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|server
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
specifier|private
specifier|final
name|HashMap
name|toSchemeMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|static
specifier|private
specifier|final
name|HashMap
name|fromSchemeMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|toSchemeMap
operator|.
name|put
argument_list|(
literal|"tcp"
argument_list|,
literal|"socket"
argument_list|)
expr_stmt|;
name|fromSchemeMap
operator|.
name|put
argument_list|(
literal|"socket"
argument_list|,
literal|"tcp"
argument_list|)
expr_stmt|;
name|toSchemeMap
operator|.
name|put
argument_list|(
literal|"nio"
argument_list|,
literal|"nio-async"
argument_list|)
expr_stmt|;
name|fromSchemeMap
operator|.
name|put
argument_list|(
literal|"nio-async"
argument_list|,
literal|"nio"
argument_list|)
expr_stmt|;
name|toSchemeMap
operator|.
name|put
argument_list|(
literal|"aio"
argument_list|,
literal|"aio"
argument_list|)
expr_stmt|;
name|fromSchemeMap
operator|.
name|put
argument_list|(
literal|"aio"
argument_list|,
literal|"aio"
argument_list|)
expr_stmt|;
name|toSchemeMap
operator|.
name|put
argument_list|(
literal|"ssl"
argument_list|,
literal|"ssl"
argument_list|)
expr_stmt|;
name|fromSchemeMap
operator|.
name|put
argument_list|(
literal|"ssl"
argument_list|,
literal|"ssl"
argument_list|)
expr_stmt|;
name|toSchemeMap
operator|.
name|put
argument_list|(
literal|"vmpipe"
argument_list|,
literal|"vmpipe"
argument_list|)
expr_stmt|;
name|fromSchemeMap
operator|.
name|put
argument_list|(
literal|"vmpipe"
argument_list|,
literal|"vmpipe"
argument_list|)
expr_stmt|;
name|toSchemeMap
operator|.
name|put
argument_list|(
literal|"jxta"
argument_list|,
literal|"jxta"
argument_list|)
expr_stmt|;
name|fromSchemeMap
operator|.
name|put
argument_list|(
literal|"jxta"
argument_list|,
literal|"jxta"
argument_list|)
expr_stmt|;
block|}
specifier|static
name|URI
name|convertToActiveIOURI
parameter_list|(
name|URI
name|location
parameter_list|)
block|{
try|try
block|{
name|String
name|scheme
init|=
name|location
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|target
init|=
operator|(
name|String
operator|)
name|toSchemeMap
operator|.
name|get
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|URI
argument_list|(
name|target
argument_list|,
name|location
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|,
name|location
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{         }
return|return
name|location
return|;
block|}
specifier|static
name|URI
name|convertFromActiveIOURI
parameter_list|(
name|URI
name|location
parameter_list|)
block|{
try|try
block|{
name|String
name|scheme
init|=
name|location
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|target
init|=
operator|(
name|String
operator|)
name|fromSchemeMap
operator|.
name|get
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|URI
argument_list|(
name|target
argument_list|,
name|location
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|,
name|location
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{         }
return|return
name|location
return|;
block|}
specifier|public
specifier|static
name|Transport
name|connect
parameter_list|(
name|URI
name|location
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|configure
argument_list|(
operator|new
name|ChannelFactory
argument_list|()
operator|.
name|openAsyncChannel
argument_list|(
name|location
argument_list|)
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|connect
parameter_list|(
name|URI
name|location
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|,
name|Executor
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|configure
argument_list|(
operator|new
name|ChannelFactory
argument_list|()
operator|.
name|openAsyncChannel
argument_list|(
name|location
argument_list|)
argument_list|,
name|format
argument_list|,
name|options
argument_list|,
name|ex
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|configure
parameter_list|(
name|Channel
name|c
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|AsyncChannel
name|channel
init|=
name|SyncToAsyncChannel
operator|.
name|adapt
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|configure
argument_list|(
name|channel
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|configure
parameter_list|(
name|Channel
name|c
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|,
name|Executor
name|ex
parameter_list|)
block|{
name|AsyncChannel
name|channel
init|=
name|SyncToAsyncChannel
operator|.
name|adapt
argument_list|(
name|c
argument_list|,
name|ex
argument_list|)
decl_stmt|;
return|return
name|configure
argument_list|(
name|channel
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|configure
parameter_list|(
name|AsyncChannel
name|channel
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|ActivityMonitor
name|activityMonitor
init|=
operator|new
name|ActivityMonitor
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|channel
operator|=
operator|new
name|PacketAggregatingAsyncChannel
argument_list|(
name|activityMonitor
argument_list|)
expr_stmt|;
name|AsyncChannelToAsyncCommandChannel
name|commandChannel
init|=
operator|new
name|AsyncChannelToAsyncCommandChannel
argument_list|(
name|channel
argument_list|,
name|format
argument_list|)
decl_stmt|;
comment|// Flexible but dangerous!  Allows you to configure all the properties of the socket via the URI!
name|SocketMetadata
name|socketMetadata
init|=
operator|(
name|SocketMetadata
operator|)
name|commandChannel
operator|.
name|getAdapter
argument_list|(
name|SocketMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|socketMetadata
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|socketMetadata
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|ActiveIOTransport
name|activeIOTransport
init|=
operator|new
name|ActiveIOTransport
argument_list|(
name|commandChannel
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|activeIOTransport
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|activeIOTransport
operator|.
name|setReadCounter
argument_list|(
name|activityMonitor
operator|.
name|getReadCounter
argument_list|()
argument_list|)
expr_stmt|;
name|activeIOTransport
operator|.
name|setWriteCounter
argument_list|(
name|activityMonitor
operator|.
name|getWriteCounter
argument_list|()
argument_list|)
expr_stmt|;
name|Transport
name|transport
init|=
name|activeIOTransport
decl_stmt|;
if|if
condition|(
name|activeIOTransport
operator|.
name|isTrace
argument_list|()
condition|)
block|{
name|transport
operator|=
operator|new
name|TransportLogger
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
name|transport
operator|=
operator|new
name|WireFormatNegotiator
argument_list|(
name|transport
argument_list|,
name|format
argument_list|,
name|activeIOTransport
operator|.
name|getMinmumWireFormatVersion
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|InactivityMonitor
argument_list|(
name|transport
argument_list|,
name|activeIOTransport
operator|.
name|getMaxInactivityDuration
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|MutexTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|ResponseCorrelator
argument_list|(
name|transport
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
specifier|public
specifier|static
name|Transport
name|compositeConnect
parameter_list|(
name|URI
name|location
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|compositeConfigure
argument_list|(
operator|new
name|ChannelFactory
argument_list|()
operator|.
name|openAsyncChannel
argument_list|(
name|location
argument_list|)
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|compositeConnect
parameter_list|(
name|URI
name|location
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|,
name|Executor
name|ex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|compositeConfigure
argument_list|(
operator|new
name|ChannelFactory
argument_list|()
operator|.
name|openAsyncChannel
argument_list|(
name|location
argument_list|)
argument_list|,
name|format
argument_list|,
name|options
argument_list|,
name|ex
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|compositeConfigure
parameter_list|(
name|Channel
name|c
parameter_list|,
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|AsyncChannel
name|channel
init|=
name|SyncToAsyncChannel
operator|.
name|adapt
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|compositeConfigure
argument_list|(
name|channel
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|compositeConfigure
parameter_list|(
name|Channel
name|c
parameter_list|,
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|,
name|Executor
name|ex
parameter_list|)
block|{
name|AsyncChannel
name|channel
init|=
name|SyncToAsyncChannel
operator|.
name|adapt
argument_list|(
name|c
argument_list|,
name|ex
argument_list|)
decl_stmt|;
return|return
name|compositeConfigure
argument_list|(
name|channel
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Transport
name|compositeConfigure
parameter_list|(
name|AsyncChannel
name|channel
parameter_list|,
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|ActivityMonitor
name|activityMonitor
init|=
operator|new
name|ActivityMonitor
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|channel
operator|=
operator|new
name|PacketAggregatingAsyncChannel
argument_list|(
name|activityMonitor
argument_list|)
expr_stmt|;
name|AsyncChannelToAsyncCommandChannel
name|commandChannel
init|=
operator|new
name|AsyncChannelToAsyncCommandChannel
argument_list|(
name|channel
argument_list|,
name|format
argument_list|)
decl_stmt|;
comment|// Flexible but dangerous!  Allows you to configure all the properties of the socket via the URI!
name|SocketMetadata
name|socketMetadata
init|=
operator|(
name|SocketMetadata
operator|)
name|commandChannel
operator|.
name|getAdapter
argument_list|(
name|SocketMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|socketMetadata
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|socketMetadata
argument_list|,
name|options
argument_list|,
literal|"socket."
argument_list|)
expr_stmt|;
block|}
name|ActiveIOTransport
name|activeIOTransport
init|=
operator|new
name|ActiveIOTransport
argument_list|(
name|commandChannel
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|activeIOTransport
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|activeIOTransport
operator|.
name|setReadCounter
argument_list|(
name|activityMonitor
operator|.
name|getReadCounter
argument_list|()
argument_list|)
expr_stmt|;
name|activeIOTransport
operator|.
name|setWriteCounter
argument_list|(
name|activityMonitor
operator|.
name|getWriteCounter
argument_list|()
argument_list|)
expr_stmt|;
name|Transport
name|transport
init|=
name|activeIOTransport
decl_stmt|;
if|if
condition|(
name|activeIOTransport
operator|.
name|isTrace
argument_list|()
condition|)
block|{
name|transport
operator|=
operator|new
name|TransportLogger
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
name|transport
operator|=
operator|new
name|WireFormatNegotiator
argument_list|(
name|transport
argument_list|,
name|format
argument_list|,
name|activeIOTransport
operator|.
name|getMinmumWireFormatVersion
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|InactivityMonitor
argument_list|(
name|transport
argument_list|,
name|activeIOTransport
operator|.
name|getMaxInactivityDuration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
block|}
end_class

end_unit

