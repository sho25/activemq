begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|SslTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_comment
comment|/**  * An ActiveMQConnectionFactory that allows access to the key and trust managers used for SslConnections.  *   * There is no reason to use this class unless SSL is being used AND the key and trust managers need to be specified  *      from within code. In fact, if the URI passed to this class does not have an "ssl" scheme, this class will  *      pass all work on to its superclass.  *   * @author sepandm@gmail.com  *  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQSslConnectionFactory
extends|extends
name|ActiveMQConnectionFactory
block|{
comment|// The key and trust managers used to initialize the used SSLContext.
specifier|protected
name|KeyManager
index|[]
name|keyManager
init|=
literal|null
decl_stmt|;
specifier|protected
name|TrustManager
index|[]
name|trustManager
init|=
literal|null
decl_stmt|;
specifier|protected
name|SecureRandom
name|secureRandom
init|=
literal|null
decl_stmt|;
comment|/**      * Sets the key and trust managers used when creating SSL connections.      *       * @param km The KeyManagers used.      * @param tm The TrustManagers used.      * @param random The SecureRandom number used.      */
specifier|public
name|void
name|setKeyAndTrustManagers
parameter_list|(
specifier|final
name|KeyManager
index|[]
name|km
parameter_list|,
specifier|final
name|TrustManager
index|[]
name|tm
parameter_list|,
specifier|final
name|SecureRandom
name|random
parameter_list|)
block|{
name|keyManager
operator|=
name|km
expr_stmt|;
name|trustManager
operator|=
name|tm
expr_stmt|;
name|secureRandom
operator|=
name|random
expr_stmt|;
block|}
comment|/**      * Overriding to make special considerations for SSL connections.      *       * If we are not using SSL, the superclass's method is called.      * If we are using SSL, an SslConnectionFactory is used and it is given the      *      needed key and trust managers.      *       * @author sepandm@gmail.com      */
specifier|protected
name|Transport
name|createTransport
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// If the given URI is non-ssl, let superclass handle it.
if|if
condition|(
operator|!
name|brokerURL
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ssl"
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|createTransport
argument_list|()
return|;
block|}
try|try
block|{
name|SslTransportFactory
name|sslFactory
init|=
operator|new
name|SslTransportFactory
argument_list|()
decl_stmt|;
name|sslFactory
operator|.
name|setKeyAndTrustManagers
argument_list|(
name|keyManager
argument_list|,
name|trustManager
argument_list|,
name|secureRandom
argument_list|)
expr_stmt|;
return|return
name|sslFactory
operator|.
name|doConnect
argument_list|(
name|brokerURL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
literal|"Could not create Transport. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

