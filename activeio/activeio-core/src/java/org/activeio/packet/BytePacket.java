begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License. You may obtain a copy of  * the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_comment
comment|/**  * Provides a Packet implementation that is directly backed by a<code>byte</code>.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|BytePacket
implements|implements
name|Packet
block|{
specifier|private
name|byte
name|data
decl_stmt|;
specifier|private
name|byte
name|position
decl_stmt|;
specifier|private
name|byte
name|limit
decl_stmt|;
specifier|public
name|BytePacket
parameter_list|(
name|byte
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|position
return|;
block|}
specifier|public
name|void
name|position
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
operator|(
name|byte
operator|)
name|position
expr_stmt|;
block|}
specifier|public
name|int
name|limit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
specifier|public
name|void
name|limit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
operator|(
name|byte
operator|)
name|limit
expr_stmt|;
block|}
specifier|public
name|void
name|flip
parameter_list|()
block|{
name|limit
argument_list|(
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|remaining
parameter_list|()
block|{
return|return
name|limit
argument_list|()
operator|-
name|position
argument_list|()
return|;
block|}
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRemaining
parameter_list|()
block|{
return|return
name|remaining
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|limit
argument_list|(
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|capacity
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|Packet
name|slice
parameter_list|()
block|{
if|if
condition|(
name|hasRemaining
argument_list|()
condition|)
return|return
operator|new
name|BytePacket
argument_list|(
name|data
argument_list|)
return|;
return|return
name|EmptyPacket
operator|.
name|EMPTY_PACKET
return|;
block|}
specifier|public
name|Packet
name|duplicate
parameter_list|()
block|{
name|BytePacket
name|packet
init|=
operator|new
name|BytePacket
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|packet
operator|.
name|limit
argument_list|(
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|packet
operator|.
name|position
argument_list|(
name|position
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|packet
return|;
block|}
specifier|public
name|Object
name|duplicate
parameter_list|(
name|ClassLoader
name|cl
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|cl
operator|.
name|loadClass
argument_list|(
name|BytePacket
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|byte
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Byte
argument_list|(
name|data
argument_list|)
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Could not duplicate packet in a different classloader: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasRemaining
argument_list|()
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|position
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasRemaining
argument_list|()
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|position
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.activeio.packet.Packet#read()      */
specifier|public
name|int
name|read
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasRemaining
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|position
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|data
operator|&
literal|0xff
return|;
block|}
comment|/**      * @see org.activeio.packet.Packet#read(byte[], int, int)      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasRemaining
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|data
index|[
name|offset
index|]
operator|=
name|this
operator|.
name|data
expr_stmt|;
name|position
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**      * @see org.activeio.packet.Packet#write(int)      */
specifier|public
name|boolean
name|write
parameter_list|(
name|int
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasRemaining
argument_list|()
condition|)
return|return
literal|false
return|;
name|this
operator|.
name|data
operator|=
operator|(
name|byte
operator|)
name|data
expr_stmt|;
name|position
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @see org.activeio.packet.Packet#write(byte[], int, int)      */
specifier|public
name|int
name|write
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasRemaining
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|data
operator|=
name|data
index|[
name|offset
index|]
expr_stmt|;
name|position
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|ByteSequence
name|asByteSequence
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * @see org.activeio.packet.Packet#sliceAsBytes()      */
specifier|public
name|byte
index|[]
name|sliceAsBytes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * @param dest      * @return the number of bytes read into the dest.      */
specifier|public
name|int
name|read
parameter_list|(
name|Packet
name|dest
parameter_list|)
block|{
if|if
condition|(
name|hasRemaining
argument_list|()
condition|)
block|{
name|dest
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|position
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{position="
operator|+
name|position
argument_list|()
operator|+
literal|",limit="
operator|+
name|limit
argument_list|()
operator|+
literal|",capacity="
operator|+
name|capacity
argument_list|()
operator|+
literal|"}"
return|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{             }
block|}
end_class

end_unit

