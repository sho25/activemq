begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisoryBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|java
operator|.
name|JavaRuntimeConfigurationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|java
operator|.
name|JavaRuntimeConfigurationPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
operator|.
name|JournalDiskSyncStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DurableSyncNetworkBridgeTest
extends|extends
name|DynamicNetworkTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableSyncNetworkBridgeTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|JavaRuntimeConfigurationBroker
name|remoteRuntimeBroker
decl_stmt|;
specifier|protected
name|String
name|staticIncludeTopics
init|=
literal|"include.static.test"
decl_stmt|;
specifier|protected
name|String
name|includedTopics
init|=
literal|"include.test.>"
decl_stmt|;
specifier|protected
name|String
name|testTopicName2
init|=
literal|"include.test.bar2"
decl_stmt|;
specifier|private
name|boolean
name|dynamicOnly
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|forceDurable
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useVirtualDestSubs
init|=
literal|false
decl_stmt|;
specifier|private
name|byte
name|remoteBrokerWireFormatVersion
init|=
name|CommandTypes
operator|.
name|PROTOCOL_VERSION
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|FLOW
block|{
name|FORWARD
block|,
name|REVERSE
block|}
specifier|private
name|BrokerService
name|broker1
decl_stmt|;
specifier|private
name|BrokerService
name|broker2
decl_stmt|;
specifier|private
name|Session
name|session1
decl_stmt|;
specifier|private
name|Session
name|session2
decl_stmt|;
specifier|private
specifier|final
name|FLOW
name|flow
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|FLOW
operator|.
name|FORWARD
block|}
block|,
block|{
name|FLOW
operator|.
name|REVERSE
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_TYPE
init|=
literal|"jks"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_KEYSTORE
init|=
literal|"src/test/resources/server.keystore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUST_KEYSTORE
init|=
literal|"src/test/resources/client.keystore"
decl_stmt|;
static|static
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|,
name|TRUST_KEYSTORE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStoreType"
argument_list|,
name|KEYSTORE_TYPE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|,
name|SERVER_KEYSTORE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStoreType"
argument_list|,
name|KEYSTORE_TYPE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DurableSyncNetworkBridgeTest
parameter_list|(
specifier|final
name|FLOW
name|flow
parameter_list|)
block|{
name|this
operator|.
name|flow
operator|=
name|flow
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|includedTopics
operator|=
literal|"include.test.>"
expr_stmt|;
name|staticIncludeTopics
operator|=
literal|"include.static.test"
expr_stmt|;
name|dynamicOnly
operator|=
literal|false
expr_stmt|;
name|forceDurable
operator|=
literal|false
expr_stmt|;
name|useVirtualDestSubs
operator|=
literal|false
expr_stmt|;
name|remoteBrokerWireFormatVersion
operator|=
name|CommandTypes
operator|.
name|PROTOCOL_VERSION
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|tempFolder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|tempFolder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|doTearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSubscriptionPropagate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|sub1
init|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeSubscription
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSubscriptionPropegateAfterRestart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|sub1
init|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeSubscription
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSubscriptionWithBridgeOffline
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|sub1
init|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|broker2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Send some messages to the NC sub and make sure it can still be deleted
name|MessageProducer
name|prod
init|=
name|session2
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|prod
operator|.
name|send
argument_list|(
name|session2
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeSubscription
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
comment|//Test that on successful reconnection of the bridge that
comment|//the NC sub will be removed
name|restartBroker
argument_list|(
name|broker2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSubscriptionWithBridgeOfflineIncludedChanged
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|sub1
init|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
comment|//change the included topics to make sure we still cleanup non-matching NC durables
name|includedTopics
operator|=
literal|"different.topic"
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeSubscription
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Test that on successful reconnection of the bridge that
comment|//the NC sub will be removed
name|restartBroker
argument_list|(
name|broker2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubscriptionRemovedAfterIncludedChanged
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|sub1
init|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
comment|//change the included topics to make sure we still cleanup non-matching NC durables
name|includedTopics
operator|=
literal|"different.topic"
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Test that on successful reconnection of the bridge that
comment|//the NC sub will be removed because even though the local subscription exists,
comment|//it no longer matches the included filter
name|restartBroker
argument_list|(
name|broker2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubscriptionRemovedAfterStaticChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|forceDurable
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|this
operator|.
name|staticIncludeTopics
argument_list|)
decl_stmt|;
name|MessageConsumer
name|sub1
init|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
comment|//change the included topics to make sure we still cleanup non-matching NC durables
name|staticIncludeTopics
operator|=
literal|"different.topic"
expr_stmt|;
name|this
operator|.
name|restartBrokers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Send some messages to the NC sub and make sure it can still be deleted
name|MessageProducer
name|prod
init|=
name|session2
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|prod
operator|.
name|send
argument_list|(
name|session2
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Test that on successful reconnection of the bridge that
comment|//the NC sub will be removed because even though the local subscription exists,
comment|//it no longer matches the included static filter
name|restartBroker
argument_list|(
name|broker2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemoveSubscriptionWithBridgeOfflineMultiTopics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|topic2
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName2
argument_list|)
decl_stmt|;
name|MessageConsumer
name|sub1
init|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic2
argument_list|,
literal|"sub2"
argument_list|)
expr_stmt|;
name|removeSubscription
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Test that on successful reconnection of the bridge that
comment|//the NC sub will be removed for topic1 but will stay for topic2
comment|//before sync, the old NC should exist
name|restartBroker
argument_list|(
name|broker2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//After sync, remove old NC and create one for topic 2
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSubscriptionsWithBridgeOffline
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|topic2
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName2
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|excludeTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|excludeTopicName
argument_list|)
decl_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//add three subs, should only create 2 NC subs because of conduit
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic2
argument_list|,
literal|"sub3"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|excludeTopic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncLoadTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|subName
init|=
name|this
operator|.
name|subName
decl_stmt|;
comment|//Create 1000 subs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test."
operator|+
name|i
argument_list|)
argument_list|,
name|subName
operator|+
name|i
operator|+
name|j
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test."
operator|+
name|i
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//with bridge off, remove 100 subs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|removeSubscription
argument_list|(
name|broker1
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test."
operator|+
name|i
argument_list|)
argument_list|,
name|subName
operator|+
name|i
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
comment|//restart test that 900 are resynced and 100 are deleted
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test."
operator|+
name|i
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test."
operator|+
name|i
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertBridgeStarted
argument_list|()
expr_stmt|;
block|}
comment|/**      * Using an older version of openwire should not sync but the network bridge      * should still start without error      */
annotation|@
name|Test
specifier|public
name|void
name|testAddSubscriptionsWithBridgeOfflineOpenWire11
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|remoteBrokerWireFormatVersion
operator|=
name|CommandTypes
operator|.
name|PROTOCOL_VERSION_DURABLE_SYNC
operator|-
literal|1
expr_stmt|;
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Since we are using an old version of openwire, the NC should
comment|//not be added
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddOfflineSubscriptionWithBridgeOfflineDynamicTrue
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set dynamicOnly to true
name|this
operator|.
name|dynamicOnly
operator|=
literal|true
expr_stmt|;
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddOnlineSubscriptionWithBridgeOfflineDynamicTrue
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set dynamicOnly to true
name|this
operator|.
name|dynamicOnly
operator|=
literal|true
expr_stmt|;
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//bring online again
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemoveSubscriptionsWithBridgeOffline
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|excludeTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|excludeTopicName
argument_list|)
decl_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBroker
argument_list|(
name|broker1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|removeSubscription
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub2"
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|excludeTopic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddOnlineSubscriptionsWithBridgeOffline
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|flow
operator|==
name|FLOW
operator|.
name|FORWARD
argument_list|)
expr_stmt|;
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|excludeTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|excludeTopicName
argument_list|)
decl_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTearDown
argument_list|()
expr_stmt|;
name|restartBrokers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//create durable that shouldn't be propagated
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|excludeTopic
argument_list|,
literal|"sub-exclude"
argument_list|)
expr_stmt|;
comment|//Add 3 online subs
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub2"
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub3"
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//Restart brokers and make sure we don't have duplicate NCs created
comment|//between the sync command and the online durables that are added over
comment|//the consumer advisory
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertBridgeStarted
argument_list|()
expr_stmt|;
comment|//Re-create
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub2"
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub3"
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|excludeTopic
argument_list|,
literal|"sub-exclude"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|excludeTopic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//Test that durable sync works with more than one bridge
annotation|@
name|Test
specifier|public
name|void
name|testAddOnlineSubscriptionsTwoBridges
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|excludeTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|excludeTopicName
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|topic2
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.new.topic"
argument_list|)
decl_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//create durable that shouldn't be propagated
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|excludeTopic
argument_list|,
literal|"sub-exclude"
argument_list|)
expr_stmt|;
comment|//Add 3 online subs
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub2"
argument_list|)
expr_stmt|;
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub3"
argument_list|)
expr_stmt|;
comment|//Add sub on second topic/bridge
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic2
argument_list|,
literal|"secondTopicSubName"
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertSubscriptionsCount
argument_list|(
name|broker1
argument_list|,
name|topic2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Add the second network connector
name|NetworkConnector
name|secondConnector
init|=
name|configureLocalNetworkConnector
argument_list|()
decl_stmt|;
name|secondConnector
operator|.
name|setName
argument_list|(
literal|"networkConnector2"
argument_list|)
expr_stmt|;
name|secondConnector
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.new.topic?forceDurable="
operator|+
name|forceDurable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|secondConnector
argument_list|)
expr_stmt|;
name|secondConnector
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Make sure both bridges are connected
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|localBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|localBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
literal|10000
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
comment|//Make sure NC durables exist for both bridges
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|broker2
argument_list|,
name|excludeTopic
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Make sure message can reach remote broker
name|MessageProducer
name|producer
init|=
name|session2
operator|.
name|createProducer
argument_list|(
name|topic2
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session2
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|broker2
operator|.
name|getDestination
argument_list|(
name|topic2
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|broker2
operator|.
name|getDestination
argument_list|(
name|topic2
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testVirtualDestSubForceDurableSync
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|flow
operator|==
name|FLOW
operator|.
name|FORWARD
argument_list|)
expr_stmt|;
name|forceDurable
operator|=
literal|true
expr_stmt|;
name|useVirtualDestSubs
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|remoteRuntimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
comment|//Make sure that the NC durable is created because of the compositeTopic
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|localBroker
argument_list|,
name|included
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Send message and make sure it is dispatched across the bridge
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Stop the remote broker so the bridge stops and then send 500 messages so
comment|//the messages build up on the NC durable
name|this
operator|.
name|stopRemoteBroker
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|stopLocalBroker
argument_list|()
expr_stmt|;
comment|//Restart the brokers
name|this
operator|.
name|restartRemoteBroker
argument_list|()
expr_stmt|;
name|remoteRuntimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|restartLocalBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//We now need to verify that 501 messages made it to the queue on the remote side
comment|//which means that the NC durable was not deleted and recreated during the sync
specifier|final
name|DestinationStatistics
name|remoteDestStatistics2
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteDestStatistics2
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|501
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testForceDurableTopicSubSync
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|flow
operator|==
name|FLOW
operator|.
name|FORWARD
argument_list|)
expr_stmt|;
name|forceDurable
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|restartBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
name|remoteSession
operator|.
name|createConsumer
argument_list|(
name|included
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
comment|//Make sure that the NC durable is created because of the compositeTopic
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNCDurableSubsCount
argument_list|(
name|localBroker
argument_list|,
name|included
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Send message and make sure it is dispatched across the bridge
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Stop the network connector and send messages to the local broker so they build
comment|//up on the durable
name|this
operator|.
name|localBroker
operator|.
name|getNetworkConnectorByName
argument_list|(
literal|"networkConnector"
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
comment|//restart the local broker and bridge
name|this
operator|.
name|stopLocalBroker
argument_list|()
expr_stmt|;
name|this
operator|.
name|restartLocalBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//We now need to verify that the 500 messages on the NC durable are dispatched
comment|//on bridge sync which shows that the durable wasn't destroyed/recreated
specifier|final
name|DestinationStatistics
name|destinationStatistics2
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics2
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics2
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CompositeTopic
name|createCompositeTopic
parameter_list|(
name|String
name|name
parameter_list|,
name|ActiveMQDestination
modifier|...
name|forwardTo
parameter_list|)
block|{
name|CompositeTopic
name|compositeTopic
init|=
operator|new
name|CompositeTopic
argument_list|()
decl_stmt|;
name|compositeTopic
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|compositeTopic
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|compositeTopic
operator|.
name|setForwardTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|forwardTo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|compositeTopic
return|;
block|}
specifier|protected
name|void
name|restartBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|,
name|boolean
name|startNetworkConnector
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"localBroker"
argument_list|)
condition|)
block|{
name|restartLocalBroker
argument_list|(
name|startNetworkConnector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|restartRemoteBroker
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|restartBrokers
parameter_list|(
name|boolean
name|startNetworkConnector
parameter_list|)
throws|throws
name|Exception
block|{
name|doTearDown
argument_list|()
expr_stmt|;
name|doSetUp
argument_list|(
literal|false
argument_list|,
name|startNetworkConnector
argument_list|,
name|localBroker
operator|.
name|getDataDirectoryFile
argument_list|()
argument_list|,
name|remoteBroker
operator|.
name|getDataDirectoryFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doSetUp
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|,
name|boolean
name|startNetworkConnector
parameter_list|,
name|File
name|localDataDir
parameter_list|,
name|File
name|remoteDataDir
parameter_list|)
throws|throws
name|Exception
block|{
name|included
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
expr_stmt|;
name|doSetUpRemoteBroker
argument_list|(
name|deleteAllMessages
argument_list|,
name|remoteDataDir
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doSetUpLocalBroker
argument_list|(
name|deleteAllMessages
argument_list|,
name|startNetworkConnector
argument_list|,
name|localDataDir
argument_list|)
expr_stmt|;
comment|//Give time for advisories to propagate
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|restartLocalBroker
parameter_list|(
name|boolean
name|startNetworkConnector
parameter_list|)
throws|throws
name|Exception
block|{
name|stopLocalBroker
argument_list|()
expr_stmt|;
name|doSetUpLocalBroker
argument_list|(
literal|false
argument_list|,
name|startNetworkConnector
argument_list|,
name|localBroker
operator|.
name|getDataDirectoryFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|restartRemoteBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|remoteBroker
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
name|remoteBroker
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
name|port
operator|=
name|transportConnectors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
name|stopRemoteBroker
argument_list|()
expr_stmt|;
name|doSetUpRemoteBroker
argument_list|(
literal|false
argument_list|,
name|remoteBroker
operator|.
name|getDataDirectoryFile
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doSetUpLocalBroker
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|,
name|boolean
name|startNetworkConnector
parameter_list|,
name|File
name|dataDir
parameter_list|)
throws|throws
name|Exception
block|{
name|localBroker
operator|=
name|createLocalBroker
argument_list|(
name|dataDir
argument_list|,
name|startNetworkConnector
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|URI
name|localURI
init|=
name|localBroker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|fac
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|localURI
argument_list|)
decl_stmt|;
name|fac
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fac
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|localConnection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|localConnection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|localConnection
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|startNetworkConnector
condition|)
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|localBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
name|localSession
operator|=
name|localConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|flow
operator|.
name|equals
argument_list|(
name|FLOW
operator|.
name|FORWARD
argument_list|)
condition|)
block|{
name|broker1
operator|=
name|localBroker
expr_stmt|;
name|session1
operator|=
name|localSession
expr_stmt|;
block|}
else|else
block|{
name|broker2
operator|=
name|localBroker
expr_stmt|;
name|session2
operator|=
name|localSession
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doSetUpRemoteBroker
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|,
name|File
name|dataDir
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|remoteBroker
operator|=
name|createRemoteBroker
argument_list|(
name|dataDir
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|URI
name|remoteURI
init|=
name|remoteBroker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|fac
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|remoteURI
argument_list|)
decl_stmt|;
name|remoteConnection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|remoteConnection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|remoteConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteSession
operator|=
name|remoteConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|flow
operator|.
name|equals
argument_list|(
name|FLOW
operator|.
name|FORWARD
argument_list|)
condition|)
block|{
name|broker2
operator|=
name|remoteBroker
expr_stmt|;
name|session2
operator|=
name|remoteSession
expr_stmt|;
name|remoteRuntimeBroker
operator|=
operator|(
name|JavaRuntimeConfigurationBroker
operator|)
name|remoteBroker
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|JavaRuntimeConfigurationBroker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|broker1
operator|=
name|remoteBroker
expr_stmt|;
name|session1
operator|=
name|remoteSession
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerService
name|createLocalBroker
parameter_list|(
name|File
name|dataDir
parameter_list|,
name|boolean
name|startNetworkConnector
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setMonitorConnectionSplits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"localBroker"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|adapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setDirectory
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setJournalDiskSyncStrategy
argument_list|(
name|JournalDiskSyncStrategy
operator|.
name|PERIODIC
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualDestSubs
argument_list|(
name|useVirtualDestSubs
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualDestSubsOnCreation
argument_list|(
name|useVirtualDestSubs
argument_list|)
expr_stmt|;
if|if
condition|(
name|startNetworkConnector
condition|)
block|{
name|brokerService
operator|.
name|addNetworkConnector
argument_list|(
name|configureLocalNetworkConnector
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Use auto+nio+ssl to test out the transport works with bridging
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"auto+nio+ssl://localhost:0"
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
specifier|protected
name|NetworkConnector
name|configureLocalNetworkConnector
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
name|remoteBroker
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
name|URI
name|remoteURI
init|=
name|transportConnectors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
literal|"static:("
operator|+
name|remoteURI
operator|+
literal|")"
decl_stmt|;
name|NetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"networkConnector"
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDynamicOnly
argument_list|(
name|dynamicOnly
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setConduitSubscriptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setStaticBridge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setSyncDurableSubs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setUseVirtualDestSubs
argument_list|(
name|useVirtualDestSubs
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setStaticallyIncludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|staticIncludeTopics
operator|+
literal|"?forceDurable="
operator|+
name|forceDurable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|includedTopics
operator|+
literal|"?forceDurable="
operator|+
name|forceDurable
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setExcludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|excludeTopicName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
specifier|protected
name|AdvisoryBroker
name|remoteAdvisoryBroker
decl_stmt|;
specifier|protected
name|BrokerService
name|createRemoteBroker
parameter_list|(
name|File
name|dataDir
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"remoteBroker"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|adapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setDirectory
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setJournalDiskSyncStrategy
argument_list|(
name|JournalDiskSyncStrategy
operator|.
name|PERIODIC
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualDestSubs
argument_list|(
name|useVirtualDestSubs
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualDestSubsOnCreation
argument_list|(
name|useVirtualDestSubs
argument_list|)
expr_stmt|;
if|if
condition|(
name|useVirtualDestSubs
condition|)
block|{
name|brokerService
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|JavaRuntimeConfigurationPlugin
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|remoteAdvisoryBroker
operator|=
operator|(
name|AdvisoryBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AdvisoryBroker
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//Need a larger cache size in order to handle all of the durables
comment|//Use auto+nio+ssl to test out the transport works with bridging
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"auto+nio+ssl://localhost:"
operator|+
name|port
operator|+
literal|"?wireFormat.cacheSize=2048&wireFormat.version="
operator|+
name|remoteBrokerWireFormatVersion
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
block|}
end_class

end_unit

