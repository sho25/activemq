begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|junit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_comment
comment|/**  * Test rule used to allow a test to have the Repeat annotation applied.  */
end_comment

begin_class
specifier|public
class|class
name|RepeatRule
implements|implements
name|TestRule
block|{
annotation|@
name|Override
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
name|Repeat
name|repeat
init|=
name|description
operator|.
name|getAnnotation
argument_list|(
name|Repeat
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|repeat
operator|!=
literal|null
condition|)
block|{
name|statement
operator|=
name|RepeatStatement
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|(
name|repeat
argument_list|,
name|statement
argument_list|)
expr_stmt|;
block|}
return|return
name|statement
return|;
block|}
block|}
end_class

end_unit

