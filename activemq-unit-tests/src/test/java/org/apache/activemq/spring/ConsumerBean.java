begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ConsumerBean
extends|extends
name|Assert
implements|implements
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsumerBean
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|verbose
decl_stmt|;
specifier|private
name|String
name|id
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|ConsumerBean
parameter_list|()
block|{     }
specifier|public
name|ConsumerBean
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * @return all the messages on the list so far, clearing the buffer      */
specifier|public
name|List
argument_list|<
name|Message
argument_list|>
name|flushMessages
parameter_list|()
block|{
name|List
argument_list|<
name|Message
argument_list|>
name|answer
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|answer
operator|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|(
name|messages
argument_list|)
expr_stmt|;
name|messages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Method implemented from MessageListener interface.      *      * @param message      */
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|id
operator|+
literal|"Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|messages
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Use to wait for a single message to arrive.      */
specifier|public
name|void
name|waitForMessageToArrive
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for message to arrive"
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|hasReceivedMessage
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|messages
operator|.
name|wait
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"End of wait for "
operator|+
name|end
operator|+
literal|" millis"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to wait for a message to arrive given a particular message count.      *      * @param messageCount      */
specifier|public
name|void
name|waitForMessagesToArrive
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
name|waitForMessagesToArrive
argument_list|(
name|messageCount
argument_list|,
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|waitForMessagesToArrive
parameter_list|(
name|int
name|messageCount
parameter_list|,
name|long
name|maxWaitTime
parameter_list|)
block|{
name|long
name|maxRemainingMessageCount
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|messageCount
operator|-
name|messages
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for ("
operator|+
name|maxRemainingMessageCount
operator|+
literal|") message(s) to arrive"
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|endTime
init|=
name|start
operator|+
name|maxWaitTime
decl_stmt|;
while|while
condition|(
name|maxRemainingMessageCount
operator|>
literal|0
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|messages
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasReceivedMessages
argument_list|(
name|messageCount
argument_list|)
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|endTime
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|maxRemainingMessageCount
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|messageCount
operator|-
name|messages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"End of wait for "
operator|+
name|end
operator|+
literal|" millis"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertMessagesArrived
parameter_list|(
name|int
name|total
parameter_list|)
block|{
name|waitForMessagesToArrive
argument_list|(
name|total
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|int
name|count
init|=
name|messages
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Messages received"
argument_list|,
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertMessagesArrived
parameter_list|(
name|int
name|total
parameter_list|,
name|long
name|maxWaitTime
parameter_list|)
block|{
name|waitForMessagesToArrive
argument_list|(
name|total
argument_list|,
name|maxWaitTime
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|int
name|count
init|=
name|messages
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Messages received"
argument_list|,
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isVerbose
parameter_list|()
block|{
return|return
name|verbose
return|;
block|}
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Message
argument_list|>
name|getMessages
parameter_list|()
block|{
return|return
name|messages
return|;
block|}
comment|/**      * Identifies if the message is empty.      *      * @return      */
specifier|protected
name|boolean
name|hasReceivedMessage
parameter_list|()
block|{
return|return
name|messages
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Identifies if the message count has reached the total size of message.      *      * @param messageCount      * @return      */
specifier|protected
name|boolean
name|hasReceivedMessages
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
synchronized|synchronized
init|(
name|messages
init|)
block|{
return|return
name|messages
operator|.
name|size
argument_list|()
operator|>=
name|messageCount
return|;
block|}
block|}
block|}
end_class

end_unit

