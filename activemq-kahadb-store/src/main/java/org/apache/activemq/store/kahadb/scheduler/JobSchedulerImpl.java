begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|CronParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protobuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAddScheduledJobCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveScheduledJobCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveScheduledJobsCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRescheduleJobCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
operator|.
name|BTreeIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LongMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JobSchedulerImpl
extends|extends
name|ServiceSupport
implements|implements
name|Runnable
implements|,
name|JobScheduler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobSchedulerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|JobSchedulerStoreImpl
name|store
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|index
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JobListener
argument_list|>
name|jobListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ScheduleTime
name|scheduleTime
init|=
operator|new
name|ScheduleTime
argument_list|()
decl_stmt|;
name|JobSchedulerImpl
parameter_list|(
name|JobSchedulerStoreImpl
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|JobListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|jobListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|JobListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|jobListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|schedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|ByteSequence
name|payload
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|)
throws|throws
name|IOException
block|{
name|doSchedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|delay
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|schedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|ByteSequence
name|payload
parameter_list|,
specifier|final
name|String
name|cronEntry
parameter_list|)
throws|throws
name|Exception
block|{
name|doSchedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
name|cronEntry
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|schedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|ByteSequence
name|payload
parameter_list|,
specifier|final
name|String
name|cronEntry
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|,
specifier|final
name|long
name|period
parameter_list|,
specifier|final
name|int
name|repeat
parameter_list|)
throws|throws
name|IOException
block|{
name|doSchedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
name|cronEntry
argument_list|,
name|delay
argument_list|,
name|period
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|long
name|time
parameter_list|)
throws|throws
name|IOException
block|{
name|doRemoveRange
argument_list|(
name|time
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|doRemove
argument_list|(
operator|-
literal|1
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAllJobs
parameter_list|()
throws|throws
name|IOException
block|{
name|doRemoveRange
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAllJobs
parameter_list|(
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|finish
parameter_list|)
throws|throws
name|IOException
block|{
name|doRemoveRange
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNextScheduleTime
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|readLockIndex
argument_list|()
expr_stmt|;
try|try
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|this
operator|.
name|index
operator|.
name|getFirst
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|first
operator|!=
literal|null
condition|?
name|first
operator|.
name|getKey
argument_list|()
else|:
operator|-
literal|1l
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|store
operator|.
name|readUnlockIndex
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Job
argument_list|>
name|getNextScheduleJobs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Job
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|readLockIndex
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|index
operator|.
name|getFirst
argument_list|(
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|first
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ByteSequence
name|bs
init|=
name|getPayload
argument_list|(
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|JobImpl
argument_list|(
name|jl
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|store
operator|.
name|readUnlockIndex
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|getNextToSchedule
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|readLockIndex
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|store
operator|.
name|isStopped
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|store
operator|.
name|isStopping
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|this
operator|.
name|index
operator|.
name|getFirst
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|first
return|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|store
operator|.
name|readUnlockIndex
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Job
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|readLockIndex
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|>
name|iter
init|=
name|index
operator|.
name|iterator
argument_list|(
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|next
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ByteSequence
name|bs
init|=
name|getPayload
argument_list|(
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|JobImpl
argument_list|(
name|jl
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|store
operator|.
name|readUnlockIndex
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Job
argument_list|>
name|getAllJobs
parameter_list|(
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|finish
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Job
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|readLockIndex
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|>
name|iter
init|=
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|start
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|getKey
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<=
name|finish
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|next
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ByteSequence
name|bs
init|=
name|getPayload
argument_list|(
name|jl
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|JobImpl
argument_list|(
name|jl
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|store
operator|.
name|readUnlockIndex
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|doSchedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|ByteSequence
name|payload
parameter_list|,
specifier|final
name|String
name|cronEntry
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|,
name|int
name|repeat
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// round startTime - so we can schedule more jobs at the same time
name|startTime
operator|=
operator|(
operator|(
name|startTime
operator|+
literal|500
operator|)
operator|/
literal|500
operator|)
operator|*
literal|500
expr_stmt|;
name|long
name|time
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cronEntry
operator|!=
literal|null
operator|&&
name|cronEntry
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|time
operator|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|cronEntry
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|time
operator|==
literal|0
condition|)
block|{
comment|// start time not set by CRON - so it it to the current time
name|time
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|time
operator|+=
name|delay
expr_stmt|;
block|}
else|else
block|{
name|time
operator|+=
name|period
expr_stmt|;
block|}
name|KahaAddScheduledJobCommand
name|newJob
init|=
operator|new
name|KahaAddScheduledJobCommand
argument_list|()
decl_stmt|;
name|newJob
operator|.
name|setScheduler
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setCronEntry
argument_list|(
name|cronEntry
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setRepeat
argument_list|(
name|repeat
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setNextExecutionTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setPayload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|payload
operator|.
name|getData
argument_list|()
argument_list|,
name|payload
operator|.
name|getOffset
argument_list|()
argument_list|,
name|payload
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|store
argument_list|(
name|newJob
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doReschedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
name|long
name|executionTime
parameter_list|,
name|long
name|nextExecutionTime
parameter_list|,
name|int
name|rescheduledCount
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRescheduleJobCommand
name|update
init|=
operator|new
name|KahaRescheduleJobCommand
argument_list|()
decl_stmt|;
name|update
operator|.
name|setScheduler
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|update
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|update
operator|.
name|setExecutionTime
argument_list|(
name|executionTime
argument_list|)
expr_stmt|;
name|update
operator|.
name|setNextExecutionTime
argument_list|(
name|nextExecutionTime
argument_list|)
expr_stmt|;
name|update
operator|.
name|setRescheduledCount
argument_list|(
name|rescheduledCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|store
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doRemove
parameter_list|(
specifier|final
name|long
name|executionTime
parameter_list|,
specifier|final
name|List
argument_list|<
name|JobLocation
argument_list|>
name|jobs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|JobLocation
name|job
range|:
name|jobs
control|)
block|{
name|doRemove
argument_list|(
name|executionTime
argument_list|,
name|job
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRemove
parameter_list|(
name|long
name|executionTime
parameter_list|,
specifier|final
name|String
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveScheduledJobCommand
name|remove
init|=
operator|new
name|KahaRemoveScheduledJobCommand
argument_list|()
decl_stmt|;
name|remove
operator|.
name|setScheduler
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setNextExecutionTime
argument_list|(
name|executionTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|store
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doRemoveRange
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveScheduledJobsCommand
name|destroy
init|=
operator|new
name|KahaRemoveScheduledJobsCommand
argument_list|()
decl_stmt|;
name|destroy
operator|.
name|setScheduler
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|destroy
operator|.
name|setStartTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|destroy
operator|.
name|setEndTime
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|store
argument_list|(
name|destroy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new Scheduled job to the index.  Must be called under index lock.      *      * This method must ensure that a duplicate add is not processed into the scheduler.  On index      * recover some adds may be replayed and we don't allow more than one instance of a JobId to      * exist at any given scheduled time, so filter these out to ensure idempotence.      *      * @param tx      *      Transaction in which the update is performed.      * @param command      *      The new scheduled job command to process.      * @param location      *      The location where the add command is stored in the journal.      *      * @throws IOException if an error occurs updating the index.      */
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|Transaction
name|tx
parameter_list|,
specifier|final
name|KahaAddScheduledJobCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|JobLocation
name|jobLocation
init|=
operator|new
name|JobLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|jobLocation
operator|.
name|setJobId
argument_list|(
name|command
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|jobLocation
operator|.
name|setStartTime
argument_list|(
name|command
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|jobLocation
operator|.
name|setCronEntry
argument_list|(
name|command
operator|.
name|getCronEntry
argument_list|()
argument_list|)
expr_stmt|;
name|jobLocation
operator|.
name|setDelay
argument_list|(
name|command
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
name|jobLocation
operator|.
name|setPeriod
argument_list|(
name|command
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|jobLocation
operator|.
name|setRepeat
argument_list|(
name|command
operator|.
name|getRepeat
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|nextExecutionTime
init|=
name|command
operator|.
name|getNextExecutionTime
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
name|jobLocation
operator|.
name|setNextTime
argument_list|(
name|nextExecutionTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|index
operator|.
name|containsKey
argument_list|(
name|tx
argument_list|,
name|nextExecutionTime
argument_list|)
condition|)
block|{
name|values
operator|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|nextExecutionTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// There can never be more than one instance of the same JobId scheduled at any
comment|// given time, when it happens its probably the result of index recovery and this
comment|// method must be idempotent so check for it first.
if|if
condition|(
operator|!
name|values
operator|.
name|contains
argument_list|(
name|jobLocation
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|jobLocation
argument_list|)
expr_stmt|;
comment|// Reference the log file where the add command is stored to prevent GC.
name|this
operator|.
name|store
operator|.
name|incrementJournalCount
argument_list|(
name|tx
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|nextExecutionTime
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduleTime
operator|.
name|newJob
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|nextExecutionTime
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Job {} already in scheduler at this time {}"
argument_list|,
name|jobLocation
operator|.
name|getJobId
argument_list|()
argument_list|,
name|jobLocation
operator|.
name|getNextTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reschedules a Job after it has be fired.      *      * For jobs that are repeating this method updates the job in the index by adding it to the      * jobs list for the new execution time.  If the job is not a cron type job then this method      * will reduce the repeat counter if the job has a fixed number of repeats set.  The Job will      * be removed from the jobs list it just executed on.      *      * This method must also update the value of the last update location in the JobLocation      * instance so that the checkpoint worker doesn't drop the log file in which that command lives.      *      * This method must ensure that an reschedule command that references a job that doesn't exist      * does not cause an error since it's possible that on recover the original add might be gone      * and so the job should not reappear in the scheduler.      *      * @param tx      *      The TX under which the index is updated.      * @param command      *      The reschedule command to process.      * @param location      *      The location in the index where the reschedule command was stored.      *      * @throws IOException if an error occurs during the reschedule.      */
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|Transaction
name|tx
parameter_list|,
specifier|final
name|KahaRescheduleJobCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|JobLocation
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JobLocation
argument_list|>
name|current
init|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getExecutionTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JobLocation
name|jl
init|=
name|current
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|jl
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|command
operator|.
name|getJobId
argument_list|()
argument_list|)
condition|)
block|{
name|current
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getExecutionTime
argument_list|()
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|jl
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Process reschedule command for job {} non-existent executime time {}."
argument_list|,
name|command
operator|.
name|getJobId
argument_list|()
argument_list|,
name|command
operator|.
name|getExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|Location
name|previousUpdate
init|=
name|result
operator|.
name|getLastUpdate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|target
init|=
literal|null
decl_stmt|;
name|result
operator|.
name|setNextTime
argument_list|(
name|command
operator|.
name|getNextExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setLastUpdate
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRescheduledCount
argument_list|(
name|command
operator|.
name|getRescheduledCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isCron
argument_list|()
operator|&&
name|result
operator|.
name|getRepeat
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|setRepeat
argument_list|(
name|result
operator|.
name|getRepeat
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|index
operator|.
name|containsKey
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getNextExecutionTime
argument_list|()
argument_list|)
condition|)
block|{
name|target
operator|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getNextExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
name|target
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|target
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Track the location of the last reschedule command and release the log file
comment|// reference for the previous one if there was one.
name|this
operator|.
name|store
operator|.
name|incrementJournalCount
argument_list|(
name|tx
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousUpdate
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|previousUpdate
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getNextExecutionTime
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduleTime
operator|.
name|newJob
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Process reschedule command for non-scheduled job {} at executime time {}."
argument_list|,
name|command
operator|.
name|getJobId
argument_list|()
argument_list|,
name|command
operator|.
name|getExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a scheduled job from the scheduler.      *      * The remove operation can be of two forms.  The first is that there is a job Id but no set time      * (-1) in which case the jobs index is searched until the target job Id is located.  The alternate      * form is that a job Id and execution time are both set in which case the given time is checked      * for a job matching that Id.  In either case once an execution time is identified the job is      * removed and the index updated.      *      * This method should ensure that if the matching job is not found that no error results as it      * is possible that on a recover the initial add command could be lost so the job may not be      * rescheduled.      *      * @param tx      *      The transaction under which the index is updated.      * @param command      *      The remove command to process.      * @param location      *      The location of the remove command in the Journal.      *      * @throws IOException if an error occurs while updating the scheduler index.      */
name|void
name|process
parameter_list|(
specifier|final
name|Transaction
name|tx
parameter_list|,
specifier|final
name|KahaRemoveScheduledJobCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Case 1: JobId and no time value means find the job and remove it.
comment|// Case 2: JobId and a time value means find exactly this scheduled job.
name|Long
name|executionTime
init|=
name|command
operator|.
name|getNextExecutionTime
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|executionTime
operator|==
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|candidates
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|candidates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|jl
range|:
name|candidates
control|)
block|{
if|if
condition|(
name|jl
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|command
operator|.
name|getJobId
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entry {} contains the remove target: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|command
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|executionTime
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|values
operator|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|executionTime
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|values
operator|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|executionTime
argument_list|)
expr_stmt|;
block|}
name|JobLocation
name|removed
init|=
literal|null
decl_stmt|;
comment|// Remove the job and update the index if there are any other jobs scheduled at this time.
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|job
range|:
name|values
control|)
block|{
if|if
condition|(
name|job
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|command
operator|.
name|getJobId
argument_list|()
argument_list|)
condition|)
block|{
name|removed
operator|=
name|job
expr_stmt|;
name|values
operator|.
name|remove
argument_list|(
name|removed
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|executionTime
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} removed from scheduler {}"
argument_list|,
name|removed
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Remove the references for add and reschedule commands for this job
comment|// so that those logs can be GC'd when free.
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|removed
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|removed
operator|.
name|getLastUpdate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|removed
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now that the job is removed from the index we can store the remove info and
comment|// then dereference the log files that hold the initial add command and the most
comment|// recent update command.  If the remove and the add that created the job are in
comment|// the same file we don't need to track it and just let a normal GC of the logs
comment|// remove it when the log is unreferenced.
if|if
condition|(
name|removed
operator|.
name|getLocation
argument_list|()
operator|.
name|getDataFileId
argument_list|()
operator|!=
name|location
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|referenceRemovedLocation
argument_list|(
name|tx
argument_list|,
name|location
argument_list|,
name|removed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes all scheduled jobs within a given time range.      *      * The method can be used to clear the entire scheduler index by specifying a range that      * encompasses all time [0...Long.MAX_VALUE] or a single execution time can be removed by      * setting start and end time to the same value.      *      * @param tx      *      The transaction under which the index is updated.      * @param command      *      The remove command to process.      * @param location      *      The location of the remove command in the Journal.      *      * @throws IOException if an error occurs while updating the scheduler index.      */
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|Transaction
name|tx
parameter_list|,
specifier|final
name|KahaRemoveScheduledJobsCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|removeInRange
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|command
operator|.
name|getEndTime
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes all jobs from the schedulers index.  Must be called with the index locked.      *      * @param tx      *      The transaction under which the index entries for this scheduler are removed.      *      * @throws IOException if an error occurs removing the jobs from the scheduler index.      */
specifier|protected
name|void
name|removeAll
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|removeInRange
argument_list|(
name|tx
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes all scheduled jobs within the target range.      *      * This method can be used to remove all the stored jobs by passing a range of [0...Long.MAX_VALUE]      * or it can be used to remove all jobs at a given scheduled time by passing the same time value      * for both start and end.  If the optional location parameter is set then this method will update      * the store's remove location tracker with the location value and the Jobs that are being removed.      *      * This method must be called with the store index locked for writes.      *      * @param tx      *      The transaction under which the index is to be updated.      * @param start      *      The start time for the remove operation.      * @param finish      *      The end time for the remove operation.      * @param location (optional)      *      The location of the remove command that triggered this remove.      *      * @throws IOException if an error occurs during the remove operation.      */
specifier|protected
name|void
name|removeInRange
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|finish
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|>
name|i
init|=
name|this
operator|.
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|start
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<=
name|finish
condition|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|removedJobFileIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|decrementJournalCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|executionTime
range|:
name|keys
control|)
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|values
init|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|executionTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JobLocation
name|job
range|:
name|values
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing {} scheduled at: {}"
argument_list|,
name|job
argument_list|,
name|executionTime
argument_list|)
expr_stmt|;
comment|// Remove the references for add and reschedule commands for this job
comment|// so that those logs can be GC'd when free.
name|decrementJournalCount
operator|.
name|compute
argument_list|(
name|job
operator|.
name|getLocation
argument_list|()
operator|.
name|getDataFileId
argument_list|()
argument_list|,
operator|(
name|key
operator|,
name|value
operator|)
operator|->
name|value
operator|==
literal|null
condition|?
literal|1
else|:
name|value
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|getLastUpdate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|decrementJournalCount
operator|.
name|compute
argument_list|(
name|job
operator|.
name|getLastUpdate
argument_list|()
operator|.
name|getDataFileId
argument_list|()
argument_list|,
operator|(
name|key
operator|,
name|value
operator|)
operator|->
name|value
operator|==
literal|null
condition|?
literal|1
else|:
name|value
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// now that the job is removed from the index we can store the remove info and
comment|// then dereference the log files that hold the initial add command and the most
comment|// recent update command.  If the remove and the add that created the job are in
comment|// the same file we don't need to track it and just let a normal GC of the logs
comment|// remove it when the log is unreferenced.
if|if
condition|(
name|job
operator|.
name|getLocation
argument_list|()
operator|.
name|getDataFileId
argument_list|()
operator|!=
name|location
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|removedJobFileIds
operator|.
name|add
argument_list|(
name|job
operator|.
name|getLocation
argument_list|()
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|removedJobFileIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|referenceRemovedLocation
argument_list|(
name|tx
argument_list|,
name|location
argument_list|,
name|removedJobFileIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|decrementJournalCount
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|decrementJournalCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes a Job from the index using it's Id value and the time it is currently set to      * be executed.  This method will only remove the Job if it is found at the given execution      * time.      *      * This method must be called under index lock.      *      * @param tx      *        the transaction under which this method is being executed.      * @param jobId      *        the target Job Id to remove.      * @param executionTime      *        the scheduled time that for the Job Id that is being removed.      *      * @returns true if the Job was removed or false if not found at the given time.      *      * @throws IOException if an error occurs while removing the Job.      */
specifier|protected
name|boolean
name|removeJobAtTime
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|jobId
parameter_list|,
name|long
name|executionTime
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|jobs
init|=
name|this
operator|.
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|executionTime
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|JobLocation
argument_list|>
name|jobsIter
init|=
name|jobs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|jobsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JobLocation
name|job
init|=
name|jobsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|getJobId
argument_list|()
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|jobsIter
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// Remove the references for add and reschedule commands for this job
comment|// so that those logs can be GC'd when free.
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|job
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|.
name|getLastUpdate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|job
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// Return the list to the index modified or unmodified.
name|this
operator|.
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|executionTime
argument_list|,
name|jobs
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Walks the Scheduled Job Tree and collects the add location and last update location      * for all scheduled jobs.      *      * This method must be called with the index locked.      *      * @param tx      *        the transaction under which this operation was invoked.      *      * @return a iterator of all referenced Location values for this JobSchedulerImpl      *      * @throws IOException if an error occurs walking the scheduler tree.      */
specifier|protected
name|Iterator
argument_list|<
name|JobLocation
argument_list|>
name|getAllScheduledJobs
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|JobLocation
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
argument_list|>
name|mapIterator
init|=
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|JobLocation
argument_list|>
name|iterator
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
while|while
condition|(
name|iterator
operator|==
literal|null
operator|||
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mapIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
name|iterator
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mapIterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|iterator
operator|!=
literal|null
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobLocation
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|mainLoop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|running
operator|.
name|get
argument_list|()
operator|&&
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} Caught exception in mainloop"
argument_list|,
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JobScheduler: "
operator|+
name|this
operator|.
name|name
return|;
block|}
specifier|protected
name|void
name|mainLoop
parameter_list|()
block|{
while|while
condition|(
name|this
operator|.
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
name|this
operator|.
name|scheduleTime
operator|.
name|clearNewJob
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Read the list of scheduled events and fire the jobs, reschedule repeating jobs as
comment|// needed before firing the job event.
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|first
init|=
name|getNextToSchedule
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|first
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JobLocation
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|executionTime
init|=
name|first
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|long
name|nextExecutionTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|executionTime
operator|<=
name|currentTime
condition|)
block|{
for|for
control|(
specifier|final
name|JobLocation
name|job
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
break|break;
block|}
name|int
name|repeat
init|=
name|job
operator|.
name|getRepeat
argument_list|()
decl_stmt|;
name|nextExecutionTime
operator|=
name|calculateNextExecutionTime
argument_list|(
name|job
argument_list|,
name|currentTime
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
name|long
name|waitTime
init|=
name|nextExecutionTime
operator|-
name|currentTime
decl_stmt|;
name|this
operator|.
name|scheduleTime
operator|.
name|setWaitTime
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|job
operator|.
name|isCron
argument_list|()
condition|)
block|{
name|fireJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|repeat
operator|!=
literal|0
condition|)
block|{
comment|// Reschedule for the next time, the scheduler will take care of
comment|// updating the repeat counter on the update.
name|doReschedule
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|,
name|executionTime
argument_list|,
name|nextExecutionTime
argument_list|,
name|job
operator|.
name|getRescheduledCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|repeat
operator|==
literal|0
condition|)
block|{
comment|// This is a non-repeating Cron entry so we can fire and forget it.
name|fireJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextExecutionTime
operator|>
name|currentTime
condition|)
block|{
comment|// Reschedule the cron job as a new event, if the cron entry signals
comment|// a repeat then it will be stored separately and fired as a normal
comment|// event with decrementing repeat.
name|doReschedule
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|,
name|executionTime
argument_list|,
name|nextExecutionTime
argument_list|,
name|job
operator|.
name|getRescheduledCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|repeat
operator|!=
literal|0
condition|)
block|{
comment|// we have a separate schedule to run at this time
comment|// so the cron job is used to set of a separate schedule
comment|// hence we won't fire the original cron job to the
comment|// listeners but we do need to start a separate schedule
name|String
name|jobId
init|=
name|ID_GENERATOR
operator|.
name|generateId
argument_list|()
decl_stmt|;
name|ByteSequence
name|payload
init|=
name|getPayload
argument_list|(
name|job
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|schedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
literal|""
argument_list|,
name|job
operator|.
name|getDelay
argument_list|()
argument_list|,
name|job
operator|.
name|getPeriod
argument_list|()
argument_list|,
name|job
operator|.
name|getRepeat
argument_list|()
argument_list|)
expr_stmt|;
name|waitTime
operator|=
name|job
operator|.
name|getDelay
argument_list|()
operator|!=
literal|0
condition|?
name|job
operator|.
name|getDelay
argument_list|()
else|:
name|job
operator|.
name|getPeriod
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduleTime
operator|.
name|setWaitTime
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now remove all jobs that have not been rescheduled from this execution
comment|// time, if there are no more entries in that time it will be removed.
name|doRemove
argument_list|(
name|executionTime
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
comment|// If there is a job that should fire before the currently set wait time
comment|// we need to reset wait time otherwise we'll miss it.
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
name|nextUp
init|=
name|getNextToSchedule
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextUp
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
name|timeUntilNextScheduled
init|=
name|nextUp
operator|.
name|getKey
argument_list|()
operator|-
name|currentTime
decl_stmt|;
if|if
condition|(
name|timeUntilNextScheduled
operator|<
name|this
operator|.
name|scheduleTime
operator|.
name|getWaitTime
argument_list|()
condition|)
block|{
name|this
operator|.
name|scheduleTime
operator|.
name|setWaitTime
argument_list|(
name|timeUntilNextScheduled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|this
operator|.
name|scheduleTime
operator|.
name|setWaitTime
argument_list|(
name|executionTime
operator|-
name|currentTime
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|scheduleTime
operator|.
name|pause
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} Failed to schedule job"
argument_list|,
name|this
operator|.
name|name
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} Failed to shutdown JobSchedulerStore"
argument_list|,
name|this
operator|.
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|fireJob
parameter_list|(
name|JobLocation
name|job
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Firing: {}"
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|job
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|JobListener
name|l
range|:
name|jobListeners
control|)
block|{
name|l
operator|.
name|scheduledJob
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDispatching
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|this
operator|.
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"JobScheduler:"
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stopDispatching
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|scheduleTime
operator|.
name|wakeup
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
name|this
operator|.
name|thread
decl_stmt|;
name|this
operator|.
name|thread
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|running
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stopDispatching
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ByteSequence
name|getPayload
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
return|return
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|location
argument_list|)
return|;
block|}
name|long
name|calculateNextExecutionTime
parameter_list|(
specifier|final
name|JobLocation
name|job
parameter_list|,
name|long
name|currentTime
parameter_list|,
name|int
name|repeat
parameter_list|)
throws|throws
name|MessageFormatException
block|{
name|long
name|result
init|=
name|currentTime
decl_stmt|;
name|String
name|cron
init|=
name|job
operator|.
name|getCronEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|cron
operator|!=
literal|null
operator|&&
name|cron
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|cron
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|job
operator|.
name|getRepeat
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|result
operator|+=
name|job
operator|.
name|getPeriod
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|void
name|createIndexes
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|index
operator|=
operator|new
name|BTreeIndex
argument_list|<>
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|load
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|index
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|setValueMarshaller
argument_list|(
name|JobLocationsMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
name|void
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|=
operator|new
name|BTreeIndex
argument_list|<>
argument_list|(
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
argument_list|,
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|setValueMarshaller
argument_list|(
name|JobLocationsMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|index
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|ScheduleTime
block|{
specifier|private
specifier|final
name|int
name|DEFAULT_WAIT
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
name|int
name|DEFAULT_NEW_JOB_WAIT
init|=
literal|100
decl_stmt|;
specifier|private
name|boolean
name|newJob
decl_stmt|;
specifier|private
name|long
name|waitTime
init|=
name|DEFAULT_WAIT
decl_stmt|;
specifier|private
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**          * @return the waitTime          */
name|long
name|getWaitTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|waitTime
return|;
block|}
comment|/**          * @param waitTime          *            the waitTime to set          */
name|void
name|setWaitTime
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|newJob
condition|)
block|{
name|this
operator|.
name|waitTime
operator|=
name|waitTime
operator|>
literal|0
condition|?
name|waitTime
else|:
name|DEFAULT_WAIT
expr_stmt|;
block|}
block|}
name|void
name|pause
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
try|try
block|{
name|mutex
operator|.
name|wait
argument_list|(
name|this
operator|.
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
block|}
name|void
name|newJob
parameter_list|()
block|{
name|this
operator|.
name|newJob
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|waitTime
operator|=
name|DEFAULT_NEW_JOB_WAIT
expr_stmt|;
name|wakeup
argument_list|()
expr_stmt|;
block|}
name|void
name|clearNewJob
parameter_list|()
block|{
name|this
operator|.
name|newJob
operator|=
literal|false
expr_stmt|;
block|}
name|void
name|wakeup
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mutex
init|)
block|{
name|mutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

