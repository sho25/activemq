begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|SecurityTestSupport
extends|extends
name|JmsTestSupport
block|{
specifier|public
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|void
name|testUserReceiveFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidAuthentication
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
comment|// No user id
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
try|try
block|{
comment|// Bad password
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"user"
argument_list|,
literal|"krap"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
try|try
block|{
comment|// Bad userid
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"userkrap"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testUserReceiveSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestReceiveSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestReceiveFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserSendSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserSendFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestSendFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestSendSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws JMSException      */
specifier|public
name|void
name|doSend
parameter_list|(
name|boolean
name|fail
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|adminConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|adminConnection
argument_list|)
expr_stmt|;
name|adminConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|adminSession
init|=
name|adminConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|adminSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
try|try
block|{
name|sendMessages
argument_list|(
name|session
argument_list|,
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// If test is expected to fail, the cause must only be a
comment|// SecurityException
comment|// otherwise rethrow the exception
if|if
condition|(
operator|!
name|fail
operator|||
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SecurityException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|fail
condition|)
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
block|{
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|m
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveNoWait
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @throws JMSException      */
specifier|public
name|void
name|doReceive
parameter_list|(
name|boolean
name|fail
parameter_list|)
throws|throws
name|JMSException
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
name|fail
argument_list|(
literal|"Expected failure due to security constraint."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|fail
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SecurityException
condition|)
return|return;
throw|throw
name|e
throw|;
block|}
name|Connection
name|adminConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|adminConnection
argument_list|)
expr_stmt|;
name|Session
name|adminSession
init|=
name|adminConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|sendMessages
argument_list|(
name|adminSession
argument_list|,
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|m
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveNoWait
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestUserReceiveFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestInvalidAuthentication
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestUserReceiveSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestReceiveSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestReceiveFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestUserSendSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestUserSendFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestSendFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestSendSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

