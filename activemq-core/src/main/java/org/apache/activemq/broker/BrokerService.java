begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisoryBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ft
operator|.
name|MasterConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ConnectorViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|FTConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|JmsConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagedRegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|NetworkConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|NetworkConnectorViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ProxyConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|CompositeDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|MirroredQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|ConnectionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|jms
operator|.
name|JmsConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|proxy
operator|.
name|ProxyConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|MessageAuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQPersistenceAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
operator|.
name|VMTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Manages the lifecycle of an ActiveMQ Broker. A BrokerService consists of a  * number of transport connectors, network connectors and a bunch of properties  * which can be used to configure the broker as its lazily created.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|BrokerService
implements|implements
name|Service
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PORT
init|=
literal|"61616"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_HOST_NAME
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BROKER_NAME
init|=
literal|"localhost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BrokerService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7353129142305630237L
decl_stmt|;
specifier|private
name|boolean
name|useJmx
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enableStatistics
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|persistent
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|populateJMSXUserID
decl_stmt|;
specifier|private
name|boolean
name|useShutdownHook
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useLoggingForShutdownErrors
decl_stmt|;
specifier|private
name|boolean
name|shutdownOnMasterFailure
decl_stmt|;
specifier|private
name|String
name|brokerName
init|=
name|DEFAULT_BROKER_NAME
decl_stmt|;
specifier|private
name|File
name|dataDirectoryFile
decl_stmt|;
specifier|private
name|File
name|tmpDataDirectory
decl_stmt|;
specifier|private
name|Broker
name|broker
decl_stmt|;
specifier|private
name|BrokerView
name|adminView
decl_stmt|;
specifier|private
name|ManagementContext
name|managementContext
decl_stmt|;
specifier|private
name|ObjectName
name|brokerObjectName
decl_stmt|;
specifier|private
name|TaskRunnerFactory
name|taskRunnerFactory
decl_stmt|;
specifier|private
name|TaskRunnerFactory
name|persistenceTaskRunnerFactory
decl_stmt|;
specifier|private
name|SystemUsage
name|systemUsage
decl_stmt|;
specifier|private
name|SystemUsage
name|producerSystemUsage
decl_stmt|;
specifier|private
name|SystemUsage
name|consumerSystemUsaage
decl_stmt|;
specifier|private
name|PersistenceAdapter
name|persistenceAdapter
decl_stmt|;
specifier|private
name|PersistenceAdapterFactory
name|persistenceFactory
decl_stmt|;
specifier|private
name|DestinationFactory
name|destinationFactory
decl_stmt|;
specifier|private
name|MessageAuthorizationPolicy
name|messageAuthorizationPolicy
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|TransportConnector
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NetworkConnector
argument_list|>
name|networkConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|NetworkConnector
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|proxyConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ObjectName
argument_list|>
name|registeredMBeanNames
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JmsConnector
argument_list|>
name|jmsConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|JmsConnector
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Service
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|Service
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MasterConnector
name|masterConnector
decl_stmt|;
specifier|private
name|String
name|masterConnectorURI
decl_stmt|;
specifier|private
specifier|transient
name|Thread
name|shutdownHook
decl_stmt|;
specifier|private
name|String
index|[]
name|transportConnectorURIs
decl_stmt|;
specifier|private
name|String
index|[]
name|networkConnectorURIs
decl_stmt|;
specifier|private
name|JmsConnector
index|[]
name|jmsBridgeConnectors
decl_stmt|;
comment|// these are Jms to Jms bridges
comment|// to other jms messaging
comment|// systems
specifier|private
name|boolean
name|deleteAllMessagesOnStartup
decl_stmt|;
specifier|private
name|boolean
name|advisorySupport
init|=
literal|true
decl_stmt|;
specifier|private
name|URI
name|vmConnectorURI
decl_stmt|;
specifier|private
name|PolicyMap
name|destinationPolicy
decl_stmt|;
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|AtomicBoolean
name|stopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|BrokerPlugin
index|[]
name|plugins
decl_stmt|;
specifier|private
name|boolean
name|keepDurableSubsActive
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useVirtualTopics
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useMirroredQueues
init|=
literal|false
decl_stmt|;
specifier|private
name|BrokerId
name|brokerId
decl_stmt|;
specifier|private
name|DestinationInterceptor
index|[]
name|destinationInterceptors
decl_stmt|;
specifier|private
name|ActiveMQDestination
index|[]
name|destinations
decl_stmt|;
specifier|private
name|Store
name|tempDataStore
decl_stmt|;
specifier|private
name|int
name|persistenceThreadPriority
init|=
name|Thread
operator|.
name|MAX_PRIORITY
decl_stmt|;
specifier|private
name|boolean
name|useLocalHostBrokerName
decl_stmt|;
specifier|private
name|CountDownLatch
name|stoppedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|supportFailOver
decl_stmt|;
specifier|private
name|boolean
name|clustered
decl_stmt|;
specifier|private
name|Broker
name|regionBroker
decl_stmt|;
static|static
block|{
name|String
name|localHostName
init|=
literal|"localhost"
decl_stmt|;
try|try
block|{
name|localHostName
operator|=
name|java
operator|.
name|net
operator|.
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to resolve localhost"
argument_list|)
expr_stmt|;
block|}
name|LOCAL_HOST_NAME
operator|=
name|localHostName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BrokerService["
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|"]"
return|;
block|}
comment|/**      * Adds a new transport connector for the given bind address      *       * @return the newly created and added transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|String
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|bindAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new transport connector for the given bind address      *       * @return the newly created and added transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|URI
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addConnector
argument_list|(
name|createTransportConnector
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|bindAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new transport connector for the given TransportServer transport      *       * @return the newly created and added transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|TransportServer
name|transport
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addConnector
argument_list|(
operator|new
name|TransportConnector
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|transport
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new transport connector      *       * @return the transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|transportConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
comment|/**      * Stops and removes a transport connector from the broker.      *       * @param connector      * @return true if the connector has been previously added to the broker      * @throws Exception      */
specifier|public
name|boolean
name|removeConnector
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|rc
init|=
name|transportConnectors
operator|.
name|remove
argument_list|(
name|connector
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
condition|)
block|{
name|unregisterConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Adds a new network connector using the given discovery address      *       * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|NetworkConnector
name|addNetworkConnector
parameter_list|(
name|String
name|discoveryAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|discoveryAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new proxy connector using the given bind address      *       * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|ProxyConnector
name|addProxyConnector
parameter_list|(
name|String
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addProxyConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|bindAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new network connector using the given discovery address      *       * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|NetworkConnector
name|addNetworkConnector
parameter_list|(
name|URI
name|discoveryAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
name|discoveryAddress
argument_list|)
decl_stmt|;
return|return
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
return|;
block|}
comment|/**      * Adds a new proxy connector using the given bind address      *       * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|ProxyConnector
name|addProxyConnector
parameter_list|(
name|URI
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|ProxyConnector
name|connector
init|=
operator|new
name|ProxyConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setBind
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setRemote
argument_list|(
operator|new
name|URI
argument_list|(
literal|"fanout:multicast://default"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|addProxyConnector
argument_list|(
name|connector
argument_list|)
return|;
block|}
comment|/**      * Adds a new network connector to connect this broker to a federated      * network      */
specifier|public
name|NetworkConnector
name|addNetworkConnector
parameter_list|(
name|NetworkConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|connector
operator|.
name|setBrokerService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"network"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"async"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|URISupport
operator|.
name|createURIWithQuery
argument_list|(
name|uri
argument_list|,
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setLocalUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
comment|// Set a connection filter so that the connector does not establish loop
comment|// back connections.
name|connector
operator|.
name|setConnectionFilter
argument_list|(
operator|new
name|ConnectionFilter
argument_list|()
block|{
specifier|public
name|boolean
name|connectTo
parameter_list|(
name|URI
name|location
parameter_list|)
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
name|getTransportConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TransportConnector
argument_list|>
name|iter
init|=
name|transportConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|TransportConnector
name|tc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|tc
operator|.
name|getConnectUri
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{                     }
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|networkConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|registerNetworkConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
comment|/**      * Removes the given network connector without stopping it. The caller      * should call {@link NetworkConnector#stop()} to close the connector      */
specifier|public
name|boolean
name|removeNetworkConnector
parameter_list|(
name|NetworkConnector
name|connector
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|networkConnectors
operator|.
name|remove
argument_list|(
name|connector
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
name|unregisterNetworkConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|public
name|ProxyConnector
name|addProxyConnector
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setLocalUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|registerProxyConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
specifier|public
name|JmsConnector
name|addJmsConnector
parameter_list|(
name|JmsConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|connector
operator|.
name|setBrokerService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|jmsConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|registerJmsConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
specifier|public
name|JmsConnector
name|removeJmsConnector
parameter_list|(
name|JmsConnector
name|connector
parameter_list|)
block|{
if|if
condition|(
name|jmsConnectors
operator|.
name|remove
argument_list|(
name|connector
argument_list|)
condition|)
block|{
return|return
name|connector
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @return Returns the masterConnectorURI.      */
specifier|public
name|String
name|getMasterConnectorURI
parameter_list|()
block|{
return|return
name|masterConnectorURI
return|;
block|}
comment|/**      * @param masterConnectorURI The masterConnectorURI to set.      */
specifier|public
name|void
name|setMasterConnectorURI
parameter_list|(
name|String
name|masterConnectorURI
parameter_list|)
block|{
name|this
operator|.
name|masterConnectorURI
operator|=
name|masterConnectorURI
expr_stmt|;
block|}
comment|/**      * @return true if this Broker is a slave to a Master      */
specifier|public
name|boolean
name|isSlave
parameter_list|()
block|{
return|return
name|masterConnector
operator|!=
literal|null
operator|&&
name|masterConnector
operator|.
name|isSlave
argument_list|()
return|;
block|}
specifier|public
name|void
name|masterFailed
parameter_list|()
block|{
if|if
condition|(
name|shutdownOnMasterFailure
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"The Master has failed ... shutting down"
argument_list|)
expr_stmt|;
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop for master failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Master Failed - starting all connectors"
argument_list|)
expr_stmt|;
try|try
block|{
name|startAllConnectors
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to startAllConnectors"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
operator|.
name|get
argument_list|()
return|;
block|}
comment|// Service interface
comment|// -------------------------------------------------------------------------
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// lets just ignore redundant start() calls
comment|// as its way too easy to not be completely sure if start() has been
comment|// called or not with the gazillion of different configuration
comment|// mechanisms
comment|// throw new IllegalStateException("Allready started.");
return|return;
block|}
try|try
block|{
name|processHelperProperties
argument_list|()
expr_stmt|;
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|bind
argument_list|(
name|getBrokerName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|startDestinations
argument_list|()
expr_stmt|;
name|addShutdownHook
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using Persistence Adapter: "
operator|+
name|getPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteAllMessagesOnStartup
condition|)
block|{
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|getManagementContext
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|getBroker
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/*              * if(isUseJmx()){ // yes - this is order dependent! // register all              * destination in persistence store including inactive destinations              * as mbeans this.startDestinationsInPersistenceStore(broker); }              */
name|startAllConnectors
argument_list|()
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
operator|&&
name|masterConnector
operator|!=
literal|null
condition|)
block|{
name|registerFTConnectorMBean
argument_list|(
name|masterConnector
argument_list|)
expr_stmt|;
block|}
name|brokerId
operator|=
name|broker
operator|.
name|getBrokerId
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ActiveMQ JMS Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|brokerId
operator|+
literal|") started"
argument_list|)
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|brokerServiceStarted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start ActiveMQ JMS Message Broker. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"ActiveMQ Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|brokerId
operator|+
literal|") is shutting down"
argument_list|)
expr_stmt|;
name|removeShutdownHook
argument_list|()
expr_stmt|;
name|ServiceStopper
name|stopper
init|=
operator|new
name|ServiceStopper
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|stopper
operator|.
name|stop
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
name|stopAllConnectors
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|stopper
operator|.
name|stop
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tempDataStore
operator|!=
literal|null
condition|)
block|{
name|tempDataStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ObjectName
argument_list|>
name|iter
init|=
name|registeredMBeanNames
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|mbeanServer
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|stopper
operator|.
name|stop
argument_list|(
name|getManagementContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove any VMTransports connected
comment|// this has to be done after services are stopped,
comment|// to avoid timimg issue with discovery (spinning up a new instance)
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|unbind
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|VMTransportFactory
operator|.
name|stopped
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|stopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stoppedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ActiveMQ JMS Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|brokerId
operator|+
literal|") stopped"
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|throwFirstException
argument_list|()
expr_stmt|;
block|}
comment|/**      * A helper method to block the caller thread until the broker has been      * stopped      */
specifier|public
name|void
name|waitUntilStopped
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|stoppedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
comment|/**      * Returns the message broker      */
specifier|public
name|Broker
name|getBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ActiveMQ "
operator|+
name|ActiveMQConnectionMetaData
operator|.
name|PROVIDER_VERSION
operator|+
literal|" JMS Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|") is starting"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"For help or more information please see: http://activemq.apache.org/"
argument_list|)
expr_stmt|;
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
return|return
name|broker
return|;
block|}
comment|/**      * Returns the administration view of the broker; used to create and destroy      * resources such as queues and topics. Note this method returns null if JMX      * is disabled.      */
specifier|public
name|BrokerView
name|getAdminView
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|adminView
operator|==
literal|null
condition|)
block|{
comment|// force lazy creation
name|getBroker
argument_list|()
expr_stmt|;
block|}
return|return
name|adminView
return|;
block|}
specifier|public
name|void
name|setAdminView
parameter_list|(
name|BrokerView
name|adminView
parameter_list|)
block|{
name|this
operator|.
name|adminView
operator|=
name|adminView
expr_stmt|;
block|}
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
return|return
name|brokerName
return|;
block|}
comment|/**      * Sets the name of this broker; which must be unique in the network      *       * @param brokerName      */
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
if|if
condition|(
name|brokerName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The broker name cannot be null"
argument_list|)
throw|;
block|}
name|String
name|str
init|=
name|brokerName
operator|.
name|replaceAll
argument_list|(
literal|"[^a-zA-Z0-9\\.\\_\\-\\:]"
argument_list|,
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|equals
argument_list|(
name|brokerName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Broker Name: "
operator|+
name|brokerName
operator|+
literal|" contained illegal characters - replaced with "
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|brokerName
operator|=
name|str
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PersistenceAdapterFactory
name|getPersistenceFactory
parameter_list|()
block|{
if|if
condition|(
name|persistenceFactory
operator|==
literal|null
condition|)
block|{
name|persistenceFactory
operator|=
name|createPersistenceFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|persistenceFactory
return|;
block|}
specifier|public
name|File
name|getDataDirectoryFile
parameter_list|()
block|{
if|if
condition|(
name|dataDirectoryFile
operator|==
literal|null
condition|)
block|{
name|dataDirectoryFile
operator|=
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dataDirectoryFile
return|;
block|}
specifier|public
name|File
name|getBrokerDataDirectory
parameter_list|()
block|{
name|String
name|brokerDir
init|=
name|getBrokerName
argument_list|()
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|getDataDirectoryFile
argument_list|()
argument_list|,
name|brokerDir
argument_list|)
return|;
block|}
comment|/**      * Sets the directory in which the data files will be stored by default for      * the JDBC and Journal persistence adaptors.      *       * @param dataDirectory the directory to store data files      */
specifier|public
name|void
name|setDataDirectory
parameter_list|(
name|String
name|dataDirectory
parameter_list|)
block|{
name|setDataDirectoryFile
argument_list|(
operator|new
name|File
argument_list|(
name|dataDirectory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the directory in which the data files will be stored by default for      * the JDBC and Journal persistence adaptors.      *       * @param dataDirectoryFile the directory to store data files      */
specifier|public
name|void
name|setDataDirectoryFile
parameter_list|(
name|File
name|dataDirectoryFile
parameter_list|)
block|{
name|this
operator|.
name|dataDirectoryFile
operator|=
name|dataDirectoryFile
expr_stmt|;
block|}
comment|/**      * @return the tmpDataDirectory      */
specifier|public
name|File
name|getTmpDataDirectory
parameter_list|()
block|{
if|if
condition|(
name|tmpDataDirectory
operator|==
literal|null
condition|)
block|{
name|tmpDataDirectory
operator|=
operator|new
name|File
argument_list|(
name|getBrokerDataDirectory
argument_list|()
argument_list|,
literal|"tmp_storage"
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpDataDirectory
return|;
block|}
comment|/**      * @param tmpDataDirectory the tmpDataDirectory to set      */
specifier|public
name|void
name|setTmpDataDirectory
parameter_list|(
name|File
name|tmpDataDirectory
parameter_list|)
block|{
name|this
operator|.
name|tmpDataDirectory
operator|=
name|tmpDataDirectory
expr_stmt|;
block|}
specifier|public
name|void
name|setPersistenceFactory
parameter_list|(
name|PersistenceAdapterFactory
name|persistenceFactory
parameter_list|)
block|{
name|this
operator|.
name|persistenceFactory
operator|=
name|persistenceFactory
expr_stmt|;
block|}
specifier|public
name|void
name|setDestinationFactory
parameter_list|(
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
name|this
operator|.
name|destinationFactory
operator|=
name|destinationFactory
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
comment|/**      * Sets whether or not persistence is enabled or disabled.      */
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPopulateJMSXUserID
parameter_list|()
block|{
return|return
name|populateJMSXUserID
return|;
block|}
comment|/**      * Sets whether or not the broker should populate the JMSXUserID header.      */
specifier|public
name|void
name|setPopulateJMSXUserID
parameter_list|(
name|boolean
name|populateJMSXUserID
parameter_list|)
block|{
name|this
operator|.
name|populateJMSXUserID
operator|=
name|populateJMSXUserID
expr_stmt|;
block|}
specifier|public
name|SystemUsage
name|getSystemUsage
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|systemUsage
operator|==
literal|null
condition|)
block|{
name|systemUsage
operator|=
operator|new
name|SystemUsage
argument_list|(
literal|"Main"
argument_list|,
name|getPersistenceAdapter
argument_list|()
argument_list|,
name|getTempDataStore
argument_list|()
argument_list|)
expr_stmt|;
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|64
argument_list|)
expr_stmt|;
comment|// Default 64 Meg
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|100
argument_list|)
expr_stmt|;
comment|// 10 Gb
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|100
argument_list|)
expr_stmt|;
comment|// 100 GB
name|addService
argument_list|(
name|this
operator|.
name|systemUsage
argument_list|)
expr_stmt|;
block|}
return|return
name|systemUsage
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Cannot create SystemUsage"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fatally failed to create SystemUsage"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setSystemUsage
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|systemUsage
operator|!=
literal|null
condition|)
block|{
name|removeService
argument_list|(
name|this
operator|.
name|systemUsage
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|systemUsage
operator|=
name|memoryManager
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|systemUsage
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the consumerUsageManager      * @throws IOException       */
specifier|public
name|SystemUsage
name|getConsumerSystemUsage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|consumerSystemUsaage
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|consumerSystemUsaage
operator|=
operator|new
name|SystemUsage
argument_list|(
name|getSystemUsage
argument_list|()
argument_list|,
literal|"Consumer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerSystemUsaage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setUsagePortion
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|consumerSystemUsaage
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|consumerSystemUsaage
return|;
block|}
comment|/**      * @param consumerSystemUsaage the storeSystemUsage to set      */
specifier|public
name|void
name|setConsumerSystemUsage
parameter_list|(
name|SystemUsage
name|consumerSystemUsaage
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|consumerSystemUsaage
operator|!=
literal|null
condition|)
block|{
name|removeService
argument_list|(
name|this
operator|.
name|consumerSystemUsaage
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|consumerSystemUsaage
operator|=
name|consumerSystemUsaage
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|consumerSystemUsaage
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the producerUsageManager      * @throws IOException       */
specifier|public
name|SystemUsage
name|getProducerSystemUsage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|producerSystemUsage
operator|==
literal|null
condition|)
block|{
name|producerSystemUsage
operator|=
operator|new
name|SystemUsage
argument_list|(
name|getSystemUsage
argument_list|()
argument_list|,
literal|"Producer"
argument_list|)
expr_stmt|;
name|producerSystemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setUsagePortion
argument_list|(
literal|0.45f
argument_list|)
expr_stmt|;
name|addService
argument_list|(
name|producerSystemUsage
argument_list|)
expr_stmt|;
block|}
return|return
name|producerSystemUsage
return|;
block|}
comment|/**      * @param producerUsageManager the producerUsageManager to set      */
specifier|public
name|void
name|setProducerSystemUsage
parameter_list|(
name|SystemUsage
name|producerUsageManager
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|producerSystemUsage
operator|!=
literal|null
condition|)
block|{
name|removeService
argument_list|(
name|this
operator|.
name|producerSystemUsage
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|producerSystemUsage
operator|=
name|producerUsageManager
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|producerSystemUsage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PersistenceAdapter
name|getPersistenceAdapter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|persistenceAdapter
operator|==
literal|null
condition|)
block|{
name|persistenceAdapter
operator|=
name|createPersistenceAdapter
argument_list|()
expr_stmt|;
name|configureService
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
name|this
operator|.
name|persistenceAdapter
operator|=
name|registerPersistenceAdapterMBean
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
block|}
return|return
name|persistenceAdapter
return|;
block|}
comment|/**      * Sets the persistence adaptor implementation to use for this broker      * @throws IOException       */
specifier|public
name|void
name|setPersistenceAdapter
parameter_list|(
name|PersistenceAdapter
name|persistenceAdapter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|persistenceAdapter
operator|=
name|persistenceAdapter
expr_stmt|;
name|configureService
argument_list|(
name|this
operator|.
name|persistenceAdapter
argument_list|)
expr_stmt|;
name|this
operator|.
name|persistenceAdapter
operator|=
name|registerPersistenceAdapterMBean
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TaskRunnerFactory
name|getTaskRunnerFactory
parameter_list|()
block|{
if|if
condition|(
name|taskRunnerFactory
operator|==
literal|null
condition|)
block|{
name|taskRunnerFactory
operator|=
operator|new
name|TaskRunnerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|taskRunnerFactory
return|;
block|}
specifier|public
name|void
name|setTaskRunnerFactory
parameter_list|(
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
name|this
operator|.
name|taskRunnerFactory
operator|=
name|taskRunnerFactory
expr_stmt|;
block|}
specifier|public
name|TaskRunnerFactory
name|getPersistenceTaskRunnerFactory
parameter_list|()
block|{
if|if
condition|(
name|taskRunnerFactory
operator|==
literal|null
condition|)
block|{
name|persistenceTaskRunnerFactory
operator|=
operator|new
name|TaskRunnerFactory
argument_list|(
literal|"Persistence Adaptor Task"
argument_list|,
name|persistenceThreadPriority
argument_list|,
literal|true
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|persistenceTaskRunnerFactory
return|;
block|}
specifier|public
name|void
name|setPersistenceTaskRunnerFactory
parameter_list|(
name|TaskRunnerFactory
name|persistenceTaskRunnerFactory
parameter_list|)
block|{
name|this
operator|.
name|persistenceTaskRunnerFactory
operator|=
name|persistenceTaskRunnerFactory
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseJmx
parameter_list|()
block|{
return|return
name|useJmx
return|;
block|}
specifier|public
name|boolean
name|isEnableStatistics
parameter_list|()
block|{
return|return
name|enableStatistics
return|;
block|}
comment|/**      * Sets whether or not the Broker's services enable statistics or not.      */
specifier|public
name|void
name|setEnableStatistics
parameter_list|(
name|boolean
name|enableStatistics
parameter_list|)
block|{
name|this
operator|.
name|enableStatistics
operator|=
name|enableStatistics
expr_stmt|;
block|}
comment|/**      * Sets whether or not the Broker's services should be exposed into JMX or      * not.      */
specifier|public
name|void
name|setUseJmx
parameter_list|(
name|boolean
name|useJmx
parameter_list|)
block|{
name|this
operator|.
name|useJmx
operator|=
name|useJmx
expr_stmt|;
block|}
specifier|public
name|ObjectName
name|getBrokerObjectName
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|brokerObjectName
operator|==
literal|null
condition|)
block|{
name|brokerObjectName
operator|=
name|createBrokerObjectName
argument_list|()
expr_stmt|;
block|}
return|return
name|brokerObjectName
return|;
block|}
comment|/**      * Sets the JMX ObjectName for this broker      */
specifier|public
name|void
name|setBrokerObjectName
parameter_list|(
name|ObjectName
name|brokerObjectName
parameter_list|)
block|{
name|this
operator|.
name|brokerObjectName
operator|=
name|brokerObjectName
expr_stmt|;
block|}
specifier|public
name|ManagementContext
name|getManagementContext
parameter_list|()
block|{
if|if
condition|(
name|managementContext
operator|==
literal|null
condition|)
block|{
name|managementContext
operator|=
operator|new
name|ManagementContext
argument_list|()
expr_stmt|;
block|}
return|return
name|managementContext
return|;
block|}
specifier|public
name|void
name|setManagementContext
parameter_list|(
name|ManagementContext
name|managementContext
parameter_list|)
block|{
name|this
operator|.
name|managementContext
operator|=
name|managementContext
expr_stmt|;
block|}
specifier|public
name|NetworkConnector
name|getNetworkConnectorByName
parameter_list|(
name|String
name|connectorName
parameter_list|)
block|{
for|for
control|(
name|NetworkConnector
name|connector
range|:
name|networkConnectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|connectorName
argument_list|)
condition|)
block|{
return|return
name|connector
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
index|[]
name|getNetworkConnectorURIs
parameter_list|()
block|{
return|return
name|networkConnectorURIs
return|;
block|}
specifier|public
name|void
name|setNetworkConnectorURIs
parameter_list|(
name|String
index|[]
name|networkConnectorURIs
parameter_list|)
block|{
name|this
operator|.
name|networkConnectorURIs
operator|=
name|networkConnectorURIs
expr_stmt|;
block|}
specifier|public
name|TransportConnector
name|getConnectorByName
parameter_list|(
name|String
name|connectorName
parameter_list|)
block|{
for|for
control|(
name|TransportConnector
name|connector
range|:
name|transportConnectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|connectorName
argument_list|)
condition|)
block|{
return|return
name|connector
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
index|[]
name|getTransportConnectorURIs
parameter_list|()
block|{
return|return
name|transportConnectorURIs
return|;
block|}
specifier|public
name|void
name|setTransportConnectorURIs
parameter_list|(
name|String
index|[]
name|transportConnectorURIs
parameter_list|)
block|{
name|this
operator|.
name|transportConnectorURIs
operator|=
name|transportConnectorURIs
expr_stmt|;
block|}
comment|/**      * @return Returns the jmsBridgeConnectors.      */
specifier|public
name|JmsConnector
index|[]
name|getJmsBridgeConnectors
parameter_list|()
block|{
return|return
name|jmsBridgeConnectors
return|;
block|}
comment|/**      * @param jmsConnectors The jmsBridgeConnectors to set.      */
specifier|public
name|void
name|setJmsBridgeConnectors
parameter_list|(
name|JmsConnector
index|[]
name|jmsConnectors
parameter_list|)
block|{
name|this
operator|.
name|jmsBridgeConnectors
operator|=
name|jmsConnectors
expr_stmt|;
block|}
specifier|public
name|Service
index|[]
name|getServices
parameter_list|()
block|{
return|return
operator|(
name|Service
index|[]
operator|)
name|services
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/**      * Sets the services associated with this broker such as a      * {@link MasterConnector}      */
specifier|public
name|void
name|setServices
parameter_list|(
name|Service
index|[]
name|services
parameter_list|)
block|{
name|this
operator|.
name|services
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|services
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|services
operator|.
name|add
argument_list|(
name|services
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds a new service so that it will be started as part of the broker      * lifecycle      */
specifier|public
name|void
name|addService
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|services
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeService
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|services
operator|.
name|remove
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseLoggingForShutdownErrors
parameter_list|()
block|{
return|return
name|useLoggingForShutdownErrors
return|;
block|}
comment|/**      * Sets whether or not we should use commons-logging when reporting errors      * when shutting down the broker      */
specifier|public
name|void
name|setUseLoggingForShutdownErrors
parameter_list|(
name|boolean
name|useLoggingForShutdownErrors
parameter_list|)
block|{
name|this
operator|.
name|useLoggingForShutdownErrors
operator|=
name|useLoggingForShutdownErrors
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseShutdownHook
parameter_list|()
block|{
return|return
name|useShutdownHook
return|;
block|}
comment|/**      * Sets whether or not we should use a shutdown handler to close down the      * broker cleanly if the JVM is terminated. It is recommended you leave this      * enabled.      */
specifier|public
name|void
name|setUseShutdownHook
parameter_list|(
name|boolean
name|useShutdownHook
parameter_list|)
block|{
name|this
operator|.
name|useShutdownHook
operator|=
name|useShutdownHook
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAdvisorySupport
parameter_list|()
block|{
return|return
name|advisorySupport
return|;
block|}
comment|/**      * Allows the support of advisory messages to be disabled for performance      * reasons.      */
specifier|public
name|void
name|setAdvisorySupport
parameter_list|(
name|boolean
name|advisorySupport
parameter_list|)
block|{
name|this
operator|.
name|advisorySupport
operator|=
name|advisorySupport
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|getTransportConnectors
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|TransportConnector
argument_list|>
argument_list|(
name|transportConnectors
argument_list|)
return|;
block|}
comment|/**      * Sets the transport connectors which this broker will listen on for new      * clients      *       * @org.apache.xbean.Property nestedType="org.apache.activemq.broker.TransportConnector"      */
specifier|public
name|void
name|setTransportConnectors
parameter_list|(
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
argument_list|<
name|TransportConnector
argument_list|>
name|iter
init|=
name|transportConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TransportConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|NetworkConnector
argument_list|>
name|getNetworkConnectors
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|NetworkConnector
argument_list|>
argument_list|(
name|networkConnectors
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ProxyConnector
argument_list|>
name|getProxyConnectors
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ProxyConnector
argument_list|>
argument_list|(
name|proxyConnectors
argument_list|)
return|;
block|}
comment|/**      * Sets the network connectors which this broker will use to connect to      * other brokers in a federated network      *       * @org.apache.xbean.Property nestedType="org.apache.activemq.network.NetworkConnector"      */
specifier|public
name|void
name|setNetworkConnectors
parameter_list|(
name|List
name|networkConnectors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|networkConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NetworkConnector
name|connector
init|=
operator|(
name|NetworkConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the network connectors which this broker will use to connect to      * other brokers in a federated network      */
specifier|public
name|void
name|setProxyConnectors
parameter_list|(
name|List
name|proxyConnectors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|proxyConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProxyConnector
name|connector
init|=
operator|(
name|ProxyConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addProxyConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PolicyMap
name|getDestinationPolicy
parameter_list|()
block|{
return|return
name|destinationPolicy
return|;
block|}
comment|/**      * Sets the destination specific policies available either for exact      * destinations or for wildcard areas of destinations.      */
specifier|public
name|void
name|setDestinationPolicy
parameter_list|(
name|PolicyMap
name|policyMap
parameter_list|)
block|{
name|this
operator|.
name|destinationPolicy
operator|=
name|policyMap
expr_stmt|;
block|}
specifier|public
name|BrokerPlugin
index|[]
name|getPlugins
parameter_list|()
block|{
return|return
name|plugins
return|;
block|}
comment|/**      * Sets a number of broker plugins to install such as for security      * authentication or authorization      */
specifier|public
name|void
name|setPlugins
parameter_list|(
name|BrokerPlugin
index|[]
name|plugins
parameter_list|)
block|{
name|this
operator|.
name|plugins
operator|=
name|plugins
expr_stmt|;
block|}
specifier|public
name|MessageAuthorizationPolicy
name|getMessageAuthorizationPolicy
parameter_list|()
block|{
return|return
name|messageAuthorizationPolicy
return|;
block|}
comment|/**      * Sets the policy used to decide if the current connection is authorized to      * consume a given message      */
specifier|public
name|void
name|setMessageAuthorizationPolicy
parameter_list|(
name|MessageAuthorizationPolicy
name|messageAuthorizationPolicy
parameter_list|)
block|{
name|this
operator|.
name|messageAuthorizationPolicy
operator|=
name|messageAuthorizationPolicy
expr_stmt|;
block|}
comment|/**      * Delete all messages from the persistent store      *       * @throws IOException      */
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|getPersistenceAdapter
argument_list|()
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDeleteAllMessagesOnStartup
parameter_list|()
block|{
return|return
name|deleteAllMessagesOnStartup
return|;
block|}
comment|/**      * Sets whether or not all messages are deleted on startup - mostly only      * useful for testing.      */
specifier|public
name|void
name|setDeleteAllMessagesOnStartup
parameter_list|(
name|boolean
name|deletePersistentMessagesOnStartup
parameter_list|)
block|{
name|this
operator|.
name|deleteAllMessagesOnStartup
operator|=
name|deletePersistentMessagesOnStartup
expr_stmt|;
block|}
specifier|public
name|URI
name|getVmConnectorURI
parameter_list|()
block|{
if|if
condition|(
name|vmConnectorURI
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|vmConnectorURI
operator|=
operator|new
name|URI
argument_list|(
literal|"vm://"
operator|+
name|getBrokerName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[^a-zA-Z0-9\\.\\_\\-]"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Badly formed URI from "
operator|+
name|getBrokerName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|vmConnectorURI
return|;
block|}
specifier|public
name|void
name|setVmConnectorURI
parameter_list|(
name|URI
name|vmConnectorURI
parameter_list|)
block|{
name|this
operator|.
name|vmConnectorURI
operator|=
name|vmConnectorURI
expr_stmt|;
block|}
comment|/**      * @return Returns the shutdownOnMasterFailure.      */
specifier|public
name|boolean
name|isShutdownOnMasterFailure
parameter_list|()
block|{
return|return
name|shutdownOnMasterFailure
return|;
block|}
comment|/**      * @param shutdownOnMasterFailure The shutdownOnMasterFailure to set.      */
specifier|public
name|void
name|setShutdownOnMasterFailure
parameter_list|(
name|boolean
name|shutdownOnMasterFailure
parameter_list|)
block|{
name|this
operator|.
name|shutdownOnMasterFailure
operator|=
name|shutdownOnMasterFailure
expr_stmt|;
block|}
specifier|public
name|boolean
name|isKeepDurableSubsActive
parameter_list|()
block|{
return|return
name|keepDurableSubsActive
return|;
block|}
specifier|public
name|void
name|setKeepDurableSubsActive
parameter_list|(
name|boolean
name|keepDurableSubsActive
parameter_list|)
block|{
name|this
operator|.
name|keepDurableSubsActive
operator|=
name|keepDurableSubsActive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseVirtualTopics
parameter_list|()
block|{
return|return
name|useVirtualTopics
return|;
block|}
comment|/**      * Sets whether or not<a      * href="http://activemq.apache.org/virtual-destinations.html">Virtual      * Topics</a> should be supported by default if they have not been      * explicitly configured.      */
specifier|public
name|void
name|setUseVirtualTopics
parameter_list|(
name|boolean
name|useVirtualTopics
parameter_list|)
block|{
name|this
operator|.
name|useVirtualTopics
operator|=
name|useVirtualTopics
expr_stmt|;
block|}
specifier|public
name|DestinationInterceptor
index|[]
name|getDestinationInterceptors
parameter_list|()
block|{
return|return
name|destinationInterceptors
return|;
block|}
specifier|public
name|boolean
name|isUseMirroredQueues
parameter_list|()
block|{
return|return
name|useMirroredQueues
return|;
block|}
comment|/**      * Sets whether or not<a      * href="http://activemq.apache.org/mirrored-queues.html">Mirrored      * Queues</a> should be supported by default if they have not been      * explicitly configured.      */
specifier|public
name|void
name|setUseMirroredQueues
parameter_list|(
name|boolean
name|useMirroredQueues
parameter_list|)
block|{
name|this
operator|.
name|useMirroredQueues
operator|=
name|useMirroredQueues
expr_stmt|;
block|}
comment|/**      * Sets the destination interceptors to use      */
specifier|public
name|void
name|setDestinationInterceptors
parameter_list|(
name|DestinationInterceptor
index|[]
name|destinationInterceptors
parameter_list|)
block|{
name|this
operator|.
name|destinationInterceptors
operator|=
name|destinationInterceptors
expr_stmt|;
block|}
specifier|public
name|ActiveMQDestination
index|[]
name|getDestinations
parameter_list|()
block|{
return|return
name|destinations
return|;
block|}
comment|/**      * Sets the destinations which should be loaded/created on startup      */
specifier|public
name|void
name|setDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|destinations
parameter_list|)
block|{
name|this
operator|.
name|destinations
operator|=
name|destinations
expr_stmt|;
block|}
comment|/**      * @return the tempDataStore      */
specifier|public
specifier|synchronized
name|Store
name|getTempDataStore
parameter_list|()
block|{
if|if
condition|(
name|tempDataStore
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isPersistent
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
try|try
block|{
name|File
name|directory
init|=
name|getTmpDataDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|exists
argument_list|()
operator|&&
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|empty
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|&=
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|empty
condition|)
block|{
name|String
name|str
init|=
name|result
condition|?
literal|"Successfully deleted"
else|:
literal|"Failed to delete"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|str
operator|+
literal|" temporary storage"
argument_list|)
expr_stmt|;
block|}
name|tempDataStore
operator|=
name|StoreFactory
operator|.
name|open
argument_list|(
name|getTmpDataDirectory
argument_list|()
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|tempDataStore
return|;
block|}
comment|/**      * @param tempDataStore the tempDataStore to set      */
specifier|public
name|void
name|setTempDataStore
parameter_list|(
name|Store
name|tempDataStore
parameter_list|)
block|{
name|this
operator|.
name|tempDataStore
operator|=
name|tempDataStore
expr_stmt|;
block|}
specifier|public
name|int
name|getPersistenceThreadPriority
parameter_list|()
block|{
return|return
name|persistenceThreadPriority
return|;
block|}
specifier|public
name|void
name|setPersistenceThreadPriority
parameter_list|(
name|int
name|persistenceThreadPriority
parameter_list|)
block|{
name|this
operator|.
name|persistenceThreadPriority
operator|=
name|persistenceThreadPriority
expr_stmt|;
block|}
comment|/**      * @return the useLocalHostBrokerName      */
specifier|public
name|boolean
name|isUseLocalHostBrokerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|useLocalHostBrokerName
return|;
block|}
comment|/**      * @param useLocalHostBrokerName the useLocalHostBrokerName to set      */
specifier|public
name|void
name|setUseLocalHostBrokerName
parameter_list|(
name|boolean
name|useLocalHostBrokerName
parameter_list|)
block|{
name|this
operator|.
name|useLocalHostBrokerName
operator|=
name|useLocalHostBrokerName
expr_stmt|;
if|if
condition|(
name|useLocalHostBrokerName
operator|&&
operator|!
name|started
operator|.
name|get
argument_list|()
operator|&&
name|brokerName
operator|==
literal|null
operator|||
name|brokerName
operator|==
name|DEFAULT_BROKER_NAME
condition|)
block|{
name|brokerName
operator|=
name|LOCAL_HOST_NAME
expr_stmt|;
block|}
block|}
comment|/**      * @return the supportFailOver      */
specifier|public
name|boolean
name|isSupportFailOver
parameter_list|()
block|{
return|return
name|this
operator|.
name|supportFailOver
return|;
block|}
comment|/**      * @param supportFailOver the supportFailOver to set      */
specifier|public
name|void
name|setSupportFailOver
parameter_list|(
name|boolean
name|supportFailOver
parameter_list|)
block|{
name|this
operator|.
name|supportFailOver
operator|=
name|supportFailOver
expr_stmt|;
block|}
comment|/**      * @return the clustered      */
specifier|public
name|boolean
name|isClustered
parameter_list|()
block|{
return|return
name|this
operator|.
name|clustered
return|;
block|}
comment|/**      * @param clustered the clustered to set      */
specifier|public
name|void
name|setClustered
parameter_list|(
name|boolean
name|clustered
parameter_list|)
block|{
name|this
operator|.
name|clustered
operator|=
name|clustered
expr_stmt|;
block|}
comment|/**      * Looks up and lazily creates if necessary the destination for the given JMS name      */
specifier|public
name|Destination
name|getDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|destination
argument_list|)
return|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * Handles any lazy-creation helper properties which are added to make      * things easier to configure inside environments such as Spring      *       * @throws Exception      */
specifier|protected
name|void
name|processHelperProperties
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|transportConnectorURIs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transportConnectorURIs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
name|transportConnectorURIs
index|[
name|i
index|]
decl_stmt|;
name|addConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|networkConnectorURIs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|networkConnectorURIs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
name|networkConnectorURIs
index|[
name|i
index|]
decl_stmt|;
name|addNetworkConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jmsBridgeConnectors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jmsBridgeConnectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addJmsConnector
argument_list|(
name|jmsBridgeConnectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|masterConnectorURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|masterConnector
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot specify masterConnectorURI when a masterConnector is already registered via the services property"
argument_list|)
throw|;
block|}
else|else
block|{
name|addService
argument_list|(
operator|new
name|MasterConnector
argument_list|(
name|masterConnectorURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|stopAllConnectors
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|NetworkConnector
argument_list|>
name|iter
init|=
name|getNetworkConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NetworkConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|unregisterNetworkConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ProxyConnector
argument_list|>
name|iter
init|=
name|getProxyConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProxyConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|JmsConnector
argument_list|>
name|iter
init|=
name|jmsConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JmsConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|TransportConnector
argument_list|>
name|iter
init|=
name|getTransportConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TransportConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|TransportConnector
name|registerConnectorMBean
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createConnectorObjectName
argument_list|(
name|connector
argument_list|)
decl_stmt|;
name|connector
operator|=
name|connector
operator|.
name|asManagedConnector
argument_list|(
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|ConnectorViewMBean
name|view
init|=
operator|new
name|ConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Transport Connector could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|connector
return|;
block|}
specifier|protected
name|void
name|unregisterConnectorMBean
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createConnectorObjectName
argument_list|(
name|connector
argument_list|)
decl_stmt|;
if|if
condition|(
name|registeredMBeanNames
operator|.
name|remove
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Transport Connector could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|protected
name|PersistenceAdapter
name|registerPersistenceAdapterMBean
parameter_list|(
name|PersistenceAdapter
name|adaptor
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{                     }
return|return
name|adaptor
return|;
block|}
specifier|protected
name|void
name|unregisterPersistenceAdapterMBean
parameter_list|(
name|PersistenceAdapter
name|adaptor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{                              }
block|}
block|}
specifier|private
name|ObjectName
name|createConnectorObjectName
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Connector,"
operator|+
literal|"ConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|registerNetworkConnectorMBean
parameter_list|(
name|NetworkConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
name|NetworkConnectorViewMBean
name|view
init|=
operator|new
name|NetworkConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createNetworkConnectorObjectName
argument_list|(
name|connector
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setObjectName
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Network Connector could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|ObjectName
name|createNetworkConnectorObjectName
parameter_list|(
name|NetworkConnector
name|connector
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=NetworkConnector,"
operator|+
literal|"NetworkConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|unregisterNetworkConnectorMBean
parameter_list|(
name|NetworkConnector
name|connector
parameter_list|)
block|{
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createNetworkConnectorObjectName
argument_list|(
name|connector
argument_list|)
decl_stmt|;
if|if
condition|(
name|registeredMBeanNames
operator|.
name|remove
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Network Connector could not be unregistered from JMX: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|registerProxyConnectorMBean
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
name|ProxyConnectorView
name|view
init|=
operator|new
name|ProxyConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=ProxyConnector,"
operator|+
literal|"ProxyConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|registerFTConnectorMBean
parameter_list|(
name|MasterConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
name|FTConnectorView
name|view
init|=
operator|new
name|FTConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=MasterConnector"
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|registerJmsConnectorMBean
parameter_list|(
name|JmsConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
name|JmsConnectorView
name|view
init|=
operator|new
name|JmsConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=JmsConnector,"
operator|+
literal|"JmsConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Factory method to create a new broker      *       * @throws Exception      * @throws      * @throws      */
specifier|protected
name|Broker
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|regionBroker
operator|=
name|createRegionBroker
argument_list|()
expr_stmt|;
name|Broker
name|broker
init|=
name|addInterceptors
argument_list|(
name|regionBroker
argument_list|)
decl_stmt|;
comment|// Add a filter that will stop access to the broker once stopped
name|broker
operator|=
operator|new
name|MutableBrokerFilter
argument_list|(
name|broker
argument_list|)
block|{
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|setNext
argument_list|(
operator|new
name|ErrorBroker
argument_list|(
literal|"Broker has been stopped: "
operator|+
name|this
argument_list|)
block|{
comment|// Just ignore additional stop actions.
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{                     }
block|}
argument_list|)
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|RegionBroker
name|rBroker
init|=
operator|(
name|RegionBroker
operator|)
name|regionBroker
decl_stmt|;
name|rBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|enableStatistics
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|ManagedRegionBroker
name|managedBroker
init|=
operator|(
name|ManagedRegionBroker
operator|)
name|regionBroker
decl_stmt|;
name|managedBroker
operator|.
name|setContextBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|adminView
operator|=
operator|new
name|BrokerView
argument_list|(
name|this
argument_list|,
name|managedBroker
argument_list|)
expr_stmt|;
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|!=
literal|null
condition|)
block|{
name|ObjectName
name|objectName
init|=
name|getBrokerObjectName
argument_list|()
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|adminView
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|broker
return|;
block|}
comment|/**      * Factory method to create the core region broker onto which interceptors      * are added      *       * @throws Exception      */
specifier|protected
name|Broker
name|createRegionBroker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we must start the persistence adaptor before we can create the region
comment|// broker
name|getPersistenceAdapter
argument_list|()
operator|.
name|setUsageManager
argument_list|(
name|getProducerSystemUsage
argument_list|()
argument_list|)
expr_stmt|;
name|getPersistenceAdapter
argument_list|()
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|deleteAllMessagesOnStartup
condition|)
block|{
name|getPersistenceAdapter
argument_list|()
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
name|getPersistenceAdapter
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|destinationInterceptors
operator|==
literal|null
condition|)
block|{
name|destinationInterceptors
operator|=
name|createDefaultDestinationInterceptor
argument_list|()
expr_stmt|;
block|}
name|configureServices
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
name|DestinationInterceptor
name|destinationInterceptor
init|=
operator|new
name|CompositeDestinationInterceptor
argument_list|(
name|destinationInterceptors
argument_list|)
decl_stmt|;
name|RegionBroker
name|regionBroker
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|destinationFactory
operator|==
literal|null
condition|)
block|{
name|destinationFactory
operator|=
operator|new
name|DestinationFactoryImpl
argument_list|(
name|this
argument_list|,
name|getTaskRunnerFactory
argument_list|()
argument_list|,
name|getPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|regionBroker
operator|=
operator|new
name|ManagedRegionBroker
argument_list|(
name|this
argument_list|,
name|mbeanServer
argument_list|,
name|getBrokerObjectName
argument_list|()
argument_list|,
name|getTaskRunnerFactory
argument_list|()
argument_list|,
name|getConsumerSystemUsage
argument_list|()
argument_list|,
name|destinationFactory
argument_list|,
name|destinationInterceptor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionBroker
operator|=
operator|new
name|RegionBroker
argument_list|(
name|this
argument_list|,
name|getTaskRunnerFactory
argument_list|()
argument_list|,
name|getConsumerSystemUsage
argument_list|()
argument_list|,
name|destinationFactory
argument_list|,
name|destinationInterceptor
argument_list|)
expr_stmt|;
block|}
name|destinationFactory
operator|.
name|setRegionBroker
argument_list|(
name|regionBroker
argument_list|)
expr_stmt|;
name|regionBroker
operator|.
name|setKeepDurableSubsActive
argument_list|(
name|keepDurableSubsActive
argument_list|)
expr_stmt|;
name|regionBroker
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regionBroker
return|;
block|}
comment|/**      * Create the default destination interceptor      */
specifier|protected
name|DestinationInterceptor
index|[]
name|createDefaultDestinationInterceptor
parameter_list|()
block|{
name|List
argument_list|<
name|DestinationInterceptor
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationInterceptor
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isUseVirtualTopics
argument_list|()
condition|)
block|{
name|VirtualDestinationInterceptor
name|interceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|VirtualTopic
name|virtualTopic
init|=
operator|new
name|VirtualTopic
argument_list|()
decl_stmt|;
name|virtualTopic
operator|.
name|setName
argument_list|(
literal|"VirtualTopic.>"
argument_list|)
expr_stmt|;
name|VirtualDestination
index|[]
name|virtualDestinations
init|=
block|{
name|virtualTopic
block|}
decl_stmt|;
name|interceptor
operator|.
name|setVirtualDestinations
argument_list|(
name|virtualDestinations
argument_list|)
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUseMirroredQueues
argument_list|()
condition|)
block|{
name|MirroredQueue
name|interceptor
init|=
operator|new
name|MirroredQueue
argument_list|()
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
name|DestinationInterceptor
index|[]
name|array
init|=
operator|new
name|DestinationInterceptor
index|[
name|answer
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|answer
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
comment|/**      * Strategy method to add interceptors to the broker      *       * @throws IOException      */
specifier|protected
name|Broker
name|addInterceptors
parameter_list|(
name|Broker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|TransactionBroker
argument_list|(
name|broker
argument_list|,
name|getPersistenceAdapter
argument_list|()
operator|.
name|createTransactionStore
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAdvisorySupport
argument_list|()
condition|)
block|{
name|broker
operator|=
operator|new
name|AdvisoryBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
name|broker
operator|=
operator|new
name|CompositeDestinationBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPopulateJMSXUserID
argument_list|()
condition|)
block|{
name|broker
operator|=
operator|new
name|UserIDBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|plugins
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|plugins
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BrokerPlugin
name|plugin
init|=
name|plugins
index|[
name|i
index|]
decl_stmt|;
name|broker
operator|=
name|plugin
operator|.
name|installPlugin
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|broker
return|;
block|}
specifier|protected
name|PersistenceAdapter
name|createPersistenceAdapter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isPersistent
argument_list|()
condition|)
block|{
return|return
name|getPersistenceFactory
argument_list|()
operator|.
name|createPersistenceAdapter
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|MemoryPersistenceAdapter
argument_list|()
return|;
block|}
block|}
specifier|protected
name|AMQPersistenceAdapterFactory
name|createPersistenceFactory
parameter_list|()
block|{
name|AMQPersistenceAdapterFactory
name|factory
init|=
operator|new
name|AMQPersistenceAdapterFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setDataDirectory
argument_list|(
name|getBrokerDataDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTaskRunnerFactory
argument_list|(
name|getPersistenceTaskRunnerFactory
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
specifier|protected
name|ObjectName
name|createBrokerObjectName
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|getManagementContext
argument_list|()
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Broker"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Invalid JMX broker name: "
operator|+
name|brokerName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|TransportConnector
name|createTransportConnector
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|URI
name|brokerURI
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportServer
name|transport
init|=
name|TransportFactory
operator|.
name|bind
argument_list|(
name|getBrokerName
argument_list|()
argument_list|,
name|brokerURI
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportConnector
argument_list|(
name|broker
argument_list|,
name|transport
argument_list|)
return|;
block|}
comment|/**      * Extracts the port from the options      */
specifier|protected
name|Object
name|getPort
parameter_list|(
name|Map
name|options
parameter_list|)
block|{
name|Object
name|port
init|=
name|options
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
literal|null
condition|)
block|{
name|port
operator|=
name|DEFAULT_PORT
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"No port specified so defaulting to: "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|port
return|;
block|}
specifier|protected
name|void
name|addShutdownHook
parameter_list|()
block|{
if|if
condition|(
name|useShutdownHook
condition|)
block|{
name|shutdownHook
operator|=
operator|new
name|Thread
argument_list|(
literal|"ActiveMQ ShutdownHook"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|containerShutdown
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeShutdownHook
parameter_list|()
block|{
if|if
condition|(
name|shutdownHook
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception, must be shutting down: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Causes a clean shutdown of the container when the VM is being shut down      */
specifier|protected
name|void
name|containerShutdown
parameter_list|()
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Throwable
name|linkedException
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|linkedException
operator|!=
literal|null
condition|)
block|{
name|logError
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
operator|+
literal|". Reason: "
operator|+
name|linkedException
argument_list|,
name|linkedException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logError
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|useLoggingForShutdownErrors
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|logError
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|useLoggingForShutdownErrors
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Starts any configured destinations on startup      */
specifier|protected
name|void
name|startDestinations
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|destinations
operator|!=
literal|null
condition|)
block|{
name|ConnectionContext
name|adminConnectionContext
init|=
name|getAdminConnectionContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|destinations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQDestination
name|destination
init|=
name|destinations
index|[
name|i
index|]
decl_stmt|;
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|adminConnectionContext
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the broker's administration connection context used for      * configuring the broker at startup      */
specifier|public
name|ConnectionContext
name|getAdminConnectionContext
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionContext
name|adminConnectionContext
init|=
name|getBroker
argument_list|()
operator|.
name|getAdminConnectionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|adminConnectionContext
operator|==
literal|null
condition|)
block|{
name|adminConnectionContext
operator|=
name|createAdminConnectionContext
argument_list|()
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|setAdminConnectionContext
argument_list|(
name|adminConnectionContext
argument_list|)
expr_stmt|;
block|}
return|return
name|adminConnectionContext
return|;
block|}
comment|/**      * Factory method to create the new administration connection context      * object. Note this method is here rather than inside a default broker      * implementation to ensure that the broker reference inside it is the outer      * most interceptor      */
specifier|protected
name|ConnectionContext
name|createAdminConnectionContext
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSecurityContext
argument_list|(
name|SecurityContext
operator|.
name|BROKER_SECURITY_CONTEXT
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
comment|/**      * Start all transport and network connections, proxies and bridges      *       * @throws Exception      */
specifier|protected
name|void
name|startAllConnectors
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isSlave
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|al
init|=
operator|new
name|ArrayList
argument_list|<
name|TransportConnector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TransportConnector
argument_list|>
name|iter
init|=
name|getTransportConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TransportConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|al
operator|.
name|add
argument_list|(
name|startTransportConnector
argument_list|(
name|connector
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|al
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// let's clear the transportConnectors list and replace it with
comment|// the started transportConnector instances
name|this
operator|.
name|transportConnectors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setTransportConnectors
argument_list|(
name|al
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"network"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"async"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|URISupport
operator|.
name|createURIWithQuery
argument_list|(
name|uri
argument_list|,
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|NetworkConnector
argument_list|>
name|iter
init|=
name|getNetworkConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NetworkConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setLocalUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDurableDestinations
argument_list|(
name|getBroker
argument_list|()
operator|.
name|getDurableDestinations
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ProxyConnector
argument_list|>
name|iter
init|=
name|getProxyConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProxyConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|JmsConnector
argument_list|>
name|iter
init|=
name|jmsConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JmsConnector
name|connector
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|configureService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|TransportConnector
name|startTransportConnector
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|connector
operator|.
name|setBroker
argument_list|(
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setTaskRunnerFactory
argument_list|(
name|getTaskRunnerFactory
argument_list|()
argument_list|)
expr_stmt|;
name|MessageAuthorizationPolicy
name|policy
init|=
name|getMessageAuthorizationPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|setMessageAuthorizationPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|connector
operator|=
name|registerConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|getStatistics
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|enableStatistics
argument_list|)
expr_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connector
return|;
block|}
comment|/**      * Perform any custom dependency injection      */
specifier|protected
name|void
name|configureServices
parameter_list|(
name|Object
index|[]
name|services
parameter_list|)
block|{
for|for
control|(
name|Object
name|service
range|:
name|services
control|)
block|{
name|configureService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Perform any custom dependency injection      */
specifier|protected
name|void
name|configureService
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|BrokerServiceAware
condition|)
block|{
name|BrokerServiceAware
name|serviceAware
init|=
operator|(
name|BrokerServiceAware
operator|)
name|service
decl_stmt|;
name|serviceAware
operator|.
name|setBrokerService
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|service
operator|instanceof
name|MasterConnector
condition|)
block|{
name|masterConnector
operator|=
operator|(
name|MasterConnector
operator|)
name|service
expr_stmt|;
name|supportFailOver
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Starts all destiantions in persistence store. This includes all inactive      * destinations      */
specifier|protected
name|void
name|startDestinationsInPersistenceStore
parameter_list|(
name|Broker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|destinations
init|=
name|destinationFactory
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|destinations
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|iter
init|=
name|destinations
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ConnectionContext
name|adminConnectionContext
init|=
name|broker
operator|.
name|getAdminConnectionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|adminConnectionContext
operator|==
literal|null
condition|)
block|{
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|adminConnectionContext
operator|=
name|context
expr_stmt|;
name|broker
operator|.
name|setAdminConnectionContext
argument_list|(
name|adminConnectionContext
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ActiveMQDestination
name|destination
init|=
operator|(
name|ActiveMQDestination
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|broker
operator|.
name|addDestination
argument_list|(
name|adminConnectionContext
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Broker
name|getRegionBroker
parameter_list|()
block|{
return|return
name|regionBroker
return|;
block|}
specifier|public
name|void
name|setRegionBroker
parameter_list|(
name|Broker
name|regionBroker
parameter_list|)
block|{
name|this
operator|.
name|regionBroker
operator|=
name|regionBroker
expr_stmt|;
block|}
block|}
end_class

end_unit

