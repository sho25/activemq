begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|vmpipe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|AcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelServer
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|VMPipeAsyncChannelServer
implements|implements
name|AsyncChannelServer
block|{
specifier|private
specifier|final
name|URI
name|bindURI
decl_stmt|;
specifier|private
specifier|final
name|URI
name|connectURI
decl_stmt|;
specifier|private
name|AcceptListener
name|acceptListener
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|public
name|VMPipeAsyncChannelServer
parameter_list|(
name|URI
name|bindURI
parameter_list|)
block|{
name|this
operator|.
name|bindURI
operator|=
name|this
operator|.
name|connectURI
operator|=
name|bindURI
expr_stmt|;
block|}
specifier|public
name|URI
name|getBindURI
parameter_list|()
block|{
return|return
name|bindURI
return|;
block|}
specifier|public
name|URI
name|getConnectURI
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectURI
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|disposed
condition|)
return|return;
name|VMPipeAsyncChannelFactory
operator|.
name|unbindServer
argument_list|(
name|bindURI
argument_list|)
expr_stmt|;
name|disposed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|acceptListener
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"acceptListener has not been set."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{     }
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"VM Pipe Server: "
operator|+
name|getConnectURI
argument_list|()
return|;
block|}
specifier|public
name|void
name|setAcceptListener
parameter_list|(
name|AcceptListener
name|acceptListener
parameter_list|)
block|{
name|this
operator|.
name|acceptListener
operator|=
name|acceptListener
expr_stmt|;
block|}
specifier|public
name|AsyncChannel
name|connect
parameter_list|()
block|{
name|VMPipeAsyncChannelPipe
name|pipe
init|=
operator|new
name|VMPipeAsyncChannelPipe
argument_list|()
decl_stmt|;
name|acceptListener
operator|.
name|onAccept
argument_list|(
name|pipe
operator|.
name|getRightAsyncChannel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pipe
operator|.
name|getLeftAsyncChannel
argument_list|()
return|;
block|}
block|}
end_class

end_unit

