begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protobuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|AbstractMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAddMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveDestinationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaSubscriptionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaTransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
operator|.
name|DestinationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_class
specifier|public
class|class
name|KahaDBStore
extends|extends
name|MessageDatabase
implements|implements
name|PersistenceAdapter
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KahaDBStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ASYNC_JOBS
init|=
literal|10000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_CANCELED_TASK_MOD_METRIC
init|=
literal|"org.apache.activemq.store.kahadb.CANCELED_TASK_MOD_METRIC"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|cancelledTaskModMetric
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_CANCELED_TASK_MOD_METRIC
argument_list|,
literal|"0"
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ASYNC_EXECUTOR_MAX_THREADS
init|=
literal|"org.apache.activemq.store.kahadb.ASYNC_EXECUTOR_MAX_THREADS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|asyncExecutorMaxThreads
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_ASYNC_EXECUTOR_MAX_THREADS
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|protected
name|ExecutorService
name|queueExecutor
decl_stmt|;
specifier|protected
name|ExecutorService
name|topicExecutor
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
argument_list|>
name|asyncQueueMaps
init|=
operator|new
name|LinkedList
argument_list|<
name|Map
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
argument_list|>
name|asyncTopicMaps
init|=
operator|new
name|LinkedList
argument_list|<
name|Map
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
specifier|private
name|SystemUsage
name|usageManager
decl_stmt|;
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|asyncQueueJobQueue
decl_stmt|;
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|asyncTopicJobQueue
decl_stmt|;
name|Semaphore
name|globalQueueSemaphore
decl_stmt|;
name|Semaphore
name|globalTopicSemaphore
decl_stmt|;
specifier|private
name|boolean
name|concurrentStoreAndDispatchQueues
init|=
literal|true
decl_stmt|;
comment|// when true, message order may be compromised when cache is exhausted if store is out
comment|// or order w.r.t cache
specifier|private
name|boolean
name|concurrentStoreAndDispatchTopics
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|concurrentStoreAndDispatchTransactions
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|maxAsyncJobs
init|=
name|MAX_ASYNC_JOBS
decl_stmt|;
specifier|private
specifier|final
name|KahaDBTransactionStore
name|transactionStore
decl_stmt|;
specifier|private
name|TransactionIdTransformer
name|transactionIdTransformer
decl_stmt|;
specifier|public
name|KahaDBStore
parameter_list|()
block|{
name|this
operator|.
name|transactionStore
operator|=
operator|new
name|KahaDBTransactionStore
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|transactionIdTransformer
operator|=
operator|new
name|TransactionIdTransformer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KahaTransactionInfo
name|transform
parameter_list|(
name|TransactionId
name|txid
parameter_list|)
block|{
return|return
name|TransactionIdConversion
operator|.
name|convert
argument_list|(
name|txid
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"KahaDB:["
operator|+
name|directory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{     }
specifier|public
name|void
name|setUsageManager
parameter_list|(
name|SystemUsage
name|usageManager
parameter_list|)
block|{
name|this
operator|.
name|usageManager
operator|=
name|usageManager
expr_stmt|;
block|}
specifier|public
name|SystemUsage
name|getUsageManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|usageManager
return|;
block|}
comment|/**      * @return the concurrentStoreAndDispatch      */
specifier|public
name|boolean
name|isConcurrentStoreAndDispatchQueues
parameter_list|()
block|{
return|return
name|this
operator|.
name|concurrentStoreAndDispatchQueues
return|;
block|}
comment|/**      * @param concurrentStoreAndDispatch      *            the concurrentStoreAndDispatch to set      */
specifier|public
name|void
name|setConcurrentStoreAndDispatchQueues
parameter_list|(
name|boolean
name|concurrentStoreAndDispatch
parameter_list|)
block|{
name|this
operator|.
name|concurrentStoreAndDispatchQueues
operator|=
name|concurrentStoreAndDispatch
expr_stmt|;
block|}
comment|/**      * @return the concurrentStoreAndDispatch      */
specifier|public
name|boolean
name|isConcurrentStoreAndDispatchTopics
parameter_list|()
block|{
return|return
name|this
operator|.
name|concurrentStoreAndDispatchTopics
return|;
block|}
comment|/**      * @param concurrentStoreAndDispatch      *            the concurrentStoreAndDispatch to set      */
specifier|public
name|void
name|setConcurrentStoreAndDispatchTopics
parameter_list|(
name|boolean
name|concurrentStoreAndDispatch
parameter_list|)
block|{
name|this
operator|.
name|concurrentStoreAndDispatchTopics
operator|=
name|concurrentStoreAndDispatch
expr_stmt|;
block|}
specifier|public
name|boolean
name|isConcurrentStoreAndDispatchTransactions
parameter_list|()
block|{
return|return
name|this
operator|.
name|concurrentStoreAndDispatchTransactions
return|;
block|}
comment|/**      * @return the maxAsyncJobs      */
specifier|public
name|int
name|getMaxAsyncJobs
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxAsyncJobs
return|;
block|}
comment|/**      * @param maxAsyncJobs      *            the maxAsyncJobs to set      */
specifier|public
name|void
name|setMaxAsyncJobs
parameter_list|(
name|int
name|maxAsyncJobs
parameter_list|)
block|{
name|this
operator|.
name|maxAsyncJobs
operator|=
name|maxAsyncJobs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|this
operator|.
name|globalQueueSemaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|getMaxAsyncJobs
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|globalTopicSemaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|getMaxAsyncJobs
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|asyncQueueJobQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|getMaxAsyncJobs
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|asyncTopicJobQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|getMaxAsyncJobs
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueExecutor
operator|=
operator|new
name|StoreTaskExecutor
argument_list|(
literal|1
argument_list|,
name|asyncExecutorMaxThreads
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|asyncQueueJobQueue
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"ConcurrentQueueStoreAndDispatch"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|topicExecutor
operator|=
operator|new
name|StoreTaskExecutor
argument_list|(
literal|1
argument_list|,
name|asyncExecutorMaxThreads
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|asyncTopicJobQueue
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"ConcurrentTopicStoreAndDispatch"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
comment|// drain down async jobs
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping async queue tasks"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|globalQueueSemaphore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|globalQueueSemaphore
operator|.
name|tryAcquire
argument_list|(
name|this
operator|.
name|maxAsyncJobs
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|asyncQueueMaps
init|)
block|{
for|for
control|(
name|Map
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
name|m
range|:
name|asyncQueueMaps
control|)
block|{
synchronized|synchronized
init|(
name|m
init|)
block|{
for|for
control|(
name|StoreTask
name|task
range|:
name|m
operator|.
name|values
argument_list|()
control|)
block|{
name|task
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|asyncQueueMaps
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping async topic tasks"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|globalTopicSemaphore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|globalTopicSemaphore
operator|.
name|tryAcquire
argument_list|(
name|this
operator|.
name|maxAsyncJobs
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|asyncTopicMaps
init|)
block|{
for|for
control|(
name|Map
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
name|m
range|:
name|asyncTopicMaps
control|)
block|{
synchronized|synchronized
init|(
name|m
init|)
block|{
for|for
control|(
name|StoreTask
name|task
range|:
name|m
operator|.
name|values
argument_list|()
control|)
block|{
name|task
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|asyncTopicMaps
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|globalQueueSemaphore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|globalQueueSemaphore
operator|.
name|drainPermits
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|globalTopicSemaphore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|globalTopicSemaphore
operator|.
name|drainPermits
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|queueExecutor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|queueExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|topicExecutor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|topicExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped KahaDB"
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
block|}
name|void
name|incrementRedeliveryAndReWrite
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|KahaDestination
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|location
decl_stmt|;
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|location
operator|=
name|findMessageLocation
argument_list|(
name|key
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|KahaAddMessageCommand
name|addMessage
init|=
operator|(
name|KahaAddMessageCommand
operator|)
name|load
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
operator|(
name|Message
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|addMessage
operator|.
name|getMessage
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|.
name|incrementRedeliveryCounter
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"rewriting: "
operator|+
name|key
operator|+
literal|" with deliveryCount: "
operator|+
name|message
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|addMessage
operator|.
name|setMessage
argument_list|(
operator|new
name|Buffer
argument_list|(
name|packet
operator|.
name|getData
argument_list|()
argument_list|,
name|packet
operator|.
name|getOffset
argument_list|()
argument_list|,
name|packet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Location
name|rewriteLocation
init|=
name|journal
operator|.
name|write
argument_list|(
name|toByteSequence
argument_list|(
name|addMessage
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|destination
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|sequence
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|sequence
argument_list|)
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|sd
operator|.
name|orderIndex
operator|.
name|lastGetPriority
argument_list|()
argument_list|,
name|sequence
argument_list|,
operator|new
name|MessageKeys
argument_list|(
name|keys
operator|.
name|messageId
argument_list|,
name|rewriteLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|rollbackStatsOnDuplicate
parameter_list|(
name|KahaDestination
name|commandDestination
parameter_list|)
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionBroker
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Destination
argument_list|>
name|destinationSet
init|=
name|regionBroker
operator|.
name|getDestinations
argument_list|(
name|convert
argument_list|(
name|commandDestination
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Destination
name|destination
range|:
name|destinationSet
control|)
block|{
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Location
name|findMessageLocation
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|KahaDestination
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Location
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|Location
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|destination
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|sequence
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequence
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|sd
operator|.
name|orderIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|sequence
argument_list|)
operator|.
name|location
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|protected
name|StoreQueueTask
name|removeQueueTask
parameter_list|(
name|KahaDBMessageStore
name|store
parameter_list|,
name|MessageId
name|id
parameter_list|)
block|{
name|StoreQueueTask
name|task
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|store
operator|.
name|asyncTaskMap
init|)
block|{
name|task
operator|=
operator|(
name|StoreQueueTask
operator|)
name|store
operator|.
name|asyncTaskMap
operator|.
name|remove
argument_list|(
operator|new
name|AsyncJobKey
argument_list|(
name|id
argument_list|,
name|store
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
specifier|protected
name|void
name|addQueueTask
parameter_list|(
name|KahaDBMessageStore
name|store
parameter_list|,
name|StoreQueueTask
name|task
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|store
operator|.
name|asyncTaskMap
init|)
block|{
name|store
operator|.
name|asyncTaskMap
operator|.
name|put
argument_list|(
operator|new
name|AsyncJobKey
argument_list|(
name|task
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|store
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|queueExecutor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StoreTopicTask
name|removeTopicTask
parameter_list|(
name|KahaDBTopicMessageStore
name|store
parameter_list|,
name|MessageId
name|id
parameter_list|)
block|{
name|StoreTopicTask
name|task
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|store
operator|.
name|asyncTaskMap
init|)
block|{
name|task
operator|=
operator|(
name|StoreTopicTask
operator|)
name|store
operator|.
name|asyncTaskMap
operator|.
name|remove
argument_list|(
operator|new
name|AsyncJobKey
argument_list|(
name|id
argument_list|,
name|store
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
specifier|protected
name|void
name|addTopicTask
parameter_list|(
name|KahaDBTopicMessageStore
name|store
parameter_list|,
name|StoreTopicTask
name|task
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|store
operator|.
name|asyncTaskMap
init|)
block|{
name|store
operator|.
name|asyncTaskMap
operator|.
name|put
argument_list|(
operator|new
name|AsyncJobKey
argument_list|(
name|task
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|store
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|topicExecutor
operator|.
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TransactionStore
name|createTransactionStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|transactionStore
return|;
block|}
specifier|public
name|boolean
name|getForceRecoverIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|forceRecoverIndex
return|;
block|}
specifier|public
name|void
name|setForceRecoverIndex
parameter_list|(
name|boolean
name|forceRecoverIndex
parameter_list|)
block|{
name|this
operator|.
name|forceRecoverIndex
operator|=
name|forceRecoverIndex
expr_stmt|;
block|}
specifier|public
class|class
name|KahaDBMessageStore
extends|extends
name|AbstractMessageStore
block|{
specifier|protected
specifier|final
name|Map
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
name|asyncTaskMap
init|=
operator|new
name|HashMap
argument_list|<
name|AsyncJobKey
argument_list|,
name|StoreTask
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|KahaDestination
name|dest
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxAsyncJobs
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|localDestinationSemaphore
decl_stmt|;
name|double
name|doneTasks
decl_stmt|,
name|canceledTasks
init|=
literal|0
decl_stmt|;
specifier|public
name|KahaDBMessageStore
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|this
operator|.
name|dest
operator|=
name|convert
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxAsyncJobs
operator|=
name|getMaxAsyncJobs
argument_list|()
expr_stmt|;
name|this
operator|.
name|localDestinationSemaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|this
operator|.
name|maxAsyncJobs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Object
argument_list|>
name|asyncAddQueueMessage
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isConcurrentStoreAndDispatchQueues
argument_list|()
condition|)
block|{
name|StoreQueueTask
name|result
init|=
operator|new
name|StoreQueueTask
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|result
operator|.
name|aquireLocks
argument_list|()
expr_stmt|;
name|addQueueTask
argument_list|(
name|this
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getFuture
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|asyncAddQueueMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAsyncMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isConcurrentStoreAndDispatchQueues
argument_list|()
condition|)
block|{
name|AsyncJobKey
name|key
init|=
operator|new
name|AsyncJobKey
argument_list|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
argument_list|,
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|StoreQueueTask
name|task
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|asyncTaskMap
init|)
block|{
name|task
operator|=
operator|(
name|StoreQueueTask
operator|)
name|asyncTaskMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|task
operator|.
name|cancel
argument_list|()
condition|)
block|{
try|try
block|{
name|task
operator|.
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removeAsync: cannot cancel, waiting for add resulted in ex"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
name|removeMessage
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|asyncTaskMap
init|)
block|{
name|asyncTaskMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|removeMessage
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|removeMessage
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaAddMessageCommand
name|command
init|=
operator|new
name|KahaAddMessageCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setMessageId
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setTransactionInfo
argument_list|(
name|transactionIdTransformer
operator|.
name|transform
argument_list|(
name|message
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|setPriority
argument_list|(
name|message
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setPrioritySupported
argument_list|(
name|isPrioritizedMessages
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|command
operator|.
name|setMessage
argument_list|(
operator|new
name|Buffer
argument_list|(
name|packet
operator|.
name|getData
argument_list|()
argument_list|,
name|packet
operator|.
name|getOffset
argument_list|()
argument_list|,
name|packet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
name|message
operator|.
name|isResponseRequired
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveMessageCommand
name|command
init|=
operator|new
name|KahaRemoveMessageCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setMessageId
argument_list|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setTransactionInfo
argument_list|(
name|transactionIdTransformer
operator|.
name|transform
argument_list|(
name|ack
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|ack
argument_list|)
decl_stmt|;
name|command
operator|.
name|setAck
argument_list|(
operator|new
name|Buffer
argument_list|(
name|packet
operator|.
name|getData
argument_list|()
argument_list|,
name|packet
operator|.
name|getOffset
argument_list|()
argument_list|,
name|packet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
name|ack
operator|.
name|isResponseRequired
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeAllMessages
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveDestinationCommand
name|command
init|=
operator|new
name|KahaRemoveDestinationCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Message
name|getMessage
parameter_list|(
name|MessageId
name|identity
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|key
init|=
name|identity
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Hopefully one day the page file supports concurrent read
comment|// operations... but for now we must
comment|// externally synchronize...
name|Location
name|location
decl_stmt|;
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|location
operator|=
name|findMessageLocation
argument_list|(
name|key
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|loadMessage
argument_list|(
name|location
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMessageCount
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|lockAsyncJobQueue
argument_list|()
expr_stmt|;
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Integer
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Iterate through all index entries to get a count
comment|// of
comment|// messages in the destination.
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|locationIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|rc
operator|++
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
argument_list|)
return|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|unlockAsyncJobQueue
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Boolean
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Iterate through all index entries to get a count of
comment|// messages in the destination.
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
return|return
name|sd
operator|.
name|locationIndex
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|recover
parameter_list|(
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
comment|// recovery may involve expiry which will modify
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|resetCursorPosition
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|listener
operator|.
name|hasSpace
argument_list|()
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ackedAndPrepared
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|messageId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Message
name|msg
init|=
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
decl_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|recoverNextMessages
parameter_list|(
specifier|final
name|int
name|maxReturned
parameter_list|,
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|listener
operator|.
name|hasSpace
argument_list|()
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ackedAndPrepared
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|messageId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Message
name|msg
init|=
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
decl_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|>=
name|maxReturned
condition|)
block|{
break|break;
block|}
block|}
name|sd
operator|.
name|orderIndex
operator|.
name|stoppedIterating
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetBatching
parameter_list|()
block|{
if|if
condition|(
name|pageFile
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getExistingStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|orderIndex
operator|.
name|resetCursorPosition
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reset batching"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBatch
parameter_list|(
name|MessageId
name|identity
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|String
name|key
init|=
name|identity
operator|.
name|toString
argument_list|()
decl_stmt|;
name|lockAsyncJobQueue
argument_list|()
expr_stmt|;
comment|// Hopefully one day the page file supports concurrent read
comment|// operations... but for now we must
comment|// externally synchronize...
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|location
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|orderIndex
operator|.
name|setBatch
argument_list|(
name|tx
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|unlockAsyncJobQueue
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMemoryUsage
parameter_list|(
name|MemoryUsage
name|memoeyUSage
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|lockAsyncJobQueue
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|localDestinationSemaphore
operator|.
name|tryAcquire
argument_list|(
name|this
operator|.
name|maxAsyncJobs
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to lock async jobs for "
operator|+
name|this
operator|.
name|destination
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unlockAsyncJobQueue
parameter_list|()
block|{
name|this
operator|.
name|localDestinationSemaphore
operator|.
name|release
argument_list|(
name|this
operator|.
name|maxAsyncJobs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|acquireLocalAsyncLock
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|localDestinationSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to aquire async lock for "
operator|+
name|this
operator|.
name|destination
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|releaseLocalAsyncLock
parameter_list|()
block|{
name|this
operator|.
name|localDestinationSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|KahaDBTopicMessageStore
extends|extends
name|KahaDBMessageStore
implements|implements
name|TopicMessageStore
block|{
specifier|private
specifier|final
name|AtomicInteger
name|subscriptionCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|KahaDBTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|this
operator|.
name|subscriptionCount
operator|.
name|set
argument_list|(
name|getAllSubscriptions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|asyncTopicMaps
operator|.
name|add
argument_list|(
name|asyncTaskMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Object
argument_list|>
name|asyncAddTopicMessage
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isConcurrentStoreAndDispatchTopics
argument_list|()
condition|)
block|{
name|StoreTopicTask
name|result
init|=
operator|new
name|StoreTopicTask
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|message
argument_list|,
name|subscriptionCount
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|aquireLocks
argument_list|()
expr_stmt|;
name|addTopicTask
argument_list|(
name|this
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getFuture
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|asyncAddTopicMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|MessageId
name|messageId
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isConcurrentStoreAndDispatchTopics
argument_list|()
condition|)
block|{
name|AsyncJobKey
name|key
init|=
operator|new
name|AsyncJobKey
argument_list|(
name|messageId
argument_list|,
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|StoreTopicTask
name|task
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|asyncTaskMap
init|)
block|{
name|task
operator|=
operator|(
name|StoreTopicTask
operator|)
name|asyncTaskMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|task
operator|.
name|addSubscriptionKey
argument_list|(
name|subscriptionKey
argument_list|)
condition|)
block|{
name|removeTopicTask
argument_list|(
name|this
argument_list|,
name|messageId
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|cancel
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|asyncTaskMap
init|)
block|{
name|asyncTaskMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|doAcknowledge
argument_list|(
name|context
argument_list|,
name|subscriptionKey
argument_list|,
name|messageId
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|doAcknowledge
argument_list|(
name|context
argument_list|,
name|subscriptionKey
argument_list|,
name|messageId
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doAcknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|subscriptionKey
parameter_list|,
name|MessageId
name|messageId
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveMessageCommand
name|command
init|=
operator|new
name|KahaRemoveMessageCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setSubscriptionKey
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
name|command
operator|.
name|setMessageId
argument_list|(
name|messageId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setTransactionInfo
argument_list|(
name|transactionIdTransformer
operator|.
name|transform
argument_list|(
name|ack
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ack
operator|!=
literal|null
operator|&&
name|ack
operator|.
name|isUnmatchedAck
argument_list|()
condition|)
block|{
name|command
operator|.
name|setAck
argument_list|(
name|UNMATCHED
argument_list|)
expr_stmt|;
block|}
name|store
argument_list|(
name|command
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSubsciption
parameter_list|(
name|SubscriptionInfo
name|subscriptionInfo
parameter_list|,
name|boolean
name|retroactive
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|subscriptionInfo
operator|.
name|getClientId
argument_list|()
argument_list|,
name|subscriptionInfo
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
name|KahaSubscriptionCommand
name|command
init|=
operator|new
name|KahaSubscriptionCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setSubscriptionKey
argument_list|(
name|subscriptionKey
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setRetroactive
argument_list|(
name|retroactive
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|subscriptionInfo
argument_list|)
decl_stmt|;
name|command
operator|.
name|setSubscriptionInfo
argument_list|(
operator|new
name|Buffer
argument_list|(
name|packet
operator|.
name|getData
argument_list|()
argument_list|,
name|packet
operator|.
name|getOffset
argument_list|()
argument_list|,
name|packet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|subscriptionCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|deleteSubscription
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaSubscriptionCommand
name|command
init|=
operator|new
name|KahaSubscriptionCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setSubscriptionKey
argument_list|(
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|subscriptionCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SubscriptionInfo
index|[]
name|getAllSubscriptions
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ArrayList
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subscriptions
init|=
operator|new
name|ArrayList
argument_list|<
name|SubscriptionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|subscriptions
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SubscriptionInfo
name|info
init|=
operator|(
name|SubscriptionInfo
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSubscriptionInfo
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|subscriptions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|SubscriptionInfo
index|[]
name|rc
init|=
operator|new
name|SubscriptionInfo
index|[
name|subscriptions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|subscriptions
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|SubscriptionInfo
name|lookupSubscription
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|SubscriptionInfo
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|SubscriptionInfo
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|KahaSubscriptionCommand
name|command
init|=
name|sd
operator|.
name|subscriptions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|SubscriptionInfo
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|command
operator|.
name|getSubscriptionInfo
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMessageCount
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Integer
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|LastAck
name|cursorPos
init|=
name|getLastAck
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|==
literal|null
condition|)
block|{
comment|// The subscription might not exist.
return|return
literal|0
return|;
block|}
return|return
operator|(
name|int
operator|)
name|getStoredMessageCount
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|recoverSubscription
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|SubscriptionInfo
name|info
init|=
name|lookupSubscription
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|LastAck
name|cursorPos
init|=
name|getLastAck
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|setBatch
argument_list|(
name|tx
argument_list|,
name|cursorPos
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sd
operator|.
name|orderIndex
operator|.
name|resetCursorPosition
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|recoverNextMessages
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
specifier|final
name|int
name|maxReturned
parameter_list|,
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|SubscriptionInfo
name|info
init|=
name|lookupSubscription
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|resetCursorPosition
argument_list|()
expr_stmt|;
name|MessageOrderCursor
name|moc
init|=
name|sd
operator|.
name|subscriptionCursors
operator|.
name|get
argument_list|(
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|moc
operator|==
literal|null
condition|)
block|{
name|LastAck
name|pos
init|=
name|getLastAck
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
literal|null
condition|)
block|{
comment|// sub deleted
return|return;
block|}
name|sd
operator|.
name|orderIndex
operator|.
name|setBatch
argument_list|(
name|tx
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|moc
operator|=
name|sd
operator|.
name|orderIndex
operator|.
name|cursor
expr_stmt|;
block|}
else|else
block|{
name|sd
operator|.
name|orderIndex
operator|.
name|cursor
operator|.
name|sync
argument_list|(
name|moc
argument_list|)
expr_stmt|;
block|}
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|moc
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|listener
operator|.
name|recoverMessage
argument_list|(
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|>=
name|maxReturned
operator|||
name|listener
operator|.
name|hasSpace
argument_list|()
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
name|sd
operator|.
name|orderIndex
operator|.
name|stoppedIterating
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|MessageOrderCursor
name|copy
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|cursor
operator|.
name|copy
argument_list|()
decl_stmt|;
name|sd
operator|.
name|subscriptionCursors
operator|.
name|put
argument_list|(
name|subscriptionKey
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetBatching
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|sd
operator|.
name|subscriptionCursors
operator|.
name|remove
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|subscriptionKey
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
block|{
return|return
name|clientId
operator|+
literal|":"
operator|+
name|subscriptionName
return|;
block|}
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|transactionStore
operator|.
name|proxy
argument_list|(
operator|new
name|KahaDBMessageStore
argument_list|(
name|destination
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|transactionStore
operator|.
name|proxy
argument_list|(
operator|new
name|KahaDBTopicMessageStore
argument_list|(
name|destination
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Cleanup method to remove any state associated with the given destination.      * This method does not stop the message store (it might not be cached).      *      * @param destination      *            Destination to forget      */
specifier|public
name|void
name|removeQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
block|{     }
comment|/**      * Cleanup method to remove any state associated with the given destination      * This method does not stop the message store (it might not be cached).      *      * @param destination      *            Destination to forget      */
specifier|public
name|void
name|removeTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
block|{     }
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteAllMessages
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|getDestinations
parameter_list|()
block|{
try|try
block|{
specifier|final
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
name|rc
init|=
operator|new
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|>
name|iterator
init|=
name|metadata
operator|.
name|destinations
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEmptyTopic
argument_list|(
name|entry
argument_list|,
name|tx
argument_list|)
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isEmptyTopic
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|entry
parameter_list|,
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isEmptyTopic
init|=
literal|false
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
name|convert
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|StoredDestination
name|loadedStore
init|=
name|getStoredDestination
argument_list|(
name|convert
argument_list|(
name|dest
argument_list|)
argument_list|,
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadedStore
operator|.
name|subscriptionAcks
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
name|isEmptyTopic
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|isEmptyTopic
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|long
name|getLastProducerSequenceId
parameter_list|(
name|ProducerId
name|id
parameter_list|)
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|metadata
operator|.
name|producerSequenceIdTracker
operator|.
name|getLastSeqId
argument_list|(
name|id
argument_list|)
return|;
block|}
finally|finally
block|{
name|indexLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|storeSize
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|checkpoint
parameter_list|(
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|checkpointCleanup
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Internal helper methods.
comment|// /////////////////////////////////////////////////////////////////
comment|/**      * @param location      * @return      * @throws IOException      */
name|Message
name|loadMessage
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaAddMessageCommand
name|addMessage
init|=
operator|(
name|KahaAddMessageCommand
operator|)
name|load
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
operator|(
name|Message
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|addMessage
operator|.
name|getMessage
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|msg
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Internal conversion methods.
comment|// /////////////////////////////////////////////////////////////////
name|KahaLocation
name|convert
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|KahaLocation
name|rc
init|=
operator|new
name|KahaLocation
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setLogId
argument_list|(
name|location
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOffset
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
name|KahaDestination
name|convert
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|)
block|{
name|KahaDestination
name|rc
init|=
operator|new
name|KahaDestination
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setName
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|dest
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|QUEUE
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|TOPIC
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|TEMP_QUEUE
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|TEMP_TOPIC
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
name|ActiveMQDestination
name|convert
parameter_list|(
name|String
name|dest
parameter_list|)
block|{
name|int
name|p
init|=
name|dest
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not in the valid destination format"
argument_list|)
throw|;
block|}
name|int
name|type
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|dest
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|convert
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQDestination
name|convert
parameter_list|(
name|KahaDestination
name|commandDestination
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|commandDestination
operator|.
name|getType
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|,
name|commandDestination
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQDestination
name|convert
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
case|case
name|QUEUE
case|:
return|return
operator|new
name|ActiveMQQueue
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TOPIC
case|:
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TEMP_QUEUE
case|:
return|return
operator|new
name|ActiveMQTempQueue
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TEMP_TOPIC
case|:
return|return
operator|new
name|ActiveMQTempTopic
argument_list|(
name|name
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not in the valid destination format"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|TransactionIdTransformer
name|getTransactionIdTransformer
parameter_list|()
block|{
return|return
name|transactionIdTransformer
return|;
block|}
specifier|public
name|void
name|setTransactionIdTransformer
parameter_list|(
name|TransactionIdTransformer
name|transactionIdTransformer
parameter_list|)
block|{
name|this
operator|.
name|transactionIdTransformer
operator|=
name|transactionIdTransformer
expr_stmt|;
block|}
specifier|static
class|class
name|AsyncJobKey
block|{
name|MessageId
name|id
decl_stmt|;
name|ActiveMQDestination
name|destination
decl_stmt|;
name|AsyncJobKey
parameter_list|(
name|MessageId
name|id
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|obj
operator|instanceof
name|AsyncJobKey
operator|&&
name|id
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AsyncJobKey
operator|)
name|obj
operator|)
operator|.
name|id
argument_list|)
operator|&&
name|destination
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AsyncJobKey
operator|)
name|obj
operator|)
operator|.
name|destination
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|.
name|hashCode
argument_list|()
operator|+
name|destination
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|id
return|;
block|}
block|}
specifier|public
interface|interface
name|StoreTask
block|{
specifier|public
name|boolean
name|cancel
parameter_list|()
function_decl|;
specifier|public
name|void
name|aquireLocks
parameter_list|()
function_decl|;
specifier|public
name|void
name|releaseLocks
parameter_list|()
function_decl|;
block|}
class|class
name|StoreQueueTask
implements|implements
name|Runnable
implements|,
name|StoreTask
block|{
specifier|protected
specifier|final
name|Message
name|message
decl_stmt|;
specifier|protected
specifier|final
name|ConnectionContext
name|context
decl_stmt|;
specifier|protected
specifier|final
name|KahaDBMessageStore
name|store
decl_stmt|;
specifier|protected
specifier|final
name|InnerFutureTask
name|future
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|locked
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|public
name|StoreQueueTask
parameter_list|(
name|KahaDBMessageStore
name|store
parameter_list|,
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|future
operator|=
operator|new
name|InnerFutureTask
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Future
argument_list|<
name|Object
argument_list|>
name|getFuture
parameter_list|()
block|{
return|return
name|this
operator|.
name|future
return|;
block|}
specifier|public
name|boolean
name|cancel
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|done
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|aquireLocks
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|locked
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|globalQueueSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|store
operator|.
name|acquireLocalAsyncLock
argument_list|()
expr_stmt|;
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to aquire lock"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|releaseLocks
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|locked
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|store
operator|.
name|releaseLocalAsyncLock
argument_list|()
expr_stmt|;
name|globalQueueSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|this
operator|.
name|store
operator|.
name|doneTasks
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|done
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|addMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|removeQueueTask
argument_list|(
name|this
operator|.
name|store
argument_list|,
name|this
operator|.
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|future
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cancelledTaskModMetric
operator|>
literal|0
operator|&&
name|this
operator|.
name|store
operator|.
name|canceledTasks
operator|++
operator|%
name|cancelledTaskModMetric
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|this
operator|.
name|store
operator|.
name|dest
operator|.
name|getName
argument_list|()
operator|+
literal|" cancelled: "
operator|+
operator|(
name|this
operator|.
name|store
operator|.
name|canceledTasks
operator|/
name|this
operator|.
name|store
operator|.
name|doneTasks
operator|)
operator|*
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|canceledTasks
operator|=
name|this
operator|.
name|store
operator|.
name|doneTasks
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|future
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Message
name|getMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|message
return|;
block|}
specifier|private
class|class
name|InnerFutureTask
extends|extends
name|FutureTask
argument_list|<
name|Object
argument_list|>
block|{
specifier|public
name|InnerFutureTask
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|super
argument_list|(
name|runnable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setException
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|super
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|complete
parameter_list|()
block|{
name|super
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|StoreTopicTask
extends|extends
name|StoreQueueTask
block|{
specifier|private
specifier|final
name|int
name|subscriptionCount
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subscriptionKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|KahaDBTopicMessageStore
name|topicStore
decl_stmt|;
specifier|public
name|StoreTopicTask
parameter_list|(
name|KahaDBTopicMessageStore
name|store
parameter_list|,
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|,
name|int
name|subscriptionCount
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|,
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|topicStore
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|subscriptionCount
operator|=
name|subscriptionCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|aquireLocks
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|locked
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|globalTopicSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|store
operator|.
name|acquireLocalAsyncLock
argument_list|()
expr_stmt|;
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to aquire lock"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseLocks
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|locked
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
name|store
operator|.
name|releaseLocalAsyncLock
argument_list|()
expr_stmt|;
name|globalTopicSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * add a key          *          * @param key          * @return true if all acknowledgements received          */
specifier|public
name|boolean
name|addSubscriptionKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|subscriptionKeys
init|)
block|{
name|this
operator|.
name|subscriptionKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|subscriptionKeys
operator|.
name|size
argument_list|()
operator|>=
name|this
operator|.
name|subscriptionCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|this
operator|.
name|store
operator|.
name|doneTasks
operator|++
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|done
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|this
operator|.
name|topicStore
operator|.
name|addMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// apply any acks we have
synchronized|synchronized
init|(
name|this
operator|.
name|subscriptionKeys
init|)
block|{
for|for
control|(
name|String
name|key
range|:
name|this
operator|.
name|subscriptionKeys
control|)
block|{
name|this
operator|.
name|topicStore
operator|.
name|doAcknowledge
argument_list|(
name|context
argument_list|,
name|key
argument_list|,
name|this
operator|.
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|removeTopicTask
argument_list|(
name|this
operator|.
name|topicStore
argument_list|,
name|this
operator|.
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|future
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cancelledTaskModMetric
operator|>
literal|0
operator|&&
name|this
operator|.
name|store
operator|.
name|canceledTasks
operator|++
operator|%
name|cancelledTaskModMetric
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|this
operator|.
name|store
operator|.
name|dest
operator|.
name|getName
argument_list|()
operator|+
literal|" cancelled: "
operator|+
operator|(
name|this
operator|.
name|store
operator|.
name|canceledTasks
operator|/
name|this
operator|.
name|store
operator|.
name|doneTasks
operator|)
operator|*
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|canceledTasks
operator|=
name|this
operator|.
name|store
operator|.
name|doneTasks
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|future
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|StoreTaskExecutor
extends|extends
name|ThreadPoolExecutor
block|{
specifier|public
name|StoreTaskExecutor
parameter_list|(
name|int
name|corePoolSize
parameter_list|,
name|int
name|maximumPoolSize
parameter_list|,
name|long
name|keepAliveTime
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|,
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|super
argument_list|(
name|corePoolSize
argument_list|,
name|maximumPoolSize
argument_list|,
name|keepAliveTime
argument_list|,
name|timeUnit
argument_list|,
name|queue
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|afterExecute
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|super
operator|.
name|afterExecute
argument_list|(
name|runnable
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
if|if
condition|(
name|runnable
operator|instanceof
name|StoreTask
condition|)
block|{
operator|(
operator|(
name|StoreTask
operator|)
name|runnable
operator|)
operator|.
name|releaseLocks
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

