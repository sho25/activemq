begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsConnectionStartStopTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_comment
comment|/**  * Test case intended to demonstrate delivery interruption to queue consumers when  * a JMS selector leaves some messages on the queue (due to use of a JMS Selector)  *   * testNonDiscriminatingConsumer() demonstrates proper functionality for consumers that don't use  * a selector to qualify their input.  *   * testDiscriminatingConsumer() demonstrates the failure condition in which delivery to the consumer  * eventually halts.  *   * The expected behavior is for the delivery to the client to be maintained regardless of the depth  * of the queue, particularly when the messages in the queue do not meet the selector criteria of the  * client.  *  * https://issues.apache.org/activemq/browse/AMQ-2217  *   */
end_comment

begin_class
specifier|public
class|class
name|DiscriminatingConsumerLoadTest
extends|extends
name|TestSupport
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
name|LOG
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DiscriminatingConsumerLoadTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Connection
name|producerConnection
decl_stmt|;
specifier|private
name|Connection
name|consumerConnection
decl_stmt|;
specifier|private
name|int
name|counterSent
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|counterReceived
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMSTYPE_EATME
init|=
literal|"DiscriminatingLoadClient.EatMe"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMSTYPE_IGNOREME
init|=
literal|"DiscriminatingLoadClient.IgnoreMe"
decl_stmt|;
specifier|private
name|int
name|testSize
init|=
literal|5000
decl_stmt|;
comment|// setting this to a small number will pass all tests
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// workaround is to ensure sufficient dispatch buffer for the destination
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultPolicy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultPolicy
operator|.
name|setMaxPageSize
argument_list|(
name|testSize
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultPolicy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|producerConnection
operator|=
name|this
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|this
operator|.
name|consumerConnection
operator|=
name|this
operator|.
name|createConnection
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @see junit.framework.TestCase#tearDown() 	 */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|producerConnection
operator|!=
literal|null
condition|)
block|{
name|producerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|producerConnection
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|consumerConnection
operator|!=
literal|null
condition|)
block|{
name|consumerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerConnection
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Test to check if a single consumer with no JMS selector will receive all intended messages 	 *  	 * @throws java.lang.Exception 	 */
specifier|public
name|void
name|testNonDiscriminatingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|consumerConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|consumerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerConnection = "
operator|+
name|consumerConnection
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// here we pass in null for the JMS selector
name|Consumer
name|consumer
init|=
operator|new
name|Consumer
argument_list|(
name|consumerConnection
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Thread
name|consumerThread
init|=
operator|new
name|Thread
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|consumerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|producerConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"producerConnection = "
operator|+
name|producerConnection
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|producerConnection
argument_list|)
decl_stmt|;
name|Thread
name|producerThread
init|=
operator|new
name|Thread
argument_list|(
name|producer
argument_list|)
decl_stmt|;
name|producerThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// now that everything is running, let's wait for the consumer thread to finish ...
name|consumerThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|producer
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|consumer
operator|.
name|getCount
argument_list|()
operator|==
name|testSize
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"test complete .... all messsages consumed!!"
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|info
argument_list|(
literal|"test failed .... Sent "
operator|+
operator|(
name|testSize
operator|/
literal|1
operator|)
operator|+
literal|" messages intended to be consumed ( "
operator|+
name|testSize
operator|+
literal|" total), but only consumed "
operator|+
name|consumer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Sent "
operator|+
name|testSize
operator|+
literal|" messages intended to be consumed, but only consumed "
operator|+
name|consumer
operator|.
name|getCount
argument_list|()
argument_list|,
operator|(
name|consumer
operator|.
name|getCount
argument_list|()
operator|==
name|testSize
operator|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delivery of messages to consumer was halted during this test"
argument_list|,
name|consumer
operator|.
name|deliveryHalted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test to check if a single consumer with a JMS selector will receive all intended messages 	 *  	 * @throws java.lang.Exception 	 */
specifier|public
name|void
name|testDiscriminatingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|consumerConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|consumerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerConnection = "
operator|+
name|consumerConnection
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// here we pass the JMS selector we intend to consume
name|Consumer
name|consumer
init|=
operator|new
name|Consumer
argument_list|(
name|consumerConnection
argument_list|,
name|JMSTYPE_EATME
argument_list|)
decl_stmt|;
name|Thread
name|consumerThread
init|=
operator|new
name|Thread
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|consumerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|producerConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"producerConnection = "
operator|+
name|producerConnection
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|producerConnection
argument_list|)
decl_stmt|;
name|Thread
name|producerThread
init|=
operator|new
name|Thread
argument_list|(
name|producer
argument_list|)
decl_stmt|;
name|producerThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// now that everything is running, let's wait for the consumer thread to finish ...
name|consumerThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|producer
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|consumer
operator|.
name|getCount
argument_list|()
operator|==
operator|(
name|testSize
operator|/
literal|2
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test complete .... all messsages consumed!!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test failed .... Sent "
operator|+
name|testSize
operator|+
literal|" original messages, only half of which ("
operator|+
operator|(
name|testSize
operator|/
literal|2
operator|)
operator|+
literal|") were intended to be consumed: consumer paused at: "
operator|+
name|consumer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println("test failed .... Sent " + testSize  + " original messages, only half of which (" + (testSize / 2) +
comment|//		") were intended to be consumed: consumer paused at: " + consumer.getCount());
block|}
name|assertTrue
argument_list|(
literal|"Sent "
operator|+
name|testSize
operator|+
literal|" original messages, only half of which ("
operator|+
operator|(
name|testSize
operator|/
literal|2
operator|)
operator|+
literal|") were intended to be consumed: consumer paused at: "
operator|+
name|consumer
operator|.
name|getCount
argument_list|()
argument_list|,
operator|(
name|consumer
operator|.
name|getCount
argument_list|()
operator|==
operator|(
name|testSize
operator|/
literal|2
operator|)
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Delivery of messages to consumer was halted during this test as it only wants half"
argument_list|,
name|consumer
operator|.
name|deliveryHalted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Helper class that will publish 2 * testSize messages.  The messages will be distributed evenly 	 * between the following two JMS types: 	 *  	 * @see JMSTYPE_INTENDED_FOR_CONSUMPTION 	 * @see JMSTYPE_NOT_INTENDED_FOR_CONSUMPTION 	 *  	 * @author jlyons 	 * 	 */
specifier|private
class|class
name|Producer
extends|extends
name|Thread
block|{
specifier|private
name|int
name|counterSent
init|=
literal|0
decl_stmt|;
specifier|private
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
specifier|public
name|Producer
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// wait for 10 seconds to allow consumer.receive to be run
comment|// first
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stop
operator|&&
operator|(
name|counterSent
operator|<
name|testSize
operator|)
condition|)
block|{
comment|// first send a message intended to be consumed ....
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"*** Ill ....... Ini ***"
argument_list|)
decl_stmt|;
comment|// alma mater ...
name|message
operator|.
name|setJMSType
argument_list|(
name|JMSTYPE_EATME
argument_list|)
expr_stmt|;
comment|//LOG.info("sending .... JMSType = " + message.getJMSType());
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
literal|0
argument_list|,
literal|1800000
argument_list|)
expr_stmt|;
name|counterSent
operator|++
expr_stmt|;
comment|// now send a message intended to be consumed by some other consumer in the the future
comment|// ... we expect these messages to accrue in the queue
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"*** Ill ....... Ini ***"
argument_list|)
expr_stmt|;
comment|// alma mater ...
name|message
operator|.
name|setJMSType
argument_list|(
name|JMSTYPE_IGNOREME
argument_list|)
expr_stmt|;
comment|//LOG.info("sending .... JMSType = " + message.getJMSType());
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
literal|0
argument_list|,
literal|1800000
argument_list|)
expr_stmt|;
name|counterSent
operator|++
expr_stmt|;
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"producer thread complete ... "
operator|+
name|counterSent
operator|+
literal|" messages sent to the queue"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|counterSent
return|;
block|}
block|}
comment|/** 	 * Helper class that will consume messages from the queue based on the supplied JMS selector. 	 * Thread will stop after the first receive(..) timeout, or once all expected messages have 	 * been received (see testSize).  If the thread stops due to a timeout, it is experiencing the 	 * delivery pause that is symptomatic of a bug in the broker. 	 *  	 * @author jlyons 	 * 	 */
specifier|private
class|class
name|Consumer
extends|extends
name|Thread
block|{
specifier|protected
name|int
name|counterReceived
init|=
literal|0
decl_stmt|;
specifier|private
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|jmsSelector
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|deliveryHalted
init|=
literal|false
decl_stmt|;
specifier|public
name|Consumer
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|jmsSelector
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|jmsSelector
operator|=
name|jmsSelector
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|testComplete
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|consumerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|jmsSelector
condition|)
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|,
literal|"JMSType='"
operator|+
name|this
operator|.
name|jmsSelector
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|deliveryHalted
operator|&&
operator|(
name|counterReceived
operator|<
name|testSize
operator|)
condition|)
block|{
name|TextMessage
name|result
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|counterReceived
operator|++
expr_stmt|;
comment|//System.out.println("consuming .... JMSType = " + result.getJMSType() + " received = " + counterReceived);
name|LOG
operator|.
name|info
argument_list|(
literal|"consuming .... JMSType = "
operator|+
name|result
operator|.
name|getJMSType
argument_list|()
operator|+
literal|" received = "
operator|+
name|counterReceived
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"consuming .... timeout while waiting for a message ... broker must have stopped delivery ...  received = "
operator|+
name|counterReceived
argument_list|)
expr_stmt|;
name|deliveryHalted
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|counterReceived
return|;
block|}
specifier|public
name|boolean
name|deliveryHalted
parameter_list|()
block|{
return|return
name|this
operator|.
name|deliveryHalted
return|;
block|}
block|}
block|}
end_class

end_unit

