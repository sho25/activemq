begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|StubTransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|ObjectStreamWireFormat
import|;
end_import

begin_comment
comment|/**  * Unit tests for the SslTransport class.  *   */
end_comment

begin_class
specifier|public
class|class
name|SslTransportTest
extends|extends
name|TestCase
block|{
name|SSLSocket
name|sslSocket
decl_stmt|;
name|StubTransportListener
name|stubListener
decl_stmt|;
name|String
name|username
decl_stmt|;
name|String
name|password
decl_stmt|;
name|String
name|certDistinguishedName
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|certDistinguishedName
operator|=
literal|"ThisNameIsDistinguished"
expr_stmt|;
name|username
operator|=
literal|"SomeUserName"
expr_stmt|;
name|password
operator|=
literal|"SomePassword"
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTransportAndConsume
parameter_list|(
name|boolean
name|wantAuth
parameter_list|,
name|boolean
name|needAuth
parameter_list|)
throws|throws
name|IOException
block|{
name|JMXPrincipal
name|principal
init|=
operator|new
name|JMXPrincipal
argument_list|(
name|certDistinguishedName
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|new
name|StubX509Certificate
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|StubSSLSession
name|sslSession
init|=
operator|new
name|StubSSLSession
argument_list|(
name|cert
argument_list|)
decl_stmt|;
name|sslSocket
operator|=
operator|new
name|StubSSLSocket
argument_list|(
name|sslSession
argument_list|)
expr_stmt|;
name|sslSocket
operator|.
name|setWantClientAuth
argument_list|(
name|wantAuth
argument_list|)
expr_stmt|;
name|sslSocket
operator|.
name|setNeedClientAuth
argument_list|(
name|needAuth
argument_list|)
expr_stmt|;
name|SslTransport
name|transport
init|=
operator|new
name|SslTransport
argument_list|(
operator|new
name|ObjectStreamWireFormat
argument_list|()
argument_list|,
name|sslSocket
argument_list|)
decl_stmt|;
name|stubListener
operator|=
operator|new
name|StubTransportListener
argument_list|()
expr_stmt|;
name|transport
operator|.
name|setTransportListener
argument_list|(
name|stubListener
argument_list|)
expr_stmt|;
name|ConnectionInfo
name|sentInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|sentInfo
operator|.
name|setUserName
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|sentInfo
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|transport
operator|.
name|doConsume
argument_list|(
name|sentInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testKeepClientUserName
parameter_list|()
throws|throws
name|IOException
block|{
name|createTransportAndConsume
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|ConnectionInfo
name|receivedInfo
init|=
operator|(
name|ConnectionInfo
operator|)
name|stubListener
operator|.
name|getCommands
argument_list|()
operator|.
name|remove
argument_list|()
decl_stmt|;
name|X509Certificate
name|receivedCert
decl_stmt|;
try|try
block|{
name|receivedCert
operator|=
operator|(
operator|(
name|X509Certificate
index|[]
operator|)
name|receivedInfo
operator|.
name|getTransportContext
argument_list|()
operator|)
index|[
literal|0
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|receivedCert
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|receivedCert
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Transmitted certificate chain was not attached to ConnectionInfo."
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Received certificate distinguished name did not match the one transmitted."
argument_list|,
name|certDistinguishedName
argument_list|,
name|receivedCert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

