begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpHeaders
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpClientCodec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpObjectAggregator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|BinaryWebSocketFrame
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|CloseWebSocketFrame
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|PingWebSocketFrame
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|PongWebSocketFrame
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|TextWebSocketFrame
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|WebSocketClientHandshaker
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|WebSocketClientHandshakerFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|WebSocketFrame
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|websocketx
operator|.
name|WebSocketVersion
import|;
end_import

begin_comment
comment|/**  * Transport for communicating over WebSockets  */
end_comment

begin_class
specifier|public
class|class
name|NettyWSTransport
extends|extends
name|NettyTcpTransport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NettyWSTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AMQP_SUB_PROTOCOL
init|=
literal|"amqp"
decl_stmt|;
comment|/**      * Create a new transport instance      *      * @param remoteLocation      *        the URI that defines the remote resource to connect to.      * @param options      *        the transport options used to configure the socket connection.      */
specifier|public
name|NettyWSTransport
parameter_list|(
name|URI
name|remoteLocation
parameter_list|,
name|NettyTransportOptions
name|options
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|remoteLocation
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new transport instance      *      * @param listener      *        the TransportListener that will receive events from this Transport.      * @param remoteLocation      *        the URI that defines the remote resource to connect to.      * @param options      *        the transport options used to configure the socket connection.      */
specifier|public
name|NettyWSTransport
parameter_list|(
name|NettyTransportListener
name|listener
parameter_list|,
name|URI
name|remoteLocation
parameter_list|,
name|NettyTransportOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|remoteLocation
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ByteBuf
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|int
name|length
init|=
name|output
operator|.
name|readableBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Attempted write of: {} bytes"
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|channel
operator|.
name|writeAndFlush
argument_list|(
operator|new
name|BinaryWebSocketFrame
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ChannelInboundHandlerAdapter
name|createChannelHandler
parameter_list|()
block|{
return|return
operator|new
name|NettyWebSocketTransportHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addAdditionalHandlers
parameter_list|(
name|ChannelPipeline
name|pipeline
parameter_list|)
block|{
name|pipeline
operator|.
name|addLast
argument_list|(
operator|new
name|HttpClientCodec
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
operator|new
name|HttpObjectAggregator
argument_list|(
literal|8192
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleConnected
parameter_list|(
name|Channel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Channel has become active, awaiting WebSocket handshake! Channel is {}"
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
comment|//----- Handle connection events -----------------------------------------//
specifier|private
class|class
name|NettyWebSocketTransportHandler
extends|extends
name|NettyDefaultHandler
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|WebSocketClientHandshaker
name|handshaker
decl_stmt|;
specifier|public
name|NettyWebSocketTransportHandler
parameter_list|()
block|{
name|handshaker
operator|=
name|WebSocketClientHandshakerFactory
operator|.
name|newHandshaker
argument_list|(
name|getRemoteLocation
argument_list|()
argument_list|,
name|WebSocketVersion
operator|.
name|V13
argument_list|,
name|AMQP_SUB_PROTOCOL
argument_list|,
literal|true
argument_list|,
operator|new
name|DefaultHttpHeaders
argument_list|()
argument_list|,
name|getMaxFrameSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelActive
parameter_list|(
name|ChannelHandlerContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|handshaker
operator|.
name|handshake
argument_list|(
name|context
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|channelActive
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"New data read: incoming: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|Channel
name|ch
init|=
name|ctx
operator|.
name|channel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|handshaker
operator|.
name|isHandshakeComplete
argument_list|()
condition|)
block|{
name|handshaker
operator|.
name|finishHandshake
argument_list|(
name|ch
argument_list|,
operator|(
name|FullHttpResponse
operator|)
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"WebSocket Client connected! {}"
argument_list|,
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now trigger super processing as we are really connected.
name|NettyWSTransport
operator|.
name|super
operator|.
name|handleConnected
argument_list|(
name|ch
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We shouldn't get this since we handle the handshake previously.
if|if
condition|(
name|message
operator|instanceof
name|FullHttpResponse
condition|)
block|{
name|FullHttpResponse
name|response
init|=
operator|(
name|FullHttpResponse
operator|)
name|message
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected FullHttpResponse (getStatus="
operator|+
name|response
operator|.
name|status
argument_list|()
operator|+
literal|", content="
operator|+
name|response
operator|.
name|content
argument_list|()
operator|.
name|toString
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|+
literal|')'
argument_list|)
throw|;
block|}
name|WebSocketFrame
name|frame
init|=
operator|(
name|WebSocketFrame
operator|)
name|message
decl_stmt|;
if|if
condition|(
name|frame
operator|instanceof
name|TextWebSocketFrame
condition|)
block|{
name|TextWebSocketFrame
name|textFrame
init|=
operator|(
name|TextWebSocketFrame
operator|)
name|frame
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"WebSocket Client received message: "
operator|+
name|textFrame
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|fireExceptionCaught
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Received invalid frame over WebSocket."
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|frame
operator|instanceof
name|BinaryWebSocketFrame
condition|)
block|{
name|BinaryWebSocketFrame
name|binaryFrame
init|=
operator|(
name|BinaryWebSocketFrame
operator|)
name|frame
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"WebSocket Client received data: {} bytes"
argument_list|,
name|binaryFrame
operator|.
name|content
argument_list|()
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onData
argument_list|(
name|binaryFrame
operator|.
name|content
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|frame
operator|instanceof
name|PingWebSocketFrame
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"WebSocket Client received ping, response with pong"
argument_list|)
expr_stmt|;
name|ch
operator|.
name|write
argument_list|(
operator|new
name|PongWebSocketFrame
argument_list|(
name|frame
operator|.
name|content
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|frame
operator|instanceof
name|CloseWebSocketFrame
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"WebSocket Client received closing"
argument_list|)
expr_stmt|;
name|ch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

