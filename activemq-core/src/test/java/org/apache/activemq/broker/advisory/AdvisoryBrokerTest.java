begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|advisory
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|StubConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_class
specifier|public
class|class
name|AdvisoryBrokerTest
extends|extends
name|BrokerTestSupport
block|{
specifier|public
name|void
name|testConnectionAdvisories
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|AdvisorySupport
operator|.
name|getConnectionAdvisoryTopic
argument_list|()
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// We should get an advisory of our own connection.
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ConnectionInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|connectionInfo1
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup a second connection
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
comment|// We should get an advisory of the second connection.
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ConnectionInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|connectionInfo2
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the second connection.
name|connection2
operator|.
name|send
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// We should get an advisory of the second connection closing
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|RemoveInfo
name|r
init|=
operator|(
name|RemoveInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|connectionInfo2
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerAdvisories
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// We should not see and advisory for the advisory consumer.
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
comment|// Setup a second consumer.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// We should get an advisory of the new consumer.
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ConsumerInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|consumerInfo2
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the second connection.
name|connection2
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// We should get an advisory of the consumer closing
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|RemoveInfo
name|r
init|=
operator|(
name|RemoveInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|consumerInfo2
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerAdvisoriesReplayed
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
comment|// Setup a second consumer.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// We should get an advisory of the previous consumer.
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ConsumerInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|consumerInfo2
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the second connection.
name|connection2
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// We should get an advisory of the consumer closing
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|RemoveInfo
name|r
init|=
operator|(
name|RemoveInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|consumerInfo2
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProducerAdvisories
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|AdvisorySupport
operator|.
name|getProducerAdvisoryTopic
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
comment|// Setup a producer.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|producerInfo2
operator|.
name|setDestination
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
comment|// We should get an advisory of the new produver.
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ProducerInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|producerInfo2
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the second connection.
name|connection2
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// We should get an advisory of the producer closing
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|RemoveInfo
name|r
init|=
operator|(
name|RemoveInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|producerInfo2
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProducerAdvisoriesReplayed
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|AdvisorySupport
operator|.
name|getProducerAdvisoryTopic
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
comment|// Setup a producer.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|producerInfo2
operator|.
name|setDestination
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
comment|// Create the advisory consumer.. it should see the previous producer
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ProducerInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|producerInfo2
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the second connection.
name|connection2
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// We should get an advisory of the producer closing
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|RemoveInfo
name|r
init|=
operator|(
name|RemoveInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|producerInfo2
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProducerAdvisoriesReplayedOnlyTargetNewConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|AdvisorySupport
operator|.
name|getProducerAdvisoryTopic
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// Setup a first connection
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
comment|// Create the first consumer..
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo1
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Setup a producer.
name|StubConnection
name|connection2
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|producerInfo2
operator|.
name|setDestination
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ProducerInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|producerInfo2
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the 2nd consumer..
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo2
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// The second consumer should se a replay
name|m1
operator|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ProducerInfo
operator|)
name|m1
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|producerInfo2
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// But the first consumer should not see the replay.
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|AdvisoryBrokerTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

