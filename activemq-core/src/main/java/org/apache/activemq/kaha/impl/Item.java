begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_comment
comment|/**  * A a wrapper for a data in the store  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|Item
block|{
specifier|static
specifier|final
name|long
name|POSITION_NOT_SET
init|=
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|final
name|short
name|MAGIC
init|=
literal|31317
decl_stmt|;
specifier|static
specifier|final
name|int
name|ACTIVE
init|=
literal|22
decl_stmt|;
specifier|static
specifier|final
name|int
name|FREE
init|=
literal|33
decl_stmt|;
specifier|static
specifier|final
name|int
name|HEAD_SIZE
init|=
literal|8
decl_stmt|;
comment|// magic + active + len
specifier|static
specifier|final
name|int
name|LOCATION_SIZE
init|=
literal|24
decl_stmt|;
specifier|private
name|long
name|offset
init|=
name|POSITION_NOT_SET
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
name|boolean
name|active
decl_stmt|;
name|Item
parameter_list|()
block|{}
name|void
name|writeHeader
parameter_list|(
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeShort
argument_list|(
name|MAGIC
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeByte
argument_list|(
name|active
condition|?
name|ACTIVE
else|:
name|FREE
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//padding
block|}
name|void
name|readHeader
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|magic
init|=
name|dataIn
operator|.
name|readShort
argument_list|()
decl_stmt|;
if|if
condition|(
name|magic
operator|==
name|MAGIC
condition|)
block|{
name|active
operator|=
operator|(
name|dataIn
operator|.
name|readByte
argument_list|()
operator|==
name|ACTIVE
operator|)
expr_stmt|;
name|size
operator|=
name|dataIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|magic
operator|==
literal|0
condition|)
block|{
name|size
operator|=
operator|-
literal|999
expr_stmt|;
comment|//end of data
block|}
else|else
block|{
throw|throw
operator|new
name|BadMagicException
argument_list|(
literal|"Unexpected Magic value: "
operator|+
name|magic
argument_list|)
throw|;
block|}
block|}
name|void
name|writePayload
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Object
name|object
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|marshaller
operator|.
name|writePayload
argument_list|(
name|object
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
name|Object
name|readPayload
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|DataInputStream
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|marshaller
operator|.
name|readPayload
argument_list|(
name|dataIn
argument_list|)
return|;
block|}
name|void
name|readLocation
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{}
name|void
name|writeLocation
parameter_list|(
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**      * @return Returns the size.      */
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * @param size      *            The size to set.      */
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
name|void
name|setOffset
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
name|offset
operator|=
name|pos
expr_stmt|;
block|}
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**      * @return Returns the active.      */
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
comment|/**      * @param active      *            The active to set.      */
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
block|}
comment|/**      * @return a pretty print      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|result
init|=
literal|"offset = "
operator|+
name|offset
operator|+
literal|" ,active = "
operator|+
name|active
operator|+
literal|" , size = "
operator|+
name|size
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

