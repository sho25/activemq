begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|replicated
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|util
operator|.
name|clock
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|util
operator|.
name|clock
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|util
operator|.
name|clock
operator|.
name|Timespan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|util
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|ChrootedZKClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|IZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|IZooKeeperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|linkedin
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|ZooKeeperFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|ZKClient
extends|extends
name|org
operator|.
name|linkedin
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|AbstractZKClient
implements|implements
name|Watcher
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZKClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|acls
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Grab the lock to make sure that the registration of the ManagedService
comment|// won't be updated immediately but that the initial update will happen first
synchronized|synchronized
init|(
name|_lock
init|)
block|{
name|_stateChangeDispatcher
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|_stateChangeDispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|doStart
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setACLs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|)
block|{
name|this
operator|.
name|acls
operator|=
name|acls
expr_stmt|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|InvalidSyntaxException
throws|,
name|ConfigurationException
throws|,
name|UnsupportedEncodingException
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|_stateChangeDispatcher
operator|!=
literal|null
condition|)
block|{
name|_stateChangeDispatcher
operator|.
name|end
argument_list|()
expr_stmt|;
try|try
block|{
name|_stateChangeDispatcher
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ignored exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|_lock
init|)
block|{
if|if
condition|(
name|_zk
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|changeState
argument_list|(
name|State
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|_zk
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We try to avoid a NPE when shutting down fabric:
comment|// java.lang.NullPointerException
comment|//     at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1433)
comment|//     at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:73)
comment|//     at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1844)
comment|//     at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
comment|//     at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1089)
name|Thread
name|th
init|=
name|getSendThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|th
operator|!=
literal|null
condition|)
block|{
name|th
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|_zk
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ignored exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Thread
name|getSendThread
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|Thread
operator|)
name|getField
argument_list|(
name|_zk
argument_list|,
literal|"_zk"
argument_list|,
literal|"cnxn"
argument_list|,
literal|"sendThread"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|Object
name|getField
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|obj
operator|=
name|getField
argument_list|(
name|obj
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
specifier|protected
name|Object
name|getField
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
name|clazz
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Field
name|f
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
operator|.
name|get
argument_list|(
name|obj
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|NoSuchFieldError
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|changeState
parameter_list|(
name|State
name|newState
parameter_list|)
block|{
synchronized|synchronized
init|(
name|_lock
init|)
block|{
name|State
name|oldState
init|=
name|_state
decl_stmt|;
if|if
condition|(
name|oldState
operator|!=
name|newState
condition|)
block|{
name|_stateChangeDispatcher
operator|.
name|addEvent
argument_list|(
name|oldState
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|_state
operator|=
name|newState
expr_stmt|;
name|_lock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testGenerateConnectionLoss
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForConnected
argument_list|()
expr_stmt|;
name|Object
name|clientCnxnSocket
init|=
name|getField
argument_list|(
name|_zk
argument_list|,
literal|"_zk"
argument_list|,
literal|"cnxn"
argument_list|,
literal|"sendThread"
argument_list|,
literal|"clientCnxnSocket"
argument_list|)
decl_stmt|;
name|callMethod
argument_list|(
name|clientCnxnSocket
argument_list|,
literal|"testableCloseSocket"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Object
name|callMethod
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
name|clazz
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|NoSuchMethodError
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|tryConnect
parameter_list|()
block|{
synchronized|synchronized
init|(
name|_lock
init|)
block|{
try|try
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while restarting:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|_expiredSessionRecovery
operator|==
literal|null
condition|)
block|{
name|_expiredSessionRecovery
operator|=
operator|new
name|ExpiredSessionRecovery
argument_list|()
expr_stmt|;
name|_expiredSessionRecovery
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|_expiredSessionRecovery
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
synchronized|synchronized
init|(
name|_lock
init|)
block|{
name|changeState
argument_list|(
name|State
operator|.
name|CONNECTING
argument_list|)
expr_stmt|;
name|_zk
operator|=
name|_factory
operator|.
name|createZooKeeper
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|_zk
operator|.
name|addAuthInfo
argument_list|(
literal|"digest"
argument_list|,
operator|(
literal|"fabric:"
operator|+
name|password
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getState
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"event: {}"
argument_list|,
name|event
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|_lock
init|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|SyncConnected
case|:
name|changeState
argument_list|(
name|State
operator|.
name|CONNECTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|Disconnected
case|:
if|if
condition|(
name|_state
operator|!=
name|State
operator|.
name|NONE
condition|)
block|{
name|changeState
argument_list|(
name|State
operator|.
name|RECONNECTING
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Expired
case|:
comment|// when expired, the zookeeper object is invalid and we need to recreate a new one
name|_zk
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Expiration detected: trying to restart..."
argument_list|)
expr_stmt|;
name|tryConnect
argument_list|()
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"unprocessed event state: {}"
argument_list|,
name|event
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|IZooKeeper
name|getZk
parameter_list|()
block|{
name|State
name|state
init|=
name|_state
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|NONE
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ZooKeeper client has not been configured yet. You need to either create an ensemble or join one."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|state
operator|!=
name|State
operator|.
name|CONNECTED
condition|)
block|{
try|try
block|{
name|waitForConnected
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error waiting for ZooKeeper connection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|IZooKeeper
name|zk
init|=
name|_zk
decl_stmt|;
if|if
condition|(
name|zk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No ZooKeeper connection available"
argument_list|)
throw|;
block|}
return|return
name|zk
return|;
block|}
specifier|public
name|void
name|waitForConnected
parameter_list|(
name|Timespan
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|waitForState
argument_list|(
name|State
operator|.
name|CONNECTED
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|waitForConnected
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|waitForConnected
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|waitForState
parameter_list|(
name|State
name|state
parameter_list|,
name|Timespan
name|timeout
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|long
name|endTime
init|=
operator|(
name|timeout
operator|==
literal|null
condition|?
name|sessionTimeout
else|:
name|timeout
operator|)
operator|.
name|futureTimeMillis
argument_list|(
name|_clock
argument_list|)
decl_stmt|;
if|if
condition|(
name|_state
operator|!=
name|state
condition|)
block|{
synchronized|synchronized
init|(
name|_lock
init|)
block|{
while|while
condition|(
name|_state
operator|!=
name|state
condition|)
block|{
name|ConcurrentUtils
operator|.
name|awaitUntil
argument_list|(
name|_clock
argument_list|,
name|_lock
argument_list|,
name|endTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerListener
parameter_list|(
name|LifecycleListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"listener is null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|_listeners
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
condition|)
block|{
name|_listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|_state
operator|==
name|State
operator|.
name|CONNECTED
condition|)
block|{
name|listener
operator|.
name|onConnected
argument_list|()
expr_stmt|;
comment|//_stateChangeDispatcher.addEvent(null, State.CONNECTED);
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|LifecycleListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"listener is null"
argument_list|)
throw|;
block|}
name|_listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|linkedin
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|IZKClient
name|chroot
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|ChrootedZKClient
argument_list|(
name|this
argument_list|,
name|adjustPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|_state
operator|==
name|State
operator|.
name|CONNECTED
return|;
block|}
specifier|public
name|boolean
name|isConfigured
parameter_list|()
block|{
return|return
name|_state
operator|!=
name|State
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConnectString
parameter_list|()
block|{
return|return
name|_factory
operator|.
name|getConnectString
argument_list|()
return|;
block|}
specifier|public
specifier|static
enum|enum
name|State
block|{
name|NONE
block|,
name|CONNECTING
block|,
name|CONNECTED
block|,
name|RECONNECTING
block|}
specifier|private
specifier|final
specifier|static
name|String
name|CHARSET
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|_clock
init|=
name|SystemClock
operator|.
name|instance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LifecycleListener
argument_list|>
name|_listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|LifecycleListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Object
name|_lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
specifier|volatile
name|State
name|_state
init|=
name|State
operator|.
name|NONE
decl_stmt|;
specifier|private
specifier|final
name|StateChangeDispatcher
name|_stateChangeDispatcher
init|=
operator|new
name|StateChangeDispatcher
argument_list|()
decl_stmt|;
specifier|protected
name|IZooKeeperFactory
name|_factory
decl_stmt|;
specifier|protected
name|IZooKeeper
name|_zk
decl_stmt|;
specifier|protected
name|Timespan
name|_reconnectTimeout
init|=
name|Timespan
operator|.
name|parse
argument_list|(
literal|"20s"
argument_list|)
decl_stmt|;
specifier|protected
name|Timespan
name|sessionTimeout
init|=
operator|new
name|Timespan
argument_list|(
literal|30
argument_list|,
name|Timespan
operator|.
name|TimeUnit
operator|.
name|SECOND
argument_list|)
decl_stmt|;
specifier|private
name|ExpiredSessionRecovery
name|_expiredSessionRecovery
init|=
literal|null
decl_stmt|;
specifier|private
class|class
name|StateChangeDispatcher
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|_running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Boolean
argument_list|>
name|_events
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|StateChangeDispatcher
parameter_list|()
block|{
name|super
argument_list|(
literal|"ZooKeeper state change dispatcher thread"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
name|history
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting StateChangeDispatcher"
argument_list|)
expr_stmt|;
while|while
condition|(
name|_running
operator|.
name|get
argument_list|()
condition|)
block|{
name|Boolean
name|isConnectedEvent
decl_stmt|;
try|try
block|{
name|isConnectedEvent
operator|=
name|_events
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|_running
operator|.
name|get
argument_list|()
operator|||
name|isConnectedEvent
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
name|newHistory
init|=
name|callListeners
argument_list|(
name|history
argument_list|,
name|isConnectedEvent
argument_list|)
decl_stmt|;
comment|// we save which event each listener has seen last
comment|// we don't update the map in place because we need to get rid of unregistered listeners
name|history
operator|=
name|newHistory
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"StateChangeDispatcher terminated."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|end
parameter_list|()
block|{
name|_running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|_events
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addEvent
parameter_list|(
name|ZKClient
operator|.
name|State
name|oldState
parameter_list|,
name|ZKClient
operator|.
name|State
name|newState
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"addEvent: {} => {}"
argument_list|,
name|oldState
argument_list|,
name|newState
argument_list|)
expr_stmt|;
if|if
condition|(
name|newState
operator|==
name|ZKClient
operator|.
name|State
operator|.
name|CONNECTED
condition|)
block|{
name|_events
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldState
operator|==
name|ZKClient
operator|.
name|State
operator|.
name|CONNECTED
condition|)
block|{
name|_events
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
name|callListeners
parameter_list|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
name|history
parameter_list|,
name|Boolean
name|connectedEvent
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
name|newHistory
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LifecycleListener
name|listener
range|:
name|_listeners
control|)
block|{
name|Boolean
name|previousEvent
init|=
name|history
operator|.
name|get
argument_list|(
name|listener
argument_list|)
decl_stmt|;
comment|// we propagate the event only if it was not already sent
if|if
condition|(
name|previousEvent
operator|==
literal|null
operator|||
name|previousEvent
operator|!=
name|connectedEvent
condition|)
block|{
try|try
block|{
if|if
condition|(
name|connectedEvent
condition|)
block|{
name|listener
operator|.
name|onConnected
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onDisconnected
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while executing listener (ignored)"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|newHistory
operator|.
name|put
argument_list|(
name|listener
argument_list|,
name|connectedEvent
argument_list|)
expr_stmt|;
block|}
return|return
name|newHistory
return|;
block|}
specifier|private
class|class
name|ExpiredSessionRecovery
extends|extends
name|Thread
block|{
specifier|private
name|ExpiredSessionRecovery
parameter_list|()
block|{
name|super
argument_list|(
literal|"ZooKeeper expired session recovery thread"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Entering recovery mode"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|_lock
init|)
block|{
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|_state
operator|==
name|ZKClient
operator|.
name|State
operator|.
name|NONE
condition|)
block|{
try|try
block|{
name|count
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Recovery mode: trying to reconnect to zookeeper ["
operator|+
name|count
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|ZKClient
operator|.
name|this
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Recovery mode: reconnect attempt failed ["
operator|+
name|count
operator|+
literal|"]... waiting for "
operator|+
name|_reconnectTimeout
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|_lock
operator|.
name|wait
argument_list|(
name|_reconnectTimeout
operator|.
name|getDurationInMilliseconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Recovery mode: wait interrupted... bailing out"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|_expiredSessionRecovery
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting recovery mode."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Constructor      */
specifier|public
name|ZKClient
parameter_list|(
name|String
name|connectString
parameter_list|,
name|Timespan
name|sessionTimeout
parameter_list|,
name|Watcher
name|watcher
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ZooKeeperFactory
argument_list|(
name|connectString
argument_list|,
name|sessionTimeout
argument_list|,
name|watcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor      */
specifier|public
name|ZKClient
parameter_list|(
name|IZooKeeperFactory
name|factory
parameter_list|)
block|{
name|this
argument_list|(
name|factory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor      */
specifier|public
name|ZKClient
parameter_list|(
name|IZooKeeperFactory
name|factory
parameter_list|,
name|String
name|chroot
parameter_list|)
block|{
name|super
argument_list|(
name|chroot
argument_list|)
expr_stmt|;
name|_factory
operator|=
name|factory
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|"world:anyone:acdrw"
argument_list|)
expr_stmt|;
name|setACLs
argument_list|(
name|acls
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|private
name|int
name|getPermFromString
parameter_list|(
name|String
name|permString
parameter_list|)
block|{
name|int
name|perm
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permString
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|permString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|'r'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|READ
expr_stmt|;
break|break;
case|case
literal|'w'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|WRITE
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|CREATE
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|DELETE
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|ADMIN
expr_stmt|;
break|break;
default|default:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown perm type: "
operator|+
name|permString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perm
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ACL
argument_list|>
name|parseACLs
parameter_list|(
name|String
name|aclString
parameter_list|)
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
decl_stmt|;
name|String
name|acls
index|[]
init|=
name|aclString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|acl
operator|=
operator|new
name|ArrayList
argument_list|<
name|ACL
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|a
range|:
name|acls
control|)
block|{
name|int
name|firstColon
init|=
name|a
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|int
name|lastColon
init|=
name|a
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstColon
operator|==
operator|-
literal|1
operator|||
name|lastColon
operator|==
operator|-
literal|1
operator|||
name|firstColon
operator|==
name|lastColon
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|a
operator|+
literal|" does not have the form scheme:id:perm"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ACL
name|newAcl
init|=
operator|new
name|ACL
argument_list|()
decl_stmt|;
name|newAcl
operator|.
name|setId
argument_list|(
operator|new
name|Id
argument_list|(
name|a
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstColon
argument_list|)
argument_list|,
name|a
operator|.
name|substring
argument_list|(
name|firstColon
operator|+
literal|1
argument_list|,
name|lastColon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newAcl
operator|.
name|setPerms
argument_list|(
name|getPermFromString
argument_list|(
name|a
operator|.
name|substring
argument_list|(
name|lastColon
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|add
argument_list|(
name|newAcl
argument_list|)
expr_stmt|;
block|}
return|return
name|acl
return|;
block|}
specifier|public
name|Stat
name|createOrSetByteWithParents
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
if|if
condition|(
name|exists
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|setByteData
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
return|;
block|}
try|try
block|{
name|createBytesNodeWithParents
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|acl
argument_list|,
name|createMode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|// this should not happen very often (race condition)
return|return
name|setByteData
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|create
parameter_list|(
name|String
name|path
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
return|return
name|create
argument_list|(
name|path
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|createMode
argument_list|)
return|;
block|}
specifier|public
name|String
name|create
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
return|return
name|create
argument_list|(
name|path
argument_list|,
name|toByteData
argument_list|(
name|data
argument_list|)
argument_list|,
name|createMode
argument_list|)
return|;
block|}
specifier|public
name|String
name|create
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
return|return
name|getZk
argument_list|()
operator|.
name|create
argument_list|(
name|adjustPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|data
argument_list|,
name|getNodeACLs
argument_list|(
name|path
argument_list|)
argument_list|,
name|createMode
argument_list|)
return|;
block|}
specifier|public
name|String
name|createWithParents
parameter_list|(
name|String
name|path
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
return|return
name|createWithParents
argument_list|(
name|path
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|createMode
argument_list|)
return|;
block|}
specifier|public
name|String
name|createWithParents
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
return|return
name|createWithParents
argument_list|(
name|path
argument_list|,
name|toByteData
argument_list|(
name|data
argument_list|)
argument_list|,
name|createMode
argument_list|)
return|;
block|}
specifier|public
name|String
name|createWithParents
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|createParents
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|createMode
argument_list|)
return|;
block|}
specifier|public
name|Stat
name|createOrSetWithParents
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
return|return
name|createOrSetWithParents
argument_list|(
name|path
argument_list|,
name|toByteData
argument_list|(
name|data
argument_list|)
argument_list|,
name|createMode
argument_list|)
return|;
block|}
specifier|public
name|Stat
name|createOrSetWithParents
parameter_list|(
name|String
name|path
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|CreateMode
name|createMode
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
if|if
condition|(
name|exists
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|setByteData
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
return|;
block|}
try|try
block|{
name|createWithParents
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|createMode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|// this should not happen very often (race condition)
return|return
name|setByteData
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|fixACLs
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
if|if
condition|(
name|exists
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|doFixACLs
argument_list|(
name|path
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doFixACLs
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|setACL
argument_list|(
name|path
argument_list|,
name|getNodeACLs
argument_list|(
name|path
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
for|for
control|(
name|String
name|child
range|:
name|getChildren
argument_list|(
name|path
argument_list|)
control|)
block|{
name|doFixACLs
argument_list|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|"/"
operator|+
name|child
else|:
name|path
operator|+
literal|"/"
operator|+
name|child
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|ACL
argument_list|>
name|getNodeACLs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|acl
init|=
name|doGetNodeACLs
argument_list|(
name|adjustPath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find matching ACLs for "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|parseACLs
argument_list|(
name|acl
argument_list|)
return|;
block|}
specifier|protected
name|String
name|doGetNodeACLs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|longestPath
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|acl
range|:
name|acls
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|length
argument_list|()
operator|>
name|longestPath
operator|.
name|length
argument_list|()
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|acl
argument_list|)
condition|)
block|{
name|longestPath
operator|=
name|acl
expr_stmt|;
block|}
block|}
return|return
name|acls
operator|.
name|get
argument_list|(
name|longestPath
argument_list|)
return|;
block|}
specifier|private
name|void
name|createParents
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|adjustPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|PathUtils
operator|.
name|removeTrailingSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|getZk
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|path
operator|=
name|PathUtils
operator|.
name|removeTrailingSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|paths
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
try|try
block|{
name|getZk
argument_list|()
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|null
argument_list|,
name|getNodeACLs
argument_list|(
name|p
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|e
parameter_list|)
block|{
comment|// ok we continue...
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"parent already exists "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|byte
index|[]
name|toByteData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|data
operator|.
name|getBytes
argument_list|(
name|CHARSET
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

