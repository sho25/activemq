begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|PropertiesViewFilter
implements|implements
name|QueryFilter
block|{
specifier|protected
name|QueryFilter
name|next
decl_stmt|;
specifier|protected
name|Set
name|viewFilter
decl_stmt|;
comment|/**      * Creates a filter that will select the properties of a map object to view      *       * @param next - the next query filter that will return a collection of maps      */
specifier|public
name|PropertiesViewFilter
parameter_list|(
name|QueryFilter
name|next
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a filter that will select the properties of a map object to view      *       * @param viewFilter - the properties to view      * @param next - the next query filter that will return a collection of maps      */
specifier|public
name|PropertiesViewFilter
parameter_list|(
name|Set
name|viewFilter
parameter_list|,
name|QueryFilter
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|this
operator|.
name|viewFilter
operator|=
name|viewFilter
expr_stmt|;
block|}
comment|/**      * Filter the properties to view of the query result      *       * @param query - the query string      * @return list of objects that has been view filtered      */
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|query
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|filterViewCollection
argument_list|(
name|next
operator|.
name|query
argument_list|(
name|query
argument_list|)
argument_list|,
name|viewFilter
argument_list|)
return|;
block|}
comment|/**      * Filter the properties to view of the query result      *       * @param queries - the query map      * @return list of objects that has been view filtered      * @throws Exception      */
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|query
parameter_list|(
name|List
name|queries
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|filterViewCollection
argument_list|(
name|next
operator|.
name|query
argument_list|(
name|queries
argument_list|)
argument_list|,
name|viewFilter
argument_list|)
return|;
block|}
comment|/**      * Filter the view of each element in the collection      *       * @param result - the lists to filter the view from      * @param viewFilter - the views to select      * @return list of objects whose view has been filtered      */
specifier|protected
name|List
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|filterViewCollection
parameter_list|(
name|Collection
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|result
parameter_list|,
name|Set
name|viewFilter
parameter_list|)
block|{
comment|// Use a list to allow duplicate entries
name|List
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|newCollection
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|i
init|=
name|result
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|newCollection
operator|.
name|add
argument_list|(
name|filterView
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newCollection
return|;
block|}
comment|/**      * Select only the attributes to view from the map data      *       * @param data - data to filter the view from      * @return - data with the view filtered      */
specifier|protected
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|filterView
parameter_list|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|data
parameter_list|)
block|{
comment|// If no view specified, display all attributes
if|if
condition|(
name|viewFilter
operator|==
literal|null
operator|||
name|viewFilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|data
return|;
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|newData
decl_stmt|;
try|try
block|{
comment|// Lets try to use the same class as the original
name|newData
operator|=
operator|new
name|LinkedHashMap
argument_list|(
name|data
operator|.
name|getClass
argument_list|()
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Lets use a default HashMap
name|newData
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Filter the keys to view
for|for
control|(
name|Iterator
name|i
init|=
name|viewFilter
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|data
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|newData
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newData
return|;
block|}
block|}
end_class

end_unit

