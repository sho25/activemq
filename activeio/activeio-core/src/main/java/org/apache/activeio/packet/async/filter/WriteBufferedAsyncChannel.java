begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|FilterAsyncChannel
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|WriteBufferedAsyncChannel
extends|extends
name|FilterAsyncChannel
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|1024
operator|*
literal|64
decl_stmt|;
specifier|private
specifier|final
name|Packet
name|buffer
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|enableDirectWrites
decl_stmt|;
specifier|public
name|WriteBufferedAsyncChannel
parameter_list|(
name|AsyncChannel
name|channel
parameter_list|)
block|{
name|this
argument_list|(
name|channel
argument_list|,
operator|new
name|ByteArrayPacket
argument_list|(
operator|new
name|byte
index|[
name|DEFAULT_BUFFER_SIZE
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WriteBufferedAsyncChannel
parameter_list|(
name|AsyncChannel
name|channel
parameter_list|,
name|Packet
name|buffer
parameter_list|)
block|{
name|this
argument_list|(
name|channel
argument_list|,
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WriteBufferedAsyncChannel
parameter_list|(
name|AsyncChannel
name|channel
parameter_list|,
name|Packet
name|buffer
parameter_list|,
name|boolean
name|enableDirectWrites
parameter_list|)
block|{
name|super
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|enableDirectWrites
operator|=
name|enableDirectWrites
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|packet
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|packet
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|flush
argument_list|()
expr_stmt|;
comment|// Should we just direct write the rest?
if|if
condition|(
name|enableDirectWrites
operator|&&
name|packet
operator|.
name|remaining
argument_list|()
operator|>
name|buffer
operator|.
name|capacity
argument_list|()
condition|)
block|{
name|getNext
argument_list|()
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|getNext
argument_list|()
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

