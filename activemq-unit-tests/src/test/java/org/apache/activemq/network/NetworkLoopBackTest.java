begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkLoopBackTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLoopbackOnDifferentUrlScheme
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|brokerServce
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerServce
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TransportConnector
name|transportConnector
init|=
name|brokerServce
operator|.
name|addConnector
argument_list|(
literal|"nio://0.0.0.0:0"
argument_list|)
decl_stmt|;
comment|// connection filter is bypassed when scheme is different
specifier|final
name|NetworkConnector
name|networkConnector
init|=
name|brokerServce
operator|.
name|addNetworkConnector
argument_list|(
literal|"static:(tcp://"
operator|+
name|transportConnector
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|transportConnector
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|brokerServce
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerServce
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
try|try
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|1
operator|==
name|networkConnector
operator|.
name|bridges
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|DemandForwardingBridgeSupport
name|loopbackBridge
init|=
operator|(
name|DemandForwardingBridgeSupport
operator|)
name|networkConnector
operator|.
name|bridges
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nc started"
argument_list|,
name|networkConnector
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"It should get disposed"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|loopbackBridge
operator|.
name|getRemoteBroker
argument_list|()
operator|.
name|isDisposed
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No peer brokers"
argument_list|,
literal|0
argument_list|,
name|brokerServce
operator|.
name|getBroker
argument_list|()
operator|.
name|getPeerBrokerInfos
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|brokerServce
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

