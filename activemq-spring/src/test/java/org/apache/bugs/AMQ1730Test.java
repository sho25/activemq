begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ1730Test
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQ1730Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JMSX_DELIVERY_COUNT
init|=
literal|"JMSXDeliveryCount"
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|250
decl_stmt|;
specifier|public
name|AMQ1730Test
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRedelivery
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerService
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"?jms.prefetchPolicy.queuePrefetch=100"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"queue.test"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Sending message "
operator|+
name|i
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Message "
operator|+
name|i
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|MESSAGE_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|ValueHolder
argument_list|<
name|Boolean
argument_list|>
name|messageRedelivered
init|=
operator|new
name|ValueHolder
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DefaultMessageListenerContainer
name|messageListenerContainer
init|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
decl_stmt|;
name|messageListenerContainer
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setDestination
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setAutoStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setConcurrentConsumers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setMaxConcurrentConsumers
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setMaxMessagesPerTask
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setReceiveTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setRecoveryInterval
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setAcceptMessagesWhileStopping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setCacheLevel
argument_list|(
name|DefaultMessageListenerContainer
operator|.
name|CACHE_NONE
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setSessionTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|message
operator|instanceof
name|TextMessage
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
try|try
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|String
name|text
init|=
name|textMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|int
name|messageDeliveryCount
init|=
name|message
operator|.
name|getIntProperty
argument_list|(
name|JMSX_DELIVERY_COUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageDeliveryCount
operator|>
literal|1
condition|)
block|{
name|messageRedelivered
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"[Count down latch: "
operator|+
name|countDownLatch
operator|.
name|getCount
argument_list|()
operator|+
literal|"][delivery count: "
operator|+
name|messageDeliveryCount
operator|+
literal|"] - "
operator|+
literal|"Received message with id: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" with text: "
operator|+
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|messageListenerContainer
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|messageListenerContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|messageListenerContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|messageListenerContainer
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no message has redelivery> 1"
argument_list|,
name|messageRedelivered
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|ValueHolder
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|T
name|value
decl_stmt|;
specifier|public
name|ValueHolder
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
name|void
name|set
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
name|T
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

