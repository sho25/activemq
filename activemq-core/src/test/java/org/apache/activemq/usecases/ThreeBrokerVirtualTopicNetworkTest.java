begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ThreeBrokerVirtualTopicNetworkTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThreeBrokerVirtualTopicNetworkTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|1
decl_stmt|;
specifier|public
name|boolean
name|dynamicOnly
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|testNetworkVirtualTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|networkTTL
init|=
literal|6
decl_stmt|;
name|boolean
name|conduitSubs
init|=
literal|true
decl_stmt|;
comment|// Setup broker networks
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerC"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerA"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerC"
argument_list|,
literal|"BrokerB"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
comment|// Setup destination
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|MessageConsumer
name|clientA
init|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.A.TEST.FOO"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.B.TEST.FOO"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientC
init|=
name|createConsumer
argument_list|(
literal|"BrokerC"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.C.TEST.FOO"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Get message count
name|MessageIdList
name|msgsA
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|clientA
argument_list|)
decl_stmt|;
name|MessageIdList
name|msgsB
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|clientB
argument_list|)
decl_stmt|;
name|MessageIdList
name|msgsC
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerC"
argument_list|,
name|clientC
argument_list|)
decl_stmt|;
name|msgsA
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|msgsB
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|msgsC
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// ensure we don't get any more messages
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|msgsA
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|msgsB
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|msgsC
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart to ensure no hanging messages
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting brokerA"
argument_list|)
expr_stmt|;
name|BrokerItem
name|brokerItem
init|=
name|brokers
operator|.
name|remove
argument_list|(
literal|"BrokerA"
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokerItem
operator|!=
literal|null
condition|)
block|{
name|brokerItem
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|BrokerService
name|restartedBroker
init|=
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA?useJmx=false"
argument_list|)
argument_list|)
decl_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerC"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|restartedBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
name|clientA
operator|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.A.TEST.FOO"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"recreated clientA"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|msgsA
operator|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|clientA
argument_list|)
expr_stmt|;
name|msgsA
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|msgsB
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|msgsC
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|11
argument_list|)
expr_stmt|;
comment|// ensure we don't get any more messages
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MessagesA: "
operator|+
name|msgsA
operator|.
name|getMessageIds
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|msgsA
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|msgsB
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|msgsC
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart to ensure no hanging messages
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting brokerA again"
argument_list|)
expr_stmt|;
name|brokerItem
operator|=
name|brokers
operator|.
name|remove
argument_list|(
literal|"BrokerA"
argument_list|)
expr_stmt|;
if|if
condition|(
name|brokerItem
operator|!=
literal|null
condition|)
block|{
name|brokerItem
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|restartedBroker
operator|=
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA?useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerC"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
expr_stmt|;
name|restartedBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
name|clientA
operator|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.A.TEST.FOO"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"recreated clientA again"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|msgsA
operator|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|clientA
argument_list|)
expr_stmt|;
comment|// ensure we don't get any more messages
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Extra MessagesA: "
operator|+
name|msgsA
operator|.
name|getMessageIds
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|msgsA
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|msgsB
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|msgsC
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|bridgeAndConfigureBrokers
parameter_list|(
name|String
name|local
parameter_list|,
name|String
name|remote
parameter_list|,
name|boolean
name|dynamicOnly
parameter_list|,
name|int
name|networkTTL
parameter_list|,
name|boolean
name|conduitSubs
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|bridge
init|=
name|bridgeBrokers
argument_list|(
name|local
argument_list|,
name|remote
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduitSubs
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|options
init|=
operator|new
name|String
argument_list|(
literal|"?useJmx=false&deleteAllMessagesOnStartup=true"
argument_list|)
decl_stmt|;
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/BrokerB"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61618)/BrokerC"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BrokerService
name|createAndConfigureBroker
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBroker
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|configurePersistenceAdapter
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// make all topics virtual and consumers use the default prefix
name|VirtualDestinationInterceptor
name|virtualDestinationInterceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|virtualDestinationInterceptor
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
operator|new
name|VirtualTopic
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|DestinationInterceptor
index|[]
name|destinationInterceptors
init|=
operator|new
name|DestinationInterceptor
index|[]
block|{
name|virtualDestinationInterceptor
block|}
decl_stmt|;
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|protected
name|void
name|configurePersistenceAdapter
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dataFileDir
init|=
operator|new
name|File
argument_list|(
literal|"target/test-amq-data/kahadb/"
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
decl_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|dataFileDir
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

