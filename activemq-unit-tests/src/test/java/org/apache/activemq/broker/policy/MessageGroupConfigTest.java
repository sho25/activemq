begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|CachedMessageGroupMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupHashBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|SimpleMessageGroupMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|MessageGroupConfigTest
extends|extends
name|TestSupport
block|{
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCachedGroupConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGroupConfiguration
argument_list|(
literal|"cached"
argument_list|,
name|CachedMessageGroupMap
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSimpleGroupConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGroupConfiguration
argument_list|(
literal|"simple"
argument_list|,
name|SimpleMessageGroupMap
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBucketGroupConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGroupConfiguration
argument_list|(
literal|"bucket"
argument_list|,
name|MessageGroupHashBucket
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestGroupConfiguration
parameter_list|(
name|String
name|type
parameter_list|,
name|Class
name|classType
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setMessageGroupMapFactoryType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|topic
operator|=
literal|false
expr_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|(
name|ActiveMQDestination
operator|)
name|createDestination
argument_list|(
literal|"org.apache.foo"
argument_list|)
decl_stmt|;
name|Queue
name|brokerDestination
init|=
operator|(
name|Queue
operator|)
name|broker
operator|.
name|getDestination
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|brokerDestination
argument_list|)
expr_stmt|;
name|MessageGroupMap
name|messageGroupMap
init|=
name|brokerDestination
operator|.
name|getMessageGroupOwners
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|messageGroupMap
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|messageGroupMap
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|classType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

