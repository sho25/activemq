begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|AmqpWireFormat
implements|implements
name|WireFormat
block|{
specifier|private
name|int
name|version
init|=
literal|1
decl_stmt|;
specifier|private
name|long
name|maxFrameSize
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|100
decl_stmt|;
specifier|public
name|ByteSequence
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|marshal
argument_list|(
name|command
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteSequence
argument_list|()
return|;
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|ByteSequence
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
return|return
name|unmarshal
argument_list|(
name|dis
argument_list|)
return|;
block|}
specifier|public
name|void
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|Buffer
name|frame
init|=
operator|(
name|Buffer
operator|)
name|command
decl_stmt|;
name|frame
operator|.
name|writeTo
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
name|boolean
name|magicRead
init|=
literal|false
decl_stmt|;
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|magicRead
condition|)
block|{
name|Buffer
name|magic
init|=
operator|new
name|Buffer
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|magic
operator|.
name|readFrom
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|magicRead
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|AmqpHeader
argument_list|(
name|magic
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|maxFrameSize
condition|)
block|{
throw|throw
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Frame size exceeded max frame length."
argument_list|)
throw|;
block|}
name|Buffer
name|frame
init|=
operator|new
name|Buffer
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|frame
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|frame
operator|.
name|readFrom
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|frame
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|frame
return|;
block|}
block|}
comment|/**      */
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**      * @return the version of the wire format      */
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
specifier|public
name|long
name|getMaxFrameSize
parameter_list|()
block|{
return|return
name|maxFrameSize
return|;
block|}
specifier|public
name|void
name|setMaxFrameSize
parameter_list|(
name|long
name|maxFrameSize
parameter_list|)
block|{
name|this
operator|.
name|maxFrameSize
operator|=
name|maxFrameSize
expr_stmt|;
block|}
block|}
end_class

end_unit

