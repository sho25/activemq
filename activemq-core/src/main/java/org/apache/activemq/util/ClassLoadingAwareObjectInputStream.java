begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
specifier|public
class|class
name|ClassLoadingAwareObjectInputStream
extends|extends
name|ObjectInputStream
block|{
specifier|private
specifier|static
specifier|final
name|ClassLoader
name|FALLBACK_CLASS_LOADER
init|=
name|ClassLoadingAwareObjectInputStream
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|/**<p>Maps primitive type names to corresponding class objects.</p> */
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|primClasses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|(
literal|8
argument_list|,
literal|1.0F
argument_list|)
decl_stmt|;
specifier|public
name|ClassLoadingAwareObjectInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Class
name|resolveClass
parameter_list|(
name|ObjectStreamClass
name|classDesc
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
return|return
name|load
argument_list|(
name|classDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|cl
argument_list|)
return|;
block|}
specifier|protected
name|Class
name|resolveProxyClass
parameter_list|(
name|String
index|[]
name|interfaces
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Class
index|[]
name|cinterfaces
init|=
operator|new
name|Class
index|[
name|interfaces
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cinterfaces
index|[
name|i
index|]
operator|=
name|load
argument_list|(
name|interfaces
index|[
name|i
index|]
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|Proxy
operator|.
name|getProxyClass
argument_list|(
name|cinterfaces
index|[
literal|0
index|]
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|cinterfaces
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Class
name|load
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|cl
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|,
name|cl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
specifier|final
name|Class
name|clazz
init|=
operator|(
name|Class
operator|)
name|primClasses
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
return|return
name|clazz
return|;
block|}
else|else
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|,
name|FALLBACK_CLASS_LOADER
argument_list|)
return|;
block|}
block|}
block|}
static|static
block|{
name|primClasses
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
name|char
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|short
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|primClasses
operator|.
name|put
argument_list|(
literal|"void"
argument_list|,
name|void
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

