begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|WildcardTransformFilter
extends|extends
name|AbstractQueryFilter
block|{
comment|/**      * Creates a wildcard transform filter that is able to convert a wildcard expression (determined by isWildcardQuery)      * to a another query type (use transformWildcardQuery).      * @param next - the next query filter      */
specifier|protected
name|WildcardTransformFilter
parameter_list|(
name|QueryFilter
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the query list to set of different queries      * @param queries - query list to transform      * @return - result of the query      * @throws Exception      */
specifier|public
name|List
name|query
parameter_list|(
name|List
name|queries
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|newQueries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|queries
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|queryToken
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Transform the wildcard query
if|if
condition|(
name|isWildcardQuery
argument_list|(
name|queryToken
argument_list|)
condition|)
block|{
comment|// Transform the value part only
name|newQueries
operator|.
name|add
argument_list|(
name|transformWildcardQuery
argument_list|(
name|queryToken
argument_list|)
argument_list|)
expr_stmt|;
comment|// Maintain the query as is
block|}
else|else
block|{
name|newQueries
operator|.
name|add
argument_list|(
name|queryToken
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|next
operator|.
name|query
argument_list|(
name|newQueries
argument_list|)
return|;
block|}
comment|/**      * Use to determine is a query string is a wildcard query      * @param query - query string      * @return true, if the query string is a wildcard query, false otherwise      */
specifier|protected
specifier|abstract
name|boolean
name|isWildcardQuery
parameter_list|(
name|String
name|query
parameter_list|)
function_decl|;
comment|/**      * Use to transform a wildcard query string to another query format      * @param query - query string to transform      * @return transformed query      */
specifier|protected
specifier|abstract
name|String
name|transformWildcardQuery
parameter_list|(
name|String
name|query
parameter_list|)
function_decl|;
block|}
end_class

end_unit

