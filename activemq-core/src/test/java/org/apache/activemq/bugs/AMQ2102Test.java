begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2102Test
extends|extends
name|CombinationTestSupport
implements|implements
name|UncaughtExceptionHandler
block|{
specifier|final
specifier|static
name|int
name|MESSAGE_COUNT
init|=
literal|12120
decl_stmt|;
specifier|final
specifier|static
name|int
name|NUM_CONSUMERS
init|=
literal|10
decl_stmt|;
specifier|final
specifier|static
name|int
name|CONSUME_ALL
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQ2102Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|Thread
argument_list|,
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Thread
argument_list|,
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
class|class
name|Consumer
implements|implements
name|Runnable
implements|,
name|ExceptionListener
block|{
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|queueName
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|private
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|IntHolder
name|startup
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
specifier|final
name|int
name|numToProcessPerIteration
decl_stmt|;
name|Consumer
parameter_list|(
name|ActiveMQConnectionFactory
name|connectionFactory
parameter_list|,
name|String
name|queueName
parameter_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|IntHolder
name|startup
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|numToProcess
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|startup
operator|=
name|startup
expr_stmt|;
name|name
operator|=
literal|"Consumer-"
operator|+
name|queueName
operator|+
literal|"-"
operator|+
name|id
expr_stmt|;
name|numToProcessPerIteration
operator|=
name|numToProcess
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getClientId
parameter_list|()
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|name
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|"localhost:"
operator|+
name|name
return|;
block|}
block|}
specifier|synchronized
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|thread
operator|.
name|join
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Interrupted waiting for "
operator|+
name|name
operator|+
literal|" to stop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
argument_list|(
literal|"JMS exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processMessage
parameter_list|(
name|Session
name|session
parameter_list|,
name|MessageProducer
name|producer
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|Destination
name|replyQueue
init|=
name|textMessage
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyQueue
operator|!=
literal|null
condition|)
block|{
name|TextMessage
name|reply
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"reply-"
operator|+
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|reply
operator|.
name|setJMSCorrelationID
argument_list|(
name|textMessage
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|replyQueue
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"replied via "
operator|+
name|replyQueue
operator|+
literal|" for message => "
operator|+
name|textMessage
operator|.
name|getText
argument_list|()
operator|+
literal|", "
operator|+
name|textMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"no reply to message => "
operator|+
name|textMessage
operator|.
name|getText
argument_list|()
operator|+
literal|", "
operator|+
name|textMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|error
argument_list|(
literal|"Consumer cannot process "
operator|+
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processMessages
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseCollisionAvoidance
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setCollisionAvoidancePercent
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setBackOffMultiplier
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|processMessages
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processMessages
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|JMSException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
if|if
condition|(
name|numToProcessPerIteration
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|processMessages
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|processMessages
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processMessages
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|processMessages
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processMessages
parameter_list|(
name|Session
name|session
parameter_list|,
name|MessageConsumer
name|consumer
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|processMessages
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|producer
operator|!=
literal|null
condition|)
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processMessages
parameter_list|(
name|Session
name|session
parameter_list|,
name|MessageConsumer
name|consumer
parameter_list|,
name|MessageProducer
name|producer
parameter_list|)
throws|throws
name|JMSException
block|{
name|debug
argument_list|(
literal|"waiting for messages..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|startup
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|startup
init|)
block|{
name|startup
operator|.
name|value
operator|--
expr_stmt|;
name|startup
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
name|startup
operator|=
literal|null
expr_stmt|;
block|}
name|int
name|numToProcess
init|=
name|numToProcessPerIteration
decl_stmt|;
do|do
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|processMessage
argument_list|(
name|session
argument_list|,
name|producer
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|numToProcess
operator|--
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
argument_list|(
literal|"message="
operator|+
name|message
operator|+
literal|" failure"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|info
argument_list|(
literal|"got null message on: "
operator|+
name|numToProcess
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|numToProcessPerIteration
operator|==
name|CONSUME_ALL
operator|||
name|numToProcess
operator|>
literal|0
operator|)
operator|&&
name|isRunning
argument_list|()
condition|)
do|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setRunning
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
name|processMessages
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|error
argument_list|(
literal|"Unexpected consumer problem: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|synchronized
name|void
name|setRunning
parameter_list|(
name|boolean
name|running
parameter_list|)
block|{
name|this
operator|.
name|running
operator|=
name|running
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|Producer
implements|implements
name|ExceptionListener
block|{
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|String
name|queueName
decl_stmt|;
name|Producer
parameter_list|(
name|ActiveMQConnectionFactory
name|connectionFactory
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
name|void
name|execute
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|sendMessages
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Producer failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendMessages
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|sendMessages
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Problem closing connection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|sendMessages
parameter_list|(
name|ActiveMQConnection
name|connection
parameter_list|)
throws|throws
name|JMSException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|sendMessages
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|TemporaryQueue
name|replyQueue
init|=
literal|null
decl_stmt|;
try|try
block|{
name|replyQueue
operator|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|sendMessages
argument_list|(
name|session
argument_list|,
name|replyQueue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|replyQueue
operator|!=
literal|null
condition|)
block|{
name|replyQueue
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|sendMessages
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|replyQueue
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|replyQueue
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
name|session
argument_list|,
name|replyQueue
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendMessages
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|replyQueue
parameter_list|,
name|int
name|messageCount
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setPriority
argument_list|(
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"message#"
operator|+
name|i
argument_list|)
decl_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|replyQueue
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|producer
operator|!=
literal|null
condition|)
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|sendMessages
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
name|Destination
name|replyQueue
parameter_list|,
name|MessageConsumer
name|consumer
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|IntHolder
name|messageCount
init|=
operator|new
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|IntHolder
argument_list|(
name|MESSAGE_COUNT
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|reply
parameter_list|)
block|{
if|if
condition|(
name|reply
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textReply
init|=
operator|(
name|TextMessage
operator|)
name|reply
decl_stmt|;
synchronized|synchronized
init|(
name|messageCount
init|)
block|{
try|try
block|{
name|debug
argument_list|(
literal|"receive reply#"
operator|+
name|messageCount
operator|.
name|value
operator|+
literal|" "
operator|+
name|textReply
operator|.
name|getText
argument_list|()
operator|+
literal|", "
operator|+
name|textReply
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Problem processing reply"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|messageCount
operator|.
name|value
operator|--
expr_stmt|;
if|if
condition|(
name|messageCount
operator|.
name|value
operator|%
literal|200
operator|==
literal|0
condition|)
block|{
comment|// ack a bunch of replys
name|info
argument_list|(
literal|"acking via session commit: messageCount="
operator|+
name|messageCount
operator|.
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failed to commit with count: "
operator|+
name|messageCount
operator|.
name|value
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|messageCount
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|error
argument_list|(
literal|"Producer cannot process "
operator|+
name|reply
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
name|session
argument_list|,
name|replyQueue
argument_list|,
name|messageCount
operator|.
name|value
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|messageCount
init|)
block|{
while|while
condition|(
name|messageCount
operator|.
name|value
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|messageCount
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Interrupted waiting for replies"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// outstanding replys
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"All replies received..."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
name|message
operator|+
literal|": "
operator|+
operator|(
name|t
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|?
name|t
operator|.
name|getMessage
argument_list|()
else|:
name|t
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
name|createConsumers
parameter_list|(
name|ActiveMQConnectionFactory
name|connectionFactory
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|numToProcessPerConsumer
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
name|consumers
init|=
operator|new
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|IntHolder
name|startup
init|=
operator|new
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|IntHolder
argument_list|(
name|max
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|max
condition|;
name|id
operator|++
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
operator|new
name|Consumer
argument_list|(
name|connectionFactory
argument_list|,
name|queueName
argument_list|,
name|startup
argument_list|,
name|id
argument_list|,
name|numToProcessPerConsumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Consumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|startup
init|)
block|{
while|while
condition|(
name|startup
operator|.
name|value
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|startup
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Interrupted waiting for consumers to start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|consumers
return|;
block|}
specifier|final
name|BrokerService
name|master
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|BrokerService
name|slave
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|String
name|masterUrl
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setMaxTestTime
argument_list|(
literal|12
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|master
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|master
operator|.
name|setBrokerName
argument_list|(
literal|"Master"
argument_list|)
expr_stmt|;
name|master
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|master
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|master
operator|.
name|setWaitForSlave
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|masterUrl
operator|=
name|master
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"masterUrl: "
operator|+
name|masterUrl
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setBrokerName
argument_list|(
literal|"Slave"
argument_list|)
expr_stmt|;
name|slave
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|slave
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setMasterConnectorURI
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
name|slave
operator|.
name|start
argument_list|()
expr_stmt|;
name|slave
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"master started"
argument_list|,
name|master
operator|.
name|waitUntilStarted
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slave
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMasterSlaveBug
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|masterUrl
operator|+
literal|")?randomize=false"
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
literal|"MasterSlaveBug"
decl_stmt|;
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
name|consumers
init|=
name|createConsumers
argument_list|(
name|connectionFactory
argument_list|,
name|queueName
argument_list|,
name|NUM_CONSUMERS
argument_list|,
name|CONSUME_ALL
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|connectionFactory
argument_list|,
name|queueName
argument_list|)
decl_stmt|;
name|producer
operator|.
name|execute
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
for|for
control|(
name|Consumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|setRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Consumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMasterSlaveBugWithStopStartConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|masterUrl
operator|+
literal|")?randomize=false"
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
literal|"MasterSlaveBug"
decl_stmt|;
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
name|consumers
init|=
name|createConsumers
argument_list|(
name|connectionFactory
argument_list|,
name|queueName
argument_list|,
name|NUM_CONSUMERS
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|connectionFactory
argument_list|,
name|queueName
argument_list|)
decl_stmt|;
name|producer
operator|.
name|execute
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
for|for
control|(
name|Consumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|setRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Consumer
name|consumer
range|:
name|consumers
control|)
block|{
name|consumer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|""
operator|+
name|t
operator|+
name|e
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

