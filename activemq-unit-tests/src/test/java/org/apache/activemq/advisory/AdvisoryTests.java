begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|ConstantPendingMessageLimitStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Test for advisory messages sent under the right circumstances.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AdvisoryTests
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|2000
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|String
name|bindAddress
init|=
name|ActiveMQConnectionFactory
operator|.
name|DEFAULT_BROKER_BIND_URL
decl_stmt|;
specifier|protected
name|int
name|topicCount
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|includeBodyForAdvisory
decl_stmt|;
specifier|protected
specifier|final
name|int
name|EXPIRE_MESSAGE_PERIOD
init|=
literal|10000
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// Include the full body of the message
block|{
literal|true
block|}
block|,
comment|// Don't include the full body of the message
block|{
literal|false
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|AdvisoryTests
parameter_list|(
name|boolean
name|includeBodyForAdvisory
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|includeBodyForAdvisory
operator|=
name|includeBodyForAdvisory
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNoSlowConsumerAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|s
operator|.
name|createQueue
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
name|Topic
name|advisoryTopic
init|=
name|AdvisorySupport
operator|.
name|getSlowConsumerAdvisoryTopic
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|queue
argument_list|)
decl_stmt|;
name|s
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|advisoryTopic
argument_list|)
decl_stmt|;
comment|// start throwing messages at the consumer
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|m
init|=
name|s
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|Message
name|msg
init|=
name|advisoryConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSlowConsumerAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|s
operator|.
name|createQueue
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|Topic
name|advisoryTopic
init|=
name|AdvisorySupport
operator|.
name|getSlowConsumerAdvisoryTopic
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|queue
argument_list|)
decl_stmt|;
name|s
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|advisoryTopic
argument_list|)
decl_stmt|;
comment|// start throwing messages at the consumer
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|m
init|=
name|s
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|Message
name|msg
init|=
name|advisoryConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMessageDeliveryAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|s
operator|.
name|createQueue
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|Topic
name|advisoryTopic
init|=
name|AdvisorySupport
operator|.
name|getMessageDeliveredAdvisoryTopic
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|advisoryTopic
argument_list|)
decl_stmt|;
comment|// start throwing messages at the consumer
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|BytesMessage
name|m
init|=
name|s
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|advisoryConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|msg
decl_stmt|;
name|ActiveMQMessage
name|payload
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
comment|//This should always be tcp:// because that is the transport that is used to connect even though
comment|//the nio transport is the first one in the list
name|assertTrue
argument_list|(
operator|(
operator|(
name|String
operator|)
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_URL
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"tcp://"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_DESTINATION
argument_list|)
argument_list|,
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|queue
operator|)
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add assertion to make sure body is included for advisory topics
comment|//when includeBodyForAdvisory is true
name|assertIncludeBodyForAdvisory
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMessageConsumedAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|s
operator|.
name|createQueue
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|Topic
name|advisoryTopic
init|=
name|AdvisorySupport
operator|.
name|getMessageConsumedAdvisoryTopic
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|advisoryTopic
argument_list|)
decl_stmt|;
comment|// start throwing messages at the consumer
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|BytesMessage
name|m
init|=
name|s
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|m
operator|.
name|getJMSMessageID
argument_list|()
decl_stmt|;
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|msg
operator|=
name|advisoryConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|msg
decl_stmt|;
name|ActiveMQMessage
name|payload
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
name|String
name|originalId
init|=
name|payload
operator|.
name|getJMSMessageID
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|originalId
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|//This should always be tcp:// because that is the transport that is used to connect even though
comment|//the nio transport is the first one in the list
name|assertTrue
argument_list|(
operator|(
operator|(
name|String
operator|)
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_URL
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"tcp://"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_DESTINATION
argument_list|)
argument_list|,
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|queue
operator|)
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add assertion to make sure body is included for advisory topics
comment|//when includeBodyForAdvisory is true
name|assertIncludeBodyForAdvisory
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMessageExpiredAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|s
operator|.
name|createQueue
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|Topic
name|advisoryTopic
init|=
name|AdvisorySupport
operator|.
name|getExpiredMessageTopic
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|advisoryTopic
argument_list|)
decl_stmt|;
comment|// start throwing messages at the consumer
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|m
init|=
name|s
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|Message
name|msg
init|=
name|advisoryConsumer
operator|.
name|receive
argument_list|(
name|EXPIRE_MESSAGE_PERIOD
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|msg
decl_stmt|;
name|ActiveMQMessage
name|payload
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
comment|//This should be set
name|assertNotNull
argument_list|(
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_URL
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add assertion to make sure body is included for advisory topics
comment|//when includeBodyForAdvisory is true
name|assertIncludeBodyForAdvisory
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMessageDLQd
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQPrefetchPolicy
name|policy
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setTopicPrefetch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|setPrefetchPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|s
operator|.
name|createTopic
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Topic
name|advisoryTopic
init|=
name|s
operator|.
name|createTopic
argument_list|(
literal|">"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|createConsumer
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
block|}
name|MessageConsumer
name|advisoryConsumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getMessageDLQdAdvisoryTopic
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|topic
argument_list|)
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|m
init|=
name|s
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|Message
name|msg
init|=
name|advisoryConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|msg
decl_stmt|;
name|ActiveMQMessage
name|payload
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
comment|//This should be set
name|assertNotNull
argument_list|(
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_URL
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add assertion to make sure body is included for DLQ advisory topics
comment|//when includeBodyForAdvisory is true
name|assertIncludeBodyForAdvisory
argument_list|(
name|payload
argument_list|)
expr_stmt|;
comment|// we should get here without StackOverflow
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMessageDiscardedAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|s
operator|.
name|createTopic
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|Topic
name|advisoryTopic
init|=
name|AdvisorySupport
operator|.
name|getMessageDiscardedAdvisoryTopic
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|topic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|advisoryTopic
argument_list|)
decl_stmt|;
comment|// start throwing messages at the consumer
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
operator|.
name|getTopicPrefetch
argument_list|()
operator|*
literal|2
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|m
init|=
name|s
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|Message
name|msg
init|=
name|advisoryConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|msg
decl_stmt|;
name|ActiveMQMessage
name|payload
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
comment|//This should be set
name|assertNotNull
argument_list|(
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_URL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_DESTINATION
argument_list|)
argument_list|,
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|topic
operator|)
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add assertion to make sure body is included for advisory topics
comment|//when includeBodyForAdvisory is true
name|assertIncludeBodyForAdvisory
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|ActiveMQConnection
operator|.
name|DEFAULT_BROKER_URL
argument_list|)
decl_stmt|;
return|return
name|cf
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|configureBroker
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|answer
parameter_list|)
throws|throws
name|Exception
block|{
name|answer
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setExpireMessagesPeriod
argument_list|(
name|EXPIRE_MESSAGE_PERIOD
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForFastProducers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForConsumed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDiscardingMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForSlowConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryWhenFull
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setIncludeBodyForAdvisory
argument_list|(
name|includeBodyForAdvisory
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConstantPendingMessageLimitStrategy
name|strategy
init|=
operator|new
name|ConstantPendingMessageLimitStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPendingMessageLimitStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|PolicyMap
name|pMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|pMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDestinationPolicy
argument_list|(
name|pMap
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
literal|"nio://localhost:0"
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertIncludeBodyForAdvisory
parameter_list|(
name|ActiveMQMessage
name|payload
parameter_list|)
block|{
if|if
condition|(
name|includeBodyForAdvisory
condition|)
block|{
name|assertNotNull
argument_list|(
name|payload
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|payload
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

