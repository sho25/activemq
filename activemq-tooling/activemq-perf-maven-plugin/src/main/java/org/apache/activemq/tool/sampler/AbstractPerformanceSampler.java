begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|sampler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|ClientRunBasis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
operator|.
name|AbstractObjectProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|reports
operator|.
name|PerformanceReportWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|Validate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractPerformanceSampler
extends|extends
name|AbstractObjectProperties
implements|implements
name|PerformanceSampler
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|rampUpPercent
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|rampDownPercent
init|=
literal|0
decl_stmt|;
comment|// the following are all optionally set; they are otherwise worked out at run time
specifier|protected
name|Long
name|rampUpTime
decl_stmt|;
specifier|protected
name|Long
name|rampDownTime
decl_stmt|;
specifier|protected
name|Long
name|duration
decl_stmt|;
specifier|protected
name|long
name|interval
init|=
literal|1000
decl_stmt|;
comment|// 1 sec
specifier|protected
name|PerformanceReportWriter
name|perfReportWriter
decl_stmt|;
specifier|protected
name|PerformanceEventListener
name|perfEventListener
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|isRunning
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|CountDownLatch
name|completionLatch
decl_stmt|;
specifier|protected
name|long
name|sampleIndex
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Long
name|getRampUpTime
parameter_list|()
block|{
return|return
name|rampUpTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRampUpTime
parameter_list|(
name|long
name|rampUpTime
parameter_list|)
block|{
name|this
operator|.
name|rampUpTime
operator|=
name|rampUpTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getRampDownTime
parameter_list|()
block|{
return|return
name|rampDownTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRampDownTime
parameter_list|(
name|long
name|rampDownTime
parameter_list|)
block|{
name|this
operator|.
name|rampDownTime
operator|=
name|rampDownTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getDuration
parameter_list|()
block|{
return|return
name|duration
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDuration
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getInterval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInterval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRampUpPercent
parameter_list|()
block|{
return|return
name|rampUpPercent
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRampUpPercent
parameter_list|(
name|long
name|rampUpPercent
parameter_list|)
block|{
name|Validate
operator|.
name|isTrue
argument_list|(
operator|(
name|rampUpPercent
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|rampUpPercent
operator|<=
literal|100
operator|)
argument_list|,
literal|"rampUpPercent must be a value between 0 and 100"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rampUpPercent
operator|=
name|rampUpPercent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRampDownPercent
parameter_list|()
block|{
return|return
name|rampDownPercent
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRampDownPercent
parameter_list|(
name|long
name|rampDownPercent
parameter_list|)
block|{
name|Validate
operator|.
name|isTrue
argument_list|(
operator|(
name|rampDownPercent
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|rampDownPercent
operator|<
literal|100
operator|)
argument_list|,
literal|"rampDownPercent must be a value between 0 and 99"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rampDownPercent
operator|=
name|rampDownPercent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PerformanceReportWriter
name|getPerfReportWriter
parameter_list|()
block|{
return|return
name|perfReportWriter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPerfReportWriter
parameter_list|(
name|PerformanceReportWriter
name|perfReportWriter
parameter_list|)
block|{
name|this
operator|.
name|perfReportWriter
operator|=
name|perfReportWriter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PerformanceEventListener
name|getPerfEventListener
parameter_list|()
block|{
return|return
name|perfEventListener
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPerfEventListener
parameter_list|(
name|PerformanceEventListener
name|perfEventListener
parameter_list|)
block|{
name|this
operator|.
name|perfEventListener
operator|=
name|perfEventListener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startSampler
parameter_list|(
name|CountDownLatch
name|completionLatch
parameter_list|,
name|ClientRunBasis
name|clientRunBasis
parameter_list|,
name|long
name|clientRunDuration
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|clientRunBasis
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|completionLatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientRunBasis
operator|==
name|ClientRunBasis
operator|.
name|time
condition|)
block|{
comment|// override the default durations
comment|// if the user has overridden a duration, then use that
name|duration
operator|=
operator|(
name|duration
operator|==
literal|null
operator|)
condition|?
name|clientRunDuration
else|:
name|this
operator|.
name|duration
expr_stmt|;
name|rampUpTime
operator|=
operator|(
name|rampUpTime
operator|==
literal|null
operator|)
condition|?
operator|(
name|duration
operator|/
literal|100
operator|*
name|rampUpPercent
operator|)
else|:
name|this
operator|.
name|rampUpTime
expr_stmt|;
name|rampDownTime
operator|=
operator|(
name|rampDownTime
operator|==
literal|null
operator|)
condition|?
operator|(
name|duration
operator|/
literal|100
operator|*
name|rampDownPercent
operator|)
else|:
name|this
operator|.
name|rampDownTime
expr_stmt|;
name|Validate
operator|.
name|isTrue
argument_list|(
name|duration
operator|>=
operator|(
name|rampUpTime
operator|+
name|rampDownTime
operator|)
argument_list|,
literal|"Ramp times (up: "
operator|+
name|rampDownTime
operator|+
literal|", down: "
operator|+
name|rampDownTime
operator|+
literal|") exceed the sampler duration ("
operator|+
name|duration
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sampling duration: {} ms, ramp up: {} ms, ramp down: {} ms"
argument_list|,
name|duration
argument_list|,
name|rampUpTime
argument_list|,
name|rampDownTime
argument_list|)
expr_stmt|;
comment|// spawn notifier thread to stop the sampler, taking ramp-down time into account
name|Thread
name|notifier
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RampDownNotifier
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|setName
argument_list|(
literal|"RampDownNotifier["
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Performance test running on count basis; ignoring duration and ramp times"
argument_list|)
expr_stmt|;
name|setRampUpTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setRampDownTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|completionLatch
operator|=
name|completionLatch
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|isRunning
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finishSampling
parameter_list|()
block|{
name|isRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Ramp up start"
argument_list|)
expr_stmt|;
name|onRampUpStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onRampUpStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rampUpTime
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|rampUpTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Sampler start"
argument_list|)
expr_stmt|;
name|onSamplerStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onSamplerStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|sample
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sampler end"
argument_list|)
expr_stmt|;
name|onSamplerEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onSamplerEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rampDownTime
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|rampDownTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Ramp down end"
argument_list|)
expr_stmt|;
name|onRampDownEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onRampDownEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|completionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|sample
parameter_list|()
block|{
while|while
condition|(
name|isRunning
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|sampleData
argument_list|()
expr_stmt|;
name|sampleIndex
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|void
name|sampleData
parameter_list|()
function_decl|;
comment|// Call back functions to customize behavior of thread.
specifier|protected
name|void
name|onRampUpStart
parameter_list|()
block|{     }
specifier|protected
name|void
name|onSamplerStart
parameter_list|()
block|{     }
specifier|protected
name|void
name|onSamplerEnd
parameter_list|()
block|{     }
specifier|protected
name|void
name|onRampDownEnd
parameter_list|()
block|{     }
block|}
end_class

end_unit

