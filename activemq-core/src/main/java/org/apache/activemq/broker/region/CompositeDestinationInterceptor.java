begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_comment
comment|/**  * Represents a Composite Pattern of a {@link DestinationInterceptor}  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|CompositeDestinationInterceptor
implements|implements
name|DestinationInterceptor
block|{
specifier|private
specifier|final
name|DestinationInterceptor
index|[]
name|interceptors
decl_stmt|;
specifier|public
name|CompositeDestinationInterceptor
parameter_list|(
specifier|final
name|DestinationInterceptor
index|[]
name|interceptors
parameter_list|)
block|{
name|this
operator|.
name|interceptors
operator|=
name|interceptors
expr_stmt|;
block|}
specifier|public
name|Destination
name|intercept
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interceptors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|destination
operator|=
name|interceptors
index|[
name|i
index|]
operator|.
name|intercept
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
return|return
name|destination
return|;
block|}
block|}
end_class

end_unit

