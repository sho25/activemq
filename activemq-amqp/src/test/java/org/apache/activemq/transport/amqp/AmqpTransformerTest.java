begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpTransformerTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpTransformerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AMQP_URL
init|=
literal|"amqp://0.0.0.0:0%s"
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|URI
name|amqpConnectionURI
decl_stmt|;
specifier|private
name|URI
name|openwireConnectionURI
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_QUEUE
init|=
literal|"txqueue"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testNativeTransformation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default is native
name|startBrokerWithAmqpTransport
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AMQP_URL
argument_list|,
literal|"?transport.transformer=native"
argument_list|)
argument_list|)
expr_stmt|;
comment|// send "text message" with AMQP JMS API
name|Connection
name|amqpConnection
init|=
name|JMSClientContext
operator|.
name|INSTANCE
operator|.
name|createConnection
argument_list|(
name|amqpConnectionURI
argument_list|)
decl_stmt|;
name|amqpConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|amqpSession
init|=
name|amqpConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|amqpSession
operator|.
name|createQueue
argument_list|(
name|TEST_QUEUE
argument_list|)
decl_stmt|;
name|MessageProducer
name|p
init|=
name|amqpSession
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPriority
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|TextMessage
name|amqpMessage
init|=
name|amqpSession
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|amqpMessage
operator|.
name|setText
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p
operator|.
name|send
argument_list|(
name|amqpMessage
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
name|amqpSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|amqpConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// receive with openwire JMS
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|openwireConnectionURI
argument_list|)
decl_stmt|;
name|Connection
name|openwireConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|openwireConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|openwireConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|jmsDest
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|TEST_QUEUE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|c
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|jmsDest
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|c
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|message
operator|instanceof
name|BytesMessage
argument_list|)
expr_stmt|;
name|Boolean
name|nativeTransformationUsed
init|=
name|message
operator|.
name|getBooleanProperty
argument_list|(
literal|"JMS_AMQP_NATIVE"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't use the correct transformation, expected NATIVE"
argument_list|,
name|nativeTransformationUsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|openwireConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testRawTransformation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default is native
name|startBrokerWithAmqpTransport
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AMQP_URL
argument_list|,
literal|"?transport.transformer=raw"
argument_list|)
argument_list|)
expr_stmt|;
comment|// send "text message" with AMQP JMS API
name|Connection
name|amqpConnection
init|=
name|JMSClientContext
operator|.
name|INSTANCE
operator|.
name|createConnection
argument_list|(
name|amqpConnectionURI
argument_list|)
decl_stmt|;
name|amqpConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|amqpSession
init|=
name|amqpConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|amqpSession
operator|.
name|createQueue
argument_list|(
name|TEST_QUEUE
argument_list|)
decl_stmt|;
name|MessageProducer
name|p
init|=
name|amqpSession
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPriority
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|TextMessage
name|amqpMessage
init|=
name|amqpSession
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|amqpMessage
operator|.
name|setText
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p
operator|.
name|send
argument_list|(
name|amqpMessage
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
name|amqpSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|amqpConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// receive with openwire JMS
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|openwireConnectionURI
argument_list|)
decl_stmt|;
name|Connection
name|openwireConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|openwireConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|openwireConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|jmsDest
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|TEST_QUEUE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|c
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|jmsDest
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|c
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have received a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recieved message: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|instanceof
name|BytesMessage
argument_list|)
expr_stmt|;
name|Boolean
name|nativeTransformationUsed
init|=
name|message
operator|.
name|getBooleanProperty
argument_list|(
literal|"JMS_AMQP_NATIVE"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't use the correct transformation, expected NATIVE"
argument_list|,
name|nativeTransformationUsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// should not equal 7 (should equal the default) because "raw" does not map headers
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|openwireConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testJmsTransformation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default is native
name|startBrokerWithAmqpTransport
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AMQP_URL
argument_list|,
literal|"?transport.transformer=jms"
argument_list|)
argument_list|)
expr_stmt|;
comment|// send "text message" with AMQP JMS API
name|Connection
name|amqpConnection
init|=
name|JMSClientContext
operator|.
name|INSTANCE
operator|.
name|createConnection
argument_list|(
name|amqpConnectionURI
argument_list|)
decl_stmt|;
name|amqpConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|amqpSession
init|=
name|amqpConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|amqpSession
operator|.
name|createQueue
argument_list|(
name|TEST_QUEUE
argument_list|)
decl_stmt|;
name|MessageProducer
name|p
init|=
name|amqpSession
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|TextMessage
name|amqpMessage
init|=
name|amqpSession
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|amqpMessage
operator|.
name|setText
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|p
operator|.
name|send
argument_list|(
name|amqpMessage
argument_list|)
expr_stmt|;
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
name|amqpSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|amqpConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// receive with openwire JMS
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|openwireConnectionURI
argument_list|)
decl_stmt|;
name|Connection
name|openwireConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|openwireConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|openwireConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|jmsDest
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|TEST_QUEUE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|c
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|jmsDest
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|c
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|message
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
name|Boolean
name|nativeTransformationUsed
init|=
name|message
operator|.
name|getBooleanProperty
argument_list|(
literal|"JMS_AMQP_NATIVE"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Didn't use the correct transformation, expected NOT to be NATIVE"
argument_list|,
name|nativeTransformationUsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|openwireConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSendAMQPMessageWithComplexAnnotationsReceiveCore
parameter_list|()
throws|throws
name|Exception
block|{
name|startBrokerWithAmqpTransport
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AMQP_URL
argument_list|,
literal|"?transport.transformer=jms"
argument_list|)
argument_list|)
expr_stmt|;
name|URI
name|remoteURI
init|=
operator|new
name|URI
argument_list|(
literal|"tcp://"
operator|+
name|amqpConnectionURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|amqpConnectionURI
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpClient
name|client
init|=
operator|new
name|AmqpClient
argument_list|(
name|remoteURI
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|client
operator|.
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|String
name|annotation
init|=
literal|"x-opt-embedded-map"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|embeddedMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|embeddedMap
operator|.
name|put
argument_list|(
literal|"test-key-1"
argument_list|,
literal|"value-1"
argument_list|)
expr_stmt|;
name|embeddedMap
operator|.
name|put
argument_list|(
literal|"test-key-2"
argument_list|,
literal|"value-2"
argument_list|)
expr_stmt|;
name|embeddedMap
operator|.
name|put
argument_list|(
literal|"test-key-3"
argument_list|,
literal|"value-3"
argument_list|)
expr_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
name|TEST_QUEUE
argument_list|)
decl_stmt|;
name|AmqpMessage
name|message
init|=
name|createAmqpMessage
argument_list|(
operator|(
name|byte
operator|)
literal|'A'
argument_list|,
literal|65535
argument_list|)
decl_stmt|;
name|message
operator|.
name|setApplicationProperty
argument_list|(
literal|"IntProperty"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDurable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
name|annotation
argument_list|,
name|embeddedMap
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|openwireConnectionURI
argument_list|)
decl_stmt|;
name|Connection
name|connection2
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|session2
init|=
name|connection2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|start
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session2
operator|.
name|createConsumer
argument_list|(
name|session2
operator|.
name|createQueue
argument_list|(
name|TEST_QUEUE
argument_list|)
argument_list|)
decl_stmt|;
name|Message
name|received
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|received
operator|.
name|getIntProperty
argument_list|(
literal|"IntProperty"
argument_list|)
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startBrokerWithAmqpTransport
parameter_list|(
name|String
name|amqpUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
name|amqpUrl
argument_list|)
decl_stmt|;
name|amqpConnectionURI
operator|=
name|connector
operator|.
name|getPublishableConnectURI
argument_list|()
expr_stmt|;
name|connector
operator|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
name|openwireConnectionURI
operator|=
name|connector
operator|.
name|getPublishableConnectURI
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|AmqpMessage
name|createAmqpMessage
parameter_list|(
name|byte
name|value
parameter_list|,
name|int
name|payloadSize
parameter_list|)
block|{
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
name|payloadSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
name|message
operator|.
name|setBytes
argument_list|(
name|payload
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

