begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_class
specifier|public
class|class
name|MessageBodyFormatter
block|{
specifier|final
name|ActiveMQMessage
name|message
decl_stmt|;
specifier|public
name|MessageBodyFormatter
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
switch|switch
condition|(
name|message
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQMessage
operator|.
name|DATA_STRUCTURE_TYPE
case|:
return|return
literal|""
return|;
case|case
name|ActiveMQBlobMessage
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|ActiveMQBlobMessage
name|blob
init|=
operator|(
name|ActiveMQBlobMessage
operator|)
name|message
decl_stmt|;
return|return
name|blob
operator|.
name|getRemoteBlobUrl
argument_list|()
return|;
case|case
name|ActiveMQMapMessage
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|ActiveMQMapMessage
name|map
init|=
operator|(
name|ActiveMQMapMessage
operator|)
name|message
decl_stmt|;
return|return
name|map
operator|.
name|getContentMap
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
name|ActiveMQTextMessage
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|ActiveMQTextMessage
name|text
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
decl_stmt|;
return|return
name|text
operator|.
name|getText
argument_list|()
return|;
case|case
name|ActiveMQBytesMessage
operator|.
name|DATA_STRUCTURE_TYPE
case|:
case|case
name|ActiveMQObjectMessage
operator|.
name|DATA_STRUCTURE_TYPE
case|:
case|case
name|ActiveMQStreamMessage
operator|.
name|DATA_STRUCTURE_TYPE
case|:
name|ByteSequence
name|data
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
return|return
literal|"binary payload {length="
operator|+
name|data
operator|.
name|getLength
argument_list|()
operator|+
literal|", compressed="
operator|+
name|message
operator|.
name|isCompressed
argument_list|()
operator|+
literal|"}"
return|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{ 		}
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

