begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|OffsetDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|CronParserTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CronParserTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeDayOfWeek
parameter_list|()
throws|throws
name|MessageFormatException
block|{
comment|// using an absolute date so that result will be absolute - Monday 15 Nov 2010
name|Calendar
name|current
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|NOVEMBER
argument_list|,
literal|15
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"* * * * 5"
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|result
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|)
expr_stmt|;
comment|// expecting Friday 19th
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|NOVEMBER
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2010
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeDayOfWeekVariant
parameter_list|()
throws|throws
name|MessageFormatException
block|{
comment|// using an absolute date so that result will be absolute - Monday 7 March 2011
name|Calendar
name|current
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2011
argument_list|,
name|Calendar
operator|.
name|MARCH
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"50 20 * * 5"
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|result
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// expecting Friday 11th
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|FRIDAY
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|MARCH
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2011
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// Match to the day of week, but to late to run, should just a week forward.
name|current
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2011
argument_list|,
name|Calendar
operator|.
name|MARCH
argument_list|,
literal|11
argument_list|,
literal|22
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"update:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertEquals(0,result.get(Calendar.SECOND));
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// expecting Friday 18th
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|FRIDAY
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|MARCH
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2011
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeMonthVariant
parameter_list|()
throws|throws
name|MessageFormatException
block|{
comment|// using an absolute date so that result will be absolute - Monday 7 March 2011
name|Calendar
name|current
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2011
argument_list|,
name|Calendar
operator|.
name|MARCH
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"0 20 * 4,5 0"
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|result
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// expecting Sunday 3rd of April
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|APRIL
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|SUNDAY
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2011
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2011
argument_list|,
name|Calendar
operator|.
name|APRIL
argument_list|,
literal|30
argument_list|,
literal|22
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"update:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// expecting Sunday 1st of May
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|SUNDAY
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|MAY
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2011
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// Move past last time and see if reschedule to next year works.
name|current
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2011
argument_list|,
name|Calendar
operator|.
name|MAY
argument_list|,
literal|30
argument_list|,
literal|22
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"update:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// expecting Sunday 1st of April - 2012
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|SUNDAY
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|APRIL
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2012
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeMonth
parameter_list|()
throws|throws
name|MessageFormatException
block|{
comment|// using an absolute date so that result will be absolute - Monday 15 Nov 2010
name|Calendar
name|current
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|NOVEMBER
argument_list|,
literal|15
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"* * * 12 *"
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|result
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|DECEMBER
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2010
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetStartNextMonth
parameter_list|()
throws|throws
name|MessageFormatException
block|{
comment|// using an absolute date so that result will be absolute - Wednesday 15 Dec 2010
name|Calendar
name|current
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|15
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"* * 1 * *"
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|result
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|JANUARY
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2011
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextStartCurrMonth
parameter_list|()
throws|throws
name|MessageFormatException
block|{
comment|// using an absolute date so that result will be absolute - Wednesday 15 Dec 2010
name|Calendar
name|current
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|DECEMBER
argument_list|,
literal|15
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"* * 1 12 *"
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|result
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|DECEMBER
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2011
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeDays
parameter_list|()
throws|throws
name|MessageFormatException
block|{
comment|// using an absolute date so that result will be absolute - Monday 15 Nov 2010
name|Calendar
name|current
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
literal|2010
argument_list|,
name|Calendar
operator|.
name|NOVEMBER
argument_list|,
literal|15
argument_list|,
literal|9
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|current
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test
init|=
literal|"* * 16 * *"
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|result
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|result
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Calendar
operator|.
name|NOVEMBER
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2010
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeMinutes
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|test
init|=
literal|"30 * * * *"
decl_stmt|;
name|long
name|current
init|=
literal|20
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
name|Calendar
name|calender
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calender
operator|.
name|setTimeInMillis
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|int
name|startHours
init|=
name|calender
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
name|int
name|startMinutes
init|=
name|calender
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"start:"
operator|+
name|calender
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|calender
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"next:"
operator|+
name|calender
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nextMinutes
init|=
name|calender
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|nextMinutes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeHours
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|test
init|=
literal|"* 1 * * *"
decl_stmt|;
name|Calendar
name|calender
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calender
operator|.
name|set
argument_list|(
literal|1972
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|long
name|current
init|=
name|calender
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|calender
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|long
name|result
init|=
name|next
operator|-
name|current
decl_stmt|;
name|long
name|expected
init|=
literal|60
operator|*
literal|1000
operator|*
literal|60
operator|*
literal|8
operator|+
literal|60
operator|*
literal|1000
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetNextTimeHoursZeroMin
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|test
init|=
literal|"0 1 * * *"
decl_stmt|;
name|Calendar
name|calender
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calender
operator|.
name|set
argument_list|(
literal|1972
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|17
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|long
name|current
init|=
name|calender
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|test
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|calender
operator|.
name|setTimeInMillis
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|long
name|result
init|=
name|next
operator|-
name|current
decl_stmt|;
name|long
name|expected
init|=
literal|60
operator|*
literal|1000
operator|*
literal|60
operator|*
literal|7
operator|+
literal|60
operator|*
literal|1000
operator|*
literal|50
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidate
parameter_list|()
block|{
try|try
block|{
name|CronParser
operator|.
name|validate
argument_list|(
literal|"30 08 10 06 ? "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"30 08 ? 06 5 "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"30 08 ? 06 * "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"* * * * * "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"* * * * 1-6 "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"* * * * 1,2,5 "
argument_list|)
expr_stmt|;
name|CronParser
operator|.
name|validate
argument_list|(
literal|"*/10 0-4,8-12 * * 1-2,3-6/2 "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be valid "
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|CronParser
operator|.
name|validate
argument_list|(
literal|"61 08 10 06 * "
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be valid "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
try|try
block|{
name|CronParser
operator|.
name|validate
argument_list|(
literal|"61 08 06 * "
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be valid "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNextCommaSeparated
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|token
init|=
literal|"3,5,7"
decl_stmt|;
comment|// test minimum values
name|int
name|next
init|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNextRange
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|token
init|=
literal|"3-5"
decl_stmt|;
comment|// test minimum values
name|int
name|next
init|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|6
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNextExact
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|String
name|token
init|=
literal|"3"
decl_stmt|;
name|int
name|next
init|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|CronParser
operator|.
name|getNext
argument_list|(
name|createEntry
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenize
parameter_list|()
block|{
name|String
name|test
init|=
literal|"*/5 * * * *"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|CronParser
operator|.
name|tokenize
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|test
operator|=
literal|"*/5 * * * * *"
expr_stmt|;
try|try
block|{
name|list
operator|=
name|CronParser
operator|.
name|tokenize
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have throw an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
name|test
operator|=
literal|"*/5 * * * *"
expr_stmt|;
try|try
block|{
name|list
operator|=
name|CronParser
operator|.
name|tokenize
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have throw an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
name|test
operator|=
literal|"0 1 2 3 4"
expr_stmt|;
name|list
operator|=
name|CronParser
operator|.
name|tokenize
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
block|}
comment|//added tests from https://issues.apache.org/jira/browse/AMQ-6327
annotation|@
name|Test
specifier|public
name|void
name|testGetNext
parameter_list|()
throws|throws
name|MessageFormatException
block|{
name|testGetNextSingle
argument_list|(
literal|"0 0 1 * *"
argument_list|,
literal|"2016-04-15T00:00:00"
argument_list|,
literal|"2016-05-01T00:00:00"
argument_list|)
expr_stmt|;
name|testGetNextSingle
argument_list|(
literal|"0 0 1,15 * *"
argument_list|,
literal|"2016-04-15T00:00:00"
argument_list|,
literal|"2016-05-01T00:00:00"
argument_list|)
expr_stmt|;
name|testGetNextSingle
argument_list|(
literal|"0 0 1 * *"
argument_list|,
literal|"2016-05-15T00:00:00"
argument_list|,
literal|"2016-06-01T00:00:00"
argument_list|)
expr_stmt|;
name|testGetNextSingle
argument_list|(
literal|"0 0 1,15 * *"
argument_list|,
literal|"2016-05-15T00:00:00"
argument_list|,
literal|"2016-06-01T00:00:00"
argument_list|)
expr_stmt|;
name|testGetNextSingle
argument_list|(
literal|"0 0 1 * *"
argument_list|,
literal|"2016-06-15T00:00:00"
argument_list|,
literal|"2016-07-01T00:00:00"
argument_list|)
expr_stmt|;
name|testGetNextSingle
argument_list|(
literal|"0 0 1,15 * *"
argument_list|,
literal|"2016-06-15T00:00:00"
argument_list|,
literal|"2016-07-01T00:00:00"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testGetNextSingle
parameter_list|(
name|String
name|cronExp
parameter_list|,
name|String
name|now
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|MessageFormatException
block|{
name|LocalDateTime
name|nowDate
init|=
name|LocalDateTime
operator|.
name|parse
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|LocalDateTime
name|expDate
init|=
name|LocalDateTime
operator|.
name|parse
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|long
name|next
init|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|cronExp
argument_list|,
name|nowDate
operator|.
name|toInstant
argument_list|(
name|OffsetDateTime
operator|.
name|now
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expDate
argument_list|,
name|LocalDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|next
argument_list|)
argument_list|,
name|ZoneId
operator|.
name|systemDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNextScheduledTime
parameter_list|()
block|{
name|fail
argument_list|(
literal|"Not yet implemented"
argument_list|)
expr_stmt|;
block|}
name|CronParser
operator|.
name|CronEntry
name|createEntry
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
operator|new
name|CronParser
operator|.
name|CronEntry
argument_list|(
literal|"test"
argument_list|,
name|str
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
end_class

end_unit

