begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQXAConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ7185Test
block|{
specifier|private
specifier|final
name|String
name|xaDestinationName
init|=
literal|"DestinationXA"
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
specifier|private
name|long
name|txGenerator
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|XAConnectionFactory
name|xaConnectionFactory
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|final
name|Topic
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|xaDestinationName
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0?trace=true"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ActiveMQConnectionFactory
operator|)
name|connectionFactory
operator|)
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// failover ensure audit is in play
name|xaConnectionFactory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"failover://"
operator|+
name|connectionUri
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ActiveMQXAConnectionFactory
operator|)
name|xaConnectionFactory
operator|)
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRollbackRedeliveryNoDup
parameter_list|()
throws|throws
name|Exception
block|{
name|XAConnection
name|xaConnection
init|=
name|xaConnectionFactory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|xaConnection
operator|.
name|setClientID
argument_list|(
literal|"cid0"
argument_list|)
expr_stmt|;
name|xaConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|session
init|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|TopicSubscriber
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|xaConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|publish
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|Xid
name|tid
decl_stmt|;
name|TextMessage
name|receivedMessage
decl_stmt|;
name|xaConnection
operator|=
name|xaConnectionFactory
operator|.
name|createXAConnection
argument_list|()
expr_stmt|;
name|xaConnection
operator|.
name|setClientID
argument_list|(
literal|"cid0"
argument_list|)
expr_stmt|;
name|xaConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"sub"
argument_list|)
expr_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|XAResource
name|resource
init|=
name|session
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|receivedMessage
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|rollback
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|xaConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// redelivery
name|xaConnection
operator|=
name|xaConnectionFactory
operator|.
name|createXAConnection
argument_list|()
expr_stmt|;
name|xaConnection
operator|.
name|setClientID
argument_list|(
literal|"cid0"
argument_list|)
expr_stmt|;
name|xaConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"sub"
argument_list|)
expr_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|receivedMessage
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
comment|// verify only one
name|receivedMessage
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receiveNoWait
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|xaConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// assertNoMessageInDLQ
name|assertEquals
argument_list|(
literal|"Only one enqueue"
argument_list|,
literal|1
argument_list|,
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTotalEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|publish
parameter_list|(
name|Topic
name|dest
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
operator|.
name|send
argument_list|(
operator|new
name|ActiveMQTextMessage
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Xid
name|createXid
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|os
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
operator|++
name|txGenerator
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|bs
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|Xid
argument_list|()
block|{
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
literal|86
return|;
block|}
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

