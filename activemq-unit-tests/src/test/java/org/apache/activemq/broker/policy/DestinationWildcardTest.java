begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagedRegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DestinationWildcardTest
block|{
specifier|protected
specifier|final
specifier|static
name|String
name|DESTNAME
init|=
literal|"DomainA.DomainB.TestMeA.TestMeB.Prioritised.Queue"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|QUEUE_LIMIT
init|=
literal|5000000
decl_stmt|;
specifier|protected
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DestinationWildcardTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down"
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
operator|&&
name|broker
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker still running, stopping it now."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker not running, nothing to shutdown."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Configures broker for two wildcard policies and one specific destination policy, creates a destination      * and checks if the right policy is applied to the destination.      */
annotation|@
name|Test
specifier|public
name|void
name|testDestinationWildcardThreeEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDestinationWildcard() called."
argument_list|)
expr_stmt|;
comment|// configure broker for policyEntries
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
name|PolicyEntry
name|e1
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|e1
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"DomainA.DomainB.TestMeA.TestMeB.Prioritised.Queue"
argument_list|)
argument_list|)
expr_stmt|;
name|e1
operator|.
name|setMemoryLimit
argument_list|(
name|QUEUE_LIMIT
argument_list|)
expr_stmt|;
name|e1
operator|.
name|setPrioritizedMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|PolicyEntry
name|e2
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|e2
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"DomainA.DomainB.*.*.Prioritised.Queue"
argument_list|)
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setMemoryLimit
argument_list|(
literal|3000000
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setPrioritizedMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|e2
argument_list|)
expr_stmt|;
name|PolicyEntry
name|e3
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|e3
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"DomainA.DomainB.>"
argument_list|)
argument_list|)
expr_stmt|;
name|e3
operator|.
name|setMemoryLimit
argument_list|(
literal|3000000
argument_list|)
expr_stmt|;
name|e3
operator|.
name|setPrioritizedMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|e3
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// verify broker isn't null
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// verify effective policy is in place.
name|ManagedRegionBroker
name|rb
init|=
operator|(
name|ManagedRegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|rb
operator|.
name|addDestination
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
name|DESTNAME
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"PolicyEntry should have priorityMessages enabled for destination "
operator|+
name|DESTNAME
argument_list|,
name|queue
operator|.
name|isPrioritizedMessages
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|limit
init|=
name|queue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MemoryLimit of {}: expected: 5242880, actual: {}"
argument_list|,
name|DESTNAME
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Memory limit is expected to be "
operator|+
name|QUEUE_LIMIT
operator|+
literal|" for this destination, but does not match."
argument_list|,
name|QUEUE_LIMIT
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures broker for two wildcard policies, creates a destination      * and checks if the policy is applied to the destination.      */
annotation|@
name|Test
specifier|public
name|void
name|testDestinationWildcardTwoEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDestinationWildcard() called."
argument_list|)
expr_stmt|;
comment|// configure broker for policyEntries
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
name|PolicyEntry
name|e1
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|e1
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"DomainA.DomainB.*.*.Prioritised.Queue"
argument_list|)
argument_list|)
expr_stmt|;
name|e1
operator|.
name|setMemoryLimit
argument_list|(
name|QUEUE_LIMIT
argument_list|)
expr_stmt|;
name|e1
operator|.
name|setPrioritizedMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|PolicyEntry
name|e2
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|e2
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"DomainA.DomainB.>"
argument_list|)
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setMemoryLimit
argument_list|(
literal|3000000
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setPrioritizedMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|e2
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// verify broker isn't null
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// verify effective policy is in place.
name|ManagedRegionBroker
name|rb
init|=
operator|(
name|ManagedRegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|rb
operator|.
name|addDestination
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
name|DESTNAME
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"PolicyEntry should have priorityMessages enabled for destination "
operator|+
name|DESTNAME
argument_list|,
name|queue
operator|.
name|isPrioritizedMessages
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|limit
init|=
name|queue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MemoryLimit of {}: expected: 5242880, actual: {}"
argument_list|,
name|DESTNAME
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Memory limit is expected to be "
operator|+
name|QUEUE_LIMIT
operator|+
literal|" for this destination, but does not match."
argument_list|,
name|QUEUE_LIMIT
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDestinationWildcardOneEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDestinationWildcard2() called."
argument_list|)
expr_stmt|;
comment|// verify broker isn't null
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// configure broker for policyEntries
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
name|PolicyEntry
name|e1
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|e1
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"DomainA.DomainB.*.*.Prioritised.Queue"
argument_list|)
argument_list|)
expr_stmt|;
name|e1
operator|.
name|setMemoryLimit
argument_list|(
name|QUEUE_LIMIT
argument_list|)
expr_stmt|;
name|e1
operator|.
name|setPrioritizedMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// verify effective policy is in place.
name|ManagedRegionBroker
name|rb
init|=
operator|(
name|ManagedRegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|rb
operator|.
name|addDestination
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
name|DESTNAME
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"PolicyEntry should have priorityMessages enabled for destination "
operator|+
name|DESTNAME
argument_list|,
name|queue
operator|.
name|isPrioritizedMessages
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|limit
init|=
name|queue
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MemoryLimit of {}: expected: 5000000, actual: {}"
argument_list|,
literal|"DomainA"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Memory limit is expected to be "
operator|+
literal|5000000
operator|+
literal|" for this destination, but does not match."
argument_list|,
literal|5000000
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

