begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  *  * Task to merge the Jmeter properties  *  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_comment
comment|/**  * This class is used by an ant task that will merge the jmeter property files.  *  */
end_comment

begin_class
specifier|public
class|class
name|MergeProperties
block|{
comment|//  The file to merge properties into
specifier|protected
name|File
name|baseFile
decl_stmt|;
comment|//  The file to pull the properties from
specifier|protected
name|File
name|mergeFile
decl_stmt|;
specifier|public
name|File
name|getBaseFile
parameter_list|()
block|{
return|return
name|baseFile
return|;
block|}
specifier|public
name|void
name|setBaseFile
parameter_list|(
name|File
name|baseFile
parameter_list|)
block|{
name|this
operator|.
name|baseFile
operator|=
name|baseFile
expr_stmt|;
block|}
specifier|public
name|File
name|getMergeFile
parameter_list|()
block|{
return|return
name|mergeFile
return|;
block|}
specifier|public
name|void
name|setMergeFile
parameter_list|(
name|File
name|mergeFile
parameter_list|)
block|{
name|this
operator|.
name|mergeFile
operator|=
name|mergeFile
expr_stmt|;
block|}
specifier|public
name|void
name|mergePropertyFiles
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|getBaseFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Could not find file:"
operator|+
name|getBaseFile
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|getMergeFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Could not find file:"
operator|+
name|getMergeFile
argument_list|()
argument_list|)
throw|;
block|}
name|BufferedReader
name|mergeReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|mergeFile
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|baseReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|baseFile
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
name|baseList
init|=
operator|new
name|ArrayList
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|ArrayList
name|mergeList
init|=
operator|new
name|ArrayList
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|mergeReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|mergeList
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|line
operator|=
name|baseReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|baseList
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previouslyMerged
argument_list|(
name|baseList
argument_list|,
name|mergeList
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mergeList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|baseList
operator|.
name|indexOf
argument_list|(
name|mergeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|==
operator|-
literal|1
condition|)
block|{
comment|//check if key of mergeList.get(i) is in baseList
name|String
name|mergeKey
init|=
operator|(
name|String
operator|)
name|mergeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeKey
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|mergeKey
operator|=
name|getKey
argument_list|(
name|mergeKey
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|baseList
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|String
name|baseKey
init|=
operator|(
name|String
operator|)
name|baseList
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseKey
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|baseKey
operator|=
name|getKey
argument_list|(
name|baseKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeKey
operator|.
name|equals
argument_list|(
name|baseKey
argument_list|)
condition|)
block|{
name|j
operator|=
name|k
expr_stmt|;
block|}
block|}
if|if
condition|(
name|j
operator|>
operator|-
literal|1
condition|)
block|{
name|baseList
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|mergeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseList
operator|.
name|add
argument_list|(
name|mergeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|baseList
operator|.
name|addAll
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Collection
operator|)
name|mergeList
argument_list|)
expr_stmt|;
block|}
comment|// write baseList to file
name|FileOutputStream
name|writer
init|=
operator|new
name|FileOutputStream
argument_list|(
name|baseFile
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|//System.out.println((String) baseList.get(i));
name|writer
operator|.
name|write
argument_list|(
operator|(
operator|(
name|String
operator|)
name|baseList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|,
literal|"\r\n"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|baseReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|mergeReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|MergeProperties
name|mergeProperties
init|=
operator|new
name|MergeProperties
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java OverwriteProperties c:/temp/File1.props c:/temp/File2.props"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: File1 will be modified, new parameters from File 2 will be added,"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Incorrect number of arguments supplied"
argument_list|)
throw|;
block|}
name|mergeProperties
operator|.
name|setBaseFile
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mergeProperties
operator|.
name|setMergeFile
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mergeProperties
operator|.
name|mergePropertyFiles
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|previouslyMerged
parameter_list|(
name|ArrayList
name|base
parameter_list|,
name|ArrayList
name|merge
parameter_list|)
block|{
return|return
operator|(
name|base
operator|.
name|contains
argument_list|(
name|merge
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getKey
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
return|return
operator|(
name|prop
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prop
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

