begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|XATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protobuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|AbstractMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAddMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaCommitCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaLocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaPrepareCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveDestinationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRollbackCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaSubscriptionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaTransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaXATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
operator|.
name|DestinationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_class
specifier|public
class|class
name|KahaDBStore
extends|extends
name|MessageDatabase
implements|implements
name|PersistenceAdapter
block|{
specifier|private
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{     }
specifier|public
name|void
name|setUsageManager
parameter_list|(
name|SystemUsage
name|usageManager
parameter_list|)
block|{     }
specifier|public
name|TransactionStore
name|createTransactionStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TransactionStore
argument_list|()
block|{
specifier|public
name|void
name|commit
parameter_list|(
name|TransactionId
name|txid
parameter_list|,
name|boolean
name|wasPrepared
parameter_list|)
throws|throws
name|IOException
block|{
name|store
argument_list|(
operator|new
name|KahaCommitCommand
argument_list|()
operator|.
name|setTransactionInfo
argument_list|(
name|createTransactionInfo
argument_list|(
name|txid
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
name|TransactionId
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
name|store
argument_list|(
operator|new
name|KahaPrepareCommand
argument_list|()
operator|.
name|setTransactionInfo
argument_list|(
name|createTransactionInfo
argument_list|(
name|txid
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rollback
parameter_list|(
name|TransactionId
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
name|store
argument_list|(
operator|new
name|KahaRollbackCommand
argument_list|()
operator|.
name|setTransactionInfo
argument_list|(
name|createTransactionInfo
argument_list|(
name|txid
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recover
parameter_list|(
name|TransactionRecoveryListener
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|entry
range|:
name|preparedTransactions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|XATransactionId
name|xid
init|=
operator|(
name|XATransactionId
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Message
argument_list|>
name|messageList
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|MessageAck
argument_list|>
name|ackList
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageAck
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|op
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|op
operator|.
name|getClass
argument_list|()
operator|==
name|AddOpperation
operator|.
name|class
condition|)
block|{
name|AddOpperation
name|addOp
init|=
operator|(
name|AddOpperation
operator|)
name|op
decl_stmt|;
name|Message
name|msg
init|=
operator|(
name|Message
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|addOp
operator|.
name|getCommand
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|messageList
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RemoveOpperation
name|rmOp
init|=
operator|(
name|RemoveOpperation
operator|)
name|op
decl_stmt|;
name|MessageAck
name|ack
init|=
operator|(
name|MessageAck
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|rmOp
operator|.
name|getCommand
argument_list|()
operator|.
name|getAck
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ackList
operator|.
name|add
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
index|[]
name|addedMessages
init|=
operator|new
name|Message
index|[
name|messageList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|MessageAck
index|[]
name|acks
init|=
operator|new
name|MessageAck
index|[
name|ackList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|messageList
operator|.
name|toArray
argument_list|(
name|addedMessages
argument_list|)
expr_stmt|;
name|ackList
operator|.
name|toArray
argument_list|(
name|acks
argument_list|)
expr_stmt|;
name|listener
operator|.
name|recover
argument_list|(
name|xid
argument_list|,
name|addedMessages
argument_list|,
name|acks
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{             }
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{             }
block|}
return|;
block|}
specifier|public
class|class
name|KahaDBMessageStore
extends|extends
name|AbstractMessageStore
block|{
specifier|protected
name|KahaDestination
name|dest
decl_stmt|;
specifier|public
name|KahaDBMessageStore
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|this
operator|.
name|dest
operator|=
name|convert
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|void
name|addMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaAddMessageCommand
name|command
init|=
operator|new
name|KahaAddMessageCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setMessageId
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setTransactionInfo
argument_list|(
name|createTransactionInfo
argument_list|(
name|message
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|command
operator|.
name|setMessage
argument_list|(
operator|new
name|Buffer
argument_list|(
name|packet
operator|.
name|getData
argument_list|()
argument_list|,
name|packet
operator|.
name|getOffset
argument_list|()
argument_list|,
name|packet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
name|message
operator|.
name|isResponseRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveMessageCommand
name|command
init|=
operator|new
name|KahaRemoveMessageCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setMessageId
argument_list|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setTransactionInfo
argument_list|(
name|createTransactionInfo
argument_list|(
name|ack
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
name|ack
operator|.
name|isResponseRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeAllMessages
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveDestinationCommand
name|command
init|=
operator|new
name|KahaRemoveDestinationCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Message
name|getMessage
parameter_list|(
name|MessageId
name|identity
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|key
init|=
name|identity
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Hopefully one day the page file supports concurrent read operations... but for now we must
comment|// externally synchronize...
name|Location
name|location
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|location
operator|=
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Location
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|Location
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|sequence
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequence
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|sd
operator|.
name|orderIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|sequence
argument_list|)
operator|.
name|location
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|loadMessage
argument_list|(
name|location
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMessageCount
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Integer
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Iterate through all index entries to get a count of messages in the destination.
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|locationIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|rc
operator|++
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|recover
parameter_list|(
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|cursorPos
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|recoverNextMessages
parameter_list|(
specifier|final
name|int
name|maxReturned
parameter_list|,
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|cursorPos
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|>=
name|maxReturned
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|cursorPos
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetBatching
parameter_list|()
block|{
name|cursorPos
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBatch
parameter_list|(
name|MessageId
name|messageId
parameter_list|)
block|{         }
specifier|public
name|void
name|setMemoryUsage
parameter_list|(
name|MemoryUsage
name|memoeyUSage
parameter_list|)
block|{         }
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{         }
block|}
class|class
name|KahaDBTopicMessageStore
extends|extends
name|KahaDBMessageStore
implements|implements
name|TopicMessageStore
block|{
specifier|public
name|KahaDBTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|MessageId
name|messageId
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaRemoveMessageCommand
name|command
init|=
operator|new
name|KahaRemoveMessageCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setSubscriptionKey
argument_list|(
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|setMessageId
argument_list|(
name|messageId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// We are not passed a transaction info.. so we can't participate in a transaction.
comment|// Looks like a design issue with the TopicMessageStore interface.  Also we can't recover the original ack
comment|// to pass back to the XA recover method.
comment|// command.setTransactionInfo();
name|store
argument_list|(
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSubsciption
parameter_list|(
name|SubscriptionInfo
name|subscriptionInfo
parameter_list|,
name|boolean
name|retroactive
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|subscriptionInfo
operator|.
name|getClientId
argument_list|()
argument_list|,
name|subscriptionInfo
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
name|KahaSubscriptionCommand
name|command
init|=
operator|new
name|KahaSubscriptionCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setSubscriptionKey
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
name|command
operator|.
name|setRetroactive
argument_list|(
name|retroactive
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|subscriptionInfo
argument_list|)
decl_stmt|;
name|command
operator|.
name|setSubscriptionInfo
argument_list|(
operator|new
name|Buffer
argument_list|(
name|packet
operator|.
name|getData
argument_list|()
argument_list|,
name|packet
operator|.
name|getOffset
argument_list|()
argument_list|,
name|packet
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteSubscription
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaSubscriptionCommand
name|command
init|=
operator|new
name|KahaSubscriptionCommand
argument_list|()
decl_stmt|;
name|command
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|command
operator|.
name|setSubscriptionKey
argument_list|(
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|command
argument_list|,
name|isEnableJournalDiskSyncs
argument_list|()
operator|&&
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SubscriptionInfo
index|[]
name|getAllSubscriptions
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ArrayList
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subscriptions
init|=
operator|new
name|ArrayList
argument_list|<
name|SubscriptionInfo
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|subscriptions
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SubscriptionInfo
name|info
init|=
operator|(
name|SubscriptionInfo
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSubscriptionInfo
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|subscriptions
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|SubscriptionInfo
index|[]
name|rc
init|=
operator|new
name|SubscriptionInfo
index|[
name|subscriptions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|subscriptions
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|SubscriptionInfo
name|lookupSubscription
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|SubscriptionInfo
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|SubscriptionInfo
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|KahaSubscriptionCommand
name|command
init|=
name|sd
operator|.
name|subscriptions
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|SubscriptionInfo
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|command
operator|.
name|getSubscriptionInfo
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|getMessageCount
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
return|return
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Integer
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|cursorPos
init|=
name|sd
operator|.
name|subscriptionAcks
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|==
literal|null
condition|)
block|{
comment|// The subscription might not exist.
return|return
literal|0
return|;
block|}
name|cursorPos
operator|+=
literal|1
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|cursorPos
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
return|return
name|counter
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|recoverSubscription
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|cursorPos
init|=
name|sd
operator|.
name|subscriptionAcks
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
name|cursorPos
operator|+=
literal|1
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|cursorPos
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|recoverNextMessages
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
specifier|final
name|int
name|maxReturned
parameter_list|,
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|Exception
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|cursorPos
init|=
name|sd
operator|.
name|subscriptionCursors
operator|.
name|get
argument_list|(
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|==
literal|null
condition|)
block|{
name|cursorPos
operator|=
name|sd
operator|.
name|subscriptionAcks
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
name|cursorPos
operator|+=
literal|1
expr_stmt|;
block|}
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
literal|null
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|cursorPos
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|loadMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|>=
name|maxReturned
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|subscriptionCursors
operator|.
name|put
argument_list|(
name|subscriptionKey
argument_list|,
name|cursorPos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetBatching
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|subscriptionKey
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|dest
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|sd
operator|.
name|subscriptionCursors
operator|.
name|remove
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|String
name|subscriptionKey
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
block|{
return|return
name|clientId
operator|+
literal|":"
operator|+
name|subscriptionName
return|;
block|}
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|KahaDBMessageStore
argument_list|(
name|destination
argument_list|)
return|;
block|}
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|KahaDBTopicMessageStore
argument_list|(
name|destination
argument_list|)
return|;
block|}
comment|/**      * Cleanup method to remove any state associated with the given destination.      * This method does not stop the message store (it might not be cached).      *      * @param destination Destination to forget      */
specifier|public
name|void
name|removeQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
block|{     }
comment|/**      * Cleanup method to remove any state associated with the given destination      * This method does not stop the message store (it might not be cached).      *      * @param destination Destination to forget      */
specifier|public
name|void
name|removeTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
block|{     }
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteAllMessages
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|getDestinations
parameter_list|()
block|{
try|try
block|{
specifier|final
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
name|rc
init|=
operator|new
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|>
name|iterator
init|=
name|metadata
operator|.
name|destinations
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|rc
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
try|try
block|{
return|return
name|journal
operator|.
name|getDiskSize
argument_list|()
operator|+
name|pageFile
operator|.
name|getDiskSize
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|checkpoint
parameter_list|(
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|checkpointCleanup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|///////////////////////////////////////////////////////////////////
comment|// Internal helper methods.
comment|///////////////////////////////////////////////////////////////////
comment|/**      * @param location      * @return      * @throws IOException      */
name|Message
name|loadMessage
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaAddMessageCommand
name|addMessage
init|=
operator|(
name|KahaAddMessageCommand
operator|)
name|load
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
operator|(
name|Message
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|addMessage
operator|.
name|getMessage
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|msg
return|;
block|}
comment|///////////////////////////////////////////////////////////////////
comment|// Internal conversion methods.
comment|///////////////////////////////////////////////////////////////////
name|KahaTransactionInfo
name|createTransactionInfo
parameter_list|(
name|TransactionId
name|txid
parameter_list|)
block|{
if|if
condition|(
name|txid
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KahaTransactionInfo
name|rc
init|=
operator|new
name|KahaTransactionInfo
argument_list|()
decl_stmt|;
comment|// Link it up to the previous record that was part of the transaction.
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|get
argument_list|(
name|txid
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setPreviousEntry
argument_list|(
name|convert
argument_list|(
name|tx
operator|.
name|get
argument_list|(
name|tx
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|txid
operator|.
name|isLocalTransaction
argument_list|()
condition|)
block|{
name|LocalTransactionId
name|t
init|=
operator|(
name|LocalTransactionId
operator|)
name|txid
decl_stmt|;
name|KahaLocalTransactionId
name|kahaTxId
init|=
operator|new
name|KahaLocalTransactionId
argument_list|()
decl_stmt|;
name|kahaTxId
operator|.
name|setConnectionId
argument_list|(
name|t
operator|.
name|getConnectionId
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|kahaTxId
operator|.
name|setTransacitonId
argument_list|(
name|t
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setLocalTransacitonId
argument_list|(
name|kahaTxId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XATransactionId
name|t
init|=
operator|(
name|XATransactionId
operator|)
name|txid
decl_stmt|;
name|KahaXATransactionId
name|kahaTxId
init|=
operator|new
name|KahaXATransactionId
argument_list|()
decl_stmt|;
name|kahaTxId
operator|.
name|setBranchQualifier
argument_list|(
operator|new
name|Buffer
argument_list|(
name|t
operator|.
name|getBranchQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kahaTxId
operator|.
name|setGlobalTransactionId
argument_list|(
operator|new
name|Buffer
argument_list|(
name|t
operator|.
name|getGlobalTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kahaTxId
operator|.
name|setFormatId
argument_list|(
name|t
operator|.
name|getFormatId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setXaTransacitonId
argument_list|(
name|kahaTxId
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
name|KahaLocation
name|convert
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|KahaLocation
name|rc
init|=
operator|new
name|KahaLocation
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setLogId
argument_list|(
name|location
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOffset
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
name|KahaDestination
name|convert
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|)
block|{
name|KahaDestination
name|rc
init|=
operator|new
name|KahaDestination
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setName
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|dest
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|QUEUE
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|TOPIC
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|TEMP_QUEUE
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|rc
operator|.
name|setType
argument_list|(
name|DestinationType
operator|.
name|TEMP_TOPIC
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
name|ActiveMQDestination
name|convert
parameter_list|(
name|String
name|dest
parameter_list|)
block|{
name|int
name|p
init|=
name|dest
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not in the valid destination format"
argument_list|)
throw|;
block|}
name|int
name|type
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|dest
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
case|case
name|QUEUE
case|:
return|return
operator|new
name|ActiveMQQueue
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TOPIC
case|:
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TEMP_QUEUE
case|:
return|return
operator|new
name|ActiveMQTempQueue
argument_list|(
name|name
argument_list|)
return|;
case|case
name|TEMP_TOPIC
case|:
return|return
operator|new
name|ActiveMQTempTopic
argument_list|(
name|name
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not in the valid destination format"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

