begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|async
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An AsyncDataManager that works in read only mode against multiple data directories.  * Useful for reading back archived data files.  */
end_comment

begin_class
specifier|public
class|class
name|ReadOnlyAsyncDataManager
extends|extends
name|AsyncDataManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReadOnlyAsyncDataManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|File
argument_list|>
name|dirs
decl_stmt|;
specifier|public
name|ReadOnlyAsyncDataManager
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|File
argument_list|>
name|dirs
parameter_list|)
block|{
name|this
operator|.
name|dirs
operator|=
name|dirs
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|started
condition|)
block|{
return|return;
block|}
name|started
operator|=
literal|true
expr_stmt|;
name|accessorPool
operator|=
operator|new
name|DataFileAccessorPool
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|directory
range|:
name|dirs
control|)
block|{
specifier|final
name|File
name|d
init|=
name|directory
decl_stmt|;
name|File
index|[]
name|f
init|=
name|d
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|n
parameter_list|)
block|{
return|return
name|dir
operator|.
name|equals
argument_list|(
name|d
argument_list|)
operator|&&
name|n
operator|.
name|startsWith
argument_list|(
name|filePrefix
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|f
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|String
name|n
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|numStr
init|=
name|n
operator|.
name|substring
argument_list|(
name|filePrefix
operator|.
name|length
argument_list|()
argument_list|,
name|n
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numStr
argument_list|)
decl_stmt|;
name|DataFile
name|dataFile
init|=
operator|new
name|ReadOnlyDataFile
argument_list|(
name|file
argument_list|,
name|num
argument_list|,
name|preferedFileLength
argument_list|)
decl_stmt|;
name|fileMap
operator|.
name|put
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
name|storeSize
operator|.
name|addAndGet
argument_list|(
name|dataFile
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Ignore file that do not match the pattern.
block|}
block|}
comment|// Sort the list so that we can link the DataFiles together in the
comment|// right order.
name|List
argument_list|<
name|DataFile
argument_list|>
name|dataFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|DataFile
argument_list|>
argument_list|(
name|fileMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|dataFiles
argument_list|)
expr_stmt|;
name|currentWriteFile
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|DataFile
name|df
range|:
name|dataFiles
control|)
block|{
if|if
condition|(
name|currentWriteFile
operator|!=
literal|null
condition|)
block|{
name|currentWriteFile
operator|.
name|linkAfter
argument_list|(
name|df
argument_list|)
expr_stmt|;
block|}
name|currentWriteFile
operator|=
name|df
expr_stmt|;
name|fileByFileMap
operator|.
name|put
argument_list|(
name|df
operator|.
name|getFile
argument_list|()
argument_list|,
name|df
argument_list|)
expr_stmt|;
block|}
comment|// Need to check the current Write File to see if there was a partial
comment|// write to it.
if|if
condition|(
name|currentWriteFile
operator|!=
literal|null
condition|)
block|{
comment|// See if the lastSyncedLocation is valid..
name|Location
name|l
init|=
name|lastAppendLocation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|getDataFileId
argument_list|()
operator|!=
name|currentWriteFile
operator|.
name|getDataFileId
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|l
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
return|return;
block|}
name|accessorPool
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fileByFileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|started
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|Location
name|getFirstLocation
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
if|if
condition|(
name|currentWriteFile
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataFile
name|first
init|=
operator|(
name|DataFile
operator|)
name|currentWriteFile
operator|.
name|getHeadNode
argument_list|()
decl_stmt|;
name|Location
name|cur
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|cur
operator|.
name|setDataFileId
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|cur
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cur
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|getNextLocation
argument_list|(
name|cur
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot delete a ReadOnlyAsyncDataManager"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

