begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activecluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_comment
comment|/**  * A cluster event  *   * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|ClusterEvent
implements|implements
name|Externalizable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4103732679231950873L
decl_stmt|;
comment|/**      * A node has joined the cluster      */
specifier|public
specifier|static
specifier|final
name|int
name|ADD_NODE
init|=
literal|1
decl_stmt|;
comment|/**      * existing node has updated it's state      */
specifier|public
specifier|static
specifier|final
name|int
name|UPDATE_NODE
init|=
literal|2
decl_stmt|;
comment|/**      * A node has left the Cluster      */
specifier|public
specifier|static
specifier|final
name|int
name|REMOVE_NODE
init|=
literal|3
decl_stmt|;
comment|/**      * A node has failed due to a system/network error      */
specifier|public
specifier|static
specifier|final
name|int
name|FAILED_NODE
init|=
literal|4
decl_stmt|;
comment|/**      * this node has been elected Coordinator      */
specifier|public
specifier|static
specifier|final
name|int
name|ELECTED_COORDINATOR
init|=
literal|5
decl_stmt|;
specifier|private
specifier|transient
name|Cluster
name|cluster
decl_stmt|;
specifier|private
name|Node
name|node
decl_stmt|;
specifier|private
name|int
name|type
decl_stmt|;
comment|/**      * empty constructor      */
specifier|public
name|ClusterEvent
parameter_list|()
block|{     }
comment|/**      * @param source      * @param node      * @param type      */
specifier|public
name|ClusterEvent
parameter_list|(
name|Cluster
name|source
parameter_list|,
name|Node
name|node
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * @return the Cluster      */
specifier|public
name|Cluster
name|getCluster
parameter_list|()
block|{
return|return
name|cluster
return|;
block|}
comment|/**      * set the cluster      * @param source      */
specifier|public
name|void
name|setCluster
parameter_list|(
name|Cluster
name|source
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|source
expr_stmt|;
block|}
comment|/**      * @return the node      */
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
comment|/**      * @return the type of event      */
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * @return pretty type      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ClusterEvent["
operator|+
name|getTypeAsString
argument_list|()
operator|+
literal|" : "
operator|+
name|node
operator|+
literal|"]"
return|;
block|}
comment|/**      * dump on to a stream      *       * @param out      * @throws IOException      */
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * read from stream      *       * @param in      * @throws IOException      * @throws ClassNotFoundException      */
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|type
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|node
operator|=
operator|(
name|Node
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getTypeAsString
parameter_list|()
block|{
name|String
name|result
init|=
literal|"unknown type"
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ADD_NODE
condition|)
block|{
name|result
operator|=
literal|"ADD_NODE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|REMOVE_NODE
condition|)
block|{
name|result
operator|=
literal|"REMOVE_NODE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|UPDATE_NODE
condition|)
block|{
name|result
operator|=
literal|"UPDATE_NODE"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|FAILED_NODE
condition|)
block|{
name|result
operator|=
literal|"FAILED_NODE"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

