begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|WireFormatInfoPropertiesTest
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WireFormatInfoPropertiesTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|service
decl_stmt|;
specifier|private
name|String
name|brokerUri
decl_stmt|;
specifier|private
name|TransportConnector
name|connector
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|service
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|connector
operator|=
name|service
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|brokerUri
operator|=
name|connector
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|service
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|service
operator|.
name|setBrokerName
argument_list|(
literal|"Master"
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientPropertiesWithDefaultPlatformDetails
parameter_list|()
throws|throws
name|Exception
block|{
name|WireFormatInfo
name|clientWf
init|=
name|testClientProperties
argument_list|(
name|brokerUri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|clientWf
operator|.
name|getPlatformDetails
argument_list|()
operator|.
name|equals
argument_list|(
name|ActiveMQConnectionMetaData
operator|.
name|DEFAULT_PLATFORM_DETAILS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientPropertiesWithPlatformDetails
parameter_list|()
throws|throws
name|Exception
block|{
name|WireFormatInfo
name|clientWf
init|=
name|testClientProperties
argument_list|(
name|brokerUri
operator|+
literal|"?wireFormat.includePlatformDetails=true"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|clientWf
operator|.
name|getPlatformDetails
argument_list|()
operator|.
name|equals
argument_list|(
name|ActiveMQConnectionMetaData
operator|.
name|PLATFORM_DETAILS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WireFormatInfo
name|testClientProperties
parameter_list|(
name|String
name|brokerUri
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
operator|new
name|URI
argument_list|(
name|brokerUri
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|conn
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|connector
operator|.
name|getConnections
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|WireFormatInfo
name|clientWf
init|=
name|connector
operator|.
name|getConnections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRemoteWireFormatInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientWf
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Wire format info is null"
argument_list|)
expr_stmt|;
block|}
comment|//verify properties that the client sends to the broker
name|assertTrue
argument_list|(
name|clientWf
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"ProviderName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clientWf
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"ProviderVersion"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clientWf
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"PlatformDetails"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clientWf
operator|.
name|getProviderName
argument_list|()
operator|.
name|equals
argument_list|(
name|ActiveMQConnectionMetaData
operator|.
name|PROVIDER_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|clientWf
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshalClientProperties
parameter_list|()
throws|throws
name|IOException
block|{
comment|// marshal object
name|OpenWireFormatFactory
name|factory
init|=
operator|new
name|OpenWireFormatFactory
argument_list|()
decl_stmt|;
name|OpenWireFormat
name|wf
init|=
operator|(
name|OpenWireFormat
operator|)
name|factory
operator|.
name|createWireFormat
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|WireFormatInfo
name|orig
init|=
name|wf
operator|.
name|getPreferedWireFormatInfo
argument_list|()
decl_stmt|;
name|wf
operator|.
name|marshal
argument_list|(
name|orig
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// unmarshal object and check that the properties are present.
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Object
name|actual
init|=
name|wf
operator|.
name|unmarshal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|actual
operator|instanceof
name|WireFormatInfo
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unknown type"
argument_list|)
expr_stmt|;
block|}
name|WireFormatInfo
name|result
init|=
operator|(
name|WireFormatInfo
operator|)
name|actual
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getProviderName
argument_list|()
operator|.
name|equals
argument_list|(
name|orig
operator|.
name|getProviderName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// the version won't be valid until runtime
name|assertTrue
argument_list|(
name|result
operator|.
name|getProviderVersion
argument_list|()
operator|==
literal|null
operator|||
name|result
operator|.
name|getProviderVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|orig
operator|.
name|getProviderVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getPlatformDetails
argument_list|()
operator|.
name|equals
argument_list|(
name|orig
operator|.
name|getPlatformDetails
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

