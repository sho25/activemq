begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|reports
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|reports
operator|.
name|PerformanceStatisticsUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
specifier|public
class|class
name|CpuReportPlugin
implements|implements
name|ReportPlugin
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CpuReportPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_IGNORE_LIST
init|=
literal|"$index$timeUnit$r$b$w$swpd$inact$active$free$buff$cache$si$so$in$"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_BLOCK_RECV
init|=
literal|"bi"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_BLOCK_SENT
init|=
literal|"bo"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_CTX_SWITCH
init|=
literal|"cs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_USER_TIME
init|=
literal|"us"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_SYS_TIME
init|=
literal|"sy"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_IDLE_TIME
init|=
literal|"id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_WAIT_TIME
init|=
literal|"wa"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_BLOCK_RECV
init|=
literal|"BlocksReceived"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_BLOCK_SENT
init|=
literal|"BlocksSent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_CTX_SWITCH
init|=
literal|"ContextSwitches"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_USER_TIME
init|=
literal|"UserTime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_SYS_TIME
init|=
literal|"SystemTime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_IDLE_TIME
init|=
literal|"IdleTime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_WAIT_TIME
init|=
literal|"WaitingTime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_AVE_BLOCK_RECV
init|=
literal|"AveBlocksReceived"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_AVE_BLOCK_SENT
init|=
literal|"AveBlocksSent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_AVE_CTX_SWITCH
init|=
literal|"AveContextSwitches"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_AVE_USER_TIME
init|=
literal|"AveUserTime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_AVE_SYS_TIME
init|=
literal|"AveSystemTime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_AVE_IDLE_TIME
init|=
literal|"AveIdleTime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEY_AVE_WAIT_TIME
init|=
literal|"AveWaitingTime"
decl_stmt|;
specifier|protected
name|List
name|blockRecv
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|List
name|blockSent
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|List
name|ctxSwitch
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|List
name|userTime
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|List
name|sysTime
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|List
name|idleTime
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|List
name|waitTime
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|handleCsvData
parameter_list|(
name|String
name|csvData
parameter_list|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|csvData
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|String
name|data
decl_stmt|,
name|key
decl_stmt|,
name|val
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|data
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|key
operator|=
name|data
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|data
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|data
operator|.
name|substring
argument_list|(
name|data
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|addToCpuList
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
name|getSummary
parameter_list|()
block|{
name|long
name|val
decl_stmt|;
name|Map
name|summary
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockRecv
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|PerformanceStatisticsUtil
operator|.
name|getSum
argument_list|(
name|blockRecv
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_BLOCK_RECV
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_AVE_BLOCK_RECV
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|val
operator|/
operator|(
name|double
operator|)
name|blockRecv
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockSent
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|PerformanceStatisticsUtil
operator|.
name|getSum
argument_list|(
name|blockSent
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_BLOCK_SENT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_AVE_BLOCK_SENT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|val
operator|/
operator|(
name|double
operator|)
name|blockSent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctxSwitch
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|PerformanceStatisticsUtil
operator|.
name|getSum
argument_list|(
name|ctxSwitch
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_CTX_SWITCH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_AVE_CTX_SWITCH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|val
operator|/
operator|(
name|double
operator|)
name|ctxSwitch
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userTime
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|PerformanceStatisticsUtil
operator|.
name|getSum
argument_list|(
name|userTime
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_USER_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_AVE_USER_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|val
operator|/
operator|(
name|double
operator|)
name|userTime
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sysTime
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|PerformanceStatisticsUtil
operator|.
name|getSum
argument_list|(
name|sysTime
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_SYS_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_AVE_SYS_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|val
operator|/
operator|(
name|double
operator|)
name|sysTime
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idleTime
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|PerformanceStatisticsUtil
operator|.
name|getSum
argument_list|(
name|idleTime
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_IDLE_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_AVE_IDLE_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|val
operator|/
operator|(
name|double
operator|)
name|idleTime
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waitTime
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|PerformanceStatisticsUtil
operator|.
name|getSum
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_WAIT_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|summary
operator|.
name|put
argument_list|(
name|KEY_AVE_WAIT_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|double
operator|)
name|val
operator|/
operator|(
name|double
operator|)
name|waitTime
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|summary
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|summary
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|void
name|addToCpuList
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NAME_BLOCK_RECV
argument_list|)
condition|)
block|{
name|blockRecv
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NAME_BLOCK_SENT
argument_list|)
condition|)
block|{
name|blockSent
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NAME_CTX_SWITCH
argument_list|)
condition|)
block|{
name|ctxSwitch
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NAME_USER_TIME
argument_list|)
condition|)
block|{
name|userTime
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NAME_SYS_TIME
argument_list|)
condition|)
block|{
name|sysTime
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NAME_IDLE_TIME
argument_list|)
condition|)
block|{
name|idleTime
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|NAME_WAIT_TIME
argument_list|)
condition|)
block|{
name|waitTime
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NAME_IGNORE_LIST
operator|.
name|indexOf
argument_list|(
literal|"$"
operator|+
name|key
operator|+
literal|"$"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Ignore key
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unrecognized CPU data. "
operator|+
name|key
operator|+
literal|"="
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

