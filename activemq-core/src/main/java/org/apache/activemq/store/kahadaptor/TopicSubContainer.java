begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadaptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|MapContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreEntry
import|;
end_import

begin_comment
comment|/**  * Holds information for the subscriber  *   *   */
end_comment

begin_class
specifier|public
class|class
name|TopicSubContainer
block|{
specifier|private
specifier|transient
name|MapContainer
name|mapContainer
decl_stmt|;
specifier|private
specifier|transient
name|StoreEntry
name|batchEntry
decl_stmt|;
specifier|public
name|TopicSubContainer
parameter_list|(
name|MapContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|mapContainer
operator|=
name|container
expr_stmt|;
block|}
comment|/**      * @return the batchEntry      */
specifier|public
name|StoreEntry
name|getBatchEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|batchEntry
return|;
block|}
comment|/**      * @param id      * @param batchEntry the batchEntry to set      */
specifier|public
name|void
name|setBatchEntry
parameter_list|(
name|String
name|id
parameter_list|,
name|StoreEntry
name|batchEntry
parameter_list|)
block|{
name|this
operator|.
name|batchEntry
operator|=
name|batchEntry
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|batchEntry
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|mapContainer
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|StoreEntry
name|add
parameter_list|(
name|ConsumerMessageRef
name|ref
parameter_list|)
block|{
return|return
name|mapContainer
operator|.
name|place
argument_list|(
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|ref
argument_list|)
return|;
block|}
specifier|public
name|ConsumerMessageRef
name|remove
parameter_list|(
name|MessageId
name|id
parameter_list|)
block|{
name|ConsumerMessageRef
name|result
init|=
literal|null
decl_stmt|;
name|StoreEntry
name|entry
init|=
name|mapContainer
operator|.
name|getEntry
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|(
name|ConsumerMessageRef
operator|)
name|mapContainer
operator|.
name|getValue
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|mapContainer
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchEntry
operator|!=
literal|null
operator|&&
name|batchEntry
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mapContainer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|ConsumerMessageRef
name|get
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
return|return
operator|(
name|ConsumerMessageRef
operator|)
name|mapContainer
operator|.
name|getValue
argument_list|(
name|entry
argument_list|)
return|;
block|}
specifier|public
name|StoreEntry
name|getEntry
parameter_list|()
block|{
return|return
name|mapContainer
operator|.
name|getFirst
argument_list|()
return|;
block|}
specifier|public
name|StoreEntry
name|refreshEntry
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
return|return
name|mapContainer
operator|.
name|refresh
argument_list|(
name|entry
argument_list|)
return|;
block|}
specifier|public
name|StoreEntry
name|getNextEntry
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
return|return
name|mapContainer
operator|.
name|getNext
argument_list|(
name|entry
argument_list|)
return|;
block|}
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|mapContainer
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mapContainer
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|mapContainer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

