begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test for AMQ-6798  */
end_comment

begin_class
specifier|public
class|class
name|QueueMemoryAndStoreUsageCleanupTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueMemoryAndStoreUsageCleanupTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dataFileDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|SystemUsage
name|systemUsage
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUpBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataFileDir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|systemUsage
operator|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testQueueMemoryAndStoreUsageCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|childrenField
init|=
name|Usage
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
name|childrenField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|memoryUsageChildren
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|childrenField
operator|.
name|get
argument_list|(
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|storeUsageChildren
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|childrenField
operator|.
name|get
argument_list|(
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
argument_list|)
decl_stmt|;
name|Destination
name|queue1
init|=
name|addDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue1"
argument_list|)
argument_list|)
decl_stmt|;
name|Destination
name|queue2
init|=
name|addDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue2"
argument_list|)
argument_list|)
decl_stmt|;
name|Destination
name|queue3
init|=
name|addDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue3"
argument_list|)
argument_list|)
decl_stmt|;
name|Destination
name|queue4
init|=
name|addDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue4"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|beforeStopMemoryChildren
init|=
name|memoryUsageChildren
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|beforeStopStoreChildren
init|=
name|storeUsageChildren
operator|.
name|size
argument_list|()
decl_stmt|;
name|queue1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|queue2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|queue3
operator|.
name|stop
argument_list|()
expr_stmt|;
name|queue4
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//Make sure each memory usage and store usage object that was created for every queue
comment|//has been cleaned up
name|assertEquals
argument_list|(
name|beforeStopMemoryChildren
operator|-
literal|4
argument_list|,
name|memoryUsageChildren
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeStopStoreChildren
operator|-
literal|4
argument_list|,
name|storeUsageChildren
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Destination
name|addDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
name|broker
operator|.
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|broker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|destination
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dest
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|dest
return|;
block|}
block|}
end_class

end_unit

