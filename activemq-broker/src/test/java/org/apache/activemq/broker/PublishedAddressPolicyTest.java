begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|PublishedAddressPolicyTest
block|{
name|PublishedAddressPolicy
name|underTest
init|=
operator|new
name|PublishedAddressPolicy
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|URI
argument_list|>
name|uriAtomicReference
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|TransportConnector
name|dummyTransportConnector
init|=
operator|new
name|TransportConnector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|URI
name|getConnectUri
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
name|uriAtomicReference
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|ok
init|=
operator|new
name|URI
argument_list|(
literal|"tcp://bob:88"
argument_list|)
decl_stmt|;
name|uriAtomicReference
operator|.
name|set
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultReturnsHost
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"contains bob"
argument_list|,
name|underTest
operator|.
name|getPublishableConnectString
argument_list|(
name|dummyTransportConnector
argument_list|)
operator|.
name|contains
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHostMap
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|hostMap
operator|.
name|put
argument_list|(
literal|"bob"
argument_list|,
literal|"pat"
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setHostMapping
argument_list|(
name|hostMap
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains pat"
argument_list|,
name|underTest
operator|.
name|getPublishableConnectString
argument_list|(
name|dummyTransportConnector
argument_list|)
operator|.
name|contains
argument_list|(
literal|"pat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPortMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|portMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|portMap
operator|.
name|put
argument_list|(
literal|88
argument_list|,
literal|77
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setPortMapping
argument_list|(
name|portMap
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains 77"
argument_list|,
name|underTest
operator|.
name|getPublishableConnectString
argument_list|(
name|dummyTransportConnector
argument_list|)
operator|.
name|contains
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

