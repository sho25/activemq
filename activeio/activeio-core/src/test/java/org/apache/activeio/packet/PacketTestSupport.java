begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|PacketTestSupport
extends|extends
name|TestCase
block|{
specifier|abstract
name|Packet
name|createTestPacket
parameter_list|(
name|int
name|capacity
parameter_list|)
function_decl|;
specifier|public
name|void
name|testInit
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|packet
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|packet
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|packet
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|packet
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|packet
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPosition
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|packet
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLimit
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|limit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|packet
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemaining
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|packet
operator|.
name|limit
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90
argument_list|,
name|packet
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|packet
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|packet
operator|.
name|limit
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|packet
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|packet
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFlip
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|packet
operator|.
name|flip
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|packet
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|95
argument_list|,
name|packet
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|packet
operator|.
name|limit
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|packet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|packet
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|packet
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDuplicate
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|packet
operator|.
name|limit
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|Packet
name|packet2
init|=
name|packet
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|packet2
operator|.
name|position
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|packet2
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|packet
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|95
argument_list|,
name|packet
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|packet2
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|packet2
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRewind
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|packet
operator|.
name|limit
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|packet
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|packet
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|95
argument_list|,
name|packet
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSlice
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|packet
operator|.
name|position
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|packet
operator|.
name|limit
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|Packet
name|packet2
init|=
name|packet
operator|.
name|slice
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|packet2
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90
argument_list|,
name|packet2
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90
argument_list|,
name|packet2
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWriteAndReadByte
parameter_list|()
block|{
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|packet
operator|.
name|write
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|packet
operator|.
name|write
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|packet
operator|.
name|flip
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|packet
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|packet
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWriteAndReadBulkByte
parameter_list|()
block|{
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|Packet
name|packet
init|=
name|createTestPacket
argument_list|(
name|data
operator|.
name|length
operator|*
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|packet
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|packet
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
index|]
decl_stmt|;
name|packet
operator|.
name|flip
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|packet
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|packet
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertEquals
parameter_list|(
name|byte
name|buffer
index|[]
parameter_list|,
name|byte
name|data
index|[]
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

