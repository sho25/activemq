begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|TransportUriTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransportUriTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIFF_SERV
init|=
literal|"&diffServ="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOS
init|=
literal|"&typeOfService="
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|public
name|String
name|prefix
decl_stmt|;
specifier|public
name|String
name|postfix
decl_stmt|;
specifier|public
name|void
name|initCombosForTestUriOptionsWork
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testUriOptionsWork
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|prefix
operator|+
name|bindAddress
operator|+
name|postfix
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting via: "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
argument_list|)
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestValidDiffServOptionsWork
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testValidDiffServOptionsWork
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|validIntegerOptions
init|=
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"32"
block|,
literal|"62"
block|,
literal|"63"
block|}
decl_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|validIntegerOptions
control|)
block|{
name|testValidOptionsWork
argument_list|(
name|DIFF_SERV
operator|+
name|opt
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|validNameOptions
init|=
block|{
literal|"CS0"
block|,
literal|"CS1"
block|,
literal|"CS2"
block|,
literal|"CS3"
block|,
literal|"CS4"
block|,
literal|"CS5"
block|,
literal|"CS6"
block|,
literal|"CS7"
block|,
literal|"EF"
block|,
literal|"AF11"
block|,
literal|"AF12"
block|,
literal|"AF13"
block|,
literal|"AF21"
block|,
literal|"AF22"
block|,
literal|"AF23"
block|,
literal|"AF31"
block|,
literal|"AF32"
block|,
literal|"AF33"
block|,
literal|"AF41"
block|,
literal|"AF42"
block|,
literal|"AF43"
block|}
decl_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|validNameOptions
control|)
block|{
name|testValidOptionsWork
argument_list|(
name|DIFF_SERV
operator|+
name|opt
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestInvalidDiffServOptionDoesNotWork
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidDiffServOptionsDoesNotWork
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|invalidIntegerOptions
init|=
block|{
literal|"-2"
block|,
literal|"-1"
block|,
literal|"64"
block|,
literal|"65"
block|,
literal|"100"
block|,
literal|"255"
block|}
decl_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|invalidIntegerOptions
control|)
block|{
name|testInvalidOptionsDoNotWork
argument_list|(
name|DIFF_SERV
operator|+
name|opt
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|invalidNameOptions
init|=
block|{
literal|"hi"
block|,
literal|""
block|,
literal|"A"
block|,
literal|"AF"
block|,
literal|"-AF21"
block|}
decl_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|invalidNameOptions
control|)
block|{
name|testInvalidOptionsDoNotWork
argument_list|(
name|DIFF_SERV
operator|+
name|opt
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestValidTypeOfServiceOptionsWork
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testValidTypeOfServiceOptionsWork
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|validOptions
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|32
block|,
literal|100
block|,
literal|254
block|,
literal|255
block|}
decl_stmt|;
for|for
control|(
name|int
name|opt
range|:
name|validOptions
control|)
block|{
name|testValidOptionsWork
argument_list|(
name|TOS
operator|+
name|opt
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestInvalidTypeOfServiceOptionDoesNotWork
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidTypeOfServiceOptionDoesNotWork
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|invalidOptions
init|=
block|{
operator|-
literal|2
block|,
operator|-
literal|1
block|,
literal|256
block|,
literal|257
block|}
decl_stmt|;
for|for
control|(
name|int
name|opt
range|:
name|invalidOptions
control|)
block|{
name|testInvalidOptionsDoNotWork
argument_list|(
name|TOS
operator|+
name|opt
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestDiffServAndTypeOfServiceMutuallyExclusive
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDiffServAndTypeServiceMutuallyExclusive
parameter_list|()
block|{
name|String
name|msg
init|=
literal|"It should not be possible to set both Differentiated "
operator|+
literal|"Services and Type of Service options on the same connection "
operator|+
literal|"URI."
decl_stmt|;
name|testInvalidOptionsDoNotWork
argument_list|(
name|TOS
operator|+
literal|32
operator|+
name|DIFF_SERV
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|testInvalidOptionsDoNotWork
argument_list|(
name|DIFF_SERV
operator|+
literal|32
operator|+
name|TOS
operator|+
literal|32
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestBadVersionNumberDoesNotWork
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testBadVersionNumberDoesNotWork
parameter_list|()
throws|throws
name|Exception
block|{
name|testInvalidOptionsDoNotWork
argument_list|(
literal|"&minmumWireFormatVersion=65535"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestBadPropertyNameFails
parameter_list|()
block|{
name|initSharedCombos
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testBadPropertyNameFails
parameter_list|()
throws|throws
name|Exception
block|{
name|testInvalidOptionsDoNotWork
argument_list|(
literal|"&cheese=abc"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initSharedCombos
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prefix"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|""
block|}
argument_list|)
expr_stmt|;
comment|// TODO: Add more combinations.
name|addCombinationValues
argument_list|(
literal|"postfix"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"?tcpNoDelay=true&keepAlive=true&soLinger=0"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testValidOptionsWork
parameter_list|(
name|String
name|options
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|String
name|uri
init|=
name|prefix
operator|+
name|bindAddress
operator|+
name|postfix
operator|+
name|options
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting via: "
operator|+
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
argument_list|)
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpected
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Valid options '"
operator|+
name|options
operator|+
literal|"' on URI '"
operator|+
name|uri
operator|+
literal|"' should "
operator|+
literal|"not have caused an exception to be thrown. "
operator|+
name|msg
operator|+
literal|" Exception: "
operator|+
name|unexpected
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testInvalidOptionsDoNotWork
parameter_list|(
name|String
name|options
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|String
name|uri
init|=
name|prefix
operator|+
name|bindAddress
operator|+
name|postfix
operator|+
name|options
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting via: "
operator|+
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
argument_list|)
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid options '"
operator|+
name|options
operator|+
literal|"' on URI '"
operator|+
name|uri
operator|+
literal|"' should"
operator|+
literal|" have caused an exception to be thrown. "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{         }
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|bindAddress
operator|=
literal|"tcp://localhost:61616"
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
name|isPersistent
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|TransportUriTest
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

