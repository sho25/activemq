begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|XBeanSecurityWithGuestNoCredentialsOnlyTest
extends|extends
name|JmsTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XBeanSecurityWithGuestNoCredentialsOnlyTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|XBeanSecurityWithGuestNoCredentialsOnlyTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|void
name|testUserSendGoodPassword
parameter_list|()
throws|throws
name|JMSException
block|{
name|Message
name|m
init|=
name|doSend
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|m
operator|)
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|m
operator|.
name|getStringProperty
argument_list|(
literal|"JMSXUserID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserSendWrongPassword
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
name|doSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect exception on connect"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"cause as expected"
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SecurityException
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUserSendNoCredentials
parameter_list|()
throws|throws
name|JMSException
block|{
name|Message
name|m
init|=
name|doSend
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// note brokerService.useAuthenticatedPrincipalForJMXUserID=true for this
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|m
operator|)
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|m
operator|.
name|getStringProperty
argument_list|(
literal|"JMSXUserID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createBroker
argument_list|(
literal|"org/apache/activemq/security/jaas-broker-guest-no-creds-only.xml"
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading broker configuration from the classpath with URI: "
operator|+
name|uri
argument_list|)
expr_stmt|;
return|return
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"xbean:"
operator|+
name|uri
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Message
name|doSend
parameter_list|(
name|boolean
name|fail
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|adminConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|adminConnection
argument_list|)
expr_stmt|;
name|adminConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|adminSession
init|=
name|adminConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|adminSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|connections
operator|.
name|remove
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
try|try
block|{
name|sendMessages
argument_list|(
name|session
argument_list|,
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// If test is expected to fail, the cause must only be a
comment|// SecurityException
comment|// otherwise rethrow the exception
if|if
condition|(
operator|!
name|fail
operator|||
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SecurityException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|fail
condition|)
block|{
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|m
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveNoWait
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
comment|/**      * @see {@link CombinationTestSupport}      */
specifier|public
name|void
name|initCombosForTestUserSendGoodPassword
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"system"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"manager"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"test"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see {@link CombinationTestSupport}      */
specifier|public
name|void
name|initCombosForTestUserSendWrongPassword
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"system"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"wrongpassword"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GuestQueue"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestUserSendNoCredentials
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"system"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GuestQueue"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

