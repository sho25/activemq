begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|DispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|LastImageSubscriptionRecoveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|NoSubscriptionRecoveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SimpleDispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SubscriptionRecoveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
operator|.
name|InsertionCountList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|NonCachedMessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Topic is a destination that sends a copy of a message to every active  * Subscription registered.  */
end_comment

begin_class
specifier|public
class|class
name|Topic
extends|extends
name|BaseDestination
implements|implements
name|Task
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TopicMessageStore
name|topicStore
decl_stmt|;
specifier|protected
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Subscription
argument_list|>
name|consumers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|dispatchLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|DispatchPolicy
name|dispatchPolicy
init|=
operator|new
name|SimpleDispatchPolicy
argument_list|()
decl_stmt|;
specifier|private
name|SubscriptionRecoveryPolicy
name|subscriptionRecoveryPolicy
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|SubscriptionKey
argument_list|,
name|DurableTopicSubscription
argument_list|>
name|durableSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|SubscriptionKey
argument_list|,
name|DurableTopicSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TaskRunner
name|taskRunner
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
name|messagesWaitingForSpace
init|=
operator|new
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|sendMessagesWaitingForSpaceTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Topic
operator|.
name|this
operator|.
name|taskRunner
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
empty_stmt|;
block|}
decl_stmt|;
specifier|public
name|Topic
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|TopicMessageStore
name|store
parameter_list|,
name|DestinationStatistics
name|parentStats
parameter_list|,
name|TaskRunnerFactory
name|taskFactory
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|brokerService
argument_list|,
name|store
argument_list|,
name|destination
argument_list|,
name|parentStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|topicStore
operator|=
name|store
expr_stmt|;
comment|// set default subscription recovery policy
if|if
condition|(
name|AdvisorySupport
operator|.
name|isMasterBrokerAdvisoryTopic
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|subscriptionRecoveryPolicy
operator|=
operator|new
name|LastImageSubscriptionRecoveryPolicy
argument_list|()
expr_stmt|;
name|setAlwaysRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subscriptionRecoveryPolicy
operator|=
operator|new
name|NoSubscriptionRecoveryPolicy
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|taskRunner
operator|=
name|taskFactory
operator|.
name|createTaskRunner
argument_list|(
name|this
argument_list|,
literal|"Topic  "
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
comment|// AMQ-2586: Better to leave this stat at zero than to give the user
comment|// misleading metrics.
comment|// int messageCount = store.getMessageCount();
comment|// destinationStatistics.getMessages().setCount(messageCount);
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Subscription
argument_list|>
name|getConsumers
parameter_list|()
block|{
synchronized|synchronized
init|(
name|consumers
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|(
name|consumers
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|lock
parameter_list|(
name|MessageReference
name|node
parameter_list|,
name|LockOwner
name|sub
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|Subscription
name|sub
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isDurable
argument_list|()
condition|)
block|{
comment|// Do a retroactive recovery if needed.
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isRetroactive
argument_list|()
operator|||
name|isAlwaysRetroactive
argument_list|()
condition|)
block|{
comment|// synchronize with dispatch method so that no new messages are sent
comment|// while we are recovering a subscription to avoid out of order messages.
name|dispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|applyRecovery
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|consumers
init|)
block|{
if|if
condition|(
operator|!
name|consumers
operator|.
name|contains
argument_list|(
name|sub
argument_list|)
condition|)
block|{
name|sub
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|applyRecovery
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|addSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|applyRecovery
condition|)
block|{
name|subscriptionRecoveryPolicy
operator|.
name|recover
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|consumers
init|)
block|{
if|if
condition|(
operator|!
name|consumers
operator|.
name|contains
argument_list|(
name|sub
argument_list|)
condition|)
block|{
name|sub
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|super
operator|.
name|addSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|DurableTopicSubscription
name|dsub
init|=
operator|(
name|DurableTopicSubscription
operator|)
name|sub
decl_stmt|;
name|super
operator|.
name|addSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|sub
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|dsub
operator|.
name|isActive
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|boolean
name|hasSubscription
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|consumers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hasSubscription
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Subscription
name|currentSub
range|:
name|consumers
control|)
block|{
if|if
condition|(
name|currentSub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|DurableTopicSubscription
name|dcurrentSub
init|=
operator|(
name|DurableTopicSubscription
operator|)
name|currentSub
decl_stmt|;
if|if
condition|(
name|dcurrentSub
operator|.
name|getSubscriptionKey
argument_list|()
operator|.
name|equals
argument_list|(
name|dsub
operator|.
name|getSubscriptionKey
argument_list|()
argument_list|)
condition|)
block|{
name|hasSubscription
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasSubscription
condition|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|durableSubscribers
operator|.
name|put
argument_list|(
name|dsub
operator|.
name|getSubscriptionKey
argument_list|()
argument_list|,
name|dsub
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
name|long
name|lastDeliveredSequenceId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|super
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|,
name|lastDeliveredSequenceId
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|consumers
operator|.
name|remove
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
name|sub
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|SubscriptionKey
name|key
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|topicStore
operator|!=
literal|null
condition|)
block|{
name|topicStore
operator|.
name|deleteSubscription
argument_list|(
name|key
operator|.
name|clientId
argument_list|,
name|key
operator|.
name|subscriptionName
argument_list|)
expr_stmt|;
name|DurableTopicSubscription
name|removed
init|=
name|durableSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
comment|// deactivate and remove
name|removed
operator|.
name|deactivate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|remove
argument_list|(
name|removed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|activate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|DurableTopicSubscription
name|subscription
parameter_list|)
throws|throws
name|Exception
block|{
comment|// synchronize with dispatch method so that no new messages are sent
comment|// while we are recovering a subscription to avoid out of order messages.
name|dispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|topicStore
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Recover the durable subscription.
name|String
name|clientId
init|=
name|subscription
operator|.
name|getSubscriptionKey
argument_list|()
operator|.
name|getClientId
argument_list|()
decl_stmt|;
name|String
name|subscriptionName
init|=
name|subscription
operator|.
name|getSubscriptionKey
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
decl_stmt|;
name|String
name|selector
init|=
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSelector
argument_list|()
decl_stmt|;
name|SubscriptionInfo
name|info
init|=
name|topicStore
operator|.
name|lookupSubscription
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
comment|// Check to see if selector changed.
name|String
name|s1
init|=
name|info
operator|.
name|getSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|s1
operator|==
literal|null
operator|^
name|selector
operator|==
literal|null
operator|||
operator|(
name|s1
operator|!=
literal|null
operator|&&
operator|!
name|s1
operator|.
name|equals
argument_list|(
name|selector
argument_list|)
operator|)
condition|)
block|{
comment|// Need to delete the subscription
name|topicStore
operator|.
name|deleteSubscription
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|)
expr_stmt|;
name|info
operator|=
literal|null
expr_stmt|;
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|consumers
operator|.
name|remove
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|consumers
init|)
block|{
if|if
condition|(
operator|!
name|consumers
operator|.
name|contains
argument_list|(
name|subscription
argument_list|)
condition|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Do we need to create the subscription?
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|SubscriptionInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSubscriptionName
argument_list|(
name|subscriptionName
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
comment|// This destination is an actual destination id.
name|info
operator|.
name|setSubscribedDestination
argument_list|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
comment|// This destination might be a pattern
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
name|topicStore
operator|.
name|addSubsciption
argument_list|(
name|info
argument_list|,
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isRetroactive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|MessageEvaluationContext
name|msgContext
init|=
operator|new
name|NonCachedMessageEvaluationContext
argument_list|()
decl_stmt|;
name|msgContext
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|subscription
operator|.
name|isRecoveryRequired
argument_list|()
condition|)
block|{
name|topicStore
operator|.
name|recoverSubscription
argument_list|(
name|clientId
argument_list|,
name|subscriptionName
argument_list|,
operator|new
name|MessageRecoveryListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|message
operator|.
name|setRegionDestination
argument_list|(
name|Topic
operator|.
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|msgContext
operator|.
name|setMessageReference
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|subscription
operator|.
name|matches
argument_list|(
name|message
argument_list|,
name|msgContext
argument_list|)
condition|)
block|{
name|subscription
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to recover this message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|recoverMessageReference
parameter_list|(
name|MessageId
name|messageReference
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should not be called."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSpace
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDuplicate
parameter_list|(
name|MessageId
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deactivate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DurableTopicSubscription
name|sub
parameter_list|,
name|List
argument_list|<
name|MessageReference
argument_list|>
name|dispatched
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|consumers
operator|.
name|remove
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|dispatched
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|recoverRetroactiveMessages
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|subscription
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isRetroactive
argument_list|()
condition|)
block|{
name|subscriptionRecoveryPolicy
operator|.
name|recover
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ConnectionContext
name|context
init|=
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
decl_stmt|;
specifier|final
name|ProducerInfo
name|producerInfo
init|=
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|producerExchange
operator|.
name|incrementSend
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|sendProducerAck
init|=
operator|!
name|message
operator|.
name|isResponseRequired
argument_list|()
operator|&&
name|producerInfo
operator|.
name|getWindowSize
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
decl_stmt|;
comment|// There is delay between the client sending it and it arriving at the
comment|// destination.. it may have expired.
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getDestinationStatistics
argument_list|()
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|sendProducerAck
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|memoryUsage
operator|.
name|isFull
argument_list|()
condition|)
block|{
name|isFull
argument_list|(
name|context
argument_list|,
name|memoryUsage
argument_list|)
expr_stmt|;
name|fastProducer
argument_list|(
name|context
argument_list|,
name|producerInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|isProducerFlowControl
argument_list|()
operator|&&
name|context
operator|.
name|isProducerFlowControl
argument_list|()
condition|)
block|{
if|if
condition|(
name|warnOnProducerFlowControl
condition|)
block|{
name|warnOnProducerFlowControl
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|memoryUsage
operator|+
literal|", Usage Manager memory limit reached for "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|". Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|isNetworkConnection
argument_list|()
operator|&&
name|systemUsage
operator|.
name|isSendFailIfNoSpace
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|javax
operator|.
name|jms
operator|.
name|ResourceAllocationException
argument_list|(
literal|"Usage Manager memory limit ("
operator|+
name|memoryUsage
operator|.
name|getLimit
argument_list|()
operator|+
literal|") reached. Rejecting send for producer ("
operator|+
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
argument_list|)
throw|;
block|}
comment|// We can avoid blocking due to low usage if the producer is sending a sync message or
comment|// if it is using a producer window
if|if
condition|(
name|producerInfo
operator|.
name|getWindowSize
argument_list|()
operator|>
literal|0
operator|||
name|message
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|messagesWaitingForSpace
init|)
block|{
name|messagesWaitingForSpace
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// While waiting for space to free up... the
comment|// message may have expired.
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getDestinationStatistics
argument_list|()
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doMessageSend
argument_list|(
name|producerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sendProducerAck
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Response
name|response
init|=
operator|new
name|Response
argument_list|()
decl_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|message
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sendProducerAck
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|response
init|=
operator|new
name|ExceptionResponse
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|message
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|registerCallbackForNotFullNotification
argument_list|()
expr_stmt|;
name|context
operator|.
name|setDontSendReponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// Producer flow control cannot be used, so we have do the flow control
comment|// at the broker by blocking this thread until there is space available.
if|if
condition|(
name|memoryUsage
operator|.
name|isFull
argument_list|()
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|memoryUsage
operator|.
name|waitForSpace
argument_list|(
literal|1000
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getStopping
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Connection closed, send aborted."
argument_list|)
throw|;
block|}
if|if
condition|(
name|count
operator|>
literal|2
operator|&&
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|int
name|size
init|=
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Waiting for space to send  transacted message - transaction elements = "
operator|+
name|size
operator|+
literal|" need more space to commit. Message = "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|waitForSpace
argument_list|(
name|context
argument_list|,
name|producerExchange
argument_list|,
name|memoryUsage
argument_list|,
literal|"Usage Manager Memory Usage limit reached. Stopping producer ("
operator|+
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The usage manager could have delayed us by the time
comment|// we unblock the message could have expired..
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|getDestinationStatistics
argument_list|()
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expired message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
block|}
name|doMessageSend
argument_list|(
name|producerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|messageDelivered
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|sendProducerAck
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * do send the message - this needs to be synchronized to ensure messages      * are stored AND dispatched in the right order      *      * @param producerExchange      * @param message      * @throws IOException      * @throws Exception      */
specifier|synchronized
name|void
name|doMessageSend
parameter_list|(
specifier|final
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
specifier|final
name|ConnectionContext
name|context
init|=
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
decl_stmt|;
name|message
operator|.
name|setRegionDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|setBrokerSequenceId
argument_list|(
name|getDestinationSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|topicStore
operator|!=
literal|null
operator|&&
name|message
operator|.
name|isPersistent
argument_list|()
operator|&&
operator|!
name|canOptimizeOutPersistence
argument_list|()
condition|)
block|{
if|if
condition|(
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|isFull
argument_list|(
name|getStoreUsageHighWaterMark
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|logMessage
init|=
literal|"Persistent store is Full, "
operator|+
name|getStoreUsageHighWaterMark
argument_list|()
operator|+
literal|"% of "
operator|+
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|+
literal|". Stopping producer ("
operator|+
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|isNetworkConnection
argument_list|()
operator|&&
name|systemUsage
operator|.
name|isSendFailIfNoSpace
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|javax
operator|.
name|jms
operator|.
name|ResourceAllocationException
argument_list|(
name|logMessage
argument_list|)
throw|;
block|}
name|waitForSpace
argument_list|(
name|context
argument_list|,
name|producerExchange
argument_list|,
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
argument_list|,
name|getStoreUsageHighWaterMark
argument_list|()
argument_list|,
name|logMessage
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|topicStore
operator|.
name|asyncAddTopicMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
name|isOptimizeStorage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// It could take while before we receive the commit
comment|// operation.. by that time the message could have
comment|// expired..
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|getDestinationStatistics
argument_list|()
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
name|dispatch
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|dispatch
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
try|try
block|{
name|result
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// ignore - the task has been cancelled if the message
comment|// has already been deleted
block|}
block|}
block|}
specifier|private
name|boolean
name|canOptimizeOutPersistence
parameter_list|()
block|{
return|return
name|durableSubscribers
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Topic: destination="
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|", subscriptions="
operator|+
name|consumers
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
specifier|final
name|MessageAck
name|ack
parameter_list|,
specifier|final
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|topicStore
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
name|DurableTopicSubscription
name|dsub
init|=
operator|(
name|DurableTopicSubscription
operator|)
name|sub
decl_stmt|;
name|SubscriptionKey
name|key
init|=
name|dsub
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
name|topicStore
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|key
operator|.
name|getClientId
argument_list|()
argument_list|,
name|key
operator|.
name|getSubscriptionName
argument_list|()
argument_list|,
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|convertToNonRangedAck
argument_list|(
name|ack
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|messageConsumed
argument_list|(
name|context
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|gc
parameter_list|()
block|{     }
specifier|public
name|Message
name|loadMessage
parameter_list|(
name|MessageId
name|messageId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|topicStore
operator|!=
literal|null
condition|?
name|topicStore
operator|.
name|getMessage
argument_list|(
name|messageId
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|subscriptionRecoveryPolicy
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|memoryUsage
operator|!=
literal|null
condition|)
block|{
name|memoryUsage
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getExpireMessagesPeriod
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scheduler
operator|.
name|schedualPeriodically
argument_list|(
name|expireMessagesTask
argument_list|,
name|getExpireMessagesPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|taskRunner
operator|!=
literal|null
condition|)
block|{
name|taskRunner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|subscriptionRecoveryPolicy
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|memoryUsage
operator|!=
literal|null
condition|)
block|{
name|memoryUsage
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|topicStore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|topicStore
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|scheduler
operator|.
name|cancel
argument_list|(
name|expireMessagesTask
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
index|[]
name|browse
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Message
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|doBrowse
argument_list|(
name|result
argument_list|,
name|getMaxBrowsePageSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|Message
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|doBrowse
parameter_list|(
specifier|final
name|List
argument_list|<
name|Message
argument_list|>
name|browseList
parameter_list|,
specifier|final
name|int
name|max
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|topicStore
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Message
argument_list|>
name|toExpire
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|topicStore
operator|.
name|recover
argument_list|(
operator|new
name|MessageRecoveryListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|toExpire
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|browseList
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|recoverMessageReference
parameter_list|(
name|MessageId
name|messageReference
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSpace
parameter_list|()
block|{
return|return
name|browseList
operator|.
name|size
argument_list|()
operator|<
name|max
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDuplicate
parameter_list|(
name|MessageId
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ConnectionContext
name|connectionContext
init|=
name|createConnectionContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Message
name|message
range|:
name|toExpire
control|)
block|{
for|for
control|(
name|DurableTopicSubscription
name|sub
range|:
name|durableSubscribers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|sub
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|messageExpired
argument_list|(
name|connectionContext
argument_list|,
name|sub
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Message
index|[]
name|msgs
init|=
name|subscriptionRecoveryPolicy
operator|.
name|browse
argument_list|(
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|msgs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|msgs
operator|.
name|length
operator|&&
name|browseList
operator|.
name|size
argument_list|()
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|browseList
operator|.
name|add
argument_list|(
name|msgs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to browse Topic: "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
synchronized|synchronized
init|(
name|messagesWaitingForSpace
init|)
block|{
while|while
condition|(
operator|!
name|memoryUsage
operator|.
name|isFull
argument_list|()
operator|&&
operator|!
name|messagesWaitingForSpace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Runnable
name|op
init|=
name|messagesWaitingForSpace
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|op
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messagesWaitingForSpace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|registerCallbackForNotFullNotification
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|registerCallbackForNotFullNotification
parameter_list|()
block|{
comment|// If the usage manager is not full, then the task will not
comment|// get called..
if|if
condition|(
operator|!
name|memoryUsage
operator|.
name|notifyCallbackWhenNotFull
argument_list|(
name|sendMessagesWaitingForSpaceTask
argument_list|)
condition|)
block|{
comment|// so call it directly here.
name|sendMessagesWaitingForSpaceTask
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|DispatchPolicy
name|getDispatchPolicy
parameter_list|()
block|{
return|return
name|dispatchPolicy
return|;
block|}
specifier|public
name|void
name|setDispatchPolicy
parameter_list|(
name|DispatchPolicy
name|dispatchPolicy
parameter_list|)
block|{
name|this
operator|.
name|dispatchPolicy
operator|=
name|dispatchPolicy
expr_stmt|;
block|}
specifier|public
name|SubscriptionRecoveryPolicy
name|getSubscriptionRecoveryPolicy
parameter_list|()
block|{
return|return
name|subscriptionRecoveryPolicy
return|;
block|}
specifier|public
name|void
name|setSubscriptionRecoveryPolicy
parameter_list|(
name|SubscriptionRecoveryPolicy
name|subscriptionRecoveryPolicy
parameter_list|)
block|{
name|this
operator|.
name|subscriptionRecoveryPolicy
operator|=
name|subscriptionRecoveryPolicy
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|wakeup
parameter_list|()
block|{     }
specifier|protected
name|void
name|dispatch
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
comment|// AMQ-2586: Better to leave this stat at zero than to give the user
comment|// misleading metrics.
comment|// destinationStatistics.getMessages().increment();
name|destinationStatistics
operator|.
name|getEnqueues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|MessageEvaluationContext
name|msgContext
init|=
literal|null
decl_stmt|;
name|dispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|subscriptionRecoveryPolicy
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|consumers
init|)
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onMessageWithNoConsumers
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|msgContext
operator|=
name|context
operator|.
name|getMessageEvaluationContext
argument_list|()
expr_stmt|;
name|msgContext
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|msgContext
operator|.
name|setMessageReference
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dispatchPolicy
operator|.
name|dispatch
argument_list|(
name|message
argument_list|,
name|msgContext
argument_list|,
name|consumers
argument_list|)
condition|)
block|{
name|onMessageWithNoConsumers
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|msgContext
operator|!=
literal|null
condition|)
block|{
name|msgContext
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
name|Runnable
name|expireMessagesTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|Message
argument_list|>
name|browsedMessages
init|=
operator|new
name|InsertionCountList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|doBrowse
argument_list|(
name|browsedMessages
argument_list|,
name|getMaxExpirePageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|messageExpired
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|subs
parameter_list|,
name|MessageReference
name|reference
parameter_list|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|reference
argument_list|,
name|subs
argument_list|)
expr_stmt|;
comment|// AMQ-2586: Better to leave this stat at zero than to give the user
comment|// misleading metrics.
comment|// destinationStatistics.getMessages().decrement();
name|destinationStatistics
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageID
argument_list|(
name|reference
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|subs
operator|instanceof
name|DurableTopicSubscription
condition|)
block|{
operator|(
operator|(
name|DurableTopicSubscription
operator|)
name|subs
operator|)
operator|.
name|removePending
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
name|acknowledge
argument_list|(
name|context
argument_list|,
name|subs
argument_list|,
name|ack
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to remove expired Message from the store "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Logger
name|getLog
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
specifier|protected
name|boolean
name|isOptimizeStorage
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isDoOptimzeMessageStorage
argument_list|()
operator|&&
name|durableSubscribers
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|DurableTopicSubscription
name|s
range|:
name|durableSubscribers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isActive
argument_list|()
operator|==
literal|false
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|s
operator|.
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|s
operator|.
name|isSlowConsumer
argument_list|()
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|s
operator|.
name|getInFlightUsage
argument_list|()
operator|>
name|getOptimizeMessageStoreInFlightLimit
argument_list|()
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * force a reread of the store - after transaction recovery completion      */
annotation|@
name|Override
specifier|public
name|void
name|clearPendingMessages
parameter_list|()
block|{
name|dispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|DurableTopicSubscription
name|durableTopicSubscription
range|:
name|durableSubscribers
operator|.
name|values
argument_list|()
control|)
block|{
name|clearPendingAndDispatch
argument_list|(
name|durableTopicSubscription
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clearPendingAndDispatch
parameter_list|(
name|DurableTopicSubscription
name|durableTopicSubscription
parameter_list|)
block|{
synchronized|synchronized
init|(
name|durableTopicSubscription
operator|.
name|pendingLock
init|)
block|{
name|durableTopicSubscription
operator|.
name|pending
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|durableTopicSubscription
operator|.
name|dispatchPending
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"After clear of pending, failed to dispatch to: "
operator|+
name|durableTopicSubscription
operator|+
literal|", for :"
operator|+
name|destination
operator|+
literal|", pending: "
operator|+
name|durableTopicSubscription
operator|.
name|pending
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Map
argument_list|<
name|SubscriptionKey
argument_list|,
name|DurableTopicSubscription
argument_list|>
name|getDurableTopicSubs
parameter_list|()
block|{
return|return
name|durableSubscribers
return|;
block|}
block|}
end_class

end_unit

