begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DiscoveryRegistryServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HTTPDiscoveryAgent
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|maxKeepAge
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|// 1 hour.
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|serviceGroups
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doPut
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|group
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|String
name|service
init|=
name|req
operator|.
name|getHeader
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering: group="
operator|+
name|group
operator|+
literal|", service="
operator|+
name|service
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|services
init|=
name|getServiceGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|services
operator|.
name|put
argument_list|(
name|service
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getServiceGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rc
init|=
name|serviceGroups
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|serviceGroups
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|long
name|freshness
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
name|String
name|p
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"freshness"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|freshness
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|group
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"group="
operator|+
name|group
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|services
init|=
name|getServiceGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
name|resp
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|dropTime
init|=
name|now
operator|-
name|maxKeepAge
decl_stmt|;
name|long
name|minimumTime
init|=
name|now
operator|-
name|freshness
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dropList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|services
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|>
name|minimumTime
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|<
name|dropTime
condition|)
block|{
name|dropList
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We might as well get rid of the really old entries.
for|for
control|(
name|String
name|service
range|:
name|dropList
control|)
block|{
name|services
operator|.
name|remove
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|resp
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Error occured: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|group
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|String
name|service
init|=
name|req
operator|.
name|getHeader
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unregistering: group="
operator|+
name|group
operator|+
literal|", service="
operator|+
name|service
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|services
init|=
name|getServiceGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|services
operator|.
name|remove
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

