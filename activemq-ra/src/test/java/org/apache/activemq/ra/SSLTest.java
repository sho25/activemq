begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSslConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslBrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|SslTransportFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|BootstrapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|UnavailableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|XATerminator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|endpoint
operator|.
name|MessageEndpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|endpoint
operator|.
name|MessageEndpointFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|Work
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|SSLTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_TYPE
init|=
literal|"jks"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_KEYSTORE
init|=
literal|"src/test/resources/server.keystore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUST_KEYSTORE
init|=
literal|"src/test/resources/client.keystore"
decl_stmt|;
name|long
name|txGenerator
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BIND_ADDRESS
init|=
literal|"ssl://0.0.0.0:61616"
decl_stmt|;
specifier|private
name|SslBrokerService
name|broker
decl_stmt|;
specifier|private
name|TransportConnector
name|connector
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|createAndStartBroker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createAndStartBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|SslBrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"BROKER"
argument_list|)
expr_stmt|;
name|KeyManager
index|[]
name|km
init|=
name|getKeyManager
argument_list|()
decl_stmt|;
name|TrustManager
index|[]
name|tm
init|=
name|getTrustManager
argument_list|()
decl_stmt|;
name|connector
operator|=
name|broker
operator|.
name|addSslConnector
argument_list|(
name|BIND_ADDRESS
argument_list|,
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// for client side
name|SslTransportFactory
name|sslFactory
init|=
operator|new
name|SslTransportFactory
argument_list|()
decl_stmt|;
name|SslContext
name|ctx
init|=
operator|new
name|SslContext
argument_list|(
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SslContext
operator|.
name|setCurrentSslContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|TransportFactory
operator|.
name|registerTransportFactory
argument_list|(
literal|"ssl"
argument_list|,
name|sslFactory
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|StubBootstrapContext
implements|implements
name|BootstrapContext
block|{
specifier|public
name|WorkManager
name|getWorkManager
parameter_list|()
block|{
return|return
operator|new
name|WorkManager
argument_list|()
block|{
specifier|public
name|void
name|doWork
parameter_list|(
name|Work
name|work
parameter_list|)
throws|throws
name|WorkException
block|{
operator|new
name|Thread
argument_list|(
name|work
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doWork
parameter_list|(
name|Work
name|work
parameter_list|,
name|long
name|arg1
parameter_list|,
name|ExecutionContext
name|arg2
parameter_list|,
name|WorkListener
name|arg3
parameter_list|)
throws|throws
name|WorkException
block|{
operator|new
name|Thread
argument_list|(
name|work
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|startWork
parameter_list|(
name|Work
name|work
parameter_list|)
throws|throws
name|WorkException
block|{
operator|new
name|Thread
argument_list|(
name|work
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|long
name|startWork
parameter_list|(
name|Work
name|work
parameter_list|,
name|long
name|arg1
parameter_list|,
name|ExecutionContext
name|arg2
parameter_list|,
name|WorkListener
name|arg3
parameter_list|)
throws|throws
name|WorkException
block|{
operator|new
name|Thread
argument_list|(
name|work
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|scheduleWork
parameter_list|(
name|Work
name|work
parameter_list|)
throws|throws
name|WorkException
block|{
operator|new
name|Thread
argument_list|(
name|work
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|scheduleWork
parameter_list|(
name|Work
name|work
parameter_list|,
name|long
name|arg1
parameter_list|,
name|ExecutionContext
name|arg2
parameter_list|,
name|WorkListener
name|arg3
parameter_list|)
throws|throws
name|WorkException
block|{
operator|new
name|Thread
argument_list|(
name|work
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|XATerminator
name|getXATerminator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Timer
name|createTimer
parameter_list|()
throws|throws
name|UnavailableException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
class|class
name|StubMessageEndpoint
implements|implements
name|MessageEndpoint
implements|,
name|MessageListener
block|{
specifier|public
name|int
name|messageCount
decl_stmt|;
specifier|public
name|XAResource
name|xaresource
decl_stmt|;
specifier|public
name|Xid
name|xid
decl_stmt|;
specifier|public
name|void
name|beforeDelivery
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|ResourceException
block|{
try|try
block|{
if|if
condition|(
name|xid
operator|==
literal|null
condition|)
block|{
name|xid
operator|=
name|createXid
argument_list|()
expr_stmt|;
block|}
name|xaresource
operator|.
name|start
argument_list|(
name|xid
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|afterDelivery
parameter_list|()
throws|throws
name|ResourceException
block|{
try|try
block|{
name|xaresource
operator|.
name|end
argument_list|(
name|xid
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|xaresource
operator|.
name|prepare
argument_list|(
name|xid
argument_list|)
expr_stmt|;
name|xaresource
operator|.
name|commit
argument_list|(
name|xid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|release
parameter_list|()
block|{         }
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|messageCount
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMessageDeliveryUsingSSLTruststoreOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|getKeyManager
argument_list|()
argument_list|,
name|getTrustManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|connector
argument_list|)
expr_stmt|;
name|ActiveMQSslConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQSslConnectionFactory
argument_list|(
literal|"ssl://localhost:61616"
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|advisory
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveMQResourceAdapter
name|adapter
init|=
operator|new
name|ActiveMQResourceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setServerUrl
argument_list|(
literal|"ssl://localhost:61616"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setQueuePrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|start
argument_list|(
operator|new
name|StubBootstrapContext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|messageDelivered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StubMessageEndpoint
name|endpoint
init|=
operator|new
name|StubMessageEndpoint
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|super
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|messageDelivered
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|ActiveMQActivationSpec
name|activationSpec
init|=
operator|new
name|ActiveMQActivationSpec
argument_list|()
decl_stmt|;
name|activationSpec
operator|.
name|setDestinationType
argument_list|(
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setDestination
argument_list|(
literal|"TEST"
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setResourceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|MessageEndpointFactory
name|messageEndpointFactory
init|=
operator|new
name|MessageEndpointFactory
argument_list|()
block|{
specifier|public
name|MessageEndpoint
name|createEndpoint
parameter_list|(
name|XAResource
name|resource
parameter_list|)
throws|throws
name|UnavailableException
block|{
name|endpoint
operator|.
name|xaresource
operator|=
name|resource
expr_stmt|;
return|return
name|endpoint
return|;
block|}
specifier|public
name|boolean
name|isDeliveryTransacted
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|// Activate an Endpoint
name|adapter
operator|.
name|endpointActivation
argument_list|(
name|messageEndpointFactory
argument_list|,
name|activationSpec
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|msg
init|=
operator|(
name|ActiveMQMessage
operator|)
name|advisory
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Prefetch size hasn't been set"
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|ConsumerInfo
operator|)
name|msg
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Consumer hasn't been created"
argument_list|)
expr_stmt|;
block|}
comment|// Send the broker a message to that endpoint
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hello!"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Wait for the message to be delivered.
name|assertTrue
argument_list|(
name|messageDelivered
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shut the Endpoint down.
name|adapter
operator|.
name|endpointDeactivation
argument_list|(
name|messageEndpointFactory
argument_list|,
name|activationSpec
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMessageDeliveryUsingSSLTruststoreAndKeystore
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|getKeyManager
argument_list|()
argument_list|,
name|getTrustManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|connector
argument_list|)
expr_stmt|;
name|ActiveMQSslConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQSslConnectionFactory
argument_list|(
literal|"ssl://localhost:61616"
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setKeyStore
argument_list|(
literal|"client.keystore"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setKeyStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|advisory
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveMQResourceAdapter
name|adapter
init|=
operator|new
name|ActiveMQResourceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setServerUrl
argument_list|(
literal|"ssl://localhost:61616"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setKeyStore
argument_list|(
literal|"client.keystore"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setKeyStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setQueuePrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|start
argument_list|(
operator|new
name|StubBootstrapContext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|messageDelivered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StubMessageEndpoint
name|endpoint
init|=
operator|new
name|StubMessageEndpoint
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|super
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|messageDelivered
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|ActiveMQActivationSpec
name|activationSpec
init|=
operator|new
name|ActiveMQActivationSpec
argument_list|()
decl_stmt|;
name|activationSpec
operator|.
name|setDestinationType
argument_list|(
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setDestination
argument_list|(
literal|"TEST"
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setResourceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|MessageEndpointFactory
name|messageEndpointFactory
init|=
operator|new
name|MessageEndpointFactory
argument_list|()
block|{
specifier|public
name|MessageEndpoint
name|createEndpoint
parameter_list|(
name|XAResource
name|resource
parameter_list|)
throws|throws
name|UnavailableException
block|{
name|endpoint
operator|.
name|xaresource
operator|=
name|resource
expr_stmt|;
return|return
name|endpoint
return|;
block|}
specifier|public
name|boolean
name|isDeliveryTransacted
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|// Activate an Endpoint
name|adapter
operator|.
name|endpointActivation
argument_list|(
name|messageEndpointFactory
argument_list|,
name|activationSpec
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|msg
init|=
operator|(
name|ActiveMQMessage
operator|)
name|advisory
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Prefetch size hasn't been set"
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|ConsumerInfo
operator|)
name|msg
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Consumer hasn't been created"
argument_list|)
expr_stmt|;
block|}
comment|// Send the broker a message to that endpoint
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hello!"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Wait for the message to be delivered.
name|assertTrue
argument_list|(
name|messageDelivered
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shut the Endpoint down.
name|adapter
operator|.
name|endpointDeactivation
argument_list|(
name|messageEndpointFactory
argument_list|,
name|activationSpec
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMessageDeliveryUsingSSLTruststoreAndKeystoreOverrides
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|getKeyManager
argument_list|()
argument_list|,
name|getTrustManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|connector
argument_list|)
expr_stmt|;
name|ActiveMQSslConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQSslConnectionFactory
argument_list|(
literal|"ssl://localhost:61616"
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setKeyStore
argument_list|(
literal|"client.keystore"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setKeyStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|advisory
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveMQResourceAdapter
name|adapter
init|=
operator|new
name|ActiveMQResourceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setServerUrl
argument_list|(
literal|"ssl://localhost:61616"
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setQueuePrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|start
argument_list|(
operator|new
name|StubBootstrapContext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|messageDelivered
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StubMessageEndpoint
name|endpoint
init|=
operator|new
name|StubMessageEndpoint
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|super
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|messageDelivered
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|ActiveMQActivationSpec
name|activationSpec
init|=
operator|new
name|ActiveMQActivationSpec
argument_list|()
decl_stmt|;
name|activationSpec
operator|.
name|setDestinationType
argument_list|(
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setDestination
argument_list|(
literal|"TEST"
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setResourceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setKeyStore
argument_list|(
literal|"client.keystore"
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|setKeyStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|activationSpec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|MessageEndpointFactory
name|messageEndpointFactory
init|=
operator|new
name|MessageEndpointFactory
argument_list|()
block|{
specifier|public
name|MessageEndpoint
name|createEndpoint
parameter_list|(
name|XAResource
name|resource
parameter_list|)
throws|throws
name|UnavailableException
block|{
name|endpoint
operator|.
name|xaresource
operator|=
name|resource
expr_stmt|;
return|return
name|endpoint
return|;
block|}
specifier|public
name|boolean
name|isDeliveryTransacted
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|// Activate an Endpoint
name|adapter
operator|.
name|endpointActivation
argument_list|(
name|messageEndpointFactory
argument_list|,
name|activationSpec
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|msg
init|=
operator|(
name|ActiveMQMessage
operator|)
name|advisory
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Prefetch size hasn't been set"
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|ConsumerInfo
operator|)
name|msg
operator|.
name|getDataStructure
argument_list|()
operator|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Consumer hasn't been created"
argument_list|)
expr_stmt|;
block|}
comment|// Send the broker a message to that endpoint
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hello!"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Wait for the message to be delivered.
name|assertTrue
argument_list|(
name|messageDelivered
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shut the Endpoint down.
name|adapter
operator|.
name|endpointDeactivation
argument_list|(
name|messageEndpointFactory
argument_list|,
name|activationSpec
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Xid
name|createXid
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|os
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
operator|++
name|txGenerator
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|bs
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|Xid
argument_list|()
block|{
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
literal|86
return|;
block|}
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|TrustManager
index|[]
name|getTrustManager
parameter_list|()
throws|throws
name|Exception
block|{
name|TrustManager
index|[]
name|trustStoreManagers
init|=
literal|null
decl_stmt|;
name|KeyStore
name|trustedCertStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KEYSTORE_TYPE
argument_list|)
decl_stmt|;
name|trustedCertStore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|TRUST_KEYSTORE
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|trustedCertStore
argument_list|)
expr_stmt|;
name|trustStoreManagers
operator|=
name|tmf
operator|.
name|getTrustManagers
argument_list|()
expr_stmt|;
return|return
name|trustStoreManagers
return|;
block|}
specifier|public
specifier|static
name|KeyManager
index|[]
name|getKeyManager
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KEYSTORE_TYPE
argument_list|)
decl_stmt|;
name|KeyManager
index|[]
name|keystoreManagers
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|sslCert
init|=
name|loadClientCredential
argument_list|(
name|SERVER_KEYSTORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslCert
operator|!=
literal|null
operator|&&
name|sslCert
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|sslCert
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|bin
argument_list|,
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|keystoreManagers
operator|=
name|kmf
operator|.
name|getKeyManagers
argument_list|()
expr_stmt|;
block|}
return|return
name|keystoreManagers
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|loadClientCredential
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|int
name|i
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|void
name|makeSSLConnection
parameter_list|(
name|SSLContext
name|context
parameter_list|,
name|String
name|enabledSuites
index|[]
parameter_list|,
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
throws|,
name|UnknownHostException
throws|,
name|SocketException
block|{
name|SSLSocket
name|sslSocket
init|=
operator|(
name|SSLSocket
operator|)
name|context
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|createSocket
argument_list|(
literal|"localhost"
argument_list|,
name|connector
operator|.
name|getUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enabledSuites
operator|!=
literal|null
condition|)
block|{
name|sslSocket
operator|.
name|setEnabledCipherSuites
argument_list|(
name|enabledSuites
argument_list|)
expr_stmt|;
block|}
name|sslSocket
operator|.
name|setSoTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|SSLSession
name|session
init|=
name|sslSocket
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|sslSocket
operator|.
name|startHandshake
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

