begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
package|;
end_package

begin_comment
comment|/**  * Used to keep track of how much of something is being used so that a  * productive working set usage can be controlled. Main use case is manage  * memory usage.  *   * @org.apache.xbean.XBean  *   */
end_comment

begin_class
specifier|public
class|class
name|MemoryUsage
extends|extends
name|Usage
argument_list|<
name|MemoryUsage
argument_list|>
block|{
specifier|private
name|long
name|usage
decl_stmt|;
specifier|public
name|MemoryUsage
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the memory manager linked to a parent. When the memory manager is      * linked to a parent then when usage increased or decreased, the parent's      * usage is also increased or decreased.      *       * @param parent      */
specifier|public
name|MemoryUsage
parameter_list|(
name|MemoryUsage
name|parent
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MemoryUsage
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MemoryUsage
parameter_list|(
name|MemoryUsage
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MemoryUsage
parameter_list|(
name|MemoryUsage
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|float
name|portion
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|portion
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws InterruptedException      */
specifier|public
name|void
name|waitForSpace
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|waitForSpace
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|usageMutex
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|percentUsage
operator|>=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|usageMutex
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param timeout      * @throws InterruptedException      * @return true if space      */
specifier|public
name|boolean
name|waitForSpace
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|waitForSpace
argument_list|(
name|timeout
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
synchronized|synchronized
init|(
name|usageMutex
init|)
block|{
if|if
condition|(
name|percentUsage
operator|>=
literal|100
condition|)
block|{
name|usageMutex
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
name|percentUsage
operator|<
literal|100
return|;
block|}
block|}
specifier|public
name|boolean
name|isFull
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|isFull
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
synchronized|synchronized
init|(
name|usageMutex
init|)
block|{
return|return
name|percentUsage
operator|>=
literal|100
return|;
block|}
block|}
comment|/**      * Tries to increase the usage by value amount but blocks if this object is      * currently full.      *       * @param value      * @throws InterruptedException      */
specifier|public
name|void
name|enqueueUsage
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|waitForSpace
argument_list|()
expr_stmt|;
name|increaseUsage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Increases the usage by the value amount.      *       * @param value      */
specifier|public
name|void
name|increaseUsage
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|percentUsage
decl_stmt|;
synchronized|synchronized
init|(
name|usageMutex
init|)
block|{
name|usage
operator|+=
name|value
expr_stmt|;
name|percentUsage
operator|=
name|caclPercentUsage
argument_list|()
expr_stmt|;
block|}
name|setPercentUsage
argument_list|(
name|percentUsage
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|MemoryUsage
operator|)
name|parent
operator|)
operator|.
name|increaseUsage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Decreases the usage by the value amount.      *       * @param value      */
specifier|public
name|void
name|decreaseUsage
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|percentUsage
decl_stmt|;
synchronized|synchronized
init|(
name|usageMutex
init|)
block|{
name|usage
operator|-=
name|value
expr_stmt|;
name|percentUsage
operator|=
name|caclPercentUsage
argument_list|()
expr_stmt|;
block|}
name|setPercentUsage
argument_list|(
name|percentUsage
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|decreaseUsage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|retrieveUsage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
specifier|public
name|long
name|getUsage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
specifier|public
name|void
name|setUsage
parameter_list|(
name|long
name|usage
parameter_list|)
block|{
name|this
operator|.
name|usage
operator|=
name|usage
expr_stmt|;
block|}
block|}
end_class

end_unit

