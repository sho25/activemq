begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|function
operator|.
name|FilterFunction
import|;
end_import

begin_comment
comment|/**  * Function call expression for use in selector expressions.  Includes an extensible interface to allow custom  * functions to be added without changes to the core.  *<p/>  * Use registerFunction() to register new function implementations for use in selectors.  */
end_comment

begin_class
specifier|public
class|class
name|FunctionCallExpression
implements|implements
name|Expression
block|{
specifier|protected
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|functionRegistration
argument_list|>
name|functionRegistry
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|functionName
decl_stmt|;
specifier|protected
name|java
operator|.
name|util
operator|.
name|ArrayList
name|arguments
decl_stmt|;
specifier|protected
name|FilterFunction
name|filterFunc
decl_stmt|;
static|static
block|{
comment|// Register the built-in functions.  It would be nice to just have each function class register
comment|//  itself, but that only works when the classes are loaded, which may be never.
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|function
operator|.
name|BuiltinFunctionRegistry
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
comment|/**      * Register the function with the specified name.      *      * @param    name - the function name, as used in selector expressions.  Case Sensitive.      * @param    impl - class which implements the function interface, including parse-time and evaluation-time      * operations.      * @return true - if the function is successfully registered; false - if a function with the same name is      * already registered.      */
specifier|public
specifier|static
name|boolean
name|registerFunction
parameter_list|(
name|String
name|name
parameter_list|,
name|FilterFunction
name|impl
parameter_list|)
block|{
name|boolean
name|result
decl_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|functionRegistry
init|)
block|{
if|if
condition|(
name|functionRegistry
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
name|result
operator|=
literal|false
expr_stmt|;
else|else
name|functionRegistry
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|functionRegistration
argument_list|(
name|impl
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Remove the registration of the function with the specified name.      *<p/>      * Note that parsed expressions using this function will still access its implementation after this call.      *      * @param    name - name of the function to remove.      */
specifier|public
specifier|static
name|void
name|deregisterFunction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|functionRegistry
init|)
block|{
name|functionRegistry
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Constructs a function call expression with the named function and argument list.      *<p/>      * Use createFunctionCall() to create instances.      *      * @exception invalidFunctionExpressionException - if the function name is not valid.      */
specifier|protected
name|FunctionCallExpression
parameter_list|(
name|String
name|func_name
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|args
parameter_list|)
throws|throws
name|invalidFunctionExpressionException
block|{
name|functionRegistration
name|func_reg
decl_stmt|;
synchronized|synchronized
init|(
name|functionRegistry
init|)
block|{
name|func_reg
operator|=
name|functionRegistry
operator|.
name|get
argument_list|(
name|func_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|func_reg
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|arguments
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|arguments
operator|.
name|addAll
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|functionName
operator|=
name|func_name
expr_stmt|;
name|this
operator|.
name|filterFunc
operator|=
name|func_reg
operator|.
name|getFilterFunction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|invalidFunctionExpressionException
argument_list|(
literal|"invalid function name, \""
operator|+
name|func_name
operator|+
literal|"\""
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a function call expression for the named function and argument list, returning a Boolean function      * call expression if the function returns a boolean value so that it may be used in boolean contexts.      * Used by the parser when a function call is identified.  Note that the function call is created after all      * argument expressions so that the function call can properly detect whether it evaluates to a Boolean value.      *      * @param    func_name - name of the function, as used in selectors.      * @param    args - list of argument expressions passed to the function.      * @return an instance of a BooleanFunctionCallExpr if the function returns a boolean value in this call,      * or a FunctionCallExpression otherwise.      * @exception invalidFunctionExpression - if the function name is not valid, or the given argument list is      * not valid for the function.      */
specifier|public
specifier|static
name|FunctionCallExpression
name|createFunctionCall
parameter_list|(
name|String
name|func_name
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|args
parameter_list|)
throws|throws
name|invalidFunctionExpressionException
block|{
name|FunctionCallExpression
name|result
decl_stmt|;
comment|//
comment|// Create a function call expression by default to use with validating the function call
comment|//  expression and checking whether it returns a boolean result.
comment|//
name|result
operator|=
operator|new
name|FunctionCallExpression
argument_list|(
name|func_name
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|//
comment|// Check wether the function accepts this expression.  I.E. are the arguments valid?
comment|//
if|if
condition|(
name|result
operator|.
name|filterFunc
operator|.
name|isValid
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|//
comment|// If the result of the call is known to alwyas return a boolean value, wrap this
comment|//  expression as a valid BooleanExpression so it will be accepted as a boolean result
comment|//  by the selector grammar.
comment|//
if|if
condition|(
name|result
operator|.
name|filterFunc
operator|.
name|returnsBoolean
argument_list|(
name|result
argument_list|)
condition|)
name|result
operator|=
operator|new
name|BooleanFunctionCallExpr
argument_list|(
name|func_name
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//
comment|// Function does not like this expression.
comment|//
throw|throw
operator|new
name|invalidFunctionExpressionException
argument_list|(
literal|"invalid call of function "
operator|+
name|func_name
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Retrieve the number of arguments for the function call defined in this expression.      *      * @return the number of arguments being passed to the function.      */
specifier|public
name|int
name|getNumArguments
parameter_list|()
block|{
return|return
name|arguments
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Retrieve the argument at the specified index; the first argument is index 0.  Used by implementations of      * FilterFunction objects to check arguments and evaluate them, as needed.      *      * @param    which - number of the argument to retrieve; the first is 0.      */
specifier|public
name|Expression
name|getArgument
parameter_list|(
name|int
name|which
parameter_list|)
block|{
return|return
operator|(
name|Expression
operator|)
name|arguments
operator|.
name|get
argument_list|(
name|which
argument_list|)
return|;
block|}
comment|/**      * Evaluate the function call expression in the context given.      *      * @see    Expression#evaluate      */
specifier|public
name|Object
name|evaluate
parameter_list|(
name|MessageEvaluationContext
name|message_ctx
parameter_list|)
throws|throws
name|javax
operator|.
name|jms
operator|.
name|JMSException
block|{
return|return
name|this
operator|.
name|filterFunc
operator|.
name|evaluate
argument_list|(
name|this
argument_list|,
name|message_ctx
argument_list|)
return|;
block|}
comment|/**      * Translate the expression back into text in a form similar to the input to the selector parser.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
decl_stmt|;
name|boolean
name|first_f
decl_stmt|;
name|result
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|first_f
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Object
name|arg
range|:
name|arguments
control|)
block|{
if|if
condition|(
name|first_f
condition|)
name|first_f
operator|=
literal|false
expr_stmt|;
else|else
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|arg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|////                         ////
comment|////  FUNCTION REGISTRATION  ////
comment|////                         ////
comment|/**      * Maintain a single function registration.      */
specifier|protected
specifier|static
class|class
name|functionRegistration
block|{
specifier|protected
name|FilterFunction
name|filterFunction
decl_stmt|;
comment|/**          * Constructs a function registration for the given function implementation.          */
specifier|public
name|functionRegistration
parameter_list|(
name|FilterFunction
name|func
parameter_list|)
block|{
name|this
operator|.
name|filterFunction
operator|=
name|func
expr_stmt|;
block|}
comment|/**          * Retrieve the filter function implementation.          */
specifier|public
name|FilterFunction
name|getFilterFunction
parameter_list|()
block|{
return|return
name|filterFunction
return|;
block|}
comment|/**          * Set the filter function implementation for this registration.          */
specifier|public
name|void
name|setFilterFunction
parameter_list|(
name|FilterFunction
name|func
parameter_list|)
block|{
name|filterFunction
operator|=
name|func
expr_stmt|;
block|}
block|}
comment|/**      * Exception indicating that an invalid function call expression was created, usually by the selector parser.      * Conditions include invalid function names and invalid function arguments.      */
specifier|public
specifier|static
class|class
name|invalidFunctionExpressionException
extends|extends
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
specifier|public
name|invalidFunctionExpressionException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|invalidFunctionExpressionException
parameter_list|(
name|String
name|msg
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

