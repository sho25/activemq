begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|DoubleExpireTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MESSAGE_TTL_MILLIS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MAX_TEST_TIME_MILLIS
init|=
literal|60000
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setMaxTestTime
argument_list|(
name|MAX_TEST_TIME_MILLIS
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * This test verifies that a message that expires can be be resent to queue 	 * with a new expiration and that it will be processed as a new message and 	 * allowed to re-expire. 	 *<p> 	 *<b>NOTE:</b> This test fails on AMQ 5.4.2 because the originalExpiration 	 * timestamp is not cleared when the message is resent. 	 */
specifier|public
name|void
name|testDoubleExpireWithoutMove
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the default dead letter queue.
specifier|final
name|ActiveMQDestination
name|DLQ
init|=
name|createDestination
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
comment|// Verify that the test queue and DLQ are empty.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getSize
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getSize
argument_list|(
name|DLQ
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enqueue a message to the test queue that will expire after 1s.
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Message
name|testMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test message"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|testMessage
argument_list|,
name|Message
operator|.
name|DEFAULT_DELIVERY_MODE
argument_list|,
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
name|MESSAGE_TTL_MILLIS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSize
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for the message to expire.
name|waitForSize
argument_list|(
name|destination
argument_list|,
literal|0
argument_list|,
name|MAX_TEST_TIME_MILLIS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSize
argument_list|(
name|DLQ
argument_list|)
argument_list|)
expr_stmt|;
comment|// Consume the message from the DLQ and re-enqueue it to the test
comment|// queue so that it expires after 1s.
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|DLQ
argument_list|)
decl_stmt|;
name|Message
name|expiredMessage
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
name|expiredMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|expiredMessage
argument_list|,
name|Message
operator|.
name|DEFAULT_DELIVERY_MODE
argument_list|,
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
name|MESSAGE_TTL_MILLIS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSize
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getSize
argument_list|(
name|DLQ
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the resent message is "different" in that it has
comment|// another ID.
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|testMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
name|expiredMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the message to re-expire.
name|waitForSize
argument_list|(
name|destination
argument_list|,
literal|0
argument_list|,
name|MAX_TEST_TIME_MILLIS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getSize
argument_list|(
name|DLQ
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-consume the message from the DLQ.
name|Message
name|reexpiredMessage
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expiredMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
name|reexpiredMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * A helper method that returns the embedded broker's implementation of a 	 * JMS queue. 	 */
specifier|private
name|Queue
name|getPhysicalDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|Queue
operator|)
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|destination
argument_list|)
return|;
block|}
comment|/** 	 * A helper method that returns the size of the specified queue/topic. 	 */
specifier|private
name|long
name|getSize
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getPhysicalDestination
argument_list|(
name|destination
argument_list|)
operator|!=
literal|null
condition|?
name|getPhysicalDestination
argument_list|(
name|destination
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
else|:
literal|0
return|;
block|}
comment|/** 	 * A helper method that waits for a destination to reach a certain size. 	 */
specifier|private
name|void
name|waitForSize
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|,
name|int
name|size
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|Exception
throws|,
name|TimeoutException
block|{
name|long
name|startTimeMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|getSize
argument_list|(
name|destination
argument_list|)
operator|!=
name|size
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
operator|(
name|startTimeMillis
operator|+
name|timeoutMillis
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSize
argument_list|(
name|destination
argument_list|)
operator|!=
name|size
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Destination "
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|" did not reach size "
operator|+
name|size
operator|+
literal|" within "
operator|+
name|timeoutMillis
operator|+
literal|"ms."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

