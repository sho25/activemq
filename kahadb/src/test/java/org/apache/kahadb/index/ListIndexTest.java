begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|LongMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|StringMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ListIndexTest
extends|extends
name|IndexTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ListIndexTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|NumberFormat
name|nf
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|nf
operator|=
name|NumberFormat
operator|.
name|getIntegerInstance
argument_list|()
expr_stmt|;
name|nf
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|nf
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Index
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|createIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|id
init|=
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
decl_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
init|=
operator|new
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pf
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|index
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|index
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|listIndex
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|30
decl_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|doInsert
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct size"
argument_list|,
name|count
argument_list|,
name|listIndex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct size"
argument_list|,
operator|--
name|count
argument_list|,
name|listIndex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|count
operator|=
literal|30
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|doInsert
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct size"
argument_list|,
name|count
argument_list|,
name|listIndex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|listIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct size"
argument_list|,
literal|0
argument_list|,
name|listIndex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testAddFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|listIndex
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
comment|// put is add last
name|doInsert
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|listIndex
operator|.
name|addFirst
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|(
name|long
operator|)
literal|10
argument_list|)
expr_stmt|;
name|listIndex
operator|.
name|addFirst
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
literal|11
argument_list|)
argument_list|,
operator|(
name|long
operator|)
literal|11
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|11
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|(
name|counter
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|--
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|(
name|counter
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|--
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|count
operator|<
name|counter
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|(
name|count
argument_list|)
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
operator|(
name|long
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testPruning
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|long
name|pageCount
init|=
name|index
operator|.
name|getPageFile
argument_list|()
operator|.
name|getPageCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pageCount
argument_list|)
expr_stmt|;
name|long
name|freePageCount
init|=
name|index
operator|.
name|getPageFile
argument_list|()
operator|.
name|getFreePageCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No free pages"
argument_list|,
literal|0
argument_list|,
name|freePageCount
argument_list|)
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|doInsert
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pageCount
operator|=
name|index
operator|.
name|getPageFile
argument_list|()
operator|.
name|getPageCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"page count: "
operator|+
name|pageCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"used some pages"
argument_list|,
name|pageCount
operator|>
literal|1
argument_list|)
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
comment|// Remove the data.
name|doRemove
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|freePageCount
operator|=
name|index
operator|.
name|getPageFile
argument_list|()
operator|.
name|getFreePageCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FreePage count: "
operator|+
name|freePageCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Some free pages "
operator|+
name|freePageCount
argument_list|,
name|freePageCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"add some more to use up free list"
argument_list|)
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|doInsert
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|freePageCount
operator|=
name|index
operator|.
name|getPageFile
argument_list|()
operator|.
name|getFreePageCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FreePage count: "
operator|+
name|freePageCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no free pages "
operator|+
name|freePageCount
argument_list|,
literal|0
argument_list|,
name|freePageCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Page count is static"
argument_list|,
name|pageCount
argument_list|,
name|index
operator|.
name|getPageFile
argument_list|()
operator|.
name|getPageCount
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testIterationAddFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
specifier|final
name|int
name|entryCount
init|=
literal|200
decl_stmt|;
comment|// Insert in reverse order..
name|doInsertReverse
argument_list|(
name|entryCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|i
init|=
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|(
name|counter
argument_list|)
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counter
argument_list|,
operator|(
name|long
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"We iterated over all entries"
argument_list|,
name|entryCount
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
comment|// Remove the data.
name|doRemove
argument_list|(
name|entryCount
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Insert in reverse order..
specifier|final
name|int
name|entryCount
init|=
literal|200
decl_stmt|;
name|doInsert
argument_list|(
name|entryCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|i
init|=
name|index
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|(
name|counter
argument_list|)
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counter
argument_list|,
operator|(
name|long
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"We iterated over all entries"
argument_list|,
name|entryCount
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testVisitor
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Insert in reverse order..
name|doInsert
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// BTree should iterate it in sorted order.
comment|/*index.visit(tx, new BTreeVisitor<String, Long>(){             public boolean isInterestedInKeysBetween(String first, String second) {                 return true;             }             public void visit(List<String> keys, List<Long> values) {             }         });*/
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRandomRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|4000
decl_stmt|;
name|doInsert
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|prev
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|index
operator|.
name|isEmpty
argument_list|(
name|tx
argument_list|)
condition|)
block|{
name|prev
operator|=
name|i
expr_stmt|;
name|i
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
try|try
block|{
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected exception on "
operator|+
name|i
operator|+
literal|", prev: "
operator|+
name|prev
operator|+
literal|", ex: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testRemovePattern
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|4000
decl_stmt|;
name|doInsert
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
literal|3697
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
literal|1566
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLargeAppendTimed
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|listIndex
init|=
operator|(
operator|(
name|ListIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|this
operator|.
name|index
operator|)
decl_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|int
name|COUNT
init|=
literal|50000
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
comment|//String test = new String("test" + i);
comment|//ByteSequence bs = new ByteSequence(test.getBytes());
name|listIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Time to add "
operator|+
name|COUNT
operator|+
literal|": "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|" mills"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Page count: "
operator|+
name|listIndex
operator|.
name|getPageFile
argument_list|()
operator|.
name|getPageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|doInsertReverse
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
name|count
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
operator|(
operator|(
name|ListIndex
operator|)
name|index
operator|)
operator|.
name|addFirst
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|key
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|"key:"
operator|+
name|nf
operator|.
name|format
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
end_class

end_unit

