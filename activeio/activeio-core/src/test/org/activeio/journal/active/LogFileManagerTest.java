begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|active
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|InvalidRecordLocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteBufferPacket
import|;
end_import

begin_comment
comment|/**  * Tests the LogFile used by JournalImpl  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|LogFileManagerTest
extends|extends
name|TestCase
block|{
name|int
name|size
init|=
literal|1024
operator|*
literal|512
decl_stmt|;
name|int
name|logFileCount
init|=
literal|4
decl_stmt|;
name|File
name|logDirectory
init|=
operator|new
name|File
argument_list|(
literal|"test-logfile"
argument_list|)
decl_stmt|;
specifier|private
name|LogFileManager
name|logFile
decl_stmt|;
comment|/**      * @see junit.framework.TestCase#setUp()      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|logDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|deleteDir
argument_list|(
name|logDirectory
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
operator|!
name|logDirectory
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|logFile
operator|=
operator|new
name|LogFileManager
argument_list|(
name|logDirectory
argument_list|,
name|logFileCount
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      */
specifier|private
name|void
name|deleteDir
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|logFile
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|logDirectory
operator|.
name|exists
argument_list|()
condition|)
name|deleteDir
argument_list|(
name|logDirectory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|logDirectory
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLogFileCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|logFile
operator|.
name|canActivateNextLogFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|logFile
operator|.
name|getFirstActiveLogLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|logFile
operator|.
name|getLastMarkedRecordLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Location
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|logFile
operator|.
name|getNextAppendLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAppendAndRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidRecordLocationException
throws|,
name|InterruptedException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initial:"
operator|+
name|logFile
operator|.
name|getNextAppendLocation
argument_list|()
argument_list|)
expr_stmt|;
name|appendHelloRecord
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
name|Location
name|loc2
init|=
name|logFile
operator|.
name|getNextAppendLocation
argument_list|()
decl_stmt|;
name|appendHelloRecord
argument_list|(
literal|2002
argument_list|)
expr_stmt|;
name|appendHelloRecord
argument_list|(
literal|3003
argument_list|)
expr_stmt|;
name|appendHelloRecord
argument_list|(
literal|3004
argument_list|)
expr_stmt|;
name|Location
name|loc3
init|=
name|logFile
operator|.
name|getNextDataRecordLocation
argument_list|(
name|loc2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|loc3
operator|.
name|getLogFileOffset
argument_list|()
operator|>
name|loc2
operator|.
name|getLogFileOffset
argument_list|()
argument_list|)
expr_stmt|;
name|Location
name|loc4
init|=
name|logFile
operator|.
name|getNextDataRecordLocation
argument_list|(
name|loc3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|loc4
operator|.
name|getLogFileOffset
argument_list|()
operator|>
name|loc3
operator|.
name|getLogFileOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRollOver
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidRecordLocationException
throws|,
name|InterruptedException
block|{
name|int
name|lastId
init|=
name|logFile
operator|.
name|getNextAppendLocation
argument_list|()
operator|.
name|getLogFileId
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logFileCount
condition|;
name|i
operator|++
control|)
block|{
name|counter
operator|+=
literal|500
expr_stmt|;
name|appendHelloRecord
argument_list|(
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|logFileCount
condition|)
block|{
name|assertFalse
argument_list|(
name|logFile
operator|.
name|canActivateNextLogFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|logFile
operator|.
name|canActivateNextLogFile
argument_list|()
argument_list|)
expr_stmt|;
name|logFile
operator|.
name|activateNextLogFile
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|lastId
operator|+
literal|1
argument_list|,
name|logFile
operator|.
name|getNextAppendLocation
argument_list|()
operator|.
name|getLogFileId
argument_list|()
argument_list|)
expr_stmt|;
name|lastId
operator|=
name|logFile
operator|.
name|getNextAppendLocation
argument_list|()
operator|.
name|getLogFileId
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param i      * @throws IOException      * @throws InterruptedException      */
specifier|private
name|void
name|appendHelloRecord
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
name|data
index|[]
init|=
operator|(
literal|"Hello World: "
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Record
name|batchedRecord
init|=
operator|new
name|Record
argument_list|(
name|LogFileManager
operator|.
name|DATA_RECORD_TYPE
argument_list|,
operator|new
name|ByteArrayPacket
argument_list|(
name|data
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|batchedRecord
operator|.
name|setLocation
argument_list|(
name|logFile
operator|.
name|getNextAppendLocation
argument_list|()
argument_list|)
expr_stmt|;
name|BatchedWrite
name|write
init|=
operator|new
name|BatchedWrite
argument_list|(
operator|new
name|ByteBufferPacket
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|write
operator|.
name|append
argument_list|(
name|batchedRecord
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|write
operator|.
name|flip
argument_list|()
expr_stmt|;
name|logFile
operator|.
name|append
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

