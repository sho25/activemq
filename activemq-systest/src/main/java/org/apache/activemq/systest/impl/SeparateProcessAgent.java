begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|AgentStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|AgentSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_comment
comment|/**  * Starts a separate process on this machine until its asked to be killed.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|SeparateProcessAgent
extends|extends
name|AgentSupport
block|{
specifier|private
name|String
index|[]
name|commands
decl_stmt|;
specifier|private
name|Process
name|process
decl_stmt|;
specifier|private
name|long
name|sleepTime
init|=
literal|10000
decl_stmt|;
specifier|public
name|SeparateProcessAgent
parameter_list|()
block|{     }
specifier|public
name|String
index|[]
name|getCommands
parameter_list|()
block|{
if|if
condition|(
name|commands
operator|==
literal|null
condition|)
block|{
name|commands
operator|=
name|createCommand
argument_list|()
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
specifier|public
name|void
name|setCommands
parameter_list|(
name|String
index|[]
name|command
parameter_list|)
block|{
name|this
operator|.
name|commands
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|Process
name|getProcess
parameter_list|()
block|{
return|return
name|process
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|process
operator|=
name|createProcess
argument_list|()
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|readInputStream
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|thread2
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|waitForProcessExit
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// lets wait for the process to startup
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting a little while to give the broker process to start"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|AgentStopper
name|stopper
parameter_list|)
block|{
if|if
condition|(
name|process
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|process
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Process
name|createProcess
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|commands
argument_list|)
return|;
block|}
specifier|protected
name|String
index|[]
name|createCommand
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You must configure the 'commands' property"
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|readInputStream
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore exceptions
comment|// probably end of file
block|}
block|}
specifier|protected
name|void
name|waitForProcessExit
parameter_list|()
block|{
name|Process
name|p
init|=
name|process
decl_stmt|;
try|try
block|{
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interrupted while waiting for process to complete: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|int
name|value
init|=
name|p
operator|.
name|exitValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Process completed with exit value: "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

