begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|ListContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|RuntimeStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|DataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of a ListContainer  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|ListContainerImpl
extends|extends
name|BaseContainerImpl
implements|implements
name|ListContainer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ListContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Marshaller
name|marshaller
init|=
name|Store
operator|.
name|ObjectMarshaller
decl_stmt|;
specifier|protected
name|LinkedList
name|cacheList
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|maximumCacheSize
init|=
literal|100
decl_stmt|;
specifier|protected
name|IndexItem
name|lastCached
decl_stmt|;
specifier|protected
name|boolean
name|cacheEnabled
init|=
literal|true
decl_stmt|;
specifier|public
name|ListContainerImpl
parameter_list|(
name|ContainerId
name|id
parameter_list|,
name|IndexItem
name|root
parameter_list|,
name|IndexManager
name|indexManager
parameter_list|,
name|DataManager
name|dataManager
parameter_list|,
name|String
name|indexType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|id
argument_list|,
name|root
argument_list|,
name|indexManager
argument_list|,
name|dataManager
argument_list|,
name|indexType
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#load()      */
specifier|public
specifier|synchronized
name|void
name|load
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
name|loaded
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|init
argument_list|()
expr_stmt|;
name|long
name|nextItem
init|=
name|root
operator|.
name|getNextItem
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextItem
operator|!=
name|Item
operator|.
name|POSITION_NOT_SET
condition|)
block|{
name|IndexItem
name|item
init|=
name|indexManager
operator|.
name|getIndex
argument_list|(
name|nextItem
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|itemAdded
argument_list|(
name|item
argument_list|,
name|indexList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|getValue
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|nextItem
operator|=
name|item
operator|.
name|getNextItem
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load container "
operator|+
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#unload()      */
specifier|public
specifier|synchronized
name|void
name|unload
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|loaded
condition|)
block|{
name|loaded
operator|=
literal|false
expr_stmt|;
name|indexList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#setKeyMarshaller(org.apache.activemq.kaha.Marshaller)      */
specifier|public
specifier|synchronized
name|void
name|setMarshaller
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|marshaller
operator|=
name|marshaller
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|List
condition|)
block|{
name|List
name|other
init|=
operator|(
name|List
operator|)
name|obj
decl_stmt|;
name|result
operator|=
name|other
operator|.
name|size
argument_list|()
operator|==
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o1
init|=
name|other
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|o2
init|=
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result
operator|=
name|o1
operator|==
name|o2
operator|||
operator|(
name|o1
operator|!=
literal|null
operator|&&
name|o2
operator|!=
literal|null
operator|&&
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#size()      */
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|indexList
operator|.
name|size
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#addFirst(java.lang.Object)      */
specifier|public
specifier|synchronized
name|void
name|addFirst
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|internalAddFirst
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#addLast(java.lang.Object)      */
specifier|public
specifier|synchronized
name|void
name|addLast
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|internalAddLast
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#removeFirst()      */
specifier|public
specifier|synchronized
name|Object
name|removeFirst
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|IndexItem
name|item
init|=
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|itemRemoved
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|getValue
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|IndexItem
name|prev
init|=
name|root
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
else|:
literal|null
decl_stmt|;
name|indexList
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|delete
argument_list|(
name|item
argument_list|,
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|item
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#removeLast()      */
specifier|public
specifier|synchronized
name|Object
name|removeLast
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|IndexItem
name|last
init|=
name|indexList
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|itemRemoved
argument_list|(
name|indexList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|getValue
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|IndexItem
name|prev
init|=
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|last
argument_list|)
decl_stmt|;
name|IndexItem
name|next
init|=
literal|null
decl_stmt|;
name|indexList
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|delete
argument_list|(
name|last
argument_list|,
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#isEmpty()      */
specifier|public
specifier|synchronized
name|boolean
name|isEmpty
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|indexList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#contains(java.lang.Object)      */
specifier|public
specifier|synchronized
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#iterator()      */
specifier|public
specifier|synchronized
name|Iterator
name|iterator
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|listIterator
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#toArray()      */
specifier|public
specifier|synchronized
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
name|List
name|tmp
init|=
operator|new
name|ArrayList
argument_list|(
name|indexList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#toArray(T[])      */
specifier|public
specifier|synchronized
name|Object
index|[]
name|toArray
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|List
name|tmp
init|=
operator|new
name|ArrayList
argument_list|(
name|indexList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#add(E)      */
specifier|public
specifier|synchronized
name|boolean
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|addLast
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#remove(java.lang.Object)      */
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|itemRemoved
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|remove
parameter_list|(
name|IndexItem
name|item
parameter_list|)
block|{
name|IndexItem
name|prev
init|=
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|remove
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|item
argument_list|,
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#containsAll(java.util.Collection)      */
specifier|public
specifier|synchronized
name|boolean
name|containsAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|obj
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|result
operator|=
name|contains
argument_list|(
name|obj
argument_list|)
operator|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#addAll(java.util.Collection)      */
specifier|public
specifier|synchronized
name|boolean
name|addAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#addAll(int, java.util.Collection)      */
specifier|public
specifier|synchronized
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
name|c
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|ListIterator
name|e1
init|=
name|listIterator
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Iterator
name|e2
init|=
name|c
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|e2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|e1
operator|.
name|add
argument_list|(
name|e2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#removeAll(java.util.Collection)      */
specifier|public
specifier|synchronized
name|boolean
name|removeAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|obj
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|&=
name|remove
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#retainAll(java.util.Collection)      */
specifier|public
specifier|synchronized
name|boolean
name|retainAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|List
name|tmpList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|Object
name|o
init|=
name|getValue
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|tmpList
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tmpList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|remove
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|tmpList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#clear()      */
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doClear
argument_list|()
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#get(int)      */
specifier|public
specifier|synchronized
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|getCachedItem
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#set(int, E)      */
specifier|public
specifier|synchronized
name|Object
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|IndexItem
name|replace
init|=
name|indexList
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|IndexItem
name|prev
init|=
operator|(
name|indexList
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|index
operator|-
literal|1
operator|)
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
decl_stmt|;
name|IndexItem
name|next
init|=
operator|(
name|indexList
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|index
operator|+
literal|1
operator|)
operator|>=
name|size
argument_list|()
operator|)
condition|?
literal|null
else|:
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|result
operator|=
name|getValue
argument_list|(
name|replace
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|replace
argument_list|,
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|itemRemoved
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
specifier|synchronized
name|IndexItem
name|internalSet
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|IndexItem
name|replace
init|=
name|indexList
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|IndexItem
name|prev
init|=
operator|(
name|indexList
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|index
operator|-
literal|1
operator|)
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
decl_stmt|;
name|IndexItem
name|next
init|=
operator|(
name|indexList
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|index
operator|+
literal|1
operator|)
operator|>=
name|size
argument_list|()
operator|)
condition|?
literal|null
else|:
operator|(
name|IndexItem
operator|)
name|indexList
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|replace
argument_list|,
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|itemRemoved
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|internalAdd
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#add(int, E)      */
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|IndexItem
name|item
init|=
name|insert
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|itemAdded
argument_list|(
name|item
argument_list|,
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|StoreEntry
name|internalAddLast
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|IndexItem
name|item
init|=
name|writeLast
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|addLast
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|itemAdded
argument_list|(
name|item
argument_list|,
name|indexList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
specifier|protected
specifier|synchronized
name|StoreEntry
name|internalAddFirst
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|IndexItem
name|item
init|=
name|writeFirst
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|addFirst
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|itemAdded
argument_list|(
name|item
argument_list|,
literal|0
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
specifier|protected
specifier|synchronized
name|IndexItem
name|internalAdd
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|IndexItem
name|item
init|=
name|insert
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|itemAdded
argument_list|(
name|item
argument_list|,
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
specifier|protected
specifier|synchronized
name|StoreEntry
name|internalGet
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|indexList
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|indexList
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#doRemove(int)      */
specifier|public
specifier|synchronized
name|boolean
name|doRemove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|IndexItem
name|item
init|=
name|indexList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
name|IndexItem
name|prev
init|=
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|prev
operator|=
name|prev
operator|!=
literal|null
condition|?
name|prev
else|:
name|root
expr_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|itemRemoved
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|item
argument_list|,
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#remove(int)      */
specifier|public
specifier|synchronized
name|Object
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|IndexItem
name|item
init|=
name|indexList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|itemRemoved
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|result
operator|=
name|getValue
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|IndexItem
name|prev
init|=
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|prev
operator|=
name|prev
operator|!=
literal|null
condition|?
name|prev
else|:
name|root
expr_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|indexList
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|item
argument_list|,
name|prev
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#indexOf(java.lang.Object)      */
specifier|public
specifier|synchronized
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|result
operator|=
name|count
expr_stmt|;
break|break;
block|}
name|count
operator|++
expr_stmt|;
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#lastIndexOf(java.lang.Object)      */
specifier|public
specifier|synchronized
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|indexList
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getLast
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|result
operator|=
name|count
expr_stmt|;
break|break;
block|}
name|count
operator|--
expr_stmt|;
name|next
operator|=
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#listIterator()      */
specifier|public
specifier|synchronized
name|ListIterator
name|listIterator
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
return|return
operator|new
name|CachedContainerListIterator
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#listIterator(int)      */
specifier|public
specifier|synchronized
name|ListIterator
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
return|return
operator|new
name|CachedContainerListIterator
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.util.List#subList(int, int)      */
specifier|public
specifier|synchronized
name|List
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|fromIndex
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|get
argument_list|(
name|fromIndex
argument_list|)
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
operator|&&
name|count
operator|++
operator|<
name|toIndex
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getValue
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * add an Object to the list but get a StoreEntry of its position      *       * @param object      * @return the entry in the Store      */
specifier|public
specifier|synchronized
name|StoreEntry
name|placeLast
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|StoreEntry
name|item
init|=
name|internalAddLast
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
name|item
return|;
block|}
comment|/**      * insert an Object in first position int the list but get a StoreEntry of its position      *       * @param object      * @return the location in the Store      */
specifier|public
specifier|synchronized
name|StoreEntry
name|placeFirst
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|StoreEntry
name|item
init|=
name|internalAddFirst
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
name|item
return|;
block|}
comment|/**      * @param entry      * @param object      * @see org.apache.activemq.kaha.ListContainer#update(org.apache.activemq.kaha.StoreEntry, java.lang.Object)      */
specifier|public
specifier|synchronized
name|void
name|update
parameter_list|(
name|StoreEntry
name|entry
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
try|try
block|{
name|dataManager
operator|.
name|updateItem
argument_list|(
name|entry
operator|.
name|getValueDataItem
argument_list|()
argument_list|,
name|marshaller
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Retrieve an Object from the Store by its location      *       * @param entry      * @return the Object at that entry      */
specifier|public
specifier|synchronized
name|Object
name|get
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|getValue
argument_list|(
name|entry
argument_list|)
return|;
block|}
comment|/**      * remove the Object at the StoreEntry      *       * @param entry      * @return true if successful      */
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
name|IndexItem
name|item
init|=
operator|(
name|IndexItem
operator|)
name|entry
decl_stmt|;
name|load
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|clearCache
argument_list|()
expr_stmt|;
name|remove
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Get the StoreEntry for the first item of the list      *       * @return the first StoreEntry or null if the list is empty      */
specifier|public
specifier|synchronized
name|StoreEntry
name|getFirst
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|indexList
operator|.
name|getFirst
argument_list|()
return|;
block|}
comment|/**      * Get yjr StoreEntry for the last item of the list      *       * @return the last StoreEntry or null if the list is empty      */
specifier|public
specifier|synchronized
name|StoreEntry
name|getLast
parameter_list|()
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|indexList
operator|.
name|getLast
argument_list|()
return|;
block|}
comment|/**      * Get the next StoreEntry from the list      *       * @param entry      * @return the next StoreEntry or null      */
specifier|public
specifier|synchronized
name|StoreEntry
name|getNext
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|IndexItem
name|item
init|=
operator|(
name|IndexItem
operator|)
name|entry
decl_stmt|;
return|return
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
return|;
block|}
comment|/**      * Get the previous StoreEntry from the list      *       * @param entry      * @return the previous store entry or null      */
specifier|public
specifier|synchronized
name|StoreEntry
name|getPrevious
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|IndexItem
name|item
init|=
operator|(
name|IndexItem
operator|)
name|entry
decl_stmt|;
return|return
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|item
argument_list|)
return|;
block|}
comment|/**      * It's possible that a StoreEntry could be come stale      * this will return an upto date entry for the StoreEntry position      * @param entry old entry      * @return a refreshed StoreEntry      */
specifier|public
specifier|synchronized
name|StoreEntry
name|refresh
parameter_list|(
name|StoreEntry
name|entry
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
return|return
name|indexList
operator|.
name|getEntry
argument_list|(
name|entry
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|IndexItem
name|writeLast
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|IndexItem
name|index
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|StoreLocation
name|data
init|=
name|dataManager
operator|.
name|storeDataItem
argument_list|(
name|marshaller
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|index
operator|=
name|indexManager
operator|.
name|createNewIndex
argument_list|()
expr_stmt|;
name|index
operator|.
name|setValueData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|IndexItem
name|prev
init|=
name|indexList
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|prev
operator|=
name|prev
operator|!=
literal|null
condition|?
name|prev
else|:
name|root
expr_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|prev
operator|.
name|setNextItem
argument_list|(
name|index
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexes
argument_list|(
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPreviousItem
argument_list|(
name|index
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexes
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|storeIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to write "
operator|+
name|value
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
specifier|protected
specifier|synchronized
name|IndexItem
name|writeFirst
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|IndexItem
name|index
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|StoreLocation
name|data
init|=
name|dataManager
operator|.
name|storeDataItem
argument_list|(
name|marshaller
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|index
operator|=
name|indexManager
operator|.
name|createNewIndex
argument_list|()
expr_stmt|;
name|index
operator|.
name|setValueData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|IndexItem
name|prev
init|=
name|root
decl_stmt|;
name|IndexItem
name|next
init|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|prev
operator|.
name|setNextItem
argument_list|(
name|index
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexes
argument_list|(
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPreviousItem
argument_list|(
name|index
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexes
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|storeIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to write "
operator|+
name|value
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
specifier|protected
specifier|synchronized
name|IndexItem
name|insert
parameter_list|(
name|int
name|insertPos
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|IndexItem
name|index
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|StoreLocation
name|data
init|=
name|dataManager
operator|.
name|storeDataItem
argument_list|(
name|marshaller
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|index
operator|=
name|indexManager
operator|.
name|createNewIndex
argument_list|()
expr_stmt|;
name|index
operator|.
name|setValueData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|IndexItem
name|prev
init|=
literal|null
decl_stmt|;
name|IndexItem
name|next
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|insertPos
operator|<=
literal|0
condition|)
block|{
name|prev
operator|=
name|root
expr_stmt|;
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|insertPos
operator|>=
name|indexList
operator|.
name|size
argument_list|()
condition|)
block|{
name|prev
operator|=
name|indexList
operator|.
name|getLast
argument_list|()
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|prev
operator|=
name|indexList
operator|.
name|get
argument_list|(
name|insertPos
argument_list|)
expr_stmt|;
name|prev
operator|=
name|prev
operator|!=
literal|null
condition|?
name|prev
else|:
name|root
expr_stmt|;
name|next
operator|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
name|prev
operator|.
name|setNextItem
argument_list|(
name|index
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexes
argument_list|(
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPreviousItem
argument_list|(
name|index
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndexes
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|storeIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to insert "
operator|+
name|value
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
specifier|protected
specifier|synchronized
name|Object
name|getValue
parameter_list|(
name|StoreEntry
name|item
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// ensure it's up to date
comment|// item=indexList.getEntry(item);
name|StoreLocation
name|data
init|=
name|item
operator|.
name|getValueDataItem
argument_list|()
decl_stmt|;
name|result
operator|=
name|dataManager
operator|.
name|readItem
argument_list|(
name|marshaller
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to get value for "
operator|+
name|item
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return a string representation of this collection.      */
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|Iterator
name|i
init|=
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
name|i
operator|.
name|hasNext
argument_list|()
decl_stmt|;
while|while
condition|(
name|hasNext
condition|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|hasNext
operator|=
name|i
operator|.
name|hasNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasNext
condition|)
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|itemAdded
parameter_list|(
name|IndexItem
name|item
parameter_list|,
name|int
name|pos
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|int
name|cachePosition
init|=
name|pos
operator|-
name|offset
decl_stmt|;
comment|// if pos is before the cache offset
comment|// we need to clear the cache
if|if
condition|(
name|pos
operator|<
name|offset
condition|)
block|{
name|clearCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cacheList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|offset
operator|=
name|pos
expr_stmt|;
name|cacheList
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|lastCached
operator|=
name|item
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cachePosition
operator|==
name|cacheList
operator|.
name|size
argument_list|()
operator|&&
name|cachePosition
operator|<
name|maximumCacheSize
condition|)
block|{
name|cacheList
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|lastCached
operator|=
name|item
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cachePosition
operator|>=
literal|0
operator|&&
name|cachePosition
operator|<=
name|cacheList
operator|.
name|size
argument_list|()
condition|)
block|{
name|cacheList
operator|.
name|add
argument_list|(
name|cachePosition
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheList
operator|.
name|size
argument_list|()
operator|>
name|maximumCacheSize
condition|)
block|{
name|itemRemoved
argument_list|(
name|cacheList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
specifier|synchronized
name|void
name|itemRemoved
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|int
name|lastPosition
init|=
name|offset
operator|+
name|cacheList
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|cachePosition
init|=
name|pos
operator|-
name|offset
decl_stmt|;
if|if
condition|(
name|cachePosition
operator|>=
literal|0
operator|&&
name|cachePosition
operator|<
name|cacheList
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|cachePosition
operator|==
name|lastPosition
condition|)
block|{
if|if
condition|(
name|lastCached
operator|!=
literal|null
condition|)
block|{
name|lastCached
operator|=
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|lastCached
argument_list|)
expr_stmt|;
block|}
block|}
name|cacheList
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
specifier|synchronized
name|Object
name|getCachedItem
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|int
name|cachePosition
init|=
name|pos
operator|-
name|offset
decl_stmt|;
if|if
condition|(
name|cachePosition
operator|>=
literal|0
operator|&&
name|cachePosition
operator|<
name|cacheList
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|=
name|cacheList
operator|.
name|get
argument_list|(
name|cachePosition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|cachePosition
operator|==
name|cacheList
operator|.
name|size
argument_list|()
operator|&&
name|lastCached
operator|!=
literal|null
condition|)
block|{
name|IndexItem
name|item
init|=
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|lastCached
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|getValue
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|cacheList
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|lastCached
operator|=
name|item
expr_stmt|;
if|if
condition|(
name|cacheList
operator|.
name|size
argument_list|()
operator|>
name|maximumCacheSize
condition|)
block|{
name|itemRemoved
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|IndexItem
name|item
init|=
name|indexList
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|getValue
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
comment|// outside the cache window - so clear
if|if
condition|(
operator|!
name|cacheList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clearCache
argument_list|()
expr_stmt|;
block|}
name|offset
operator|=
name|pos
expr_stmt|;
name|cacheList
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|lastCached
operator|=
name|item
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|IndexItem
name|item
init|=
name|indexList
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|getValue
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * clear any cached values      */
specifier|public
specifier|synchronized
name|void
name|clearCache
parameter_list|()
block|{
name|cacheList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|lastCached
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * @return the cacheList      */
specifier|public
specifier|synchronized
name|LinkedList
name|getCacheList
parameter_list|()
block|{
return|return
name|cacheList
return|;
block|}
comment|/**      * @param cacheList the cacheList to set      */
specifier|public
specifier|synchronized
name|void
name|setCacheList
parameter_list|(
name|LinkedList
name|cacheList
parameter_list|)
block|{
name|this
operator|.
name|cacheList
operator|=
name|cacheList
expr_stmt|;
block|}
comment|/**      * @return the lastCached      */
specifier|public
specifier|synchronized
name|StoreEntry
name|getLastCached
parameter_list|()
block|{
return|return
name|lastCached
return|;
block|}
comment|/**      * @param lastCached the lastCached to set      */
specifier|public
specifier|synchronized
name|void
name|setLastCached
parameter_list|(
name|IndexItem
name|lastCached
parameter_list|)
block|{
name|this
operator|.
name|lastCached
operator|=
name|lastCached
expr_stmt|;
block|}
comment|/**      * @return the maximumCacheSize      */
specifier|public
specifier|synchronized
name|int
name|getMaximumCacheSize
parameter_list|()
block|{
return|return
name|maximumCacheSize
return|;
block|}
comment|/**      * @param maximumCacheSize the maximumCacheSize to set      */
specifier|public
specifier|synchronized
name|void
name|setMaximumCacheSize
parameter_list|(
name|int
name|maximumCacheSize
parameter_list|)
block|{
name|this
operator|.
name|maximumCacheSize
operator|=
name|maximumCacheSize
expr_stmt|;
name|cacheEnabled
operator|=
name|maximumCacheSize
operator|>=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|cacheEnabled
condition|)
block|{
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return the offset      */
specifier|public
specifier|synchronized
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**      * @param offset the offset to set      */
specifier|public
specifier|synchronized
name|void
name|setOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
block|}
end_class

end_unit

