begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authz
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|StubBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectConnectionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|UnauthorizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|PrincipalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SimplePrincipalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationFilterTest
block|{
specifier|private
name|AuthorizationFilter
name|filter
decl_stmt|;
specifier|private
name|StubBroker
name|nextBroker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|filter
operator|=
operator|new
name|AuthorizationFilter
argument_list|()
expr_stmt|;
name|nextBroker
operator|=
operator|new
name|StubBroker
argument_list|()
expr_stmt|;
name|filter
operator|.
name|setNext
argument_list|(
name|nextBroker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
name|ActionPermissionResolver
name|resolver
init|=
name|filter
operator|.
name|getActionPermissionResolver
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolver
operator|instanceof
name|DestinationActionPermissionResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetActionPermissionResolver
parameter_list|()
block|{
name|ActionPermissionResolver
name|resolver
init|=
operator|new
name|DestinationActionPermissionResolver
argument_list|()
decl_stmt|;
name|filter
operator|.
name|setActionPermissionResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|resolver
argument_list|,
name|filter
operator|.
name|getActionPermissionResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ConnectionContext
name|createContext
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|ConnectionContext
name|ctx
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|info
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|mgt
operator|.
name|SecurityManager
name|getSecurityManager
parameter_list|()
block|{
return|return
literal|null
return|;
comment|//not needed in this test.
block|}
block|}
decl_stmt|;
name|SubjectConnectionReference
name|ref
init|=
operator|new
name|SubjectConnectionReference
argument_list|(
name|ctx
argument_list|,
name|info
argument_list|,
name|environment
argument_list|,
name|subject
argument_list|)
decl_stmt|;
name|SubjectSecurityContext
name|secCtx
init|=
operator|new
name|SubjectSecurityContext
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setSecurityContext
argument_list|(
name|secCtx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubjectToString
parameter_list|()
block|{
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PrincipalCollection
name|getPrincipals
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|String
name|string
init|=
name|filter
operator|.
name|toString
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnauthorizedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddDestinationInfoNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|(
literal|null
argument_list|,
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|addDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDestinationInfoAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|(
literal|null
argument_list|,
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPermitted
parameter_list|(
name|Permission
name|toCheck
parameter_list|)
block|{
name|Permission
name|assigned
init|=
name|createPerm
argument_list|(
literal|"topic:myTopic:create"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|toString
argument_list|()
argument_list|,
name|toCheck
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
operator|.
name|implies
argument_list|(
name|toCheck
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|addDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnauthorizedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddDestinationNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDestinationAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPermitted
parameter_list|(
name|Permission
name|toCheck
parameter_list|)
block|{
name|Permission
name|assigned
init|=
name|createPerm
argument_list|(
literal|"topic:myTopic:create"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|toString
argument_list|()
argument_list|,
name|toCheck
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
operator|.
name|implies
argument_list|(
name|toCheck
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnauthorizedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveDestinationInfoNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|(
literal|null
argument_list|,
name|DestinationInfo
operator|.
name|REMOVE_OPERATION_TYPE
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|removeDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveDestinationInfoAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|(
literal|null
argument_list|,
name|DestinationInfo
operator|.
name|REMOVE_OPERATION_TYPE
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPermitted
parameter_list|(
name|Permission
name|toCheck
parameter_list|)
block|{
name|Permission
name|assigned
init|=
name|createPerm
argument_list|(
literal|"topic:myTopic:remove"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|toString
argument_list|()
argument_list|,
name|toCheck
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
operator|.
name|implies
argument_list|(
name|toCheck
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|removeDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnauthorizedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRemoveDestinationNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveDestinationAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPermitted
parameter_list|(
name|Permission
name|toCheck
parameter_list|)
block|{
name|Permission
name|assigned
init|=
name|createPerm
argument_list|(
literal|"topic:myTopic:remove"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|toString
argument_list|()
argument_list|,
name|toCheck
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
operator|.
name|implies
argument_list|(
name|toCheck
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|filter
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnauthorizedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddConsumerNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|info
init|=
operator|new
name|ConsumerInfo
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddConsumerAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPermitted
parameter_list|(
name|Permission
name|toCheck
parameter_list|)
block|{
name|Permission
name|assigned
init|=
name|createPerm
argument_list|(
literal|"topic:myTopic:read"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|toString
argument_list|()
argument_list|,
name|toCheck
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
operator|.
name|implies
argument_list|(
name|toCheck
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|info
init|=
operator|new
name|ConsumerInfo
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddProducerWithoutDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|ProducerInfo
name|info
init|=
operator|new
name|ProducerInfo
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|filter
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnauthorizedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAddProducerNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|ProducerInfo
name|info
init|=
operator|new
name|ProducerInfo
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddProducerAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPermitted
parameter_list|(
name|Permission
name|toCheck
parameter_list|)
block|{
name|Permission
name|assigned
init|=
name|createPerm
argument_list|(
literal|"topic:myTopic:write"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|toString
argument_list|()
argument_list|,
name|toCheck
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
operator|.
name|implies
argument_list|(
name|toCheck
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|ProducerInfo
name|info
init|=
operator|new
name|ProducerInfo
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnauthorizedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBrokerExchangeSendNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Hello, world!"
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|ProducerBrokerExchange
name|exchange
init|=
operator|new
name|ProducerBrokerExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setConnectionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|filter
operator|.
name|send
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBrokerExchangeSendAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"myTopic"
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Hello, world!"
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|PermsSubject
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isPermitted
parameter_list|(
name|Permission
name|toCheck
parameter_list|)
block|{
name|Permission
name|assigned
init|=
name|createPerm
argument_list|(
literal|"topic:myTopic:write"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|assigned
operator|.
name|toString
argument_list|()
argument_list|,
name|toCheck
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
operator|.
name|implies
argument_list|(
name|toCheck
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createContext
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|ProducerBrokerExchange
name|exchange
init|=
operator|new
name|ProducerBrokerExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setConnectionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|filter
operator|.
name|send
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Permission
name|createPerm
parameter_list|(
name|String
name|perm
parameter_list|)
block|{
return|return
operator|new
name|DestinationActionPermissionResolver
argument_list|()
operator|.
name|createPermission
argument_list|(
name|perm
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|PermsSubject
extends|extends
name|SubjectAdapter
block|{
annotation|@
name|Override
specifier|public
name|PrincipalCollection
name|getPrincipals
parameter_list|()
block|{
return|return
operator|new
name|SimplePrincipalCollection
argument_list|(
literal|"foo"
argument_list|,
literal|"someRealm"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPermittedAll
parameter_list|(
name|Collection
argument_list|<
name|Permission
argument_list|>
name|permissions
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permissions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|isPermitted
argument_list|(
name|permissions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

