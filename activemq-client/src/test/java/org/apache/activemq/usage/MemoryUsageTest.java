begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryUsageTest
block|{
name|MemoryUsage
name|underTest
decl_stmt|;
name|ThreadPoolExecutor
name|executor
decl_stmt|;
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testPercentUsageNeedsNoThread
parameter_list|()
block|{
name|int
name|activeThreadCount
init|=
name|Thread
operator|.
name|activeCount
argument_list|()
decl_stmt|;
name|underTest
operator|.
name|setLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|start
argument_list|()
expr_stmt|;
name|underTest
operator|.
name|increaseUsage
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"usage is correct"
argument_list|,
literal|10
argument_list|,
name|underTest
operator|.
name|getPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no new thread created without listener or callback"
argument_list|,
name|activeThreadCount
argument_list|,
name|Thread
operator|.
name|activeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testAddUsageListenerStartsThread
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|activeThreadCount
init|=
name|Thread
operator|.
name|activeCount
argument_list|()
decl_stmt|;
name|underTest
operator|=
operator|new
name|MemoryUsage
argument_list|()
expr_stmt|;
name|underTest
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|called
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|listnerThreadNameHolder
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|underTest
operator|.
name|addUsageListener
argument_list|(
operator|new
name|UsageListener
argument_list|()
block|{
specifier|public
name|void
name|onUsageChanged
parameter_list|(
name|Usage
name|usage
parameter_list|,
name|int
name|oldPercentUsage
parameter_list|,
name|int
name|newPercentUsage
parameter_list|)
block|{
name|called
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|listnerThreadNameHolder
index|[
literal|0
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|increaseUsage
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"listener was called"
argument_list|,
name|called
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"listener called from another thread"
argument_list|,
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|listnerThreadNameHolder
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"usage is correct"
argument_list|,
literal|10
argument_list|,
name|underTest
operator|.
name|getPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new thread created with listener"
argument_list|,
name|activeThreadCount
operator|+
literal|1
argument_list|,
name|Thread
operator|.
name|activeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPercentOfJvmHeap
parameter_list|()
throws|throws
name|Exception
block|{
name|underTest
operator|.
name|setPercentOfJvmHeap
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"limit is half jvm limit"
argument_list|,
name|Math
operator|.
name|round
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|/
literal|2.0
argument_list|)
argument_list|,
name|underTest
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParentPortion
parameter_list|()
throws|throws
name|Exception
block|{
name|underTest
operator|.
name|setLimit
argument_list|(
literal|1491035750
argument_list|)
expr_stmt|;
name|MemoryUsage
name|child
init|=
operator|new
name|MemoryUsage
argument_list|(
name|underTest
argument_list|,
literal|"child"
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"limits are matched whole"
argument_list|,
name|underTest
operator|.
name|getLimit
argument_list|()
argument_list|,
name|child
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|setUsagePortion
argument_list|(
literal|1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"limits are still matched whole"
argument_list|,
name|underTest
operator|.
name|getLimit
argument_list|()
argument_list|,
name|child
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|underTest
operator|=
operator|new
name|MemoryUsage
argument_list|()
expr_stmt|;
name|this
operator|.
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"Usage Async Task"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setExecutor
argument_list|(
name|this
operator|.
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|underTest
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|executor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

