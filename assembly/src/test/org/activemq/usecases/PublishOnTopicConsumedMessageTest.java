begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|test
operator|.
name|JmsTopicSendReceiveWithTwoConnectionsTest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|PublishOnTopicConsumedMessageTest
extends|extends
name|JmsTopicSendReceiveWithTwoConnectionsTest
block|{
specifier|private
name|MessageProducer
name|replyProducer
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
comment|// lets resend the message somewhere else
try|try
block|{
name|Message
name|msgCopy
init|=
call|(
name|Message
call|)
argument_list|(
operator|(
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
operator|)
name|message
argument_list|)
operator|.
name|copy
argument_list|()
decl_stmt|;
name|replyProducer
operator|.
name|send
argument_list|(
name|msgCopy
argument_list|)
expr_stmt|;
comment|//System.out.println("Sending reply: " + message);
name|super
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to send message: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Destination
name|replyDestination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|replyDestination
operator|=
name|receiveSession
operator|.
name|createTopic
argument_list|(
literal|"REPLY."
operator|+
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replyDestination
operator|=
name|receiveSession
operator|.
name|createQueue
argument_list|(
literal|"REPLY."
operator|+
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|replyProducer
operator|=
name|receiveSession
operator|.
name|createProducer
argument_list|(
name|replyDestination
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created replyProducer: "
operator|+
name|replyProducer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

