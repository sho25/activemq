begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_class
specifier|public
class|class
name|JmsLogAppenderTest
extends|extends
name|TestCase
block|{
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|public
name|void
name|testLoggingWithJMS
parameter_list|()
throws|throws
name|IOException
throws|,
name|JMSException
block|{
comment|// Setup the consumers
name|MessageConsumer
name|info
decl_stmt|,
name|debug
decl_stmt|,
name|warn
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|warn
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"log4j.MAIN.WARN"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"log4j.MAIN.INFO"
argument_list|)
argument_list|)
expr_stmt|;
name|debug
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"log4j.MAIN.DEBUG"
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets try configure log4j
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"test-log4j.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|Logger
name|warnLog
decl_stmt|,
name|infoLog
decl_stmt|,
name|debugLog
decl_stmt|;
name|warnLog
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"MAIN.WARN"
argument_list|)
expr_stmt|;
name|warnLog
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|warnLog
operator|.
name|warn
argument_list|(
literal|"Warn Message"
argument_list|)
expr_stmt|;
name|warnLog
operator|.
name|info
argument_list|(
literal|"Info Message"
argument_list|)
expr_stmt|;
name|warnLog
operator|.
name|debug
argument_list|(
literal|"Debug Message"
argument_list|)
expr_stmt|;
name|infoLog
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"MAIN.INFO"
argument_list|)
expr_stmt|;
name|infoLog
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|infoLog
operator|.
name|warn
argument_list|(
literal|"Warn Message"
argument_list|)
expr_stmt|;
name|infoLog
operator|.
name|info
argument_list|(
literal|"Info Message"
argument_list|)
expr_stmt|;
name|infoLog
operator|.
name|debug
argument_list|(
literal|"Debug Message"
argument_list|)
expr_stmt|;
name|debugLog
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"MAIN.DEBUG"
argument_list|)
expr_stmt|;
name|debugLog
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|debugLog
operator|.
name|warn
argument_list|(
literal|"Warn Message"
argument_list|)
expr_stmt|;
name|debugLog
operator|.
name|info
argument_list|(
literal|"Info Message"
argument_list|)
expr_stmt|;
name|debugLog
operator|.
name|debug
argument_list|(
literal|"Debug Message"
argument_list|)
expr_stmt|;
name|TextMessage
name|msg
decl_stmt|;
comment|// Test warn level
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|warn
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Warn Message"
argument_list|,
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|warn
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// We should not receive anymore message because our level is warning only
comment|// Test info level
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|info
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Warn Message"
argument_list|,
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|info
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Info Message"
argument_list|,
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|info
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// We should not receive the debug message
comment|// Test debug level
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|debug
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Warn Message"
argument_list|,
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|debug
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Info Message"
argument_list|,
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|debug
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

