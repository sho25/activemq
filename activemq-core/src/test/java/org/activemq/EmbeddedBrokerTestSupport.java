begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * A useful base class which creates and closes an embedded broker  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddedBrokerTestSupport
extends|extends
name|TestCase
block|{
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
comment|//protected String bindAddress = "tcp://localhost:61616";
specifier|protected
name|String
name|bindAddress
init|=
literal|"vm://localhost"
decl_stmt|;
specifier|protected
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|protected
name|boolean
name|useTopic
init|=
literal|false
decl_stmt|;
specifier|protected
name|Destination
name|destination
decl_stmt|;
specifier|protected
name|JmsTemplate
name|template
decl_stmt|;
specifier|private
name|boolean
name|usePooledConnectionWithTemplate
init|=
literal|true
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
name|startBroker
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
name|createConnectionFactory
argument_list|()
expr_stmt|;
name|destination
operator|=
name|createDestination
argument_list|()
expr_stmt|;
name|template
operator|=
name|createJmsTemplate
argument_list|()
expr_stmt|;
name|template
operator|.
name|setDefaultDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|template
operator|.
name|setPubSubDomain
argument_list|(
name|useTopic
argument_list|)
expr_stmt|;
name|template
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Factory method to create a new {@link JmsTemplate}      *       * @return a newly created JmsTemplate      */
specifier|protected
name|JmsTemplate
name|createJmsTemplate
parameter_list|()
block|{
if|if
condition|(
name|usePooledConnectionWithTemplate
condition|)
block|{
comment|// lets use a pool to avoid creating and closing producers
return|return
operator|new
name|JmsTemplate
argument_list|(
operator|new
name|PooledConnectionFactory
argument_list|(
name|bindAddress
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|JmsTemplate
argument_list|(
name|connectionFactory
argument_list|)
return|;
block|}
block|}
comment|/**      * Factory method to create a new {@link Destination}      *       * @return newly created Destinaiton      */
specifier|protected
name|Destination
name|createDestination
parameter_list|()
block|{
return|return
name|createDestination
argument_list|(
name|getDestinationString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Factory method to create the destination in either the queue or topic      * space based on the value of the {@link #useTopic} field      */
specifier|protected
name|Destination
name|createDestination
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
if|if
condition|(
name|useTopic
condition|)
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|subject
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
name|subject
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the name of the destination used in this test case      */
specifier|protected
name|String
name|getDestinationString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
return|;
block|}
comment|/**      * Factory method to create a new {@link ConnectionFactory} instance      *       * @return a newly created connection factory      */
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|bindAddress
argument_list|)
return|;
block|}
comment|/**      * Factory method to create a new broker      *       * @throws Exception      */
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
name|isPersistent
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return whether or not persistence should be used      */
specifier|protected
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Factory method to create a new connection      */
specifier|protected
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connectionFactory
operator|.
name|createConnection
argument_list|()
return|;
block|}
block|}
end_class

end_unit

