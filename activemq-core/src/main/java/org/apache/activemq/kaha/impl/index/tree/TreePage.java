begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Page in a BTree  *   *   */
end_comment

begin_class
class|class
name|TreePage
block|{
specifier|static
specifier|final
name|int
name|PAGE_HEADER_SIZE
init|=
literal|18
decl_stmt|;
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TreePage
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
enum|enum
name|Flavour
block|{
name|LESS
block|,
name|MORE
block|}
specifier|private
name|TreeIndex
name|tree
decl_stmt|;
specifier|private
name|int
name|maximumEntries
decl_stmt|;
specifier|private
name|long
name|id
decl_stmt|;
specifier|private
name|long
name|parentId
init|=
name|TreeEntry
operator|.
name|NOT_SET
decl_stmt|;
specifier|private
name|boolean
name|leaf
init|=
literal|true
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|treeEntries
decl_stmt|;
comment|/*      * for persistence only      */
specifier|private
name|long
name|nextFreePageId
init|=
name|TreeEntry
operator|.
name|NOT_SET
decl_stmt|;
specifier|private
name|boolean
name|active
init|=
literal|true
decl_stmt|;
comment|/**      * Constructor      *       * @param tree      * @param id      * @param parentId      * @param maximumEntries      */
name|TreePage
parameter_list|(
name|TreeIndex
name|tree
parameter_list|,
name|long
name|id
parameter_list|,
name|long
name|parentId
parameter_list|,
name|int
name|maximumEntries
parameter_list|)
block|{
name|this
argument_list|(
name|maximumEntries
argument_list|)
expr_stmt|;
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|parentId
operator|=
name|parentId
expr_stmt|;
block|}
comment|/**      * Constructor      *       * @param maximumEntries      */
specifier|public
name|TreePage
parameter_list|(
name|int
name|maximumEntries
parameter_list|)
block|{
name|this
operator|.
name|maximumEntries
operator|=
name|maximumEntries
expr_stmt|;
name|this
operator|.
name|treeEntries
operator|=
operator|new
name|ArrayList
argument_list|<
name|TreeEntry
argument_list|>
argument_list|(
name|maximumEntries
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TreePage["
operator|+
name|getId
argument_list|()
operator|+
literal|"]parent="
operator|+
name|getParentId
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|TreePage
condition|)
block|{
name|TreePage
name|other
init|=
operator|(
name|TreePage
operator|)
name|o
decl_stmt|;
name|result
operator|=
name|other
operator|.
name|id
operator|==
name|id
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|id
return|;
block|}
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|this
operator|.
name|active
return|;
block|}
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
block|}
name|long
name|getNextFreePageId
parameter_list|()
block|{
return|return
name|this
operator|.
name|nextFreePageId
return|;
block|}
name|void
name|setNextFreePageId
parameter_list|(
name|long
name|nextPageId
parameter_list|)
block|{
name|this
operator|.
name|nextFreePageId
operator|=
name|nextPageId
expr_stmt|;
block|}
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
name|void
name|setId
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
name|void
name|write
parameter_list|(
name|Marshaller
name|keyMarshaller
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|writeHeader
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|treeEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeEntry
name|entry
range|:
name|treeEntries
control|)
block|{
name|entry
operator|.
name|write
argument_list|(
name|keyMarshaller
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|read
parameter_list|(
name|Marshaller
name|keyMarshaller
parameter_list|,
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|readHeader
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|treeEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|TreeEntry
name|entry
init|=
operator|new
name|TreeEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|read
argument_list|(
name|keyMarshaller
argument_list|,
name|dataIn
argument_list|)
expr_stmt|;
name|treeEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|readHeader
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|active
operator|=
name|dataIn
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|leaf
operator|=
name|dataIn
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|setParentId
argument_list|(
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|nextFreePageId
operator|=
name|dataIn
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|void
name|writeHeader
parameter_list|(
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeBoolean
argument_list|(
name|isLeaf
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|nextFreePageId
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|treeEntries
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|treeEntries
operator|.
name|size
argument_list|()
operator|>=
name|maximumEntries
return|;
block|}
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|getParentId
argument_list|()
operator|<
literal|0
return|;
block|}
name|boolean
name|isLeaf
parameter_list|()
block|{
if|if
condition|(
name|treeEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|leaf
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|leaf
return|;
block|}
name|boolean
name|isUnderflowed
parameter_list|()
block|{
return|return
name|treeEntries
operator|.
name|size
argument_list|()
operator|<
operator|(
name|maximumEntries
operator|/
literal|2
operator|)
return|;
block|}
name|boolean
name|isOverflowed
parameter_list|()
block|{
return|return
name|treeEntries
operator|.
name|size
argument_list|()
operator|>
name|maximumEntries
return|;
block|}
name|void
name|setLeaf
parameter_list|(
name|boolean
name|newValue
parameter_list|)
block|{
name|this
operator|.
name|leaf
operator|=
name|newValue
expr_stmt|;
block|}
name|TreePage
name|getParent
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|tree
operator|.
name|lookupPage
argument_list|(
name|parentId
argument_list|)
return|;
block|}
name|long
name|getParentId
parameter_list|()
block|{
return|return
name|parentId
return|;
block|}
name|void
name|setParentId
parameter_list|(
name|long
name|newId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|newId
operator|==
name|this
operator|.
name|id
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot set page as a child of itself "
operator|+
name|this
operator|+
literal|" trying to set parentId = "
operator|+
name|newId
argument_list|)
throw|;
block|}
name|this
operator|.
name|parentId
operator|=
name|newId
expr_stmt|;
name|tree
operator|.
name|writePage
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|treeEntries
return|;
block|}
name|void
name|setEntries
parameter_list|(
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|newEntries
parameter_list|)
block|{
name|this
operator|.
name|treeEntries
operator|=
name|newEntries
expr_stmt|;
block|}
name|int
name|getMaximumEntries
parameter_list|()
block|{
return|return
name|this
operator|.
name|maximumEntries
return|;
block|}
name|void
name|setMaximumEntries
parameter_list|(
name|int
name|maximumEntries
parameter_list|)
block|{
name|this
operator|.
name|maximumEntries
operator|=
name|maximumEntries
expr_stmt|;
block|}
name|int
name|size
parameter_list|()
block|{
return|return
name|treeEntries
operator|.
name|size
argument_list|()
return|;
block|}
name|TreeIndex
name|getTree
parameter_list|()
block|{
return|return
name|this
operator|.
name|tree
return|;
block|}
name|void
name|setTree
parameter_list|(
name|TreeIndex
name|tree
parameter_list|)
block|{
name|this
operator|.
name|tree
operator|=
name|tree
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|treeEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setParentId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
name|setNextFreePageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
name|setLeaf
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TreeEntry
name|find
parameter_list|(
name|TreeEntry
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|long
name|pageId
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>
literal|1
decl_stmt|;
name|TreeEntry
name|te
init|=
name|getTreeEntry
argument_list|(
name|mid
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|te
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|te
return|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
name|pageId
operator|=
name|te
operator|.
name|getNextPageId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
name|pageId
operator|=
name|te
operator|.
name|getPrevPageId
argument_list|()
expr_stmt|;
block|}
block|}
name|TreePage
name|page
init|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|pageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
return|return
name|page
operator|.
name|find
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|TreeEntry
name|put
parameter_list|(
name|TreeEntry
name|newEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeEntry
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isRoot
argument_list|()
condition|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
name|insertTreeEntry
argument_list|(
literal|0
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|doInsert
argument_list|(
literal|null
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"insert() should not be called on non root page - "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
name|TreeEntry
name|remove
parameter_list|(
name|TreeEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeEntry
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isRoot
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
name|doRemove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"remove() should not be called on non root page"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|TreeEntry
name|doInsert
parameter_list|(
name|Flavour
name|flavour
parameter_list|,
name|TreeEntry
name|newEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeEntry
name|result
init|=
literal|null
decl_stmt|;
name|TreePageEntry
name|closest
init|=
name|findClosestEntry
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|closest
operator|!=
literal|null
condition|)
block|{
name|TreeEntry
name|closestEntry
init|=
name|closest
operator|.
name|getTreeEntry
argument_list|()
decl_stmt|;
name|TreePage
name|closestPage
init|=
name|closest
operator|.
name|getTreePage
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
name|closestEntry
operator|.
name|compareTo
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
comment|// we actually just need to pass back the value
name|long
name|oldValue
init|=
name|closestEntry
operator|.
name|getIndexOffset
argument_list|()
decl_stmt|;
name|closestEntry
operator|.
name|setIndexOffset
argument_list|(
name|newEntry
operator|.
name|getIndexOffset
argument_list|()
argument_list|)
expr_stmt|;
name|newEntry
operator|.
name|setIndexOffset
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
name|result
operator|=
name|newEntry
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|closestPage
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|closestPage
operator|.
name|doInsert
argument_list|(
name|closest
operator|.
name|getFlavour
argument_list|()
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isFull
argument_list|()
condition|)
block|{
name|insertTreeEntry
argument_list|(
name|closest
operator|.
name|getIndex
argument_list|()
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doOverflow
argument_list|(
name|flavour
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isFull
argument_list|()
condition|)
block|{
name|doInsertEntry
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// need to insert the new entry and propogate up the hightest
comment|// value
name|doOverflow
argument_list|(
name|flavour
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|TreePage
name|doOverflow
parameter_list|(
name|Flavour
name|flavour
parameter_list|,
name|TreeEntry
name|newEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|TreePage
name|result
init|=
name|this
decl_stmt|;
name|TreeEntry
name|theEntry
init|=
name|newEntry
decl_stmt|;
if|if
condition|(
operator|!
name|isFull
argument_list|()
condition|)
block|{
name|doInsertEntry
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isRoot
argument_list|()
operator|&&
name|flavour
operator|!=
literal|null
condition|)
block|{
comment|// we aren't the root, but to ensure the correct distribution we
comment|// need to
comment|// insert the new entry and take a node of the end of the page
comment|// and pass that up the tree to find a home
name|doInsertEntry
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|flavour
operator|==
name|Flavour
operator|.
name|LESS
condition|)
block|{
name|theEntry
operator|=
name|removeTreeEntry
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|theEntry
operator|.
name|reset
argument_list|()
expr_stmt|;
name|theEntry
operator|.
name|setNextPageId
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theEntry
operator|=
name|removeTreeEntry
argument_list|(
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|theEntry
operator|.
name|reset
argument_list|()
expr_stmt|;
name|theEntry
operator|.
name|setPrevPageId
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|save
argument_list|()
expr_stmt|;
name|result
operator|=
name|getParent
argument_list|()
operator|.
name|doOverflow
argument_list|(
name|flavour
argument_list|,
name|theEntry
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|theEntry
operator|.
name|equals
argument_list|(
name|newEntry
argument_list|)
condition|)
block|{
comment|// the newEntry stayed here
name|result
operator|=
name|this
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// so we are the root and need to split
name|doInsertEntry
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|int
name|midIndex
init|=
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|TreeEntry
name|midEntry
init|=
name|removeTreeEntry
argument_list|(
name|midIndex
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|subList
init|=
name|getSubList
argument_list|(
name|midIndex
argument_list|,
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|removeAllTreeEntries
argument_list|(
name|subList
argument_list|)
expr_stmt|;
name|TreePage
name|newRoot
init|=
name|tree
operator|.
name|createRoot
argument_list|()
decl_stmt|;
name|newRoot
operator|.
name|setLeaf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|setParentId
argument_list|(
name|newRoot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
comment|// we are no longer root - need to save - we maybe
comment|// looked up v. soon!
name|TreePage
name|rightPage
init|=
name|tree
operator|.
name|createPage
argument_list|(
name|newRoot
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|rightPage
operator|.
name|setEntries
argument_list|(
name|subList
argument_list|)
expr_stmt|;
name|rightPage
operator|.
name|checkLeaf
argument_list|()
expr_stmt|;
name|resetParentId
argument_list|(
name|rightPage
operator|.
name|getId
argument_list|()
argument_list|,
name|rightPage
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|midEntry
operator|.
name|setNextPageId
argument_list|(
name|rightPage
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|midEntry
operator|.
name|setPrevPageId
argument_list|(
name|this
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|newRoot
operator|.
name|insertTreeEntry
argument_list|(
literal|0
argument_list|,
name|midEntry
argument_list|)
expr_stmt|;
name|resetParentId
argument_list|(
name|newRoot
operator|.
name|getId
argument_list|()
argument_list|,
name|newRoot
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
name|rightPage
operator|.
name|save
argument_list|()
expr_stmt|;
name|newRoot
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|TreeEntry
name|doRemove
parameter_list|(
name|TreeEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeEntry
name|result
init|=
literal|null
decl_stmt|;
name|TreePageEntry
name|closest
init|=
name|findClosestEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|closest
operator|!=
literal|null
condition|)
block|{
name|TreeEntry
name|closestEntry
init|=
name|closest
operator|.
name|getTreeEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|closestEntry
operator|!=
literal|null
condition|)
block|{
name|TreePage
name|closestPage
init|=
name|closest
operator|.
name|getTreePage
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
name|closestEntry
operator|.
name|compareTo
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|closest
operator|.
name|getTreeEntry
argument_list|()
expr_stmt|;
name|int
name|index
init|=
name|closest
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|removeTreeEntry
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
comment|// ensure we don't loose children
name|doUnderflow
argument_list|(
name|result
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|closestPage
operator|!=
literal|null
condition|)
block|{
name|closestPage
operator|.
name|doRemove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return true if the page is removed      * @throws IOException      */
specifier|private
name|boolean
name|doUnderflow
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|boolean
name|working
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|working
operator|&&
name|isUnderflowed
argument_list|()
operator|&&
operator|!
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isLeaf
argument_list|()
condition|)
block|{
name|int
name|lastIndex
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|TreeEntry
name|entry
init|=
name|getTreeEntry
argument_list|(
name|lastIndex
argument_list|)
decl_stmt|;
name|working
operator|=
name|doUnderflow
argument_list|(
name|entry
argument_list|,
name|lastIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUnderflowed
argument_list|()
operator|&&
name|isLeaf
argument_list|()
condition|)
block|{
name|result
operator|=
name|doUnderflowLeaf
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|doUnderflow
parameter_list|(
name|TreeEntry
name|entry
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
comment|// pull an entry up from a leaf to fill the empty space
if|if
condition|(
name|entry
operator|.
name|getNextPageId
argument_list|()
operator|!=
name|TreeEntry
operator|.
name|NOT_SET
condition|)
block|{
name|TreePage
name|page
init|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|entry
operator|.
name|getNextPageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
operator|&&
operator|!
name|page
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeEntry
name|replacement
init|=
name|page
operator|.
name|removeTreeEntry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TreeEntry
name|copy
init|=
name|replacement
operator|.
name|copy
argument_list|()
decl_stmt|;
name|checkParentIdForRemovedPageEntry
argument_list|(
name|copy
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|page
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|copy
operator|.
name|setNextPageId
argument_list|(
name|page
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|page
operator|.
name|setParentId
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|.
name|setLeaf
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|int
name|replacementIndex
init|=
name|doInsertEntry
argument_list|(
name|copy
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|.
name|doUnderflow
argument_list|()
condition|)
block|{
comment|// page removed so update our replacement
name|resetPageReference
argument_list|(
name|replacementIndex
argument_list|,
name|copy
operator|.
name|getNextPageId
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setNextPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|save
argument_list|()
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// ensure we don't loose previous bit of the tree
if|if
condition|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
operator|!=
name|TreeEntry
operator|.
name|NOT_SET
condition|)
block|{
name|TreeEntry
name|prevEntry
init|=
operator|(
name|index
operator|>
literal|0
operator|)
condition|?
name|getTreeEntry
argument_list|(
name|index
operator|-
literal|1
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|prevEntry
operator|==
literal|null
operator|||
name|prevEntry
operator|.
name|getNextPageId
argument_list|()
operator|!=
name|entry
operator|.
name|getPrevPageId
argument_list|()
condition|)
block|{
name|TreePage
name|page
init|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
operator|&&
operator|!
name|page
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeEntry
name|replacement
init|=
name|page
operator|.
name|removeTreeEntry
argument_list|(
name|page
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|TreeEntry
name|copy
init|=
name|replacement
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// check children pages of the replacement point to the
comment|// correct place
name|checkParentIdForRemovedPageEntry
argument_list|(
name|copy
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|page
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|copy
operator|.
name|setPrevPageId
argument_list|(
name|page
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|page
operator|.
name|setLeaf
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|insertTreeEntry
argument_list|(
name|index
argument_list|,
name|copy
argument_list|)
expr_stmt|;
comment|// if we overflow - the page the replacement ends up on
name|TreePage
name|landed
init|=
literal|null
decl_stmt|;
name|TreeEntry
name|removed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isOverflowed
argument_list|()
condition|)
block|{
name|TreePage
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|removed
operator|=
name|getTreeEntry
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Flavour
name|flavour
init|=
name|getFlavour
argument_list|(
name|parent
argument_list|,
name|removed
argument_list|)
decl_stmt|;
if|if
condition|(
name|flavour
operator|==
name|Flavour
operator|.
name|LESS
condition|)
block|{
name|removed
operator|=
name|removeTreeEntry
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|landed
operator|=
name|parent
operator|.
name|doOverflow
argument_list|(
name|flavour
argument_list|,
name|removed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removed
operator|=
name|removeTreeEntry
argument_list|(
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|landed
operator|=
name|parent
operator|.
name|doOverflow
argument_list|(
name|Flavour
operator|.
name|MORE
argument_list|,
name|removed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|page
operator|.
name|doUnderflow
argument_list|()
condition|)
block|{
if|if
condition|(
name|landed
operator|==
literal|null
operator|||
name|landed
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|landed
operator|=
name|this
expr_stmt|;
block|}
name|resetPageReference
argument_list|(
name|copy
operator|.
name|getNextPageId
argument_list|()
argument_list|)
expr_stmt|;
name|landed
operator|.
name|resetPageReference
argument_list|(
name|copy
operator|.
name|getNextPageId
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setPrevPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
name|landed
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|page
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|save
argument_list|()
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
comment|// now we need to check we haven't overflowed this page
block|}
block|}
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|save
argument_list|()
expr_stmt|;
block|}
comment|// now see if we need to save this page
name|result
operator||=
name|doUnderflowLeaf
argument_list|()
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|doUnderflowLeaf
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
comment|// if we have unerflowed - and we are a leaf - push entries further up
comment|// the tree
comment|// and delete ourselves
if|if
condition|(
name|isUnderflowed
argument_list|()
operator|&&
name|isLeaf
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|TreeEntry
argument_list|>
argument_list|(
name|treeEntries
argument_list|)
decl_stmt|;
name|treeEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|TreeEntry
name|entry
range|:
name|list
control|)
block|{
comment|// need to check for each iteration - we might get promoted to
comment|// root
name|TreePage
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Flavour
name|flavour
init|=
name|getFlavour
argument_list|(
name|parent
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|TreePage
name|landedOn
init|=
name|parent
operator|.
name|doOverflow
argument_list|(
name|flavour
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|checkParentIdForRemovedPageEntry
argument_list|(
name|entry
argument_list|,
name|getId
argument_list|()
argument_list|,
name|landedOn
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|TreePage
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|checkLeaf
argument_list|()
expr_stmt|;
name|parent
operator|.
name|removePageId
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|doUnderflow
argument_list|()
expr_stmt|;
name|parent
operator|.
name|save
argument_list|()
expr_stmt|;
name|tree
operator|.
name|releasePage
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Flavour
name|getFlavour
parameter_list|(
name|TreePage
name|page
parameter_list|,
name|TreeEntry
name|entry
parameter_list|)
block|{
name|Flavour
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
operator|&&
operator|!
name|page
operator|.
name|getEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeEntry
name|last
init|=
name|page
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
name|page
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|compareTo
argument_list|(
name|entry
argument_list|)
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|Flavour
operator|.
name|MORE
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|Flavour
operator|.
name|LESS
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|checkLeaf
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TreeEntry
name|entry
range|:
name|treeEntries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|hasChildPagesReferences
argument_list|()
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|setLeaf
argument_list|(
operator|!
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkParentIdForRemovedPageEntry
parameter_list|(
name|TreeEntry
name|entry
parameter_list|,
name|long
name|oldPageId
parameter_list|,
name|long
name|newPageId
parameter_list|)
throws|throws
name|IOException
block|{
name|TreePage
name|page
init|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
operator|&&
name|page
operator|.
name|getParentId
argument_list|()
operator|==
name|oldPageId
condition|)
block|{
name|page
operator|.
name|setParentId
argument_list|(
name|newPageId
argument_list|)
expr_stmt|;
name|page
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|page
operator|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|entry
operator|.
name|getNextPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
operator|&&
name|page
operator|.
name|getParentId
argument_list|()
operator|==
name|oldPageId
condition|)
block|{
name|page
operator|.
name|setParentId
argument_list|(
name|newPageId
argument_list|)
expr_stmt|;
name|page
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removePageId
parameter_list|(
name|long
name|pageId
parameter_list|)
block|{
for|for
control|(
name|TreeEntry
name|entry
range|:
name|treeEntries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getNextPageId
argument_list|()
operator|==
name|pageId
condition|)
block|{
name|entry
operator|.
name|setNextPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
operator|==
name|pageId
condition|)
block|{
name|entry
operator|.
name|setPrevPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|TreePageEntry
name|findClosestEntry
parameter_list|(
name|TreeEntry
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|TreePageEntry
name|result
init|=
literal|null
decl_stmt|;
name|TreeEntry
name|treeEntry
init|=
literal|null
decl_stmt|;
name|Flavour
name|flavour
init|=
literal|null
decl_stmt|;
name|long
name|pageId
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|mid
init|=
name|low
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|mid
operator|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>
literal|1
expr_stmt|;
name|treeEntry
operator|=
name|getTreeEntry
argument_list|(
name|mid
argument_list|)
expr_stmt|;
name|int
name|cmp
init|=
name|treeEntry
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
name|pageId
operator|=
name|treeEntry
operator|.
name|getNextPageId
argument_list|()
expr_stmt|;
name|flavour
operator|=
name|Flavour
operator|.
name|LESS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
name|pageId
operator|=
name|treeEntry
operator|.
name|getPrevPageId
argument_list|()
expr_stmt|;
name|flavour
operator|=
name|Flavour
operator|.
name|MORE
expr_stmt|;
block|}
else|else
block|{
comment|// got exact match
name|low
operator|=
name|mid
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|treeEntry
operator|!=
literal|null
condition|)
block|{
name|TreePage
name|treePage
init|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|pageId
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|TreePageEntry
argument_list|(
name|treeEntry
argument_list|,
name|treePage
argument_list|,
name|flavour
argument_list|,
name|low
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|int
name|doInsertEntry
parameter_list|(
name|TreeEntry
name|newEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|low
init|=
literal|0
decl_stmt|;
name|int
name|high
init|=
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>
literal|1
decl_stmt|;
name|TreeEntry
name|midVal
init|=
name|getTreeEntry
argument_list|(
name|mid
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|midVal
operator|.
name|compareTo
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|insertTreeEntry
argument_list|(
name|low
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
return|return
name|low
return|;
block|}
specifier|private
name|void
name|insertTreeEntry
parameter_list|(
name|int
name|index
parameter_list|,
name|TreeEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|p
init|=
name|index
operator|-
literal|1
decl_stmt|;
name|int
name|n
init|=
name|index
decl_stmt|;
name|TreeEntry
name|prevEntry
init|=
operator|(
name|p
operator|>=
literal|0
operator|&&
name|p
operator|<
name|treeEntries
operator|.
name|size
argument_list|()
operator|)
condition|?
name|treeEntries
operator|.
name|get
argument_list|(
name|p
argument_list|)
else|:
literal|null
decl_stmt|;
name|TreeEntry
name|nextEntry
init|=
operator|(
name|n
operator|>=
literal|0
operator|&&
name|n
operator|<
name|treeEntries
operator|.
name|size
argument_list|()
operator|)
condition|?
name|treeEntries
operator|.
name|get
argument_list|(
name|n
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|prevEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prevEntry
operator|.
name|getNextPageId
argument_list|()
operator|==
name|entry
operator|.
name|getNextPageId
argument_list|()
condition|)
block|{
name|prevEntry
operator|.
name|setNextPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
operator|==
name|TreeEntry
operator|.
name|NOT_SET
condition|)
block|{
name|entry
operator|.
name|setPrevPageId
argument_list|(
name|prevEntry
operator|.
name|getNextPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nextEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextEntry
operator|.
name|getPrevPageId
argument_list|()
operator|==
name|entry
operator|.
name|getPrevPageId
argument_list|()
condition|)
block|{
name|nextEntry
operator|.
name|setPrevPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getNextPageId
argument_list|()
operator|==
name|TreeEntry
operator|.
name|NOT_SET
condition|)
block|{
name|entry
operator|.
name|setNextPageId
argument_list|(
name|nextEntry
operator|.
name|getPrevPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|addTreeEntry
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resetPageReference
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|pageId
parameter_list|)
block|{
name|int
name|p
init|=
name|index
operator|-
literal|1
decl_stmt|;
name|int
name|n
init|=
name|index
decl_stmt|;
name|TreeEntry
name|prevEntry
init|=
operator|(
name|p
operator|>=
literal|0
operator|&&
name|p
operator|<
name|treeEntries
operator|.
name|size
argument_list|()
operator|)
condition|?
name|treeEntries
operator|.
name|get
argument_list|(
name|p
argument_list|)
else|:
literal|null
decl_stmt|;
name|TreeEntry
name|nextEntry
init|=
operator|(
name|n
operator|>=
literal|0
operator|&&
name|n
operator|<
name|treeEntries
operator|.
name|size
argument_list|()
operator|)
condition|?
name|treeEntries
operator|.
name|get
argument_list|(
name|n
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|prevEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prevEntry
operator|.
name|getNextPageId
argument_list|()
operator|==
name|pageId
condition|)
block|{
name|prevEntry
operator|.
name|setNextPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nextEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextEntry
operator|.
name|getPrevPageId
argument_list|()
operator|==
name|pageId
condition|)
block|{
name|nextEntry
operator|.
name|setPrevPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|resetPageReference
parameter_list|(
name|long
name|pageId
parameter_list|)
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TreeEntry
name|entry
range|:
name|treeEntries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
operator|==
name|pageId
condition|)
block|{
name|entry
operator|.
name|setPrevPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getNextPageId
argument_list|()
operator|==
name|pageId
condition|)
block|{
name|entry
operator|.
name|setNextPageId
argument_list|(
name|TreeEntry
operator|.
name|NOT_SET
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|updated
return|;
block|}
specifier|private
name|void
name|resetParentId
parameter_list|(
name|long
name|newParentId
parameter_list|,
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TreeEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getNextPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Long
name|pageId
range|:
name|set
control|)
block|{
name|TreePage
name|page
init|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|pageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
name|page
operator|.
name|setParentId
argument_list|(
name|newParentId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addTreeEntry
parameter_list|(
name|int
name|index
parameter_list|,
name|TreeEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|treeEntries
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TreeEntry
name|removeTreeEntry
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeEntry
name|result
init|=
name|treeEntries
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|removeAllTreeEntries
parameter_list|(
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|c
parameter_list|)
block|{
name|treeEntries
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|TreeEntry
argument_list|>
name|getSubList
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|TreeEntry
argument_list|>
argument_list|(
name|treeEntries
operator|.
name|subList
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|TreeEntry
name|getTreeEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|TreeEntry
name|result
init|=
name|treeEntries
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
name|void
name|saveHeader
parameter_list|()
throws|throws
name|IOException
block|{
name|tree
operator|.
name|writePage
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|void
name|save
parameter_list|()
throws|throws
name|IOException
block|{
name|tree
operator|.
name|writeFullPage
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|dump
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TreeEntry
name|entry
range|:
name|treeEntries
control|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getPrevPageId
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getNextPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Long
name|pageId
range|:
name|set
control|)
block|{
name|TreePage
name|page
init|=
name|tree
operator|.
name|lookupPage
argument_list|(
name|pageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|!=
literal|null
condition|)
block|{
name|page
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

