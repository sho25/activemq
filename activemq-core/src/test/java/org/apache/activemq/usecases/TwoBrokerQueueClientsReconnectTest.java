begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|TwoBrokerQueueClientsReconnectTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|100
decl_stmt|;
comment|// Best if a factor of 100
specifier|protected
specifier|static
specifier|final
name|int
name|PREFETCH_COUNT
init|=
literal|1
decl_stmt|;
specifier|protected
name|int
name|msgsClient1
decl_stmt|,
name|msgsClient2
decl_stmt|;
specifier|protected
name|String
name|broker1
decl_stmt|,
name|broker2
decl_stmt|;
specifier|public
name|void
name|testClientAReceivesOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerA"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerB"
expr_stmt|;
name|doOneClientReceivesOnly
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testClientBReceivesOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerB"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerA"
expr_stmt|;
name|doOneClientReceivesOnly
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doOneClientReceivesOnly
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Bridge brokers
name|bridgeBrokers
argument_list|(
name|broker1
argument_list|,
name|broker2
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|broker2
argument_list|,
name|broker1
argument_list|)
expr_stmt|;
comment|// Run brokers
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Create queue
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Create consumers
name|MessageConsumer
name|client1
init|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|client2
init|=
name|createConsumer
argument_list|(
name|broker2
argument_list|,
name|dest
argument_list|)
decl_stmt|;
comment|// Give clients time to register with broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Always send messages to broker A
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
comment|// Close the second client, messages should be sent to the first client
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Let the first client receive all messages
name|msgsClient1
operator|+=
name|receiveAllMessages
argument_list|(
name|client1
argument_list|)
expr_stmt|;
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// First client should have received 100 messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker1
operator|+
literal|" should have receive all messages."
argument_list|,
name|MESSAGE_COUNT
argument_list|,
name|msgsClient1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClientAReceivesOnlyAfterReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerA"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerB"
expr_stmt|;
name|doOneClientReceivesOnlyAfterReconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testClientBReceivesOnlyAfterReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerB"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerA"
expr_stmt|;
name|doOneClientReceivesOnlyAfterReconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doOneClientReceivesOnlyAfterReconnect
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Bridge brokers
name|bridgeBrokers
argument_list|(
name|broker1
argument_list|,
name|broker2
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|broker2
argument_list|,
name|broker1
argument_list|)
expr_stmt|;
comment|// Run brokers
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Create queue
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Create first consumer
name|MessageConsumer
name|client1
init|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|client2
init|=
name|createConsumer
argument_list|(
name|broker2
argument_list|,
name|dest
argument_list|)
decl_stmt|;
comment|// Give clients time to register with broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Always send message to broker A
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
comment|// Let the first client receive the first 20% of messages
name|msgsClient1
operator|+=
name|receiveExactMessages
argument_list|(
name|client1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disconnect the first client
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create another client for the first broker
name|client1
operator|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Close the second client, messages should be sent to the first client
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Receive the rest of the messages
name|msgsClient1
operator|+=
name|receiveAllMessages
argument_list|(
name|client1
argument_list|)
expr_stmt|;
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The first client should have received 100 messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker1
operator|+
literal|" should have received all messages."
argument_list|,
name|MESSAGE_COUNT
argument_list|,
name|msgsClient1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTwoClientsReceiveClientADisconnects
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerA"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerB"
expr_stmt|;
name|doTwoClientsReceiveOneClientDisconnects
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTwoClientsReceiveClientBDisconnects
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerB"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerA"
expr_stmt|;
name|doTwoClientsReceiveOneClientDisconnects
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doTwoClientsReceiveOneClientDisconnects
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Bridge brokers
name|bridgeBrokers
argument_list|(
name|broker1
argument_list|,
name|broker2
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|broker2
argument_list|,
name|broker1
argument_list|)
expr_stmt|;
comment|// Run brokers
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Create queue
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Create first client
name|MessageConsumer
name|client1
init|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|client2
init|=
name|createConsumer
argument_list|(
name|broker2
argument_list|,
name|dest
argument_list|)
decl_stmt|;
comment|// Give clients time to register with broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Always send messages to broker A
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
comment|// Let each client receive 20% of the messages - 40% total
name|msgsClient1
operator|+=
name|receiveExactMessages
argument_list|(
name|client1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
name|msgsClient2
operator|+=
name|receiveExactMessages
argument_list|(
name|client2
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disconnect the first client
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Let the second client receive the rest of the messages
name|msgsClient2
operator|+=
name|receiveAllMessages
argument_list|(
name|client2
argument_list|)
expr_stmt|;
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// First client should have received 20% of the messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker1
operator|+
literal|" should have received 20% of the messages."
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|,
name|msgsClient1
argument_list|)
expr_stmt|;
comment|// Second client should have received 80% of the messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker2
operator|+
literal|" should have received 80% of the messages."
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.80
argument_list|)
argument_list|,
name|msgsClient2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTwoClientsReceiveClientAReconnects
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerA"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerB"
expr_stmt|;
name|doTwoClientsReceiveOneClientReconnects
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTwoClientsReceiveClientBReconnects
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerB"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerA"
expr_stmt|;
name|doTwoClientsReceiveOneClientReconnects
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doTwoClientsReceiveOneClientReconnects
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Bridge brokers
name|bridgeBrokers
argument_list|(
name|broker1
argument_list|,
name|broker2
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|broker2
argument_list|,
name|broker1
argument_list|)
expr_stmt|;
comment|// Run brokers
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Create queue
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Create the first client
name|MessageConsumer
name|client1
init|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|client2
init|=
name|createConsumer
argument_list|(
name|broker2
argument_list|,
name|dest
argument_list|)
decl_stmt|;
comment|// Give clients time to register with broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Always send messages to broker A
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
comment|// Let each client receive 20% of the messages - 40% total
name|msgsClient1
operator|+=
name|receiveExactMessages
argument_list|(
name|client1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
name|msgsClient2
operator|+=
name|receiveExactMessages
argument_list|(
name|client2
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disconnect the first client
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Let the second client receive 20% more of the total messages
name|msgsClient2
operator|+=
name|receiveExactMessages
argument_list|(
name|client2
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another client for broker 1
name|client1
operator|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Let each client receive 20% of the messages - 40% total
name|msgsClient1
operator|+=
name|receiveExactMessages
argument_list|(
name|client1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
name|msgsClient2
operator|+=
name|receiveExactMessages
argument_list|(
name|client2
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// First client should have received 40 messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker1
operator|+
literal|" should have received 40% of the messages."
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.40
argument_list|)
argument_list|,
name|msgsClient1
argument_list|)
expr_stmt|;
comment|// Second client should have received 60 messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker2
operator|+
literal|" should have received 60% of the messages."
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.60
argument_list|)
argument_list|,
name|msgsClient2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTwoClientsReceiveTwoClientReconnects
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
literal|"BrokerA"
expr_stmt|;
name|broker2
operator|=
literal|"BrokerB"
expr_stmt|;
comment|// Bridge brokers
name|bridgeBrokers
argument_list|(
name|broker1
argument_list|,
name|broker2
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
name|broker2
argument_list|,
name|broker1
argument_list|)
expr_stmt|;
comment|// Run brokers
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Create queue
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Create the first client
name|MessageConsumer
name|client1
init|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|client2
init|=
name|createConsumer
argument_list|(
name|broker2
argument_list|,
name|dest
argument_list|)
decl_stmt|;
comment|// Give clients time to register with broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Always send messages to broker A
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
comment|// Let each client receive 20% of the messages - 40% total
name|msgsClient1
operator|+=
name|receiveExactMessages
argument_list|(
name|client1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
name|msgsClient2
operator|+=
name|receiveExactMessages
argument_list|(
name|client2
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.20
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disconnect both clients
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create another two clients for each broker
name|client1
operator|=
name|createConsumer
argument_list|(
name|broker1
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|client2
operator|=
name|createConsumer
argument_list|(
name|broker2
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Let each client receive 30% more of the total messages  - 60% total
name|msgsClient1
operator|+=
name|receiveExactMessages
argument_list|(
name|client1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.30
argument_list|)
argument_list|)
expr_stmt|;
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
name|msgsClient2
operator|+=
name|receiveExactMessages
argument_list|(
name|client2
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.30
argument_list|)
argument_list|)
expr_stmt|;
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// First client should have received 50% of the messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker1
operator|+
literal|" should have received 50% of the messages."
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.50
argument_list|)
argument_list|,
name|msgsClient1
argument_list|)
expr_stmt|;
comment|// Second client should have received 50% of the messages
name|assertEquals
argument_list|(
literal|"Client for "
operator|+
name|broker2
operator|+
literal|" should have received 50% of the messages."
argument_list|,
call|(
name|int
call|)
argument_list|(
name|MESSAGE_COUNT
operator|*
literal|0.50
argument_list|)
argument_list|,
name|msgsClient2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|receiveExactMessages
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|,
name|int
name|msgCount
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|msg
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|msgCount
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Consumer failed to receive exactly "
operator|+
name|msgCount
operator|+
literal|" messages. Actual messages received is: "
operator|+
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|i
return|;
block|}
specifier|protected
name|int
name|receiveAllMessages
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|msgsReceived
init|=
literal|0
decl_stmt|;
name|Message
name|msg
decl_stmt|;
do|do
block|{
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|msgsReceived
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
name|msg
operator|!=
literal|null
condition|)
do|;
return|return
name|msgsReceived
return|;
block|}
specifier|protected
name|MessageConsumer
name|createConsumer
parameter_list|(
name|String
name|brokerName
parameter_list|,
name|Destination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|createConnection
argument_list|(
name|brokerName
argument_list|)
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
return|return
name|sess
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
return|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Configure broker connection factory
name|ActiveMQConnectionFactory
name|factoryA
decl_stmt|,
name|factoryB
decl_stmt|;
name|factoryA
operator|=
operator|(
name|ActiveMQConnectionFactory
operator|)
name|getConnectionFactory
argument_list|(
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|factoryB
operator|=
operator|(
name|ActiveMQConnectionFactory
operator|)
name|getConnectionFactory
argument_list|(
literal|"BrokerB"
argument_list|)
expr_stmt|;
comment|// Set prefetch policy
name|ActiveMQPrefetchPolicy
name|policy
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setAll
argument_list|(
name|PREFETCH_COUNT
argument_list|)
expr_stmt|;
name|factoryA
operator|.
name|setPrefetchPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|factoryB
operator|.
name|setPrefetchPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|msgsClient1
operator|=
literal|0
expr_stmt|;
name|msgsClient2
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class

end_unit

