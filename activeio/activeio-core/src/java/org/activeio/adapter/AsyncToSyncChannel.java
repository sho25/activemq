begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Adapts a {@see org.activeio.AsyncChannel} so that it provides an   * {@see org.activeio.SynchChannel} interface.    *   * This object buffers asynchronous messages from the {@see org.activeio.AsyncChannel}   * and buffers them in a {@see edu.emory.mathcs.backport.java.util.concurrent.Channel} util the client receives them.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|AsyncToSyncChannel
implements|implements
name|SyncChannel
implements|,
name|AsyncChannelListener
block|{
specifier|private
specifier|final
name|AsyncChannel
name|asyncChannel
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
name|buffer
decl_stmt|;
specifier|static
specifier|public
name|SyncChannel
name|adapt
parameter_list|(
name|org
operator|.
name|activeio
operator|.
name|Channel
name|channel
parameter_list|)
block|{
return|return
name|adapt
argument_list|(
name|channel
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|public
name|SyncChannel
name|adapt
parameter_list|(
name|org
operator|.
name|activeio
operator|.
name|Channel
name|channel
parameter_list|,
name|BlockingQueue
name|upPacketChannel
parameter_list|)
block|{
comment|// It might not need adapting
if|if
condition|(
name|channel
operator|instanceof
name|SyncChannel
condition|)
block|{
return|return
operator|(
name|SyncChannel
operator|)
name|channel
return|;
block|}
comment|// Can we just just undo the adaptor
if|if
condition|(
name|channel
operator|.
name|getClass
argument_list|()
operator|==
name|SyncToAsyncChannel
operator|.
name|class
condition|)
block|{
return|return
operator|(
operator|(
name|SyncToAsyncChannel
operator|)
name|channel
operator|)
operator|.
name|getSynchChannel
argument_list|()
return|;
block|}
return|return
operator|new
name|AsyncToSyncChannel
argument_list|(
operator|(
name|AsyncChannel
operator|)
name|channel
argument_list|,
name|upPacketChannel
argument_list|)
return|;
block|}
comment|/**      * @deprecated {@see #adapt(AsyncChannel)}      */
specifier|public
name|AsyncToSyncChannel
parameter_list|(
name|AsyncChannel
name|asyncChannel
parameter_list|)
block|{
name|this
argument_list|(
name|asyncChannel
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated {@see #adapt(AsyncChannel, Channel)}      */
specifier|public
name|AsyncToSyncChannel
parameter_list|(
name|AsyncChannel
name|asyncChannel
parameter_list|,
name|BlockingQueue
name|upPacketChannel
parameter_list|)
block|{
name|this
operator|.
name|asyncChannel
operator|=
name|asyncChannel
expr_stmt|;
name|this
operator|.
name|asyncChannel
operator|.
name|setAsyncChannelListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|upPacketChannel
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Channel#write(org.activeio.packet.Packet)      */
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|asyncChannel
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Channel#flush()      */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|asyncChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.packet.sync.SyncChannel#read(long)      */
specifier|public
name|Packet
name|read
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Object
name|o
decl_stmt|;
if|if
condition|(
name|timeout
operator|==
name|NO_WAIT_TIMEOUT
condition|)
block|{
name|o
operator|=
name|buffer
operator|.
name|poll
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|timeout
operator|==
name|WAIT_FOREVER_TIMEOUT
condition|)
block|{
name|o
operator|=
name|buffer
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|o
operator|=
name|buffer
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|o
operator|instanceof
name|Packet
condition|)
return|return
operator|(
name|Packet
operator|)
name|o
return|;
name|Throwable
name|e
init|=
operator|(
name|Throwable
operator|)
name|o
decl_stmt|;
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Async error occurred: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.activeio.Disposable#dispose()      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|asyncChannel
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Service#start()      */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|asyncChannel
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Service#stop()      */
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|asyncChannel
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.packet.async.AsyncChannelListener#onPacket(org.activeio.packet.Packet)      */
specifier|public
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
try|try
block|{
name|buffer
operator|.
name|put
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.activeio.packet.async.AsyncChannelListener#onPacketError(org.activeio.ChannelException)      */
specifier|public
name|void
name|onPacketError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
try|try
block|{
name|buffer
operator|.
name|put
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|asyncChannel
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|AsyncChannel
name|getAsyncChannel
parameter_list|()
block|{
return|return
name|asyncChannel
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|asyncChannel
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

