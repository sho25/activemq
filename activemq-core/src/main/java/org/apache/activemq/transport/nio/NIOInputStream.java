begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|BufferUnderflowException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * An optimized buffered input stream for Tcp  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|NIOInputStream
extends|extends
name|InputStream
block|{
specifier|protected
name|int
name|count
decl_stmt|;
specifier|protected
name|int
name|position
decl_stmt|;
specifier|private
specifier|final
name|ByteBuffer
name|in
decl_stmt|;
specifier|public
name|NIOInputStream
parameter_list|(
name|ByteBuffer
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|rc
init|=
name|in
operator|.
name|get
argument_list|()
operator|&
literal|0xff
decl_stmt|;
return|return
name|rc
return|;
block|}
catch|catch
parameter_list|(
name|BufferUnderflowException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|rc
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|in
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|in
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
else|else
block|{
return|return
name|len
operator|==
literal|0
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
block|}
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rc
init|=
name|Math
operator|.
name|min
argument_list|(
operator|(
name|int
operator|)
name|n
argument_list|,
name|in
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|position
argument_list|()
operator|+
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|remaining
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
end_class

end_unit

