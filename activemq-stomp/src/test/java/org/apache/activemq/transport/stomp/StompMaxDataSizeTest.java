begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|StompMaxDataSizeTest
extends|extends
name|StompTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|int
name|TEST_MAX_DATA_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|private
name|StompConnection
name|connection
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{}
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseSslConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioPlusSslConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getAdditionalConfig
parameter_list|()
block|{
return|return
literal|"?transport.maxDataLength="
operator|+
name|TEST_MAX_DATA_SIZE
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOversizedMessageOnPlainSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOversizedMessage
argument_list|(
name|port
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOversizedMessageOnNioSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOversizedMessage
argument_list|(
name|nioPort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|//(timeout = 60000)
specifier|public
name|void
name|testOversizedMessageOnSslSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOversizedMessage
argument_list|(
name|sslPort
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOversizedMessageOnNioSslSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOversizedMessage
argument_list|(
name|nioSslPort
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doTestOversizedMessage
parameter_list|(
name|int
name|port
parameter_list|,
name|boolean
name|useSsl
parameter_list|)
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|(
name|port
argument_list|,
name|useSsl
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|int
name|size
init|=
literal|100
decl_stmt|;
name|char
index|[]
name|bigBodyArray
init|=
operator|new
name|char
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|bigBodyArray
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|String
name|bigBody
init|=
operator|new
name|String
argument_list|(
name|bigBodyArray
argument_list|)
decl_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|bigBody
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MESSAGE"
argument_list|,
name|received
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bigBody
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|TEST_MAX_DATA_SIZE
operator|+
literal|100
expr_stmt|;
name|bigBodyArray
operator|=
operator|new
name|char
index|[
name|size
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|bigBodyArray
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|bigBody
operator|=
operator|new
name|String
argument_list|(
name|bigBodyArray
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|bigBody
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|received
operator|=
name|stompConnection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ERROR"
argument_list|,
name|received
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StompConnection
name|stompConnect
parameter_list|(
name|int
name|port
parameter_list|,
name|boolean
name|ssl
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|stompConnection
operator|==
literal|null
condition|)
block|{
name|stompConnection
operator|=
operator|new
name|StompConnection
argument_list|()
expr_stmt|;
block|}
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ssl
condition|)
block|{
name|socket
operator|=
name|createSslSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socket
operator|=
name|createSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|stompConnection
operator|.
name|open
argument_list|(
name|socket
argument_list|)
expr_stmt|;
return|return
name|stompConnection
return|;
block|}
specifier|protected
name|Socket
name|createSocket
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Socket
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|port
argument_list|)
return|;
block|}
specifier|protected
name|Socket
name|createSslSocket
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|SocketFactory
name|factory
init|=
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|createSocket
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
end_class

end_unit

