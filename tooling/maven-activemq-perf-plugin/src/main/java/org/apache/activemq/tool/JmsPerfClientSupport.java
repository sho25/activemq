begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
package|;
end_package

begin_class
specifier|public
class|class
name|JmsPerfClientSupport
extends|extends
name|JmsConfigurableClientSupport
implements|implements
name|PerfMeasurable
block|{
specifier|protected
name|long
name|throughput
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|interval
init|=
literal|1000
decl_stmt|;
comment|// 1 sec
specifier|protected
name|long
name|duration
init|=
literal|1000
operator|*
literal|60
operator|*
literal|10
decl_stmt|;
comment|// 10 min
specifier|protected
name|long
name|rampUpTime
init|=
literal|1000
operator|*
literal|60
operator|*
literal|1
decl_stmt|;
comment|// 1 min
specifier|protected
name|long
name|rampDownTime
init|=
literal|1000
operator|*
literal|60
operator|*
literal|1
decl_stmt|;
comment|// 1 min
specifier|protected
name|PerfEventListener
name|listener
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|setThroughput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getThroughput
parameter_list|()
block|{
return|return
name|throughput
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setThroughput
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|throughput
operator|=
name|val
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|incThroughput
parameter_list|()
block|{
name|throughput
operator|++
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|incThroughput
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|throughput
operator|+=
name|val
expr_stmt|;
block|}
specifier|public
name|long
name|getInterval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
specifier|public
name|void
name|setInterval
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|long
name|getDuration
parameter_list|()
block|{
return|return
name|duration
return|;
block|}
specifier|public
name|void
name|setDuration
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|duration
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|long
name|getRampUpTime
parameter_list|()
block|{
return|return
name|rampUpTime
return|;
block|}
specifier|public
name|void
name|setRampUpTime
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|rampUpTime
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|long
name|getRampDownTime
parameter_list|()
block|{
return|return
name|rampDownTime
return|;
block|}
specifier|public
name|void
name|setRampDownTime
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|rampDownTime
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|void
name|setPerfEventListener
parameter_list|(
name|PerfEventListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|PerfEventListener
name|getPerfEventListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
block|}
end_class

end_unit

