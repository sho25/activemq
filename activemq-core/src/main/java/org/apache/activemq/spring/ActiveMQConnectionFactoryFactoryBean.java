begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_comment
comment|/**  * A helper class for creating a failover configured {@link ActiveMQConnectionFactory}  * which supports one or more TCP based hostname/ports which can all be configured in a  * consistent way without too much URL hacking.  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQConnectionFactoryFactoryBean
implements|implements
name|FactoryBean
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tcpHostAndPorts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// tcp properties
specifier|private
name|Long
name|maxInactivityDuration
decl_stmt|;
specifier|private
name|String
name|tcpProperties
decl_stmt|;
comment|// failover properties
specifier|private
name|Long
name|maxReconnectDelay
decl_stmt|;
specifier|private
name|String
name|failoverProperties
decl_stmt|;
specifier|public
name|Object
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|answer
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|()
decl_stmt|;
name|String
name|brokerURL
init|=
name|getBrokerURL
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBrokerURL
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|public
name|String
name|getBrokerURL
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"failover:("
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|tcpHostAndPort
range|:
name|tcpHostAndPorts
control|)
block|{
if|if
condition|(
name|counter
operator|++
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|createTcpHostAndPortUrl
argument_list|(
name|tcpHostAndPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxReconnectDelay
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|add
argument_list|(
literal|"maxReconnectDelay="
operator|+
name|maxReconnectDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notEmpty
argument_list|(
name|failoverProperties
argument_list|)
condition|)
block|{
name|parameters
operator|.
name|add
argument_list|(
name|failoverProperties
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|asQueryString
argument_list|(
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|ActiveMQConnectionFactory
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTcpHostAndPorts
parameter_list|()
block|{
return|return
name|tcpHostAndPorts
return|;
block|}
specifier|public
name|void
name|setTcpHostAndPorts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tcpHostAndPorts
parameter_list|)
block|{
name|this
operator|.
name|tcpHostAndPorts
operator|=
name|tcpHostAndPorts
expr_stmt|;
block|}
specifier|public
name|void
name|setTcpHostAndPort
parameter_list|(
name|String
name|tcpHostAndPort
parameter_list|)
block|{
name|tcpHostAndPorts
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tcpHostAndPorts
operator|.
name|add
argument_list|(
name|tcpHostAndPort
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Long
name|getMaxInactivityDuration
parameter_list|()
block|{
return|return
name|maxInactivityDuration
return|;
block|}
specifier|public
name|void
name|setMaxInactivityDuration
parameter_list|(
name|Long
name|maxInactivityDuration
parameter_list|)
block|{
name|this
operator|.
name|maxInactivityDuration
operator|=
name|maxInactivityDuration
expr_stmt|;
block|}
specifier|public
name|String
name|getTcpProperties
parameter_list|()
block|{
return|return
name|tcpProperties
return|;
block|}
specifier|public
name|void
name|setTcpProperties
parameter_list|(
name|String
name|tcpProperties
parameter_list|)
block|{
name|this
operator|.
name|tcpProperties
operator|=
name|tcpProperties
expr_stmt|;
block|}
specifier|public
name|Long
name|getMaxReconnectDelay
parameter_list|()
block|{
return|return
name|maxReconnectDelay
return|;
block|}
specifier|public
name|void
name|setMaxReconnectDelay
parameter_list|(
name|Long
name|maxReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectDelay
operator|=
name|maxReconnectDelay
expr_stmt|;
block|}
specifier|public
name|String
name|getFailoverProperties
parameter_list|()
block|{
return|return
name|failoverProperties
return|;
block|}
specifier|public
name|void
name|setFailoverProperties
parameter_list|(
name|String
name|failoverProperties
parameter_list|)
block|{
name|this
operator|.
name|failoverProperties
operator|=
name|failoverProperties
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
comment|/**      * Turns a list of query string key=value strings into a query URL string      * of the form "?a=x&b=y"      */
specifier|protected
name|String
name|asQueryString
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|int
name|size
init|=
name|parameters
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|1
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Allows us to add any TCP specific URI configurations      */
specifier|protected
name|String
name|createTcpHostAndPortUrl
parameter_list|(
name|String
name|tcpHostAndPort
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxInactivityDuration
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|add
argument_list|(
literal|"wireFormat.maxInactivityDuration="
operator|+
name|maxInactivityDuration
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|notEmpty
argument_list|(
name|tcpProperties
argument_list|)
condition|)
block|{
name|parameters
operator|.
name|add
argument_list|(
name|tcpProperties
argument_list|)
expr_stmt|;
block|}
return|return
name|tcpHostAndPort
operator|+
name|asQueryString
argument_list|(
name|parameters
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|notEmpty
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
end_class

end_unit

