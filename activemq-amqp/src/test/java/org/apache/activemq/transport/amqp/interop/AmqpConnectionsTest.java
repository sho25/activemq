begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|interop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|CONNECTION_OPEN_FAILED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|PLATFORM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|PRODUCT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClientTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|AmqpError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ErrorCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Test broker handling of AMQP connections with various configurations.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AmqpConnectionsTest
extends|extends
name|AmqpClientTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Symbol
name|QUEUE_PREFIX
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"queue-prefix"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|TOPIC_PREFIX
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"topic-prefix"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|ANONYMOUS_RELAY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"ANONYMOUS-RELAY"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|DELAYED_DELIVERY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"DELAYED_DELIVERY"
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"amqp"
block|,
literal|false
block|}
block|,
block|{
literal|"amqp+ws"
block|,
literal|false
block|}
block|,
block|{
literal|"amqp+ssl"
block|,
literal|true
block|}
block|,
block|{
literal|"amqp+wss"
block|,
literal|true
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|AmqpConnectionsTest
parameter_list|(
name|String
name|connectorScheme
parameter_list|,
name|boolean
name|secure
parameter_list|)
block|{
name|super
argument_list|(
name|connectorScheme
argument_list|,
name|secure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testCanConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Connection
name|protonConnection
init|=
name|connection
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Transport
name|protonTransport
init|=
name|protonConnection
operator|.
name|getTransport
argument_list|()
decl_stmt|;
name|protonTransport
operator|.
name|getChannelMax
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|protonTransport
operator|.
name|head
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|protonTransport
operator|.
name|tail
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|protonTransport
operator|.
name|getInputBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|protonTransport
operator|.
name|getOutputBuffer
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|protonTransport
operator|.
name|bind
argument_list|(
name|protonConnection
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to mutate"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{}
try|try
block|{
name|protonTransport
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to mutate"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{}
try|try
block|{
name|protonTransport
operator|.
name|setChannelMax
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to mutate"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConnectionCarriesExpectedCapabilities
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|setValidator
argument_list|(
operator|new
name|AmqpValidator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|inspectOpenedResource
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|Symbol
index|[]
name|offered
init|=
name|connection
operator|.
name|getRemoteOfferedCapabilities
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|offered
argument_list|,
name|ANONYMOUS_RELAY
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not indicate it support anonymous relay"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
argument_list|(
name|offered
argument_list|,
name|DELAYED_DELIVERY
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not indicate it support delayed message delivery"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|connection
operator|.
name|getRemoteProperties
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|QUEUE_PREFIX
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not send a queue prefix value"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|TOPIC_PREFIX
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not send a queue prefix value"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|PRODUCT
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not send a queue product name value"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|VERSION
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not send a queue version value"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|PLATFORM
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not send a queue platform name value"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker platform = {}"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|PLATFORM
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|getStateInspector
argument_list|()
operator|.
name|assertValid
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConnectionCarriesContainerId
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|setValidator
argument_list|(
operator|new
name|AmqpValidator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|inspectOpenedResource
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|String
name|remoteContainer
init|=
name|connection
operator|.
name|getRemoteContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteContainer
operator|==
literal|null
operator|||
operator|!
name|remoteContainer
operator|.
name|equals
argument_list|(
name|brokerService
operator|.
name|getBrokerName
argument_list|()
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not send a valid container ID"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker container ID = {}"
argument_list|,
name|remoteContainer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|getStateInspector
argument_list|()
operator|.
name|assertValid
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testCanConnectWithDifferentContainerIds
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|AmqpConnection
name|connection1
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|createConnection
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpConnection
name|connection2
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|createConnection
argument_list|()
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|setContainerId
argument_list|(
name|getTestName
argument_list|()
operator|+
literal|"-Client:1"
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|setContainerId
argument_list|(
name|getTestName
argument_list|()
operator|+
literal|"-Client:2"
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testCannotConnectWithSameContainerId
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|AmqpConnection
name|connection1
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|createConnection
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpConnection
name|connection2
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|createConnection
argument_list|()
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|setContainerId
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|setContainerId
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|setStateInspector
argument_list|(
operator|new
name|AmqpValidator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|inspectOpenedResource
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connection
operator|.
name|getRemoteProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CONNECTION_OPEN_FAILED
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not set connection establishment failed property"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|inspectClosedResource
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|ErrorCondition
name|remoteError
init|=
name|connection
operator|.
name|getRemoteCondition
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteError
operator|==
literal|null
operator|||
name|remoteError
operator|.
name|getCondition
argument_list|()
operator|==
literal|null
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not add error condition for duplicate client ID"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|remoteError
operator|.
name|getCondition
argument_list|()
operator|.
name|equals
argument_list|(
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not set condition to "
operator|+
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|remoteError
operator|.
name|getCondition
argument_list|()
operator|.
name|equals
argument_list|(
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not set condition to "
operator|+
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Validate the info map contains a hint that the container/client id was the problem
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|infoMap
init|=
name|remoteError
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoMap
operator|==
literal|null
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Broker did not set an info map on condition"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|infoMap
operator|.
name|containsKey
argument_list|(
name|AmqpSupport
operator|.
name|INVALID_FIELD
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Info map does not contain expected key"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
init|=
name|infoMap
operator|.
name|get
argument_list|(
name|AmqpSupport
operator|.
name|INVALID_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|AmqpSupport
operator|.
name|CONTAINER_ID
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|markAsInvalid
argument_list|(
literal|"Info map does not contain expected value: "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|connection2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to connect with same container Id."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Second connection with same container Id failed as expected."
argument_list|)
expr_stmt|;
block|}
name|connection2
operator|.
name|getStateInspector
argument_list|()
operator|.
name|assertValid
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSimpleSendOneReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpReceiver
name|receiver
init|=
name|session
operator|.
name|createReceiver
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
specifier|final
name|int
name|PAYLOAD_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
name|PAYLOAD_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PAYLOAD_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
name|PAYLOAD_SIZE
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setMessageId
argument_list|(
literal|"msg"
operator|+
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"serialNo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBytes
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to read message with receiver"
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|AmqpMessage
name|received
init|=
name|receiver
operator|.
name|receive
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have read message"
argument_list|,
name|received
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"msg1"
argument_list|,
name|received
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|received
operator|.
name|accept
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

