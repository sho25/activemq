begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helps keep track of the current transaction/JDBC connection.  */
end_comment

begin_class
specifier|public
class|class
name|TransactionContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransactionContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
specifier|final
name|JDBCPersistenceAdapter
name|persistenceAdapter
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|boolean
name|inTx
decl_stmt|;
specifier|private
name|PreparedStatement
name|addMessageStatement
decl_stmt|;
specifier|private
name|PreparedStatement
name|removedMessageStatement
decl_stmt|;
specifier|private
name|PreparedStatement
name|updateLastAckStatement
decl_stmt|;
comment|// a cheap dirty level that we can live with
specifier|private
name|int
name|transactionIsolation
init|=
name|Connection
operator|.
name|TRANSACTION_READ_UNCOMMITTED
decl_stmt|;
specifier|private
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
name|completions
init|=
operator|new
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ReentrantReadWriteLock
name|exclusiveConnectionLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|public
name|TransactionContext
parameter_list|(
name|JDBCPersistenceAdapter
name|persistenceAdapter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|persistenceAdapter
operator|=
name|persistenceAdapter
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
name|persistenceAdapter
operator|.
name|getDataSource
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Connection
name|getExclusiveConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|lockAndWrapped
argument_list|(
name|exclusiveConnectionLock
operator|.
name|writeLock
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|lockAndWrapped
argument_list|(
name|exclusiveConnectionLock
operator|.
name|readLock
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Connection
name|lockAndWrapped
parameter_list|(
name|Lock
name|toLock
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|toLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|persistenceAdapter
operator|.
name|isChangeAutoCommitAllowed
argument_list|()
condition|)
block|{
name|boolean
name|autoCommit
init|=
operator|!
name|inTx
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
operator|!=
name|autoCommit
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting auto commit to {} on connection {}"
argument_list|,
name|autoCommit
argument_list|,
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|=
operator|new
name|UnlockOnCloseConnection
argument_list|(
name|connection
argument_list|,
name|toLock
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|JDBCPersistenceAdapter
operator|.
name|log
argument_list|(
literal|"Could not get JDBC connection: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|inTx
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|toLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalMonitorStateException
name|oops
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread does not hold the context lock on close of:"
operator|+
name|connection
argument_list|,
name|oops
argument_list|)
expr_stmt|;
block|}
name|silentClose
argument_list|()
expr_stmt|;
name|IOException
name|ioe
init|=
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|persistenceAdapter
operator|.
name|getBrokerService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|persistenceAdapter
operator|.
name|getBrokerService
argument_list|()
operator|.
name|handleIOException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ioe
throw|;
block|}
try|try
block|{
name|connection
operator|.
name|setTransactionIsolation
argument_list|(
name|transactionIsolation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot set transaction isolation to "
operator|+
name|transactionIsolation
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|connection
return|;
block|}
specifier|public
name|void
name|executeBatch
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
name|executeBatch
argument_list|(
name|addMessageStatement
argument_list|,
literal|"Failed add a message"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|addMessageStatement
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|executeBatch
argument_list|(
name|removedMessageStatement
argument_list|,
literal|"Failed to remove a message"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removedMessageStatement
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|executeBatch
argument_list|(
name|updateLastAckStatement
argument_list|,
literal|"Failed to ack a message"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updateLastAckStatement
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|executeBatch
parameter_list|(
name|PreparedStatement
name|p
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|int
index|[]
name|rc
init|=
name|p
operator|.
name|executeBatch
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|code
init|=
name|rc
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|code
operator|<
literal|0
operator|&&
name|code
operator|!=
name|Statement
operator|.
name|SUCCESS_NO_INFO
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|message
operator|+
literal|". Response code: "
operator|+
name|code
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{}
block|}
block|}
specifier|private
name|void
name|silentClose
parameter_list|()
block|{
name|silentClosePreparedStatements
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{}
name|connection
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTx
condition|)
block|{
try|try
block|{
comment|// can be null for topic ops that bypass the store via existing cursor state
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|needsCommit
init|=
operator|!
name|connection
operator|.
name|getAutoCommit
argument_list|()
decl_stmt|;
name|executeBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|needsCommit
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|JDBCPersistenceAdapter
operator|.
name|log
argument_list|(
literal|"Error while closing connection: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|IOException
name|ioe
init|=
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|persistenceAdapter
operator|.
name|getBrokerService
argument_list|()
operator|.
name|handleIOException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|silentClose
argument_list|()
expr_stmt|;
for|for
control|(
name|Runnable
name|completion
range|:
name|completions
control|)
block|{
name|completion
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|completions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|begin
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inTx
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Already started."
argument_list|)
throw|;
block|}
name|inTx
operator|=
literal|true
expr_stmt|;
name|connection
operator|=
name|getConnection
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTx
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not started."
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|boolean
name|needsCommit
init|=
operator|!
name|connection
operator|.
name|getAutoCommit
argument_list|()
decl_stmt|;
name|executeBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|needsCommit
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|JDBCPersistenceAdapter
operator|.
name|log
argument_list|(
literal|"Commit failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|doRollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
name|IOException
name|ioe
init|=
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|persistenceAdapter
operator|.
name|getBrokerService
argument_list|()
operator|.
name|handleIOException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|inTx
operator|=
literal|false
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inTx
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not started."
argument_list|)
throw|;
block|}
try|try
block|{
name|doRollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|JDBCPersistenceAdapter
operator|.
name|log
argument_list|(
literal|"Rollback failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|inTx
operator|=
literal|false
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|PreparedStatement
name|silentClosePreparedStatement
parameter_list|(
name|PreparedStatement
name|preparedStatement
parameter_list|)
block|{
if|if
condition|(
name|preparedStatement
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|preparedStatement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|silentClosePreparedStatements
parameter_list|()
block|{
name|addMessageStatement
operator|=
name|silentClosePreparedStatement
argument_list|(
name|addMessageStatement
argument_list|)
expr_stmt|;
name|removedMessageStatement
operator|=
name|silentClosePreparedStatement
argument_list|(
name|removedMessageStatement
argument_list|)
expr_stmt|;
name|updateLastAckStatement
operator|=
name|silentClosePreparedStatement
argument_list|(
name|updateLastAckStatement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doRollback
parameter_list|()
throws|throws
name|SQLException
block|{
name|silentClosePreparedStatements
argument_list|()
expr_stmt|;
name|completions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PreparedStatement
name|getAddMessageStatement
parameter_list|()
block|{
return|return
name|addMessageStatement
return|;
block|}
specifier|public
name|void
name|setAddMessageStatement
parameter_list|(
name|PreparedStatement
name|addMessageStatement
parameter_list|)
block|{
name|this
operator|.
name|addMessageStatement
operator|=
name|addMessageStatement
expr_stmt|;
block|}
specifier|public
name|PreparedStatement
name|getUpdateLastAckStatement
parameter_list|()
block|{
return|return
name|updateLastAckStatement
return|;
block|}
specifier|public
name|void
name|setUpdateLastAckStatement
parameter_list|(
name|PreparedStatement
name|ackMessageStatement
parameter_list|)
block|{
name|this
operator|.
name|updateLastAckStatement
operator|=
name|ackMessageStatement
expr_stmt|;
block|}
specifier|public
name|PreparedStatement
name|getRemovedMessageStatement
parameter_list|()
block|{
return|return
name|removedMessageStatement
return|;
block|}
specifier|public
name|void
name|setRemovedMessageStatement
parameter_list|(
name|PreparedStatement
name|removedMessageStatement
parameter_list|)
block|{
name|this
operator|.
name|removedMessageStatement
operator|=
name|removedMessageStatement
expr_stmt|;
block|}
specifier|public
name|void
name|setTransactionIsolation
parameter_list|(
name|int
name|transactionIsolation
parameter_list|)
block|{
name|this
operator|.
name|transactionIsolation
operator|=
name|transactionIsolation
expr_stmt|;
block|}
specifier|public
name|void
name|onCompletion
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|completions
operator|.
name|add
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
specifier|final
specifier|private
class|class
name|UnlockOnCloseConnection
implements|implements
name|Connection
block|{
specifier|private
specifier|final
name|Connection
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
name|UnlockOnCloseConnection
parameter_list|(
name|Connection
name|delegate
parameter_list|,
name|Lock
name|toUnlockOnClose
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|toUnlockOnClose
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// simple delegate for the  rest of the impl..
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createStatement
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|nativeSQL
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|nativeSQL
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAutoCommit
parameter_list|(
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getAutoCommit
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getAutoCommit
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isClosed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DatabaseMetaData
name|getMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getMetaData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setReadOnly
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isReadOnly
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCatalog
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getCatalog
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTransactionIsolation
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setTransactionIsolation
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getTransactionIsolation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SQLWarning
name|getWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getWarnings
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createStatement
argument_list|(
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getTypeMap
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getTypeMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setTypeMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHoldability
parameter_list|(
name|int
name|holdability
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setHoldability
argument_list|(
name|holdability
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getHoldability
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|setSavepoint
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|setSavepoint
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|rollback
argument_list|(
name|savepoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseSavepoint
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|releaseSavepoint
argument_list|(
name|savepoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createStatement
argument_list|(
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|autoGeneratedKeys
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|autoGeneratedKeys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
index|[]
name|columnIndexes
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnIndexes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Clob
name|createClob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createClob
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|createBlob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createBlob
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NClob
name|createNClob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createNClob
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SQLXML
name|createSQLXML
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createSQLXML
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isValid
argument_list|(
name|timeout
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
name|delegate
operator|.
name|setClientInfo
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
name|delegate
operator|.
name|setClientInfo
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClientInfo
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getClientInfo
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Properties
name|getClientInfo
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getClientInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Array
name|createArrayOf
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Object
index|[]
name|elements
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createArrayOf
argument_list|(
name|typeName
argument_list|,
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Struct
name|createStruct
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Object
index|[]
name|attributes
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|createStruct
argument_list|(
name|typeName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSchema
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getSchema
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|abort
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNetworkTimeout
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|int
name|milliseconds
parameter_list|)
throws|throws
name|SQLException
block|{
name|delegate
operator|.
name|setNetworkTimeout
argument_list|(
name|executor
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNetworkTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getNetworkTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|unwrap
argument_list|(
name|iface
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isWrapperFor
argument_list|(
name|iface
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

