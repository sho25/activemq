begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|MessageList
import|;
end_import

begin_comment
comment|/**  * A {@link MessageList} implementation which generates a random body  * which can help  test performance when using compression.  *    * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|RandomMessageListImpl
extends|extends
name|MessageListImpl
block|{
specifier|public
name|RandomMessageListImpl
parameter_list|(
name|int
name|numberOfMessages
parameter_list|,
name|int
name|charactersPerMessage
parameter_list|)
block|{
name|super
argument_list|(
name|numberOfMessages
argument_list|,
name|charactersPerMessage
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Object
name|createTextPayload
parameter_list|(
name|int
name|messageCounter
parameter_list|,
name|int
name|charactersPerMessage
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charactersPerMessage
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
call|(
name|char
call|)
argument_list|(
literal|32
operator|+
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|230
argument_list|)
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|answer
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"String length should equal the requested length"
argument_list|,
name|charactersPerMessage
argument_list|,
name|answer
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

