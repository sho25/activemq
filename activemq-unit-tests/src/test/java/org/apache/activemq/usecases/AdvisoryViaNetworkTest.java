begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AdvisoryViaNetworkTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AdvisoryViaNetworkTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|brokerName
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|AUTO_ASSIGN_TRANSPORT
argument_list|)
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|put
argument_list|(
name|brokerName
argument_list|,
operator|new
name|BrokerItem
argument_list|(
name|broker
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|testAdvisoryForwarding
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Producer.Topic.FOO"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumerA
init|=
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
name|advisoryTopic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumerB
init|=
name|createConsumer
argument_list|(
literal|"B"
argument_list|,
name|advisoryTopic
argument_list|)
decl_stmt|;
name|this
operator|.
name|sendMessages
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"FOO"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MessageIdList
name|messagesA
init|=
name|getConsumerMessages
argument_list|(
literal|"A"
argument_list|,
name|consumerA
argument_list|)
decl_stmt|;
name|MessageIdList
name|messagesB
init|=
name|getConsumerMessages
argument_list|(
literal|"B"
argument_list|,
name|consumerB
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerA = "
operator|+
name|messagesA
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerB = "
operator|+
name|messagesB
argument_list|)
expr_stmt|;
name|messagesA
operator|.
name|assertMessagesReceived
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|messagesB
operator|.
name|assertMessagesReceived
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that explicitly setting advisoryPrefetchSize works for advisory topics      * on a network connector      *      * @throws Exception      */
specifier|public
name|void
name|testAdvisoryPrefetchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Consumer.Topic.A.>"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerB
init|=
name|createBroker
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|topic1
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setAdvisoryPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
name|topic1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify that brokerB's advisory prefetch is 10 but normal topic prefetch is 1
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|advisoryTopic
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|topic1
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//both advisory messages are not acked yet because of optimized acks
name|assertDeqInflight
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that explicitly setting advisoryPrefetchSize to 1 works for advisory topics      * on a network connector      *      * @throws Exception      */
specifier|public
name|void
name|testAdvisoryPrefetchSize1
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Consumer.Topic.A.>"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerB
init|=
name|createBroker
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|topic1
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setAdvisoryPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
name|topic1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify that brokerB's advisory prefetch is 1 but normal topic prefetch is 10
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|advisoryTopic
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|topic1
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeqInflight
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that if advisoryPrefetchSize isn't set then prefetchSize is used instead      * for backwards compatibility      *      * @throws Exception      */
specifier|public
name|void
name|testAdvisoryPrefetchSizeNotSet
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Consumer.Topic.A.>"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerB
init|=
name|createBroker
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|topic1
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
name|topic1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify that both consumers have a prefetch of 10
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|advisoryTopic
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|topic1
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeqInflight
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that if advisoryPrefetchSize isn't set then prefetchSize is used instead      * for backwards compatibility (test when set to 1)      *      * @throws Exception      */
specifier|public
name|void
name|testPrefetchSize1
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Consumer.Topic.A.>"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerB
init|=
name|createBroker
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
name|topic1
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//verify that both consumers have a prefetch of 1
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|advisoryTopic
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
name|topic1
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeqInflight
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test configuring the advisoryAckPercentage works with advisoryPrefetchSize      * @throws Exception      */
specifier|public
name|void
name|testAdvisoryPrefetchSizePercent
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Consumer.Topic.A.>"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setAdvisoryPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setAdvisoryAckPercentage
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertDeqInflight
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test configuring the advisoryAckPercentage works when only prefetchSize exists      * and is applied against that instead for advisory consumers      *      * @throws Exception      */
specifier|public
name|void
name|testPrefetchSizePercent
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Consumer.Topic.A.>"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setAdvisoryAckPercentage
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A.FOO"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertDeqInflight
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDeqInflight
parameter_list|(
specifier|final
name|int
name|dequeue
parameter_list|,
specifier|final
name|int
name|inflight
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"deq and inflight as expected"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"A Deq:"
operator|+
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"A Inflight:"
operator|+
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
name|dequeue
operator|&&
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
name|inflight
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAdvisoryForwardingDuplexNC
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Producer.Topic.FOO"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumerA
init|=
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
name|advisoryTopic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumerB
init|=
name|createConsumer
argument_list|(
literal|"B"
argument_list|,
name|advisoryTopic
argument_list|)
decl_stmt|;
name|this
operator|.
name|sendMessages
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"FOO"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MessageIdList
name|messagesA
init|=
name|getConsumerMessages
argument_list|(
literal|"A"
argument_list|,
name|consumerA
argument_list|)
decl_stmt|;
name|MessageIdList
name|messagesB
init|=
name|getConsumerMessages
argument_list|(
literal|"B"
argument_list|,
name|consumerB
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerA = "
operator|+
name|messagesA
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerB = "
operator|+
name|messagesB
argument_list|)
expr_stmt|;
name|messagesA
operator|.
name|assertMessagesReceived
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|messagesB
operator|.
name|assertMessagesReceived
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBridgeRelevantAdvisoryNotAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|advisoryTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.Consumer.Topic.FOO"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|advisoryTopic
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumerA
init|=
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
name|advisoryTopic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumerB
init|=
name|createConsumer
argument_list|(
literal|"B"
argument_list|,
name|advisoryTopic
argument_list|)
decl_stmt|;
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|MessageIdList
name|messagesA
init|=
name|getConsumerMessages
argument_list|(
literal|"A"
argument_list|,
name|consumerA
argument_list|)
decl_stmt|;
name|MessageIdList
name|messagesB
init|=
name|getConsumerMessages
argument_list|(
literal|"B"
argument_list|,
name|consumerB
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerA = "
operator|+
name|messagesA
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerB = "
operator|+
name|messagesB
argument_list|)
expr_stmt|;
name|messagesA
operator|.
name|assertMessagesReceived
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|messagesB
operator|.
name|assertMessagesReceived
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAdvisoryViaVirtualDest
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQQueue
name|advisoryQueue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"advQ"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
comment|// convert advisories into advQ that cross the network bridge
name|CompositeTopic
name|compositeTopic
init|=
operator|new
name|CompositeTopic
argument_list|()
decl_stmt|;
name|compositeTopic
operator|.
name|setName
argument_list|(
literal|"ActiveMQ.Advisory.Connection"
argument_list|)
expr_stmt|;
name|compositeTopic
operator|.
name|setForwardOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|compositeTopic
operator|.
name|setForwardTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|advisoryQueue
argument_list|)
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|virtualDestinationInterceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|virtualDestinationInterceptor
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{
name|virtualDestinationInterceptor
block|}
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|networkBridge
init|=
name|bridgeBrokers
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|networkBridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkBridge
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// so advisories are acked immediately b/c we check inflight count below
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPeerBrokerInfo
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumerB
init|=
name|createConsumer
argument_list|(
literal|"B"
argument_list|,
name|advisoryQueue
argument_list|)
decl_stmt|;
comment|// to make a connection on A
name|createConsumer
argument_list|(
literal|"A"
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|MessageIdList
name|messagesB
init|=
name|getConsumerMessages
argument_list|(
literal|"B"
argument_list|,
name|consumerB
argument_list|)
decl_stmt|;
name|messagesB
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"deq and inflight as expected"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokers
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
operator|.
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"A Deq:"
operator|+
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"A Inflight:"
operator|+
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|2
operator|&&
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPeerBrokerInfo
parameter_list|(
name|BrokerItem
name|brokerItem
parameter_list|,
specifier|final
name|int
name|max
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|broker
init|=
name|brokerItem
operator|.
name|broker
decl_stmt|;
specifier|final
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"verify infos "
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|", len: "
operator|+
name|regionBroker
operator|.
name|getPeerBrokerInfos
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|max
operator|==
name|regionBroker
operator|.
name|getPeerBrokerInfos
argument_list|()
operator|.
name|length
return|;
block|}
block|}
argument_list|,
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verify infos "
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|", len: "
operator|+
name|regionBroker
operator|.
name|getPeerBrokerInfos
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BrokerInfo
name|info
range|:
name|regionBroker
operator|.
name|getPeerBrokerInfos
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|max
argument_list|,
name|regionBroker
operator|.
name|getPeerBrokerInfos
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

