begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|FilePendingQueueMessageStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PendingQueueMessageStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|VMPendingQueueMessageStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
specifier|public
class|class
name|ExpiredMessagesWithNoConsumerTest
extends|extends
name|CombinationTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExpiredMessagesWithNoConsumerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|optimizedDispatch
init|=
literal|true
decl_stmt|;
specifier|private
name|PendingQueueMessageStoragePolicy
name|pendingQueuePolicy
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|ExpiredMessagesWithNoConsumerTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createBrokerWithMemoryLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createBrokerWithMemoryLimit
argument_list|(
literal|800
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createBrokerWithMemoryLimit
parameter_list|(
name|int
name|expireMessagesPeriod
parameter_list|)
throws|throws
name|Exception
block|{
name|doCreateBroker
argument_list|(
literal|true
argument_list|,
name|expireMessagesPeriod
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateBroker
argument_list|(
literal|false
argument_list|,
literal|800
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doCreateBroker
parameter_list|(
name|boolean
name|memoryLimit
parameter_list|,
name|int
name|expireMessagesPeriod
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setOptimizedDispatch
argument_list|(
name|optimizedDispatch
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setExpireMessagesPeriod
argument_list|(
name|expireMessagesPeriod
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setMaxExpirePageSize
argument_list|(
literal|800
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setPendingQueuePolicy
argument_list|(
name|pendingQueuePolicy
argument_list|)
expr_stmt|;
if|if
condition|(
name|memoryLimit
condition|)
block|{
comment|// so memory is not consumed by DLQ turn if off
name|defaultEntry
operator|.
name|setDeadLetterStrategy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setMemoryLimit
argument_list|(
literal|200
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testExpiredNonPersistentMessagesWithNoConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|createBrokerWithMemoryLimit
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|long
name|sendCount
init|=
literal|2000
decl_stmt|;
specifier|final
name|Thread
name|producingThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producing Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|tStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|sendCount
condition|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|i
operator|+
literal|" @ "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStamp
operator|)
operator|/
literal|100
operator|)
operator|+
literal|"m/ms"
argument_list|)
expr_stmt|;
name|tStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|135
operator|==
name|i
condition|)
block|{
comment|// allow pending messages to expire, before usage limit kicks in  to flush them
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|producingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"producer failed to complete within allocated time"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|producingThread
operator|.
name|join
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|!
name|producingThread
operator|.
name|isAlive
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|view
init|=
name|createView
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|!=
literal|0
operator|&&
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|==
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|&&
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|==
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|&&
name|view
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|ignored
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
name|Wait
operator|.
name|MAX_WAIT_MILLIS
operator|*
literal|10
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"memory usage doesn't go to duck egg"
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0 queue"
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestExpiredMessagesWithNoConsumer
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"optimizedDispatch"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|,
name|Boolean
operator|.
name|FALSE
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"pendingQueuePolicy"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
operator|new
name|VMPendingQueueMessageStoragePolicy
argument_list|()
block|,
operator|new
name|FilePendingQueueMessageStoragePolicy
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExpiredMessagesWithNoConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|createBrokerWithMemoryLimit
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|long
name|sendCount
init|=
literal|2000
decl_stmt|;
specifier|final
name|Thread
name|producingThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producing Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|tStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|sendCount
condition|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|i
operator|+
literal|" @ "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStamp
operator|)
operator|/
literal|100
operator|)
operator|+
literal|"m/ms"
argument_list|)
expr_stmt|;
name|tStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|producingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"producer failed to complete within allocated time"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|producingThread
operator|.
name|join
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|!
name|producingThread
operator|.
name|isAlive
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|view
init|=
name|createView
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sendCount
operator|==
name|view
operator|.
name|getExpiredCount
argument_list|()
return|;
block|}
block|}
argument_list|,
name|Wait
operator|.
name|MAX_WAIT_MILLIS
operator|*
literal|10
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not all sent messages have expired"
argument_list|,
name|sendCount
argument_list|,
name|view
operator|.
name|getExpiredCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"memory usage doesn't go to duck egg"
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// first ack delivered after expiry
specifier|public
name|void
name|testExpiredMessagesWithVerySlowConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|createBroker
argument_list|()
expr_stmt|;
specifier|final
name|long
name|queuePrefetch
init|=
literal|600
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.queuePrefetch="
operator|+
name|queuePrefetch
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ttl
init|=
literal|4000
decl_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sendCount
init|=
literal|1500
decl_stmt|;
specifier|final
name|CountDownLatch
name|receivedOneCondition
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitCondition
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got my message: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|receivedOneCondition
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitCondition
operator|.
name|await
argument_list|(
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"acking message: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Thread
name|producingThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producing Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|tStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|sendCount
condition|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|i
operator|+
literal|" @ "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStamp
operator|)
operator|/
literal|100
operator|)
operator|+
literal|"m/ms"
argument_list|)
expr_stmt|;
name|tStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|producingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got one message"
argument_list|,
name|receivedOneCondition
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"producer failed to complete within allocated time"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|producingThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|!
name|producingThread
operator|.
name|isAlive
argument_list|()
return|;
block|}
block|}
argument_list|,
name|Wait
operator|.
name|MAX_WAIT_MILLIS
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|view
init|=
name|createView
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"all dispatched up to default prefetch "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|queuePrefetch
operator|==
name|view
operator|.
name|getDispatchCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not all sent have expired "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sendCount
operator|==
name|view
operator|.
name|getExpiredCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// let the ack happen
name|waitCondition
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|0
operator|==
name|view
operator|.
name|getInFlightCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight reduced to duck"
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size didn't get back to 0 "
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dequeues didn't match sent/expired "
argument_list|,
name|sendCount
argument_list|,
name|view
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|0
operator|==
name|view
operator|.
name|getInFlightCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight goes to zero on close"
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"done: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExpiredMessagesWithVerySlowConsumerCanContinue
parameter_list|()
throws|throws
name|Exception
block|{
name|createBroker
argument_list|()
expr_stmt|;
specifier|final
name|long
name|queuePrefetch
init|=
literal|600
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.queuePrefetch="
operator|+
name|queuePrefetch
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ttl
init|=
literal|4000
decl_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sendCount
init|=
literal|1500
decl_stmt|;
specifier|final
name|CountDownLatch
name|receivedOneCondition
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|waitCondition
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|received
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got my message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|receivedOneCondition
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|received
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|waitCondition
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"acking message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Thread
name|producingThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producing Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|tStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|sendCount
condition|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|i
operator|+
literal|" @ "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStamp
operator|)
operator|/
literal|100
operator|)
operator|+
literal|"m/ms"
argument_list|)
expr_stmt|;
name|tStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|producingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got one message"
argument_list|,
name|receivedOneCondition
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"producer failed to complete within allocated time"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|producingThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
operator|!
name|producingThread
operator|.
name|isAlive
argument_list|()
return|;
block|}
block|}
argument_list|,
name|Wait
operator|.
name|MAX_WAIT_MILLIS
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|view
init|=
name|createView
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not all dispatched up to default prefetch "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|queuePrefetch
operator|==
name|view
operator|.
name|getDispatchCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"All have not sent have expired "
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sendCount
operator|==
name|view
operator|.
name|getExpiredCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// let the ack happen
name|waitCondition
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|0
operator|==
name|view
operator|.
name|getInFlightCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueue="
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
operator|+
literal|", dequeue="
operator|+
name|view
operator|.
name|getDequeueCount
argument_list|()
operator|+
literal|", inflight="
operator|+
name|view
operator|.
name|getInFlightCount
argument_list|()
operator|+
literal|", expired= "
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|", size= "
operator|+
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight didn't reduce to duck"
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size doesn't get back to 0 "
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dequeues don't match sent/expired "
argument_list|,
name|sendCount
argument_list|,
name|view
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// produce some more
name|producer
operator|.
name|setTimeToLive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|tStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendCount
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|i
operator|+
literal|" @ "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStamp
operator|)
operator|/
literal|100
operator|)
operator|+
literal|"m/ms"
argument_list|)
expr_stmt|;
name|tStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|received
operator|.
name|get
argument_list|()
operator|>=
name|sendCount
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|0
operator|==
name|view
operator|.
name|getInFlightCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight did not go to zero on close"
argument_list|,
literal|0
argument_list|,
name|view
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"done: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExpireMessagesForDurableSubscriber
parameter_list|()
throws|throws
name|Exception
block|{
name|createBroker
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"myConnection"
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Topic
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ttl
init|=
literal|1000
decl_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sendCount
init|=
literal|10
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|destination
argument_list|,
literal|"mySub"
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendCount
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DestinationViewMBean
name|view
init|=
name|createView
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|destination
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"messages sent"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expired="
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|" "
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|view
operator|.
name|getExpiredCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|view
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expired="
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|" "
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|view
operator|.
name|getExpiredCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|view
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicLong
name|received
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|sub
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|destination
argument_list|,
literal|"mySub"
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|received
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for messages to arrive"
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|received
operator|.
name|get
argument_list|()
operator|>=
name|sendCount
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received="
operator|+
name|received
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expired="
operator|+
name|view
operator|.
name|getExpiredCount
argument_list|()
operator|+
literal|" "
operator|+
name|view
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|received
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|view
operator|.
name|getExpiredCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|view
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DestinationViewMBean
name|createView
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|domain
init|=
literal|"org.apache.activemq"
decl_stmt|;
name|ObjectName
name|name
decl_stmt|;
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|name
operator|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":BrokerName=localhost,Type=Queue,Destination=test"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":BrokerName=localhost,Type=Topic,Destination=test"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DestinationViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|name
argument_list|,
name|DestinationViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getOptimizedDispatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|optimizedDispatch
return|;
block|}
specifier|public
name|void
name|setOptimizedDispatch
parameter_list|(
name|boolean
name|option
parameter_list|)
block|{
name|this
operator|.
name|optimizedDispatch
operator|=
name|option
expr_stmt|;
block|}
specifier|public
name|PendingQueueMessageStoragePolicy
name|getPendingQueuePolicy
parameter_list|()
block|{
return|return
name|this
operator|.
name|pendingQueuePolicy
return|;
block|}
specifier|public
name|void
name|setPendingQueuePolicy
parameter_list|(
name|PendingQueueMessageStoragePolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|pendingQueuePolicy
operator|=
name|policy
expr_stmt|;
block|}
block|}
end_class

end_unit

