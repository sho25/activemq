begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Hiram Chirino  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_comment
comment|/**  * A AsyncChannelFilter can be used as a filter between a {@see org.activeio.AsyncChannel}  * and it's {@see org.activeio.ChannelConsumer}.  Most {@see org.activeio.AsyncChannel}  * that are not directly accessing the network will extends the AsyncChannelFilter since they act as a  * filter between the client and the network.  O   *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|FilterAsyncChannel
implements|implements
name|AsyncChannel
implements|,
name|AsyncChannelListener
block|{
specifier|final
specifier|protected
name|AsyncChannel
name|next
decl_stmt|;
specifier|protected
name|AsyncChannelListener
name|channelListener
decl_stmt|;
specifier|public
name|FilterAsyncChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
comment|/**      */
specifier|public
name|void
name|setAsyncChannelListener
parameter_list|(
name|AsyncChannelListener
name|channelListener
parameter_list|)
block|{
name|this
operator|.
name|channelListener
operator|=
name|channelListener
expr_stmt|;
if|if
condition|(
name|channelListener
operator|==
literal|null
condition|)
name|next
operator|.
name|setAsyncChannelListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|next
operator|.
name|setAsyncChannelListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|next
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|next
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Disposable#dispose()      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|next
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Service#start()      * @throws IOException if the next channel has not been set.      */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The next channel has not been set."
argument_list|)
throw|;
if|if
condition|(
name|channelListener
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The UpPacketListener has not been set."
argument_list|)
throw|;
name|next
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Service#stop()      */
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|next
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.packet.async.AsyncChannelListener#onPacket(org.activeio.packet.Packet)      */
specifier|public
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
name|channelListener
operator|.
name|onPacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.activeio.packet.async.AsyncChannelListener#onPacketError(org.activeio.ChannelException)      */
specifier|public
name|void
name|onPacketError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|channelListener
operator|.
name|onPacketError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the next.      */
specifier|public
name|AsyncChannel
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
comment|/**      * @return Returns the packetListener.      */
specifier|public
name|AsyncChannelListener
name|getAsyncChannelListener
parameter_list|()
block|{
return|return
name|channelListener
return|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|next
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|next
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

