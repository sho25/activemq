begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|CONNECTION_OPEN_FAILED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|InactivityIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|sasl
operator|.
name|SaslAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|transport
operator|.
name|NettyTransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|AsyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|ClientFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|NoOpAsyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|UnmodifiableConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|EndpointState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Event
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|CollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|TransportImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|ReferenceCountUtil
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpConnection
extends|extends
name|AmqpAbstractResource
argument_list|<
name|Connection
argument_list|>
implements|implements
name|NettyTransportListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NoOpAsyncResult
name|NOOP_REQUEST
init|=
operator|new
name|NoOpAsyncResult
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_FRAME_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1
decl_stmt|;
comment|// NOTE: Limit default channel max to signed short range to deal with
comment|//       brokers that don't currently handle the unsigned range well.
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CHANNEL_MAX
init|=
literal|32767
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|CONNECTION_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CONNECT_TIMEOUT
init|=
literal|515000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CLOSE_TIMEOUT
init|=
literal|30000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_DRAIN_TIMEOUT
init|=
literal|60000
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|serializer
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|connected
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|sessionIdGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|txIdGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Collector
name|protonCollector
init|=
operator|new
name|CollectorImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|transport
operator|.
name|NettyTransport
name|transport
decl_stmt|;
specifier|private
specifier|final
name|Transport
name|protonTransport
init|=
name|Transport
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
specifier|private
specifier|final
name|URI
name|remoteURI
decl_stmt|;
specifier|private
specifier|final
name|String
name|connectionId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Symbol
argument_list|>
name|offeredCapabilities
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|offeredProperties
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
specifier|volatile
name|AmqpFrameValidator
name|sentFrameInspector
decl_stmt|;
specifier|private
specifier|volatile
name|AmqpFrameValidator
name|receivedFrameInspector
decl_stmt|;
specifier|private
name|AmqpConnectionListener
name|listener
decl_stmt|;
specifier|private
name|SaslAuthenticator
name|authenticator
decl_stmt|;
specifier|private
name|String
name|mechanismRestriction
decl_stmt|;
specifier|private
name|String
name|authzid
decl_stmt|;
specifier|private
name|int
name|idleTimeout
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|idleProcessingDisabled
decl_stmt|;
specifier|private
name|String
name|containerId
decl_stmt|;
specifier|private
name|boolean
name|authenticated
decl_stmt|;
specifier|private
name|int
name|channelMax
init|=
name|DEFAULT_CHANNEL_MAX
decl_stmt|;
specifier|private
name|long
name|connectTimeout
init|=
name|DEFAULT_CONNECT_TIMEOUT
decl_stmt|;
specifier|private
name|long
name|closeTimeout
init|=
name|DEFAULT_CLOSE_TIMEOUT
decl_stmt|;
specifier|private
name|long
name|drainTimeout
init|=
name|DEFAULT_DRAIN_TIMEOUT
decl_stmt|;
specifier|private
name|boolean
name|trace
decl_stmt|;
specifier|public
name|AmqpConnection
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|transport
operator|.
name|NettyTransport
name|transport
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|setEndpoint
argument_list|(
name|Connection
operator|.
name|Factory
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|collect
argument_list|(
name|protonCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|connectionId
operator|=
name|CONNECTION_ID_GENERATOR
operator|.
name|generateId
argument_list|()
expr_stmt|;
name|this
operator|.
name|remoteURI
operator|=
name|transport
operator|.
name|getRemoteLocation
argument_list|()
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runner
parameter_list|)
block|{
name|Thread
name|serial
init|=
operator|new
name|Thread
argument_list|(
name|runner
argument_list|)
decl_stmt|;
name|serial
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serial
operator|.
name|setName
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|serial
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|transport
operator|.
name|setTransportListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connected
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|transport
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|ClientFuture
name|future
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|getEndpoint
argument_list|()
operator|.
name|setContainer
argument_list|(
name|safeGetContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|setHostname
argument_list|(
name|remoteURI
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getOfferedCapabilities
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setOfferedCapabilities
argument_list|(
name|getOfferedCapabilities
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Symbol
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getOfferedProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|setProperties
argument_list|(
name|getOfferedProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getIdleTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|protonTransport
operator|.
name|setIdleTimeout
argument_list|(
name|getIdleTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|protonTransport
operator|.
name|setMaxFrameSize
argument_list|(
name|getMaxFrameSize
argument_list|()
argument_list|)
expr_stmt|;
name|protonTransport
operator|.
name|setChannelMax
argument_list|(
name|getChannelMax
argument_list|()
argument_list|)
expr_stmt|;
name|protonTransport
operator|.
name|bind
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|Sasl
name|sasl
init|=
name|protonTransport
operator|.
name|sasl
argument_list|()
decl_stmt|;
if|if
condition|(
name|sasl
operator|!=
literal|null
condition|)
block|{
name|sasl
operator|.
name|client
argument_list|()
expr_stmt|;
block|}
name|authenticator
operator|=
operator|new
name|SaslAuthenticator
argument_list|(
name|sasl
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|authzid
argument_list|,
name|mechanismRestriction
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TransportImpl
operator|)
name|protonTransport
operator|)
operator|.
name|setProtocolTracer
argument_list|(
operator|new
name|AmqpProtocolTracer
argument_list|(
name|AmqpConnection
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|open
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|pumpToProtonTransport
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectTimeout
operator|<=
literal|0
condition|)
block|{
name|future
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|sync
argument_list|(
name|connectTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getRemoteState
argument_list|()
operator|!=
name|EndpointState
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to connect after configured timeout."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|transport
operator|.
name|isConnected
argument_list|()
operator|&&
name|connected
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// If we are not connected then there is nothing we can do now
comment|// just signal success.
if|if
condition|(
operator|!
name|transport
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|request
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getEndpoint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|close
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
name|pumpToProtonTransport
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception while closing proton connection"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closeTimeout
operator|<=
literal|0
condition|)
block|{
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|sync
argument_list|(
name|closeTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error caught while closing Provider: "
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cuaght exception while closing down Transport: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|serializer
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|serializer
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Serializer didn't shutdown cleanly"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
block|}
block|}
comment|/**      * Creates a new Session instance used to create AMQP resources like      * senders and receivers.      *      * @return a new AmqpSession that can be used to create links.      *      * @throws Exception if an error occurs during creation.      */
specifier|public
name|AmqpSession
name|createSession
parameter_list|()
throws|throws
name|Exception
block|{
name|checkClosed
argument_list|()
expr_stmt|;
specifier|final
name|AmqpSession
name|session
init|=
operator|new
name|AmqpSession
argument_list|(
name|AmqpConnection
operator|.
name|this
argument_list|,
name|getNextSessionId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|session
operator|.
name|setEndpoint
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|session
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setStateInspector
argument_list|(
name|getStateInspector
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|open
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|pumpToProtonTransport
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
return|return
name|session
return|;
block|}
comment|//----- Access to low level IO for specific test cases -------------------//
specifier|public
name|void
name|sendRawBytes
parameter_list|(
specifier|final
name|byte
index|[]
name|rawData
parameter_list|)
throws|throws
name|Exception
block|{
name|checkClosed
argument_list|()
expr_stmt|;
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
try|try
block|{
name|transport
operator|.
name|send
argument_list|(
name|Unpooled
operator|.
name|wrappedBuffer
argument_list|(
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fireClientException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|request
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|//----- Configuration accessors ------------------------------------------//
comment|/**      * @return the user name that was used to authenticate this connection.      */
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/**      * @return the password that was used to authenticate this connection.      */
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|void
name|setAuthzid
parameter_list|(
name|String
name|authzid
parameter_list|)
block|{
name|this
operator|.
name|authzid
operator|=
name|authzid
expr_stmt|;
block|}
specifier|public
name|String
name|getAuthzid
parameter_list|()
block|{
return|return
name|authzid
return|;
block|}
comment|/**      * @return the URI of the remote peer this connection attached to.      */
specifier|public
name|URI
name|getRemoteURI
parameter_list|()
block|{
return|return
name|remoteURI
return|;
block|}
comment|/**      * @return the container ID that will be set as the container Id.      */
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|containerId
return|;
block|}
comment|/**      * Sets the container Id that will be configured on the connection prior to      * connecting to the remote peer.  Calling this after connect has no effect.      *      * @param containerId      * 		  the container Id to use on the connection.      */
specifier|public
name|void
name|setContainerId
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
comment|/**      * @return the currently set Max Frame Size value.      */
specifier|public
name|int
name|getMaxFrameSize
parameter_list|()
block|{
return|return
name|DEFAULT_MAX_FRAME_SIZE
return|;
block|}
specifier|public
name|int
name|getChannelMax
parameter_list|()
block|{
return|return
name|channelMax
return|;
block|}
specifier|public
name|void
name|setChannelMax
parameter_list|(
name|int
name|channelMax
parameter_list|)
block|{
name|this
operator|.
name|channelMax
operator|=
name|channelMax
expr_stmt|;
block|}
specifier|public
name|long
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
specifier|public
name|void
name|setConnectTimeout
parameter_list|(
name|long
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
specifier|public
name|long
name|getCloseTimeout
parameter_list|()
block|{
return|return
name|closeTimeout
return|;
block|}
specifier|public
name|void
name|setCloseTimeout
parameter_list|(
name|long
name|closeTimeout
parameter_list|)
block|{
name|this
operator|.
name|closeTimeout
operator|=
name|closeTimeout
expr_stmt|;
block|}
specifier|public
name|long
name|getDrainTimeout
parameter_list|()
block|{
return|return
name|drainTimeout
return|;
block|}
specifier|public
name|void
name|setDrainTimeout
parameter_list|(
name|long
name|drainTimeout
parameter_list|)
block|{
name|this
operator|.
name|drainTimeout
operator|=
name|drainTimeout
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Symbol
argument_list|>
name|getOfferedCapabilities
parameter_list|()
block|{
return|return
name|offeredCapabilities
return|;
block|}
specifier|public
name|void
name|setOfferedCapabilities
parameter_list|(
name|List
argument_list|<
name|Symbol
argument_list|>
name|offeredCapabilities
parameter_list|)
block|{
if|if
condition|(
name|offeredCapabilities
operator|!=
literal|null
condition|)
block|{
name|offeredCapabilities
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|offeredCapabilities
operator|=
name|offeredCapabilities
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|getOfferedProperties
parameter_list|()
block|{
return|return
name|offeredProperties
return|;
block|}
specifier|public
name|void
name|setOfferedProperties
parameter_list|(
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|offeredProperties
parameter_list|)
block|{
if|if
condition|(
name|offeredProperties
operator|!=
literal|null
condition|)
block|{
name|offeredProperties
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|offeredProperties
operator|=
name|offeredProperties
expr_stmt|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableConnection
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AmqpConnectionListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
specifier|public
name|void
name|setListener
parameter_list|(
name|AmqpConnectionListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|int
name|getIdleTimeout
parameter_list|()
block|{
return|return
name|idleTimeout
return|;
block|}
specifier|public
name|void
name|setIdleTimeout
parameter_list|(
name|int
name|idleTimeout
parameter_list|)
block|{
name|this
operator|.
name|idleTimeout
operator|=
name|idleTimeout
expr_stmt|;
block|}
specifier|public
name|void
name|setIdleProcessingDisabled
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|idleProcessingDisabled
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIdleProcessingDisabled
parameter_list|()
block|{
return|return
name|idleProcessingDisabled
return|;
block|}
comment|/**      * Sets a restriction on the SASL mechanism to use (if offered by the server).      *      * @param mechanismRestriction the mechanism to use      */
specifier|public
name|void
name|setMechanismRestriction
parameter_list|(
name|String
name|mechanismRestriction
parameter_list|)
block|{
name|this
operator|.
name|mechanismRestriction
operator|=
name|mechanismRestriction
expr_stmt|;
block|}
specifier|public
name|String
name|getMechanismRestriction
parameter_list|()
block|{
return|return
name|mechanismRestriction
return|;
block|}
specifier|public
name|boolean
name|isTraceFrames
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
specifier|public
name|void
name|setTraceFrames
parameter_list|(
name|boolean
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
specifier|public
name|AmqpFrameValidator
name|getSentFrameInspector
parameter_list|()
block|{
return|return
name|sentFrameInspector
return|;
block|}
specifier|public
name|void
name|setSentFrameInspector
parameter_list|(
name|AmqpFrameValidator
name|amqpFrameInspector
parameter_list|)
block|{
name|this
operator|.
name|sentFrameInspector
operator|=
name|amqpFrameInspector
expr_stmt|;
block|}
specifier|public
name|AmqpFrameValidator
name|getReceivedFrameInspector
parameter_list|()
block|{
return|return
name|receivedFrameInspector
return|;
block|}
specifier|public
name|void
name|setReceivedFrameInspector
parameter_list|(
name|AmqpFrameValidator
name|amqpFrameInspector
parameter_list|)
block|{
name|this
operator|.
name|receivedFrameInspector
operator|=
name|amqpFrameInspector
expr_stmt|;
block|}
comment|//----- Internal getters used from the child AmqpResource classes --------//
name|ScheduledExecutorService
name|getScheduler
parameter_list|()
block|{
return|return
name|this
operator|.
name|serializer
return|;
block|}
name|Connection
name|getProtonConnection
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
return|;
block|}
name|String
name|getConnectionId
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectionId
return|;
block|}
name|AmqpTransactionId
name|getNextTransactionId
parameter_list|()
block|{
return|return
operator|new
name|AmqpTransactionId
argument_list|(
name|connectionId
operator|+
literal|":"
operator|+
name|txIdGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
return|;
block|}
name|void
name|pumpToProtonTransport
parameter_list|()
block|{
name|pumpToProtonTransport
argument_list|(
name|NOOP_REQUEST
argument_list|)
expr_stmt|;
block|}
name|void
name|pumpToProtonTransport
parameter_list|(
name|AsyncResult
name|request
parameter_list|)
block|{
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|ByteBuffer
name|toWrite
init|=
name|protonTransport
operator|.
name|getOutputBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|toWrite
operator|!=
literal|null
operator|&&
name|toWrite
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|ByteBuf
name|outbound
init|=
name|transport
operator|.
name|allocateSendBuffer
argument_list|(
name|toWrite
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|outbound
operator|.
name|writeBytes
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|transport
operator|.
name|send
argument_list|(
name|outbound
argument_list|)
expr_stmt|;
name|protonTransport
operator|.
name|outputConsumed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fireClientException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|request
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//----- Transport listener event hooks -----------------------------------//
annotation|@
name|Override
specifier|public
name|void
name|onData
parameter_list|(
specifier|final
name|ByteBuf
name|incoming
parameter_list|)
block|{
comment|// We need to retain until the serializer gets around to processing it.
name|ReferenceCountUtil
operator|.
name|retain
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ByteBuffer
name|source
init|=
name|incoming
operator|.
name|nioBuffer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Client Received from Broker {} bytes:"
argument_list|,
name|source
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protonTransport
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring incoming data because transport is closed"
argument_list|)
expr_stmt|;
return|return;
block|}
do|do
block|{
name|ByteBuffer
name|buffer
init|=
name|protonTransport
operator|.
name|getInputBuffer
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|Math
operator|.
name|min
argument_list|(
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|source
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|duplicate
init|=
name|source
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|duplicate
operator|.
name|limit
argument_list|(
name|source
operator|.
name|position
argument_list|()
operator|+
name|limit
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|duplicate
argument_list|)
expr_stmt|;
name|protonTransport
operator|.
name|processInput
argument_list|()
expr_stmt|;
name|source
operator|.
name|position
argument_list|(
name|source
operator|.
name|position
argument_list|()
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|source
operator|.
name|hasRemaining
argument_list|()
condition|)
do|;
name|ReferenceCountUtil
operator|.
name|release
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
comment|// Process the state changes from the latest data and then answer back
comment|// any pending updates to the Broker.
name|processUpdates
argument_list|()
expr_stmt|;
name|pumpToProtonTransport
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTransportClosed
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The transport has unexpectedly closed"
argument_list|)
expr_stmt|;
name|failed
argument_list|(
name|getOpenAbortException
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTransportError
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|fireClientException
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
comment|//----- Internal implementation ------------------------------------------//
annotation|@
name|Override
specifier|protected
name|void
name|doOpenCompletion
parameter_list|()
block|{
comment|// If the remote indicates that a close is pending, don't open.
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getRemoteProperties
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|getEndpoint
argument_list|()
operator|.
name|getRemoteProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CONNECTION_OPEN_FAILED
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isIdleProcessingDisabled
argument_list|()
condition|)
block|{
comment|// Using nano time since it is not related to the wall clock, which may change
name|long
name|initialNow
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|initialKeepAliveDeadline
init|=
name|protonTransport
operator|.
name|tick
argument_list|(
name|initialNow
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialKeepAliveDeadline
operator|>
literal|0
condition|)
block|{
name|getScheduler
argument_list|()
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getLocalState
argument_list|()
operator|!=
name|EndpointState
operator|.
name|CLOSED
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client performing next idle check"
argument_list|)
expr_stmt|;
comment|// Using nano time since it is not related to the wall clock, which may change
name|long
name|now
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|rescheduleAt
init|=
name|protonTransport
operator|.
name|tick
argument_list|(
name|now
argument_list|)
operator|-
name|now
decl_stmt|;
name|pumpToProtonTransport
argument_list|()
expr_stmt|;
if|if
condition|(
name|protonTransport
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transport closed after inactivity check."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InactivityIOException
argument_list|(
literal|"Channel was inactive for to long"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rescheduleAt
operator|>
literal|0
condition|)
block|{
name|getScheduler
argument_list|()
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|rescheduleAt
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{                                 }
name|fireClientException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|initialKeepAliveDeadline
operator|-
name|initialNow
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|doOpenCompletion
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOpenInspection
parameter_list|()
block|{
try|try
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectOpenedResource
argument_list|(
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|getStateInspector
argument_list|()
operator|.
name|markAsInvalid
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doClosedInspection
parameter_list|()
block|{
try|try
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectClosedResource
argument_list|(
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|getStateInspector
argument_list|()
operator|.
name|markAsInvalid
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|fireClientException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|AmqpConnectionListener
name|listener
init|=
name|this
operator|.
name|listener
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The Connection is already closed"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|processUpdates
parameter_list|()
block|{
try|try
block|{
name|Event
name|protonEvent
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|protonEvent
operator|=
name|protonCollector
operator|.
name|peek
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|protonEvent
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Type
operator|.
name|TRANSPORT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Client: New Proton Event: {}"
argument_list|,
name|protonEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AmqpEventSink
name|amqpEventSink
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|protonEvent
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CONNECTION_REMOTE_CLOSE
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getConnection
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processRemoteClose
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONNECTION_REMOTE_OPEN
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getConnection
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processRemoteOpen
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|SESSION_REMOTE_CLOSE
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getSession
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processRemoteClose
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|SESSION_REMOTE_OPEN
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getSession
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processRemoteOpen
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_REMOTE_CLOSE
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processRemoteClose
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_REMOTE_DETACH
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processRemoteDetach
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_REMOTE_OPEN
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processRemoteOpen
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_FLOW
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processFlowUpdates
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELIVERY
case|:
name|amqpEventSink
operator|=
operator|(
name|AmqpEventSink
operator|)
name|protonEvent
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|amqpEventSink
operator|.
name|processDeliveryUpdates
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|protonCollector
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|// We have to do this to pump SASL bytes in as SASL is not event driven yet.
if|if
condition|(
operator|!
name|authenticated
condition|)
block|{
name|processSaslAuthentication
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught Exception during update processing: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fireClientException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processSaslAuthentication
parameter_list|()
block|{
if|if
condition|(
name|authenticated
operator|||
name|authenticator
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|authenticator
operator|.
name|authenticate
argument_list|()
condition|)
block|{
name|authenticator
operator|=
literal|null
expr_stmt|;
name|authenticated
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{
name|failed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getNextSessionId
parameter_list|()
block|{
return|return
name|connectionId
operator|+
literal|":"
operator|+
name|sessionIdGenerator
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
specifier|private
name|String
name|safeGetContainerId
parameter_list|()
block|{
name|String
name|containerId
init|=
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerId
operator|==
literal|null
operator|||
name|containerId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|containerId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|containerId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AmqpConnection { "
operator|+
name|connectionId
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

