begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|JmsConsumerClient
extends|extends
name|JmsPerformanceSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JmsConsumerClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX_CONFIG_CONSUMER
init|=
literal|"consumer."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIME_BASED_RECEIVING
init|=
literal|"time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COUNT_BASED_RECEIVING
init|=
literal|"count"
decl_stmt|;
specifier|protected
name|Properties
name|jmsConsumerSettings
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|protected
name|MessageConsumer
name|jmsConsumer
decl_stmt|;
specifier|protected
name|boolean
name|durable
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|asyncRecv
init|=
literal|true
decl_stmt|;
specifier|protected
name|String
name|consumerName
init|=
literal|"TestConsumerClient"
decl_stmt|;
specifier|protected
name|long
name|recvCount
init|=
literal|1000000
decl_stmt|;
comment|// Receive a million messages by default
specifier|protected
name|long
name|recvDuration
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// Receive for 5 mins by default
specifier|protected
name|String
name|recvType
init|=
name|TIME_BASED_RECEIVING
decl_stmt|;
specifier|public
name|void
name|receiveMessages
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onConfigEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAsyncRecv
argument_list|()
condition|)
block|{
name|receiveAsyncMessages
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|receiveSyncMessages
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|receiveSyncMessages
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getJmsConsumer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|createJmsConsumer
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onConsumeStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRecvType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|TIME_BASED_RECEIVING
argument_list|)
condition|)
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|getRecvDuration
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|getJmsConsumer
argument_list|()
operator|.
name|receive
argument_list|()
expr_stmt|;
name|incThroughput
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|getRecvCount
argument_list|()
condition|)
block|{
name|getJmsConsumer
argument_list|()
operator|.
name|receive
argument_list|()
expr_stmt|;
name|incThroughput
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onConsumeEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|receiveAsyncMessages
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getJmsConsumer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|createJmsConsumer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getRecvType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|TIME_BASED_RECEIVING
argument_list|)
condition|)
block|{
name|getJmsConsumer
argument_list|()
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|incThroughput
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onConsumeStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getRecvDuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"JMS consumer thread sleep has been interrupted. Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onConsumeEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|getJmsConsumer
argument_list|()
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|incThroughput
argument_list|()
expr_stmt|;
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|count
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|getConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onConsumeStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
try|try
block|{
while|while
condition|(
name|count
operator|.
name|get
argument_list|()
operator|<
name|getRecvCount
argument_list|()
condition|)
block|{
name|count
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"JMS consumer thread wait has been interrupted. Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onConsumeEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|MessageConsumer
name|createJmsConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|Destination
index|[]
name|dest
init|=
name|createDestination
argument_list|()
decl_stmt|;
return|return
name|createJmsConsumer
argument_list|(
name|dest
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|MessageConsumer
name|createJmsConsumer
parameter_list|(
name|Destination
name|dest
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isDurable
argument_list|()
condition|)
block|{
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|dest
argument_list|,
name|getConsumerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
return|return
name|jmsConsumer
return|;
block|}
specifier|public
name|MessageConsumer
name|createJmsConsumer
parameter_list|(
name|Destination
name|dest
parameter_list|,
name|String
name|selector
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isDurable
argument_list|()
condition|)
block|{
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|dest
argument_list|,
name|getConsumerName
argument_list|()
argument_list|,
name|selector
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jmsConsumer
operator|=
name|getSession
argument_list|()
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|,
name|selector
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
block|}
return|return
name|jmsConsumer
return|;
block|}
specifier|public
name|MessageConsumer
name|getJmsConsumer
parameter_list|()
block|{
return|return
name|jmsConsumer
return|;
block|}
specifier|public
name|Properties
name|getJmsConsumerSettings
parameter_list|()
block|{
return|return
name|jmsConsumerSettings
return|;
block|}
specifier|public
name|void
name|setJmsConsumerSettings
parameter_list|(
name|Properties
name|jmsConsumerSettings
parameter_list|)
block|{
name|this
operator|.
name|jmsConsumerSettings
operator|=
name|jmsConsumerSettings
expr_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|this
argument_list|,
name|jmsConsumerSettings
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDurable
parameter_list|()
block|{
return|return
name|durable
return|;
block|}
specifier|public
name|void
name|setDurable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|this
operator|.
name|durable
operator|=
name|durable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAsyncRecv
parameter_list|()
block|{
return|return
name|asyncRecv
return|;
block|}
specifier|public
name|void
name|setAsyncRecv
parameter_list|(
name|boolean
name|asyncRecv
parameter_list|)
block|{
name|this
operator|.
name|asyncRecv
operator|=
name|asyncRecv
expr_stmt|;
block|}
specifier|public
name|String
name|getConsumerName
parameter_list|()
block|{
return|return
name|consumerName
return|;
block|}
specifier|public
name|void
name|setConsumerName
parameter_list|(
name|String
name|consumerName
parameter_list|)
block|{
name|this
operator|.
name|consumerName
operator|=
name|consumerName
expr_stmt|;
block|}
specifier|public
name|long
name|getRecvCount
parameter_list|()
block|{
return|return
name|recvCount
return|;
block|}
specifier|public
name|void
name|setRecvCount
parameter_list|(
name|long
name|recvCount
parameter_list|)
block|{
name|this
operator|.
name|recvCount
operator|=
name|recvCount
expr_stmt|;
block|}
specifier|public
name|long
name|getRecvDuration
parameter_list|()
block|{
return|return
name|recvDuration
return|;
block|}
specifier|public
name|void
name|setRecvDuration
parameter_list|(
name|long
name|recvDuration
parameter_list|)
block|{
name|this
operator|.
name|recvDuration
operator|=
name|recvDuration
expr_stmt|;
block|}
specifier|public
name|String
name|getRecvType
parameter_list|()
block|{
return|return
name|recvType
return|;
block|}
specifier|public
name|void
name|setRecvType
parameter_list|(
name|String
name|recvType
parameter_list|)
block|{
name|this
operator|.
name|recvType
operator|=
name|recvType
expr_stmt|;
block|}
specifier|public
name|Properties
name|getSettings
parameter_list|()
block|{
name|Properties
name|allSettings
init|=
operator|new
name|Properties
argument_list|(
name|jmsConsumerSettings
argument_list|)
decl_stmt|;
name|allSettings
operator|.
name|putAll
argument_list|(
name|super
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|allSettings
return|;
block|}
specifier|public
name|void
name|setSettings
parameter_list|(
name|Properties
name|settings
parameter_list|)
block|{
name|super
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|this
argument_list|,
name|jmsConsumerSettings
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|PREFIX_CONFIG_CONSUMER
argument_list|)
condition|)
block|{
name|jmsConsumerSettings
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|samplerSettings
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Properties
name|consumerSettings
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Get property define options only
name|int
name|index
init|=
name|args
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|args
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|args
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"sampler."
argument_list|)
condition|)
block|{
name|samplerSettings
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumerSettings
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|JmsConsumerClient
name|client
init|=
operator|new
name|JmsConsumerClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setSettings
argument_list|(
name|consumerSettings
argument_list|)
expr_stmt|;
name|PerfMeasurementTool
name|sampler
init|=
operator|new
name|PerfMeasurementTool
argument_list|()
decl_stmt|;
name|sampler
operator|.
name|setSamplerSettings
argument_list|(
name|samplerSettings
argument_list|)
expr_stmt|;
name|sampler
operator|.
name|registerClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|sampler
operator|.
name|startSampler
argument_list|()
expr_stmt|;
name|client
operator|.
name|setPerfEventListener
argument_list|(
name|sampler
argument_list|)
expr_stmt|;
name|client
operator|.
name|receiveMessages
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

