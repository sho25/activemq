begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Support class containing constant values and static methods that are  * used to map to / from AMQP Message types being sent or received.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AmqpMessageSupport
block|{
comment|// Message Properties used to map AMQP to JMS and back
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_PREFIX
init|=
literal|"JMS_AMQP_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|JMS_AMQP_PREFIX_LENGTH
init|=
name|JMS_AMQP_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MESSAGE_FORMAT
init|=
literal|"MESSAGE_FORMAT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ORIGINAL_ENCODING
init|=
literal|"ORIGINAL_ENCODING"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NATIVE
init|=
literal|"NATIVE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"HEADER"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTIES
init|=
literal|"PROPERTIES"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIRST_ACQUIRER
init|=
literal|"FirstAcquirer"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"ContentType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_ENCODING
init|=
literal|"ContentEncoding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLYTO_GROUP_ID
init|=
literal|"ReplyToGroupID"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELIVERY_ANNOTATION_PREFIX
init|=
literal|"DA_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MESSAGE_ANNOTATION_PREFIX
init|=
literal|"MA_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FOOTER_PREFIX
init|=
literal|"FT_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_HEADER
init|=
name|JMS_AMQP_PREFIX
operator|+
name|HEADER
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_PROPERTIES
init|=
name|JMS_AMQP_PREFIX
operator|+
name|PROPERTIES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_ORIGINAL_ENCODING
init|=
name|JMS_AMQP_PREFIX
operator|+
name|ORIGINAL_ENCODING
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_MESSAGE_FORMAT
init|=
name|JMS_AMQP_PREFIX
operator|+
name|MESSAGE_FORMAT
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_NATIVE
init|=
name|JMS_AMQP_PREFIX
operator|+
name|NATIVE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_FIRST_ACQUIRER
init|=
name|JMS_AMQP_PREFIX
operator|+
name|FIRST_ACQUIRER
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_CONTENT_TYPE
init|=
name|JMS_AMQP_PREFIX
operator|+
name|CONTENT_TYPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_CONTENT_ENCODING
init|=
name|JMS_AMQP_PREFIX
operator|+
name|CONTENT_ENCODING
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_REPLYTO_GROUP_ID
init|=
name|JMS_AMQP_PREFIX
operator|+
name|REPLYTO_GROUP_ID
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_DELIVERY_ANNOTATION_PREFIX
init|=
name|JMS_AMQP_PREFIX
operator|+
name|DELIVERY_ANNOTATION_PREFIX
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_MESSAGE_ANNOTATION_PREFIX
init|=
name|JMS_AMQP_PREFIX
operator|+
name|MESSAGE_ANNOTATION_PREFIX
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_AMQP_FOOTER_PREFIX
init|=
name|JMS_AMQP_PREFIX
operator|+
name|FOOTER_PREFIX
decl_stmt|;
comment|// Message body type definitions
specifier|public
specifier|static
specifier|final
name|Binary
name|EMPTY_BINARY
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Data
name|EMPTY_BODY
init|=
operator|new
name|Data
argument_list|(
name|EMPTY_BINARY
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Data
name|NULL_OBJECT_BODY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_UNKNOWN
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_NULL
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_DATA
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_SEQUENCE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_NULL
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_STRING
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_BINARY
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_MAP
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|AMQP_VALUE_LIST
init|=
literal|8
decl_stmt|;
static|static
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|getSerializedBytes
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to initialise null object body"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NULL_OBJECT_BODY
operator|=
operator|new
name|Data
argument_list|(
operator|new
name|Binary
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Content type used to mark Data sections as containing a serialized java object.      */
specifier|public
specifier|static
specifier|final
name|String
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
init|=
literal|"application/x-java-serialized-object"
decl_stmt|;
comment|/**      * Content type used to mark Data sections as containing arbitrary bytes.      */
specifier|public
specifier|static
specifier|final
name|String
name|OCTET_STREAM_CONTENT_TYPE
init|=
literal|"application/octet-stream"
decl_stmt|;
comment|/**      * Lookup and return the correct Proton Symbol instance based on the given key.      *      * @param key      *        the String value name of the Symbol to locate.      *      * @return the Symbol value that matches the given key.      */
specifier|public
specifier|static
name|Symbol
name|getSymbol
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Symbol
operator|.
name|valueOf
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Safe way to access message annotations which will check internal structure and      * either return the annotation if it exists or null if the annotation or any annotations      * are present.      *      * @param key      *        the String key to use to lookup an annotation.      * @param message      *        the AMQP message object that is being examined.      *      * @return the given annotation value or null if not present in the message.      */
specifier|public
specifier|static
name|Object
name|getMessageAnnotation
parameter_list|(
name|String
name|key
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getMessageAnnotations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|annotations
init|=
name|message
operator|.
name|getMessageAnnotations
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|annotations
operator|.
name|get
argument_list|(
name|AmqpMessageSupport
operator|.
name|getSymbol
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Check whether the content-type field of the properties section (if present) in      * the given message matches the provided string (where null matches if there is      * no content type present.      *      * @param contentType      *        content type string to compare against, or null if none      * @param message      *        the AMQP message object that is being examined.      *      * @return true if content type matches      */
specifier|public
specifier|static
name|boolean
name|isContentType
parameter_list|(
name|String
name|contentType
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
return|return
name|message
operator|.
name|getContentType
argument_list|()
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|contentType
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getContentType
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * @param contentType the contentType of the received message      * @return the character set to use, or null if not to treat the message as text      */
specifier|public
specifier|static
name|Charset
name|getCharsetForTextualContent
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
try|try
block|{
return|return
name|AmqpContentTypeSupport
operator|.
name|parseContentTypeForTextualCharset
argument_list|(
name|contentType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidContentTypeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|getSerializedBytes
parameter_list|(
name|Serializable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;
name|ObjectOutputStream
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
init|)
block|{
name|oos
operator|.
name|writeObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
comment|/**      * Return the encoded form of the BytesMessage as an AMQP Binary instance.      *      * @param message      *      the Message whose binary encoded body is needed.      *      * @return a Binary instance containing the encoded message body.      *      * @throws JMSException if an error occurs while fetching the binary payload.      */
specifier|public
specifier|static
name|Binary
name|getBinaryFromMessageBody
parameter_list|(
name|ActiveMQBytesMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Binary
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|contents
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
name|int
name|length
init|=
operator|(
name|int
operator|)
name|message
operator|.
name|getBodyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|uncompressed
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|message
operator|.
name|readBytes
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
operator|new
name|Binary
argument_list|(
name|contents
operator|.
name|getData
argument_list|()
argument_list|,
name|contents
operator|.
name|getOffset
argument_list|()
argument_list|,
name|contents
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Return the encoded form of the BytesMessage as an AMQP Binary instance.      *      * @param message      *      the Message whose binary encoded body is needed.      *      * @return a Binary instance containing the encoded message body.      *      * @throws JMSException if an error occurs while fetching the binary payload.      */
specifier|public
specifier|static
name|Binary
name|getBinaryFromMessageBody
parameter_list|(
name|ActiveMQObjectMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Binary
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|contents
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;                      ByteArrayInputStream is = new ByteArrayInputStream(contents)
empty_stmt|;
name|InflaterInputStream
name|iis
init|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
block|)
block|{
name|byte
name|value
decl_stmt|;
while|while
condition|(
operator|(
name|value
operator|=
operator|(
name|byte
operator|)
name|iis
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|ByteSequence
name|expanded
init|=
name|os
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|expanded
operator|.
name|getData
argument_list|()
argument_list|,
name|expanded
operator|.
name|getOffset
argument_list|()
argument_list|,
name|expanded
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|Binary
argument_list|(
name|contents
operator|.
name|getData
argument_list|()
argument_list|,
name|contents
operator|.
name|getOffset
argument_list|()
argument_list|,
name|contents
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|result
return|;
block|}
end_class

begin_comment
comment|/**      * Return the encoded form of the Message as an AMQP Binary instance.      *      * @param message      *      the Message whose binary encoded body is needed.      *      * @return a Binary instance containing the encoded message body.      *      * @throws JMSException if an error occurs while fetching the binary payload.      */
end_comment

begin_function
specifier|public
specifier|static
name|Binary
name|getBinaryFromMessageBody
parameter_list|(
name|ActiveMQTextMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Binary
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|contents
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
try|try
init|(
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|contents
argument_list|)
init|;                      InflaterInputStream iis = new InflaterInputStream(is)
empty_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|iis
argument_list|)
decl_stmt|;
block|)
block|{
name|int
name|size
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|uncompressed
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Message includes a size prefix of four bytes for the OpenWire marshaler
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|contents
operator|.
name|getData
argument_list|()
argument_list|,
name|contents
operator|.
name|getOffset
argument_list|()
operator|+
literal|4
argument_list|,
name|contents
operator|.
name|getLength
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_elseif
elseif|else
if|if
condition|(
name|message
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|message
operator|.
name|getText
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_return
return|return
name|result
return|;
end_return

begin_comment
unit|}
comment|/**      * Return the underlying Map from the JMS MapMessage instance.      *      * @param message      *      the MapMessage whose underlying Map is requested.      *      * @return the underlying Map used to store the value in the given MapMessage.      *      * @throws JMSException if an error occurs in constructing or fetching the Map.      */
end_comment

begin_function
unit|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMapFromMessageBody
parameter_list|(
name|ActiveMQMapMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contentMap
init|=
name|message
operator|.
name|getContentMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|contentMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|value
operator|=
operator|new
name|Binary
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
end_function

unit|}
end_unit

