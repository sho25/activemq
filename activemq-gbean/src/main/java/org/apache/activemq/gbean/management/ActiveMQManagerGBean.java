begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|gbean
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GBeanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GBeanInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GBeanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GBeanData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|kernel
operator|.
name|Kernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|kernel
operator|.
name|GBeanNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|j2ee
operator|.
name|management
operator|.
name|impl
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|j2ee
operator|.
name|j2eeobjectnames
operator|.
name|NameFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|gbean
operator|.
name|ActiveMQBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|gbean
operator|.
name|ActiveMQConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|gbean
operator|.
name|ActiveMQManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|gbean
operator|.
name|TransportConnectorGBeanImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the ActiveMQ management interface.  These are the ActiveMQ  * management features available at runtime.  *  * @version $Revision: 1.0$  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQManagerGBean
implements|implements
name|ActiveMQManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ActiveMQManagerGBean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Kernel
name|kernel
decl_stmt|;
specifier|public
name|ActiveMQManagerGBean
parameter_list|(
name|Kernel
name|kernel
parameter_list|)
block|{
name|this
operator|.
name|kernel
operator|=
name|kernel
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getContainers
parameter_list|()
block|{
name|GBeanQuery
name|query
init|=
operator|new
name|GBeanQuery
argument_list|(
literal|null
argument_list|,
name|ActiveMQBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|set
init|=
name|kernel
operator|.
name|listGBeans
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
operator|new
name|String
index|[
name|set
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|results
index|[
name|i
operator|++
index|]
operator|=
name|name
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|public
name|String
index|[]
name|getSupportedProtocols
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"tcp"
block|,
literal|"vm"
block|,
literal|"ssl"
block|,
literal|"udp"
block|,
literal|"nio"
block|}
return|;
block|}
specifier|public
name|String
index|[]
name|getConnectors
parameter_list|()
block|{
name|GBeanQuery
name|query
init|=
operator|new
name|GBeanQuery
argument_list|(
literal|null
argument_list|,
name|ActiveMQConnector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|set
init|=
name|kernel
operator|.
name|listGBeans
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
index|[]
name|results
init|=
operator|new
name|String
index|[
name|set
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|results
index|[
name|i
operator|++
index|]
operator|=
name|name
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|public
name|String
index|[]
name|getConnectors
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
name|getConnectors
argument_list|()
return|;
block|}
name|GBeanQuery
name|query
init|=
operator|new
name|GBeanQuery
argument_list|(
literal|null
argument_list|,
name|ActiveMQConnector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|set
init|=
name|kernel
operator|.
name|listGBeans
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|List
name|results
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|target
init|=
operator|(
name|String
operator|)
name|kernel
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|,
literal|"protocol"
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
name|target
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|name
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to look up protocol for connector '"
operator|+
name|name
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getConnectorsForContainer
parameter_list|(
name|String
name|broker
parameter_list|)
block|{
try|try
block|{
name|ObjectName
name|brokerName
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|List
name|results
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|GBeanQuery
name|query
init|=
operator|new
name|GBeanQuery
argument_list|(
literal|null
argument_list|,
name|ActiveMQConnector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|set
init|=
name|kernel
operator|.
name|listGBeans
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// all ActiveMQ connectors
for|for
control|(
name|Iterator
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// a single ActiveMQ connector
name|GBeanData
name|data
init|=
name|kernel
operator|.
name|getGBeanData
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Set
name|refs
init|=
name|data
operator|.
name|getReferencePatterns
argument_list|(
literal|"brokerService"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|refit
init|=
name|refs
operator|.
name|iterator
argument_list|()
init|;
name|refit
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|ref
init|=
operator|(
name|ObjectName
operator|)
name|refit
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|isPattern
argument_list|()
condition|)
block|{
name|Set
name|matches
init|=
name|kernel
operator|.
name|listGBeans
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to compare a connector->container reference that's a pattern to a fixed container name: "
operator|+
name|ref
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
operator|(
name|ObjectName
operator|)
name|matches
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|equals
argument_list|(
name|brokerName
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|name
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|ref
operator|.
name|equals
argument_list|(
name|brokerName
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|name
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to look up connectors for broker '"
operator|+
name|broker
operator|+
literal|"': "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
index|[]
name|getConnectorsForContainer
parameter_list|(
name|String
name|broker
parameter_list|,
name|String
name|protocol
parameter_list|)
block|{
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
return|return
name|getConnectorsForContainer
argument_list|(
name|broker
argument_list|)
return|;
block|}
try|try
block|{
name|ObjectName
name|brokerName
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|List
name|results
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|GBeanQuery
name|query
init|=
operator|new
name|GBeanQuery
argument_list|(
literal|null
argument_list|,
name|ActiveMQConnector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|set
init|=
name|kernel
operator|.
name|listGBeans
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// all ActiveMQ connectors
for|for
control|(
name|Iterator
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// a single ActiveMQ connector
name|GBeanData
name|data
init|=
name|kernel
operator|.
name|getGBeanData
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Set
name|refs
init|=
name|data
operator|.
name|getReferencePatterns
argument_list|(
literal|"brokerService"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|refit
init|=
name|refs
operator|.
name|iterator
argument_list|()
init|;
name|refit
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|ref
init|=
operator|(
name|ObjectName
operator|)
name|refit
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|isPattern
argument_list|()
condition|)
block|{
name|Set
name|matches
init|=
name|kernel
operator|.
name|listGBeans
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to compare a connector->container reference that's a pattern to a fixed container name: "
operator|+
name|ref
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
operator|(
name|ObjectName
operator|)
name|matches
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|equals
argument_list|(
name|brokerName
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|ref
operator|.
name|equals
argument_list|(
name|brokerName
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
try|try
block|{
name|String
name|testProtocol
init|=
operator|(
name|String
operator|)
name|kernel
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|,
literal|"protocol"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testProtocol
operator|!=
literal|null
operator|&&
name|testProtocol
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|name
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to look up protocol for connector '"
operator|+
name|name
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to look up connectors for broker '"
operator|+
name|broker
operator|+
literal|"': "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a new connector, and returns the ObjectName for it.  Note that      * the connector may well require further customization before being fully      * functional (e.g. SSL settings for a secure connector).      */
specifier|public
name|String
name|addConnector
parameter_list|(
name|String
name|broker
parameter_list|,
name|String
name|uniqueName
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|ObjectName
name|brokerName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|brokerName
operator|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse ObjectName '"
operator|+
name|broker
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|ObjectName
name|name
init|=
name|getConnectorName
argument_list|(
name|brokerName
argument_list|,
name|protocol
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|uniqueName
argument_list|)
decl_stmt|;
name|GBeanData
name|connector
init|=
operator|new
name|GBeanData
argument_list|(
name|name
argument_list|,
name|TransportConnectorGBeanImpl
operator|.
name|GBEAN_INFO
argument_list|)
decl_stmt|;
comment|//todo: if SSL is supported, need to add more properties or use a different GBean?
name|connector
operator|.
name|setAttribute
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setAttribute
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setAttribute
argument_list|(
literal|"port"
argument_list|,
operator|new
name|Integer
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setReferencePattern
argument_list|(
literal|"brokerService"
argument_list|,
name|brokerName
argument_list|)
expr_stmt|;
name|ObjectName
name|config
init|=
name|Util
operator|.
name|getConfiguration
argument_list|(
name|kernel
argument_list|,
name|brokerName
argument_list|)
decl_stmt|;
try|try
block|{
name|kernel
operator|.
name|invoke
argument_list|(
name|config
argument_list|,
literal|"addGBean"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|connector
block|,
name|Boolean
operator|.
name|FALSE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|GBeanData
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to add GBean "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|name
operator|.
name|getCanonicalName
argument_list|()
return|;
block|}
specifier|public
name|void
name|removeConnector
parameter_list|(
name|String
name|objectName
parameter_list|)
block|{
name|ObjectName
name|name
init|=
literal|null
decl_stmt|;
try|try
block|{
name|name
operator|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid object name '"
operator|+
name|objectName
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|GBeanInfo
name|info
init|=
name|kernel
operator|.
name|getGBeanInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Set
name|intfs
init|=
name|info
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|intfs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|intf
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|intf
operator|.
name|equals
argument_list|(
name|ActiveMQConnector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|GBeanNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
name|ObjectName
name|config
init|=
name|Util
operator|.
name|getConfiguration
argument_list|(
name|kernel
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|kernel
operator|.
name|invoke
argument_list|(
name|config
argument_list|,
literal|"removeGBean"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GBeanNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No such GBean '"
operator|+
name|objectName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|//todo: what if we want to remove a failed GBean?
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to remove GBean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generate an ObjectName for a new connector GBean      */
specifier|private
name|ObjectName
name|getConnectorName
parameter_list|(
name|ObjectName
name|broker
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|uniqueName
parameter_list|)
block|{
name|Hashtable
name|table
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|NameFactory
operator|.
name|J2EE_APPLICATION
argument_list|,
name|broker
operator|.
name|getKeyProperty
argument_list|(
name|NameFactory
operator|.
name|J2EE_APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|NameFactory
operator|.
name|J2EE_SERVER
argument_list|,
name|broker
operator|.
name|getKeyProperty
argument_list|(
name|NameFactory
operator|.
name|J2EE_SERVER
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|NameFactory
operator|.
name|J2EE_MODULE
argument_list|,
name|broker
operator|.
name|getKeyProperty
argument_list|(
name|NameFactory
operator|.
name|J2EE_MODULE
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|NameFactory
operator|.
name|J2EE_TYPE
argument_list|,
name|ActiveMQConnector
operator|.
name|CONNECTOR_J2EE_TYPE
argument_list|)
expr_stmt|;
name|String
name|brokerName
init|=
name|broker
operator|.
name|getKeyProperty
argument_list|(
name|NameFactory
operator|.
name|J2EE_NAME
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
literal|"broker"
argument_list|,
name|brokerName
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|NameFactory
operator|.
name|J2EE_NAME
argument_list|,
name|brokerName
operator|+
literal|"."
operator|+
name|protocol
operator|+
literal|"."
operator|+
name|host
operator|+
operator|(
name|port
operator|>
operator|-
literal|1
condition|?
literal|"."
operator|+
name|port
else|:
literal|""
operator|)
operator|+
literal|"-"
operator|+
name|uniqueName
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|broker
operator|.
name|getDomain
argument_list|()
argument_list|,
name|table
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Never should have failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|GBeanInfo
name|GBEAN_INFO
decl_stmt|;
static|static
block|{
name|GBeanInfoBuilder
name|infoFactory
init|=
operator|new
name|GBeanInfoBuilder
argument_list|(
literal|"ActiveMQ Manager"
argument_list|,
name|ActiveMQManagerGBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|infoFactory
operator|.
name|addAttribute
argument_list|(
literal|"kernel"
argument_list|,
name|Kernel
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|infoFactory
operator|.
name|addInterface
argument_list|(
name|ActiveMQManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|infoFactory
operator|.
name|setConstructor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"kernel"
block|}
argument_list|)
expr_stmt|;
name|GBEAN_INFO
operator|=
name|infoFactory
operator|.
name|getBeanInfo
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|GBeanInfo
name|getGBeanInfo
parameter_list|()
block|{
return|return
name|GBEAN_INFO
return|;
block|}
block|}
end_class

end_unit

