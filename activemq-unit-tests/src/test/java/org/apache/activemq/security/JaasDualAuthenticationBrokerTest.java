begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|StubBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|SslTransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|StubSSLServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|StubSSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|StubX509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportServer
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|JaasDualAuthenticationBrokerTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INSECURE_GROUP
init|=
literal|"insecureGroup"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSECURE_USERNAME
init|=
literal|"insecureUserName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DN_GROUP
init|=
literal|"dnGroup"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DN_USERNAME
init|=
literal|"dnUserName"
decl_stmt|;
name|StubBroker
name|receiveBroker
decl_stmt|;
name|JaasDualAuthenticationBroker
name|authBroker
decl_stmt|;
name|ConnectionContext
name|connectionContext
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
decl_stmt|;
name|SslTransportServer
name|sslTransportServer
decl_stmt|;
name|TcpTransportServer
name|nonSslTransportServer
decl_stmt|;
comment|/** create a dual login config, for both SSL and non-SSL connections      * using the StubLoginModule      *      */
name|void
name|createLoginConfig
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sslConfigOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sslConfigOptions
operator|.
name|put
argument_list|(
name|StubLoginModule
operator|.
name|ALLOW_LOGIN_PROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|sslConfigOptions
operator|.
name|put
argument_list|(
name|StubLoginModule
operator|.
name|USERS_PROPERTY
argument_list|,
name|DN_USERNAME
argument_list|)
expr_stmt|;
name|sslConfigOptions
operator|.
name|put
argument_list|(
name|StubLoginModule
operator|.
name|GROUPS_PROPERTY
argument_list|,
name|DN_GROUP
argument_list|)
expr_stmt|;
name|AppConfigurationEntry
name|sslConfigEntry
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
literal|"org.apache.activemq.security.StubLoginModule"
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|sslConfigOptions
argument_list|)
decl_stmt|;
name|configOptions
operator|.
name|put
argument_list|(
name|StubLoginModule
operator|.
name|ALLOW_LOGIN_PROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|configOptions
operator|.
name|put
argument_list|(
name|StubLoginModule
operator|.
name|USERS_PROPERTY
argument_list|,
name|INSECURE_USERNAME
argument_list|)
expr_stmt|;
name|configOptions
operator|.
name|put
argument_list|(
name|StubLoginModule
operator|.
name|GROUPS_PROPERTY
argument_list|,
name|INSECURE_GROUP
argument_list|)
expr_stmt|;
name|AppConfigurationEntry
name|configEntry
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
literal|"org.apache.activemq.security.StubLoginModule"
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|configOptions
argument_list|)
decl_stmt|;
name|StubDualJaasConfiguration
name|jaasConfig
init|=
operator|new
name|StubDualJaasConfiguration
argument_list|(
name|configEntry
argument_list|,
name|sslConfigEntry
argument_list|)
decl_stmt|;
name|Configuration
operator|.
name|setConfiguration
argument_list|(
name|jaasConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|receiveBroker
operator|=
operator|new
name|StubBroker
argument_list|()
expr_stmt|;
name|authBroker
operator|=
operator|new
name|JaasDualAuthenticationBroker
argument_list|(
name|receiveBroker
argument_list|,
literal|"activemq-domain"
argument_list|,
literal|"activemq-ssl-domain"
argument_list|)
expr_stmt|;
name|connectionContext
operator|=
operator|new
name|ConnectionContext
argument_list|()
expr_stmt|;
name|SSLServerSocket
name|sslServerSocket
init|=
operator|new
name|StubSSLServerSocket
argument_list|()
decl_stmt|;
name|StubSSLSocketFactory
name|socketFactory
init|=
operator|new
name|StubSSLSocketFactory
argument_list|(
name|sslServerSocket
argument_list|)
decl_stmt|;
try|try
block|{
name|sslTransportServer
operator|=
operator|new
name|SslTransportServer
argument_list|(
literal|null
argument_list|,
operator|new
name|URI
argument_list|(
literal|"ssl://localhost:61616?needClientAuth=true"
argument_list|)
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to create SslTransportServer."
argument_list|)
expr_stmt|;
block|}
name|sslTransportServer
operator|.
name|setNeedClientAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sslTransportServer
operator|.
name|bind
argument_list|()
expr_stmt|;
try|try
block|{
name|nonSslTransportServer
operator|=
operator|new
name|TcpTransportServer
argument_list|(
literal|null
argument_list|,
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:61613"
argument_list|)
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to create TcpTransportServer."
argument_list|)
expr_stmt|;
block|}
name|connectionInfo
operator|=
operator|new
name|ConnectionInfo
argument_list|()
expr_stmt|;
name|createLoginConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSecureConnector
parameter_list|()
block|{
name|Connector
name|connector
init|=
operator|new
name|TransportConnector
argument_list|(
name|sslTransportServer
argument_list|)
decl_stmt|;
name|connectionContext
operator|.
name|setConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setTransportContext
argument_list|(
operator|new
name|StubX509Certificate
index|[]
block|{}
argument_list|)
expr_stmt|;
try|try
block|{
name|authBroker
operator|.
name|addConnection
argument_list|(
name|connectionContext
argument_list|,
name|connectionInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Call to addConnection failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of addConnection calls to underlying Broker must match number of calls made to "
operator|+
literal|"AuthenticationBroker."
argument_list|,
literal|1
argument_list|,
name|receiveBroker
operator|.
name|addConnectionData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ConnectionContext
name|receivedContext
init|=
name|receiveBroker
operator|.
name|addConnectionData
operator|.
name|getFirst
argument_list|()
operator|.
name|connectionContext
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The SecurityContext's userName must be set to that of the UserPrincipal."
argument_list|,
name|DN_USERNAME
argument_list|,
name|receivedContext
operator|.
name|getSecurityContext
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|receivedPrincipals
init|=
name|receivedContext
operator|.
name|getSecurityContext
argument_list|()
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2 Principals received"
argument_list|,
literal|2
argument_list|,
name|receivedPrincipals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|iter
init|=
name|receivedPrincipals
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Principal
name|currentPrincipal
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentPrincipal
operator|instanceof
name|UserPrincipal
condition|)
block|{
name|assertEquals
argument_list|(
literal|"UserPrincipal is '"
operator|+
name|DN_USERNAME
operator|+
literal|"'"
argument_list|,
name|DN_USERNAME
argument_list|,
name|currentPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentPrincipal
operator|instanceof
name|GroupPrincipal
condition|)
block|{
name|assertEquals
argument_list|(
literal|"GroupPrincipal is '"
operator|+
name|DN_GROUP
operator|+
literal|"'"
argument_list|,
name|DN_GROUP
argument_list|,
name|currentPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected Principal subclass found."
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|authBroker
operator|.
name|removeConnection
argument_list|(
name|connectionContext
argument_list|,
name|connectionInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Call to removeConnection failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of removeConnection calls to underlying Broker must match number of calls made to "
operator|+
literal|"AuthenticationBroker."
argument_list|,
literal|1
argument_list|,
name|receiveBroker
operator|.
name|removeConnectionData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsecureConnector
parameter_list|()
block|{
name|Connector
name|connector
init|=
operator|new
name|TransportConnector
argument_list|(
name|nonSslTransportServer
argument_list|)
decl_stmt|;
name|connectionContext
operator|.
name|setConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|INSECURE_USERNAME
argument_list|)
expr_stmt|;
try|try
block|{
name|authBroker
operator|.
name|addConnection
argument_list|(
name|connectionContext
argument_list|,
name|connectionInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Call to addConnection failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of addConnection calls to underlying Broker must match number of calls made to "
operator|+
literal|"AuthenticationBroker."
argument_list|,
literal|1
argument_list|,
name|receiveBroker
operator|.
name|addConnectionData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ConnectionContext
name|receivedContext
init|=
name|receiveBroker
operator|.
name|addConnectionData
operator|.
name|getFirst
argument_list|()
operator|.
name|connectionContext
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The SecurityContext's userName must be set to that of the UserPrincipal."
argument_list|,
name|INSECURE_USERNAME
argument_list|,
name|receivedContext
operator|.
name|getSecurityContext
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|receivedPrincipals
init|=
name|receivedContext
operator|.
name|getSecurityContext
argument_list|()
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2 Principals received"
argument_list|,
literal|2
argument_list|,
name|receivedPrincipals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|iter
init|=
name|receivedPrincipals
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Principal
name|currentPrincipal
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentPrincipal
operator|instanceof
name|UserPrincipal
condition|)
block|{
name|assertEquals
argument_list|(
literal|"UserPrincipal is '"
operator|+
name|INSECURE_USERNAME
operator|+
literal|"'"
argument_list|,
name|INSECURE_USERNAME
argument_list|,
name|currentPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentPrincipal
operator|instanceof
name|GroupPrincipal
condition|)
block|{
name|assertEquals
argument_list|(
literal|"GroupPrincipal is '"
operator|+
name|INSECURE_GROUP
operator|+
literal|"'"
argument_list|,
name|INSECURE_GROUP
argument_list|,
name|currentPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected Principal subclass found."
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|authBroker
operator|.
name|removeConnection
argument_list|(
name|connectionContext
argument_list|,
name|connectionInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Call to removeConnection failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of removeConnection calls to underlying Broker must match number of calls made to "
operator|+
literal|"AuthenticationBroker."
argument_list|,
literal|1
argument_list|,
name|receiveBroker
operator|.
name|removeConnectionData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

