begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SuppressReplyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultIOExceptionHandlerTest
block|{
name|DefaultIOExceptionHandler
name|underTest
init|=
operator|new
name|DefaultIOExceptionHandler
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testHandleWithShutdownOnExit
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleWithOutShutdownOnExit
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doTest
parameter_list|(
name|boolean
name|exitPlease
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|stopCalled
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|shutdownOnExitSet
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|underTest
operator|.
name|setSystemExitOnShutdown
argument_list|(
name|exitPlease
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setBrokerService
argument_list|(
operator|new
name|BrokerService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdownOnExitSet
operator|.
name|set
argument_list|(
name|isSystemExitOnShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|stopCalled
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// ensure we don't actually exit the jvm
name|setSystemExitOnShutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|underTest
operator|.
name|handle
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"cause stop"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect suppress reply exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SuppressReplyException
name|expected
parameter_list|)
block|{}
name|assertTrue
argument_list|(
literal|"stop called on time"
argument_list|,
name|stopCalled
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"exit on shutdown set"
argument_list|,
name|exitPlease
argument_list|,
name|shutdownOnExitSet
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

