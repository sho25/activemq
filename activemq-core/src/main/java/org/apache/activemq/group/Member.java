begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|group
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_comment
comment|/**  *<P>  * A<CODE>Member</CODE> holds information about a member of the group  *   */
end_comment

begin_class
specifier|public
class|class
name|Member
implements|implements
name|Externalizable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|String
name|hostname
decl_stmt|;
specifier|private
name|long
name|timeStamp
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|Destination
name|inBoxDestination
decl_stmt|;
comment|/**      * Default constructor - only used by serialization      */
specifier|public
name|Member
parameter_list|()
block|{         }
comment|/**      * @param name      */
specifier|public
name|Member
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|IdGenerator
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return the name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
comment|/**      * @return the id      */
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * @return the hostname      */
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostname
return|;
block|}
comment|/**      * @return the startTime      */
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
comment|/**      * @return the inbox destination      */
specifier|public
name|Destination
name|getInBoxDestination
parameter_list|()
block|{
return|return
name|this
operator|.
name|inBoxDestination
return|;
block|}
name|void
name|setInBoxDestination
parameter_list|(
name|Destination
name|dest
parameter_list|)
block|{
name|this
operator|.
name|inBoxDestination
operator|=
name|dest
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|+
literal|"["
operator|+
name|this
operator|.
name|id
operator|+
literal|"]@"
operator|+
name|this
operator|.
name|hostname
return|;
block|}
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|inBoxDestination
operator|=
operator|(
name|Destination
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|?
name|this
operator|.
name|name
else|:
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|id
operator|!=
literal|null
condition|?
name|this
operator|.
name|id
else|:
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|hostname
operator|!=
literal|null
condition|?
name|this
operator|.
name|hostname
else|:
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|startTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|this
operator|.
name|inBoxDestination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Member
condition|)
block|{
name|Member
name|other
init|=
operator|(
name|Member
operator|)
name|obj
decl_stmt|;
name|result
operator|=
name|this
operator|.
name|id
operator|.
name|equals
argument_list|(
name|other
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return the timeStamp      */
name|long
name|getTimeStamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeStamp
return|;
block|}
comment|/**      * @param timeStamp the timeStamp to set      */
name|void
name|setTimeStamp
parameter_list|(
name|long
name|timeStamp
parameter_list|)
block|{
name|this
operator|.
name|timeStamp
operator|=
name|timeStamp
expr_stmt|;
block|}
block|}
end_class

end_unit

