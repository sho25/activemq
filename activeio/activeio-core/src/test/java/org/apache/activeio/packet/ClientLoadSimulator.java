begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|stats
operator|.
name|CountStatisticImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|stats
operator|.
name|TimeStatisticImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|beanutils
operator|.
name|BeanUtils
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Simulates multiple a simple tcp echo clients for use in benchmarking activeio  * channel implementations.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ClientLoadSimulator
implements|implements
name|Runnable
block|{
specifier|private
name|URI
name|url
decl_stmt|;
comment|// Afects how clients are created
specifier|private
name|int
name|concurrentClients
init|=
literal|10
decl_stmt|;
specifier|private
name|long
name|rampUpTime
init|=
literal|1000
operator|*
name|concurrentClients
decl_stmt|;
comment|// Afects how clients behave
specifier|private
name|long
name|requestDelay
init|=
literal|500
decl_stmt|;
specifier|private
name|int
name|requestIterations
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|int
name|requestSize
init|=
literal|1024
decl_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|10
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|()
argument_list|)
decl_stmt|;
comment|// The packet the clients send to the server.
specifier|private
name|Packet
name|requestPacket
decl_stmt|;
specifier|private
name|long
name|sampleInterval
init|=
literal|1000
decl_stmt|;
specifier|private
name|ChannelFactory
name|factory
init|=
operator|new
name|ChannelFactory
argument_list|()
decl_stmt|;
specifier|private
name|CountDownLatch
name|shutdownCountDownLatch
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|activeConnectionsCounter
init|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"activeConnectionsCounter"
argument_list|,
literal|"The number of active connection attached to the server."
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountStatisticImpl
name|echoedBytesCounter
init|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"echoedBytesCounter"
argument_list|,
literal|"The number of bytes that have been echoed by the server."
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TimeStatisticImpl
name|requestLatency
init|=
operator|new
name|TimeStatisticImpl
argument_list|(
literal|"requestLatency"
argument_list|,
literal|"The amount of time that is spent waiting for a request to be serviced"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
name|ClientLoadSimulator
name|client
init|=
operator|new
name|ClientLoadSimulator
argument_list|()
decl_stmt|;
name|HashMap
name|options
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|option
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|option
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|||
name|option
operator|.
name|length
argument_list|()
operator|<
literal|2
operator|||
name|i
operator|+
literal|1
operator|>=
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid usage"
argument_list|)
expr_stmt|;
return|return;
block|}
name|option
operator|=
name|option
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|BeanUtils
operator|.
name|populate
argument_list|(
name|client
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server starting with the following options: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" url="
operator|+
name|client
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" sampleInterval="
operator|+
name|client
operator|.
name|getSampleInterval
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" concurrentClients="
operator|+
name|client
operator|.
name|getConcurrentClients
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" rampUpTime="
operator|+
name|client
operator|.
name|getRampUpTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" requestIterations="
operator|+
name|client
operator|.
name|getRequestIterations
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" requestSize="
operator|+
name|client
operator|.
name|getRequestSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" requestDelay="
operator|+
name|client
operator|.
name|getRequestDelay
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|client
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|printSampleData
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|runDuration
init|=
operator|(
name|now
operator|-
name|activeConnectionsCounter
operator|.
name|getStartTime
argument_list|()
operator|)
operator|/
literal|1000f
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Active connections: "
operator|+
name|activeConnectionsCounter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Echoed bytes: "
operator|+
operator|(
name|echoedBytesCounter
operator|.
name|getCount
argument_list|()
operator|/
literal|1024f
operator|)
operator|+
literal|" kb"
operator|+
literal|", Request latency: "
operator|+
name|requestLatency
operator|.
name|getAverageTime
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|echoedBytesCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|requestLatency
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ArrayList
name|clients
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|shutdownCountDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|activeConnectionsCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|echoedBytesCounter
operator|.
name|reset
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|(
literal|"Sampler"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sampler started."
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|shutdownCountDownLatch
operator|.
name|await
argument_list|(
name|sampleInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|printSampleData
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                     }
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sampler stopped."
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|requestSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|requestPacket
operator|=
operator|new
name|ByteArrayPacket
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Loop to ramp up the clients.
name|long
name|clientActivationDelay
init|=
name|rampUpTime
operator|/
name|concurrentClients
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|concurrentClients
operator|&&
operator|!
name|shutdownCountDownLatch
operator|.
name|await
argument_list|(
name|clientActivationDelay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding Client: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|()
decl_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|client
argument_list|,
literal|"Client: "
operator|+
name|i
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|shutdownCountDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Shutting down clients."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|clients
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Client
name|client
init|=
operator|(
name|Client
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|client
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|this
operator|.
name|url
operator|=
operator|new
name|URI
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
class|class
name|Client
implements|implements
name|Runnable
block|{
specifier|private
name|CountDownLatch
name|shutdownCountDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Packet
name|packet
init|=
name|requestPacket
operator|.
name|duplicate
argument_list|()
decl_stmt|;
specifier|private
name|SyncChannel
name|syncChannel
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Client started."
argument_list|)
expr_stmt|;
name|activeConnectionsCounter
operator|.
name|increment
argument_list|()
expr_stmt|;
name|syncChannel
operator|=
name|factory
operator|.
name|openSyncChannel
argument_list|(
name|url
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestIterations
operator|&&
operator|!
name|shutdownCountDownLatch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sendRequest
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|requestLatency
operator|.
name|addTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|echoedBytesCounter
operator|.
name|add
argument_list|(
name|packet
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestDelay
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|requestDelay
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Client stopped."
argument_list|)
expr_stmt|;
name|activeConnectionsCounter
operator|.
name|decrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|syncChannel
operator|!=
literal|null
condition|)
block|{
name|syncChannel
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|syncChannel
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|sendRequest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Read the data async to avoid dead locks due buffers being to small for
comment|// data being sent.
name|threadPool
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|<
name|packet
operator|.
name|remaining
argument_list|()
condition|)
block|{
name|Packet
name|p
init|=
name|syncChannel
operator|.
name|read
argument_list|(
literal|1000
operator|*
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|p
operator|==
name|EOSPacket
operator|.
name|EOS_PACKET
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Peer disconnected."
argument_list|)
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
name|c
operator|+=
name|p
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|syncChannel
operator|.
name|write
argument_list|(
name|packet
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
name|syncChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
name|done
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|shutdownCountDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return Returns the concurrentClients.      */
specifier|public
name|int
name|getConcurrentClients
parameter_list|()
block|{
return|return
name|concurrentClients
return|;
block|}
comment|/**      * @param concurrentClients      *            The concurrentClients to set.      */
specifier|public
name|void
name|setConcurrentClients
parameter_list|(
name|int
name|concurrentClients
parameter_list|)
block|{
name|this
operator|.
name|concurrentClients
operator|=
name|concurrentClients
expr_stmt|;
block|}
comment|/**      * @return Returns the rampUpTime.      */
specifier|public
name|long
name|getRampUpTime
parameter_list|()
block|{
return|return
name|rampUpTime
return|;
block|}
comment|/**      * @param rampUpTime      *            The rampUpTime to set.      */
specifier|public
name|void
name|setRampUpTime
parameter_list|(
name|long
name|rampUpTime
parameter_list|)
block|{
name|this
operator|.
name|rampUpTime
operator|=
name|rampUpTime
expr_stmt|;
block|}
comment|/**      * @return Returns the requestDelay.      */
specifier|public
name|long
name|getRequestDelay
parameter_list|()
block|{
return|return
name|requestDelay
return|;
block|}
comment|/**      * @param requestDelay      *            The requestDelay to set.      */
specifier|public
name|void
name|setRequestDelay
parameter_list|(
name|long
name|requestDelay
parameter_list|)
block|{
name|this
operator|.
name|requestDelay
operator|=
name|requestDelay
expr_stmt|;
block|}
comment|/**      * @return Returns the requestIterations.      */
specifier|public
name|int
name|getRequestIterations
parameter_list|()
block|{
return|return
name|requestIterations
return|;
block|}
comment|/**      * @param requestIterations      *            The requestIterations to set.      */
specifier|public
name|void
name|setRequestIterations
parameter_list|(
name|int
name|requestIterations
parameter_list|)
block|{
name|this
operator|.
name|requestIterations
operator|=
name|requestIterations
expr_stmt|;
block|}
comment|/**      * @return Returns the requestSize.      */
specifier|public
name|int
name|getRequestSize
parameter_list|()
block|{
return|return
name|requestSize
return|;
block|}
comment|/**      * @param requestSize      *            The requestSize to set.      */
specifier|public
name|void
name|setRequestSize
parameter_list|(
name|int
name|requestSize
parameter_list|)
block|{
name|this
operator|.
name|requestSize
operator|=
name|requestSize
expr_stmt|;
block|}
comment|/**      * @return Returns the sampleInterval.      */
specifier|public
name|long
name|getSampleInterval
parameter_list|()
block|{
return|return
name|sampleInterval
return|;
block|}
comment|/**      * @param sampleInterval The sampleInterval to set.      */
specifier|public
name|void
name|setSampleInterval
parameter_list|(
name|long
name|sampleInterval
parameter_list|)
block|{
name|this
operator|.
name|sampleInterval
operator|=
name|sampleInterval
expr_stmt|;
block|}
block|}
end_class

end_unit

