begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|xbean
operator|.
name|BrokerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|support
operator|.
name|ServletContextResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextListener
import|;
end_import

begin_comment
comment|/**  * Used to configure and instance of ActiveMQ<tt>BrokerService</tt> using  * ActiveMQ/Spring's xml configuration.<p/> The configuration file is specified  * via the context init parameter<tt>brokerURI</tt>, typically:<code>  *&lt;context-param&gt;  *&lt;param-name&gt;brokerURI&lt;/param-name&gt;  *&lt;param-value&gt;/WEB-INF/activemq.xml&lt;/param-value&gt;  *&lt;/context-param&gt;  *</code>  *   * As a a default, if a<tt>brokerURI</tt> is not specified it will look up  * for<tt>activemq.xml</tt>  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|SpringBrokerContextListener
implements|implements
name|ServletContextListener
block|{
comment|/** broker uri context parameter name:<tt>brokerURI</tt> */
specifier|public
specifier|static
specifier|final
name|String
name|INIT_PARAM_BROKER_URI
init|=
literal|"brokerURI"
decl_stmt|;
comment|/** the broker container instance */
specifier|private
name|BrokerService
name|brokerContainer
decl_stmt|;
comment|/**      * Set the broker container to be used by this listener      *       * @param container      *            the container to be used.      */
specifier|protected
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|container
parameter_list|)
block|{
name|this
operator|.
name|brokerContainer
operator|=
name|container
expr_stmt|;
block|}
comment|/**      * Return the broker container.      */
specifier|protected
name|BrokerService
name|getBrokerService
parameter_list|()
block|{
return|return
name|this
operator|.
name|brokerContainer
return|;
block|}
specifier|public
name|void
name|contextInitialized
parameter_list|(
name|ServletContextEvent
name|event
parameter_list|)
block|{
name|ServletContext
name|context
init|=
name|event
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|log
argument_list|(
literal|"Creating ActiveMQ Broker..."
argument_list|)
expr_stmt|;
name|brokerContainer
operator|=
name|createBroker
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|log
argument_list|(
literal|"Starting ActiveMQ Broker"
argument_list|)
expr_stmt|;
try|try
block|{
name|brokerContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|.
name|log
argument_list|(
literal|"Started ActiveMQ Broker"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|log
argument_list|(
literal|"Failed to start ActiveMQ broker: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|contextDestroyed
parameter_list|(
name|ServletContextEvent
name|event
parameter_list|)
block|{
name|ServletContext
name|context
init|=
name|event
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|brokerContainer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|brokerContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|log
argument_list|(
literal|"Failed to stop the ActiveMQ Broker: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|brokerContainer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Factory method to create a new ActiveMQ Broker      */
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|ServletContext
name|context
parameter_list|)
block|{
name|String
name|brokerURI
init|=
name|context
operator|.
name|getInitParameter
argument_list|(
name|INIT_PARAM_BROKER_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokerURI
operator|==
literal|null
condition|)
block|{
name|brokerURI
operator|=
literal|"activemq.xml"
expr_stmt|;
block|}
name|context
operator|.
name|log
argument_list|(
literal|"Loading ActiveMQ Broker configuration from: "
operator|+
name|brokerURI
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
operator|new
name|ServletContextResource
argument_list|(
name|context
argument_list|,
name|brokerURI
argument_list|)
decl_stmt|;
name|BrokerFactoryBean
name|factory
init|=
operator|new
name|BrokerFactoryBean
argument_list|(
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
name|factory
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|log
argument_list|(
literal|"Failed to create broker: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
operator|.
name|getBroker
argument_list|()
return|;
block|}
block|}
end_class

end_unit

