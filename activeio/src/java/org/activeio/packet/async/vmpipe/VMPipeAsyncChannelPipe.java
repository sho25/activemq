begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|vmpipe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelListener
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Used to connect the bottom ends of two Async channel stacks.  *   */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|VMPipeAsyncChannelPipe
block|{
specifier|final
name|PipeChannel
name|leftChannel
init|=
operator|new
name|PipeChannel
argument_list|()
decl_stmt|;
specifier|final
name|PipeChannel
name|rightChannel
init|=
operator|new
name|PipeChannel
argument_list|()
decl_stmt|;
specifier|final
specifier|public
specifier|static
class|class
name|PipeChannel
implements|implements
name|AsyncChannel
block|{
specifier|private
name|PipeChannel
name|sibiling
decl_stmt|;
specifier|private
name|AsyncChannelListener
name|channelListener
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|runMutext
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|public
name|PipeChannel
parameter_list|()
block|{         }
specifier|public
name|void
name|setAsyncChannelListener
parameter_list|(
name|AsyncChannelListener
name|channelListener
parameter_list|)
block|{
name|this
operator|.
name|channelListener
operator|=
name|channelListener
expr_stmt|;
block|}
specifier|public
name|AsyncChannelListener
name|getAsyncChannelListener
parameter_list|()
block|{
return|return
name|channelListener
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|disposed
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Conneciton closed."
argument_list|)
throw|;
name|sibiling
operator|.
name|onPacket
argument_list|(
name|packet
argument_list|,
name|WAIT_FOREVER_TIMEOUT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|timeout
operator|==
name|NO_WAIT_TIMEOUT
condition|)
block|{
if|if
condition|(
operator|!
name|runMutext
operator|.
name|tryAcquire
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
return|return;
block|}
elseif|else
if|if
condition|(
name|timeout
operator|==
name|WAIT_FOREVER_TIMEOUT
condition|)
block|{
name|runMutext
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|runMutext
operator|.
name|tryAcquire
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
try|try
block|{
if|if
condition|(
name|disposed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Peer connection closed."
argument_list|)
throw|;
block|}
name|channelListener
operator|.
name|onPacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|runMutext
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{         }
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|running
condition|)
return|return;
if|if
condition|(
name|channelListener
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"channelListener has not been set."
argument_list|)
throw|;
name|running
operator|=
literal|true
expr_stmt|;
name|runMutext
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|running
condition|)
return|return;
try|try
block|{
name|runMutext
operator|.
name|tryAcquire
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|disposed
condition|)
return|return;
if|if
condition|(
name|running
operator|&&
name|channelListener
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|channelListener
operator|.
name|onPacketError
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Pipe closed."
argument_list|)
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
name|disposed
operator|=
literal|true
expr_stmt|;
name|runMutext
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Inform the peer of the End Of Stream if he's listening.
name|sibiling
operator|.
name|onPacket
argument_list|(
name|EOSPacket
operator|.
name|EOS_PACKET
argument_list|,
name|NO_WAIT_TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
specifier|public
name|PipeChannel
name|getSibiling
parameter_list|()
block|{
return|return
name|sibiling
return|;
block|}
specifier|public
name|void
name|setSibiling
parameter_list|(
name|PipeChannel
name|sibiling
parameter_list|)
block|{
name|this
operator|.
name|sibiling
operator|=
name|sibiling
expr_stmt|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|"0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Pipe Channel from "
operator|+
name|getId
argument_list|()
operator|+
literal|" to "
operator|+
name|sibiling
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
specifier|public
name|VMPipeAsyncChannelPipe
parameter_list|()
block|{
name|leftChannel
operator|.
name|setSibiling
argument_list|(
name|rightChannel
argument_list|)
expr_stmt|;
name|rightChannel
operator|.
name|setSibiling
argument_list|(
name|leftChannel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AsyncChannel
name|getLeftAsyncChannel
parameter_list|()
block|{
return|return
name|leftChannel
return|;
block|}
specifier|public
name|AsyncChannel
name|getRightAsyncChannel
parameter_list|()
block|{
return|return
name|rightChannel
return|;
block|}
block|}
end_class

end_unit

