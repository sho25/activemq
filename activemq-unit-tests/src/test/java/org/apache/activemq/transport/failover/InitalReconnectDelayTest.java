begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|InitalReconnectDelayTest
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InitalReconnectDelayTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|broker1
decl_stmt|;
specifier|protected
name|BrokerService
name|broker2
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testInitialReconnectDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uriString
init|=
literal|"failover://(tcp://localhost:"
operator|+
name|broker1
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
operator|+
literal|",tcp://localhost:"
operator|+
name|broker2
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
operator|+
literal|")?randomize=false&initialReconnectDelay=15000"
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|long
name|start
init|=
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|end
init|=
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|//Verify we can send quickly
name|assertTrue
argument_list|(
operator|(
name|end
operator|-
name|start
operator|)
operator|<
literal|2000
argument_list|)
expr_stmt|;
comment|//Halt the broker1...
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the Broker1..."
argument_list|)
expr_stmt|;
name|start
operator|=
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to send... failover should kick in..."
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|end
operator|=
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|//Inital reconnection should kick in and be darned close to what we expected
name|LOG
operator|.
name|info
argument_list|(
literal|"Failover took "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failover took "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" ms and should be> 14000."
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
operator|>
literal|14000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoSuspendedCallbackOnNoReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uriString
init|=
literal|"failover://(tcp://localhost:"
operator|+
name|broker1
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
operator|+
literal|",tcp://localhost:"
operator|+
name|broker2
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
operator|+
literal|")?randomize=false&maxReconnectAttempts=0"
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|calls
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"on exception: "
operator|+
name|error
argument_list|)
expr_stmt|;
name|calls
operator|.
name|set
argument_list|(
literal|0x01
operator||
name|calls
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"on transportInterupted"
argument_list|)
expr_stmt|;
name|calls
operator|.
name|set
argument_list|(
literal|0x02
operator||
name|calls
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"on transportResumed"
argument_list|)
expr_stmt|;
name|calls
operator|.
name|set
argument_list|(
literal|0x04
operator||
name|calls
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// clear listener state
name|calls
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the Broker1..."
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to send... failover should throw on disconnect"
argument_list|)
expr_stmt|;
try|try
block|{
name|producer
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect IOException to bubble up on send"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
name|producerClosed
parameter_list|)
block|{         }
name|assertEquals
argument_list|(
literal|"Only an exception is reported to the listener"
argument_list|,
literal|0x1
argument_list|,
name|calls
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|dataDir
init|=
literal|"target/data/shared"
decl_stmt|;
name|broker1
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|setBrokerName
argument_list|(
literal|"broker1"
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|setDataDirectory
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|broker2
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|setBrokerName
argument_list|(
literal|"broker2"
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|setDataDirectory
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getSlaveXml
parameter_list|()
block|{
return|return
literal|"org/apache/activemq/broker/ft/sharedFileSlave.xml"
return|;
block|}
specifier|protected
name|String
name|getMasterXml
parameter_list|()
block|{
return|return
literal|"org/apache/activemq/broker/ft/sharedFileMaster.xml"
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker1
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|broker2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|broker2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

