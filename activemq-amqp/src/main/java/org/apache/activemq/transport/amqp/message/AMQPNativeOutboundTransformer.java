begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|JMS_AMQP_MESSAGE_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpMessageSupport
operator|.
name|getBinaryFromMessageBody
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|UnsignedInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|ProtonJMessage
import|;
end_import

begin_class
specifier|public
class|class
name|AMQPNativeOutboundTransformer
implements|implements
name|OutboundTransformer
block|{
annotation|@
name|Override
specifier|public
name|EncodedMessage
name|transform
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|==
literal|null
operator|||
operator|!
operator|(
name|message
operator|instanceof
name|ActiveMQBytesMessage
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|transform
argument_list|(
name|this
argument_list|,
operator|(
name|ActiveMQBytesMessage
operator|)
name|message
argument_list|)
return|;
block|}
specifier|static
name|EncodedMessage
name|transform
parameter_list|(
name|OutboundTransformer
name|options
parameter_list|,
name|ActiveMQBytesMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|long
name|messageFormat
decl_stmt|;
try|try
block|{
name|messageFormat
operator|=
name|message
operator|.
name|getLongProperty
argument_list|(
name|JMS_AMQP_MESSAGE_FORMAT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|Binary
name|encodedMessage
init|=
name|getBinaryFromMessageBody
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|byte
name|encodedData
index|[]
init|=
name|encodedMessage
operator|.
name|getArray
argument_list|()
decl_stmt|;
name|int
name|encodedSize
init|=
name|encodedMessage
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|message
operator|.
name|getRedeliveryCounter
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>=
literal|1
condition|)
block|{
comment|// decode...
name|ProtonJMessage
name|amqp
init|=
operator|(
name|ProtonJMessage
operator|)
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|encodedSize
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|decoded
init|=
name|amqp
operator|.
name|decode
argument_list|(
name|encodedData
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
assert|assert
name|decoded
operator|>
literal|0
operator|:
literal|"Make progress decoding the message"
assert|;
name|offset
operator|+=
name|decoded
expr_stmt|;
name|len
operator|-=
name|decoded
expr_stmt|;
block|}
comment|// Update the DeliveryCount header...
comment|// The AMQP delivery-count field only includes prior failed delivery attempts,
comment|// whereas JMSXDeliveryCount includes the first/current delivery attempt. Subtract 1.
if|if
condition|(
name|amqp
operator|.
name|getHeader
argument_list|()
operator|==
literal|null
condition|)
block|{
name|amqp
operator|.
name|setHeader
argument_list|(
operator|new
name|Header
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|amqp
operator|.
name|getHeader
argument_list|()
operator|.
name|setDeliveryCount
argument_list|(
operator|new
name|UnsignedInteger
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-encode...
specifier|final
name|AmqpWritableBuffer
name|buffer
init|=
operator|new
name|AmqpWritableBuffer
argument_list|()
decl_stmt|;
name|int
name|written
init|=
name|amqp
operator|.
name|encode
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|encodedData
operator|=
name|buffer
operator|.
name|getArray
argument_list|()
expr_stmt|;
name|encodedSize
operator|=
name|written
expr_stmt|;
block|}
return|return
operator|new
name|EncodedMessage
argument_list|(
name|messageFormat
argument_list|,
name|encodedData
argument_list|,
literal|0
argument_list|,
name|encodedSize
argument_list|)
return|;
block|}
block|}
end_class

end_unit

