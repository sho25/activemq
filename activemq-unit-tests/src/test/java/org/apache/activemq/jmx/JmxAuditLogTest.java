begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerMBeanSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
operator|.
name|JMXAuditLogEntry
operator|.
name|VERBS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TestUtils
operator|.
name|findOpenPort
import|;
end_import

begin_class
specifier|public
class|class
name|JmxAuditLogTest
extends|extends
name|TestSupport
block|{
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|ActiveMQQueue
name|queue
decl_stmt|;
name|int
name|portToUse
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|setMaxTestTime
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.activemq.audit"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|portToUse
operator|=
name|findOpenPort
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setManagementContext
argument_list|(
name|createManagementContext
argument_list|(
literal|"broker"
argument_list|,
name|portToUse
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPopulateUserNameInMBeans
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinations
argument_list|(
name|createDestinations
argument_list|()
argument_list|)
expr_stmt|;
name|TransportConnector
name|transportConnector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
decl_stmt|;
name|transportConnector
operator|.
name|setName
argument_list|(
literal|"TCP"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"org.apache.activemq.audit"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ActiveMQDestination
index|[]
name|createDestinations
parameter_list|()
block|{
name|queue
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"myTestQueue"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ActiveMQDestination
index|[]
block|{
name|queue
block|}
return|;
block|}
specifier|private
name|MBeanServerConnection
name|createJMXConnector
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"service:jmx:rmi:///jndi/rmi://localhost:"
operator|+
name|port
operator|+
literal|"/jmxrmi"
decl_stmt|;
name|Map
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|creds
init|=
block|{
literal|"admin"
block|,
literal|"activemq"
block|}
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|JMXConnector
operator|.
name|CREDENTIALS
argument_list|,
name|creds
argument_list|)
expr_stmt|;
name|JMXConnector
name|connector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|url
argument_list|)
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|connector
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
return|;
block|}
specifier|private
name|ManagementContext
name|createManagementContext
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|ManagementContext
name|managementContext
init|=
operator|new
name|ManagementContext
argument_list|()
decl_stmt|;
name|managementContext
operator|.
name|setBrokerName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|setConnectorPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|setConnectorHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|setCreateConnector
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"jmx.remote.x.password.file"
argument_list|,
name|basedir
operator|+
literal|"/src/test/resources/jmx.password"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"jmx.remote.x.access.file"
argument_list|,
name|basedir
operator|+
literal|"/src/test/resources/jmx.access"
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|managementContext
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPasswordsAreNotLoggedWhenAuditIsTurnedOn
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|log4jLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.activemq.audit"
argument_list|)
decl_stmt|;
name|log4jLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|logCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|gotEnded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Appender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getMessage
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|String
name|message
init|=
operator|(
name|String
operator|)
name|event
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"testPassword"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Password should not appear in log file"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|VERBS
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|gotEnded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|logCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|log4jLogger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|MBeanServerConnection
name|conn
init|=
name|createJMXConnector
argument_list|(
name|portToUse
argument_list|)
decl_stmt|;
name|ObjectName
name|queueObjName
init|=
operator|new
name|ObjectName
argument_list|(
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
operator|+
literal|",destinationType=Queue,destinationName="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|Object
index|[]
name|params
init|=
block|{
literal|"body"
block|,
literal|"testUser"
block|,
literal|"testPassword"
block|}
decl_stmt|;
name|String
index|[]
name|signature
init|=
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
decl_stmt|;
name|conn
operator|.
name|invoke
argument_list|(
name|queueObjName
argument_list|,
literal|"sendTextMessage"
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|log4jLogger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got ended statement"
argument_list|,
name|gotEnded
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got two messages"
argument_list|,
literal|2
argument_list|,
name|logCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameTargetVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|log4jLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.activemq.audit"
argument_list|)
decl_stmt|;
name|log4jLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|logCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|gotEnded
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|gotQueueName
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|gotBrokerName
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|gotConnectorName
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|queueName
init|=
name|queue
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Appender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getMessage
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|String
name|message
init|=
operator|(
name|String
operator|)
name|event
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|VERBS
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|gotQueueName
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
condition|)
block|{
name|gotBrokerName
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"TCP"
argument_list|)
condition|)
block|{
name|gotConnectorName
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|VERBS
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|gotEnded
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|logCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|log4jLogger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|MBeanServerConnection
name|conn
init|=
name|createJMXConnector
argument_list|(
name|portToUse
argument_list|)
decl_stmt|;
name|ObjectName
name|queueObjName
init|=
operator|new
name|ObjectName
argument_list|(
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
operator|+
literal|",destinationType=Queue,destinationName="
operator|+
name|queueName
argument_list|)
decl_stmt|;
name|Object
index|[]
name|params
init|=
block|{}
decl_stmt|;
name|String
index|[]
name|signature
init|=
block|{}
decl_stmt|;
name|conn
operator|.
name|invoke
argument_list|(
name|queueObjName
argument_list|,
literal|"purge"
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got ended statement"
argument_list|,
name|gotEnded
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got two messages"
argument_list|,
literal|2
argument_list|,
name|logCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got queueName in called statement"
argument_list|,
name|gotQueueName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// call broker to verify brokerName
name|conn
operator|.
name|invoke
argument_list|(
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
argument_list|,
literal|"resetStatistics"
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got 4 messages"
argument_list|,
literal|4
argument_list|,
name|logCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got brokerName in called statement"
argument_list|,
name|gotBrokerName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|transportConnectorON
init|=
name|BrokerMBeanSupport
operator|.
name|createConnectorName
argument_list|(
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
argument_list|,
literal|"clientConnectors"
argument_list|,
literal|"TCP"
argument_list|)
decl_stmt|;
name|conn
operator|.
name|invoke
argument_list|(
name|transportConnectorON
argument_list|,
literal|"stop"
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got messages"
argument_list|,
literal|6
argument_list|,
name|logCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got connectorName in called statement"
argument_list|,
name|gotConnectorName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|log4jLogger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

