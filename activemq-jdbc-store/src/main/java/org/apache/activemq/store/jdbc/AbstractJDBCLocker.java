begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|AbstractLocker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJDBCLocker
extends|extends
name|AbstractLocker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractJDBCLocker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
name|Statements
name|statements
decl_stmt|;
specifier|protected
name|JDBCPersistenceAdapter
name|jdbcAdapter
decl_stmt|;
specifier|protected
name|boolean
name|createTablesOnStartup
decl_stmt|;
specifier|protected
name|int
name|queryTimeout
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|configure
parameter_list|(
name|PersistenceAdapter
name|adapter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|adapter
operator|instanceof
name|JDBCPersistenceAdapter
condition|)
block|{
name|this
operator|.
name|jdbcAdapter
operator|=
operator|(
name|JDBCPersistenceAdapter
operator|)
name|adapter
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
operator|(
operator|(
name|JDBCPersistenceAdapter
operator|)
name|adapter
operator|)
operator|.
name|getLockDataSource
argument_list|()
expr_stmt|;
comment|// we cannot get the statements (yet) as they may be configured later
block|}
block|}
specifier|protected
name|Statements
name|getStatements
parameter_list|()
block|{
if|if
condition|(
name|statements
operator|==
literal|null
operator|&&
name|jdbcAdapter
operator|!=
literal|null
condition|)
block|{
name|statements
operator|=
name|jdbcAdapter
operator|.
name|getStatements
argument_list|()
expr_stmt|;
block|}
return|return
name|statements
return|;
block|}
specifier|public
name|void
name|setDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
block|}
specifier|public
name|void
name|setStatements
parameter_list|(
name|Statements
name|statements
parameter_list|)
block|{
name|this
operator|.
name|statements
operator|=
name|statements
expr_stmt|;
block|}
specifier|protected
name|void
name|setQueryTimeout
parameter_list|(
name|Statement
name|statement
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|queryTimeout
operator|>
literal|0
condition|)
block|{
name|statement
operator|.
name|setQueryTimeout
argument_list|(
name|queryTimeout
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getQueryTimeout
parameter_list|()
block|{
return|return
name|queryTimeout
return|;
block|}
specifier|public
name|void
name|setQueryTimeout
parameter_list|(
name|int
name|queryTimeout
parameter_list|)
block|{
name|this
operator|.
name|queryTimeout
operator|=
name|queryTimeout
expr_stmt|;
block|}
specifier|public
name|void
name|setCreateTablesOnStartup
parameter_list|(
name|boolean
name|createTablesOnStartup
parameter_list|)
block|{
name|this
operator|.
name|createTablesOnStartup
operator|=
name|createTablesOnStartup
expr_stmt|;
block|}
specifier|protected
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|dataSource
operator|.
name|getConnection
argument_list|()
return|;
block|}
specifier|protected
name|void
name|close
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|connection
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"exception while closing connection: "
operator|+
name|e1
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|close
parameter_list|(
name|Statement
name|statement
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|statement
condition|)
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"exception while closing statement: "
operator|+
name|e1
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStart
parameter_list|()
block|{
if|if
condition|(
name|createTablesOnStartup
condition|)
block|{
name|String
index|[]
name|createStatements
init|=
name|getStatements
argument_list|()
operator|.
name|getCreateLockSchemaStatements
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Statement
name|statement
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|setQueryTimeout
argument_list|(
name|statement
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|createStatements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing SQL: "
operator|+
name|createStatements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|statement
operator|.
name|execute
argument_list|(
name|createStatements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not create lock tables; they could already exist."
operator|+
literal|" Failure was: "
operator|+
name|createStatements
index|[
name|i
index|]
operator|+
literal|" Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" SQLState: "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" Vendor code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not create lock tables; Failure Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" SQLState: "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" Vendor code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|statement
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

