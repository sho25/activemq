begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|group
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Represents all of the memberhips of a node and can be used to act  * as a weighting to decide which is the least heavily loaded Node  * to be assigned to a buddy group.  *  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|NodeMemberships
block|{
specifier|private
name|Node
name|node
decl_stmt|;
specifier|private
name|Map
name|memberships
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|int
name|weighting
decl_stmt|;
specifier|public
name|NodeMemberships
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|void
name|addToGroup
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMember
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|group
operator|.
name|addMember
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Membership
name|membership
init|=
operator|new
name|Membership
argument_list|(
name|group
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|memberships
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|membership
argument_list|)
expr_stmt|;
name|weighting
operator|+=
name|membership
operator|.
name|getWeighting
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|removeFromGroup
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
comment|// TODO when we remove a node from a group, we need to reweight the
comment|// other nodes in the group
name|memberships
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
name|group
operator|.
name|removeMember
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
comment|/**      * Returns the weighting of how heavily loaded the node is      * so that a decision can be made on which node to buddy group      * with      */
specifier|public
name|int
name|getWeighting
parameter_list|()
block|{
return|return
name|weighting
return|;
block|}
comment|/**      * Returns true if this node is a member of the given group      */
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
return|return
name|memberships
operator|.
name|containsKey
argument_list|(
name|group
argument_list|)
return|;
block|}
block|}
end_class

end_unit

