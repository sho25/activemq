begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|karaf
operator|.
name|itest
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|jms
operator|.
name|JmsConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ActiveMQAMQPBrokerFeatureTest
extends|extends
name|ActiveMQBrokerFeatureTest
block|{
specifier|private
specifier|static
specifier|final
name|Integer
name|AMQP_PORT
init|=
literal|61636
decl_stmt|;
annotation|@
name|Configuration
specifier|public
specifier|static
name|Option
index|[]
name|configure
parameter_list|()
block|{
name|Option
index|[]
name|activeMQOptions
init|=
name|configure
argument_list|(
literal|"activemq"
argument_list|)
decl_stmt|;
name|Option
name|netty
init|=
name|CoreOptions
operator|.
name|wrappedBundle
argument_list|(
name|CoreOptions
operator|.
name|mavenBundle
argument_list|(
literal|"io.netty"
argument_list|,
literal|"netty-all"
argument_list|)
operator|.
name|versionAsInProject
argument_list|()
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"$Bundle-SymbolicName=netty-all"
argument_list|)
decl_stmt|;
name|Option
name|protonJ
init|=
name|CoreOptions
operator|.
name|wrappedBundle
argument_list|(
name|CoreOptions
operator|.
name|mavenBundle
argument_list|(
literal|"org.apache.qpid"
argument_list|,
literal|"proton-j"
argument_list|)
operator|.
name|versionAsInProject
argument_list|()
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"$Bundle-SymbolicName=proton-j"
argument_list|)
decl_stmt|;
name|Option
name|qpidClient
init|=
name|CoreOptions
operator|.
name|wrappedBundle
argument_list|(
name|CoreOptions
operator|.
name|mavenBundle
argument_list|(
literal|"org.apache.qpid"
argument_list|,
literal|"qpid-jms-client"
argument_list|)
operator|.
name|versionAsInProject
argument_list|()
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"$Bundle-SymbolicName=qpid-jms-client"
argument_list|)
decl_stmt|;
name|Option
index|[]
name|options
init|=
name|append
argument_list|(
name|protonJ
argument_list|,
name|activeMQOptions
argument_list|)
decl_stmt|;
name|options
operator|=
name|append
argument_list|(
name|netty
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|options
operator|=
name|append
argument_list|(
name|qpidClient
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Option
index|[]
name|configuredOptions
init|=
name|configureBrokerStart
argument_list|(
name|options
argument_list|)
decl_stmt|;
return|return
name|configuredOptions
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|amqpURI
init|=
literal|"amqp://localhost:"
operator|+
name|AMQP_PORT
decl_stmt|;
name|JmsConnectionFactory
name|factory
init|=
operator|new
name|JmsConnectionFactory
argument_list|(
name|amqpURI
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setUsername
argument_list|(
name|AbstractFeatureTest
operator|.
name|USER
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPassword
argument_list|(
name|AbstractFeatureTest
operator|.
name|PASSWORD
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
annotation|@
name|Override
annotation|@
name|Ignore
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testTemporaryDestinations
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// ignore until we have temporary destination are working in amqp
block|}
block|}
end_class

end_unit

