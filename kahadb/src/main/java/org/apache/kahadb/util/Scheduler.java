begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Scheduler
block|{
specifier|public
specifier|static
specifier|final
name|Timer
name|CLOCK_DAEMON
init|=
operator|new
name|Timer
argument_list|(
literal|"KahaDB Scheduler"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|Runnable
argument_list|,
name|TimerTask
argument_list|>
name|TIMER_TASKS
init|=
operator|new
name|HashMap
argument_list|<
name|Runnable
argument_list|,
name|TimerTask
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Scheduler
parameter_list|()
block|{     }
specifier|public
specifier|static
specifier|synchronized
name|void
name|executePeriodically
parameter_list|(
specifier|final
name|Runnable
name|task
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|TimerTask
name|timerTask
init|=
operator|new
name|SchedulerTimerTask
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|CLOCK_DAEMON
operator|.
name|scheduleAtFixedRate
argument_list|(
name|timerTask
argument_list|,
name|period
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|TIMER_TASKS
operator|.
name|put
argument_list|(
name|task
argument_list|,
name|timerTask
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|cancel
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
name|TimerTask
name|ticket
init|=
name|TIMER_TASKS
operator|.
name|remove
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticket
operator|!=
literal|null
condition|)
block|{
name|ticket
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|CLOCK_DAEMON
operator|.
name|purge
argument_list|()
expr_stmt|;
comment|//remove cancelled TimerTasks
block|}
block|}
specifier|public
specifier|static
name|void
name|executeAfterDelay
parameter_list|(
specifier|final
name|Runnable
name|task
parameter_list|,
name|long
name|redeliveryDelay
parameter_list|)
block|{
name|TimerTask
name|timerTask
init|=
operator|new
name|SchedulerTimerTask
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|CLOCK_DAEMON
operator|.
name|schedule
argument_list|(
name|timerTask
argument_list|,
name|redeliveryDelay
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
name|CLOCK_DAEMON
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

