begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_class
specifier|public
class|class
name|ConnectorView
implements|implements
name|ConnectorViewMBean
block|{
specifier|private
specifier|final
name|Connector
name|connector
decl_stmt|;
specifier|public
name|ConnectorView
parameter_list|(
name|Connector
name|connector
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
return|return
name|getBrokerInfo
argument_list|()
operator|.
name|getBrokerName
argument_list|()
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getBrokerURL
parameter_list|()
block|{
return|return
name|getBrokerInfo
argument_list|()
operator|.
name|getBrokerURL
argument_list|()
return|;
block|}
specifier|public
name|BrokerInfo
name|getBrokerInfo
parameter_list|()
block|{
return|return
name|connector
operator|.
name|getBrokerInfo
argument_list|()
return|;
block|}
specifier|public
name|short
name|getBackOffMultiplier
parameter_list|()
block|{
return|return
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getBackOffMultiplier
argument_list|()
return|;
block|}
specifier|public
name|long
name|getInitialRedeliveryDelay
parameter_list|()
block|{
return|return
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getInitialRedeliveryDelay
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMaximumRedeliveries
parameter_list|()
block|{
return|return
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getMaximumRedeliveries
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUseExponentialBackOff
parameter_list|()
block|{
return|return
name|getRedeliveryPolicy
argument_list|()
operator|.
name|isUseExponentialBackOff
argument_list|()
return|;
block|}
specifier|public
name|void
name|setBackOffMultiplier
parameter_list|(
name|short
name|backOffMultiplier
parameter_list|)
block|{
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setBackOffMultiplier
argument_list|(
name|backOffMultiplier
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInitialRedeliveryDelay
parameter_list|(
name|long
name|initialRedeliveryDelay
parameter_list|)
block|{
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setInitialRedeliveryDelay
argument_list|(
name|initialRedeliveryDelay
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMaximumRedeliveries
parameter_list|(
name|int
name|maximumRedeliveries
parameter_list|)
block|{
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setMaximumRedeliveries
argument_list|(
name|maximumRedeliveries
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUseExponentialBackOff
parameter_list|(
name|boolean
name|useExponentialBackOff
parameter_list|)
block|{
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setUseExponentialBackOff
argument_list|(
name|useExponentialBackOff
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RedeliveryPolicy
name|getRedeliveryPolicy
parameter_list|()
block|{
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
name|getBrokerInfo
argument_list|()
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|redeliveryPolicy
operator|==
literal|null
condition|)
block|{
name|redeliveryPolicy
operator|=
operator|new
name|RedeliveryPolicy
argument_list|()
expr_stmt|;
name|getBrokerInfo
argument_list|()
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|)
expr_stmt|;
block|}
return|return
name|redeliveryPolicy
return|;
block|}
comment|/**      * Resets the statistics      */
specifier|public
name|void
name|resetStatistics
parameter_list|()
block|{
name|connector
operator|.
name|getStatistics
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the number of messages enqueued on this connector      *       * @return the number of messages enqueued on this connector      */
specifier|public
name|long
name|getEnqueueCount
parameter_list|()
block|{
return|return
name|connector
operator|.
name|getStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * Returns the number of messages dequeued on this connector      *       * @return the number of messages dequeued on this connector      */
specifier|public
name|long
name|getDequeueCount
parameter_list|()
block|{
return|return
name|connector
operator|.
name|getStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
end_class

end_unit

