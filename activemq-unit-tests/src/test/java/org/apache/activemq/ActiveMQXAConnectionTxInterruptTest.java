begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XASession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConsumerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|MutableBrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQXAConnectionTxInterruptTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMQXAConnectionTxInterruptTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|txGenerator
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
name|XASession
name|session
decl_stmt|;
name|XAResource
name|resource
decl_stmt|;
name|ActiveMQXAConnection
name|xaConnection
decl_stmt|;
name|Destination
name|dest
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBrokerEtc
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:0)/BRXA"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQXAConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|cf1
operator|.
name|setStatsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|xaConnection
operator|=
operator|(
name|ActiveMQXAConnection
operator|)
name|cf1
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|xaConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|dest
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Q"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|xaConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRollbackAckInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// publish a message
name|publishAMessage
argument_list|()
expr_stmt|;
name|Xid
name|tid
decl_stmt|;
comment|// consume in tx and rollback with interrupt
name|session
operator|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|tid
operator|=
name|createXid
argument_list|()
expr_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TransactionContext
operator|)
name|resource
operator|)
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupting thread: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"Source"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TextMessage
name|receivedMessage
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getName
argument_list|()
argument_list|,
name|receivedMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMFAIL
argument_list|)
expr_stmt|;
name|resource
operator|.
name|rollback
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Was interrupted"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitAckInterrupted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// publish a message
name|publishAMessage
argument_list|()
expr_stmt|;
comment|// consume in tx and rollback with interrupt
name|session
operator|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TransactionContext
operator|)
name|resource
operator|)
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupting thread: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"Source"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TextMessage
name|receivedMessage
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getName
argument_list|()
argument_list|,
name|receivedMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterruptWhilePendingResponseToAck
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedList
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|LinkedList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|blockedServerSize
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|canContinue
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|MutableBrokerFilter
name|filter
init|=
operator|(
name|MutableBrokerFilter
operator|)
name|broker
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|MutableBrokerFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setNext
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
name|filter
operator|.
name|getNext
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConsumerBrokerExchange
name|consumerExchange
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
name|blockedServerSize
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|canContinue
operator|.
name|await
argument_list|()
expr_stmt|;
name|super
operator|.
name|acknowledge
argument_list|(
name|consumerExchange
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|publishAMessage
argument_list|()
expr_stmt|;
comment|// consume in tx and rollback with interrupt while pending reply
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|session
operator|=
name|xaConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|=
name|session
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|TextMessage
name|receivedMessage
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|receivedMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getName
argument_list|()
argument_list|,
name|receivedMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|expectedWithInterrupt
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expectedWithInterrupt
operator|instanceof
name|XAException
argument_list|)
expr_stmt|;
name|assertCause
argument_list|(
name|expectedWithInterrupt
argument_list|,
operator|new
name|Class
index|[]
block|{
name|InterruptedException
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Was interrupted during ack!"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|resource
operator|.
name|rollback
argument_list|(
name|tid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|expectedWithInterruptIfClosed
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expectedWithInterruptIfClosed
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedWithInterruptIfClosed
operator|instanceof
name|XAException
argument_list|)
expr_stmt|;
name|assertCause
argument_list|(
name|expectedWithInterruptIfClosed
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ConnectionClosedException
operator|.
name|class
block|,
name|InterruptedException
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Was interrupted"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got to blocking call"
argument_list|,
name|blockedServerSize
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// will interrupt
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|canContinue
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"job done"
argument_list|,
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no errors: "
operator|+
name|errors
argument_list|,
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCause
parameter_list|(
name|Throwable
name|expectedWithInterrupt
parameter_list|,
name|Class
index|[]
name|exceptionClazzes
parameter_list|)
block|{
name|Throwable
name|candidate
init|=
name|expectedWithInterrupt
decl_stmt|;
while|while
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClazz
range|:
name|exceptionClazzes
control|)
block|{
if|if
condition|(
name|exceptionClazz
operator|.
name|isInstance
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|candidate
operator|=
name|candidate
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"ex"
argument_list|,
name|expectedWithInterrupt
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no expected type as cause:"
operator|+
name|expectedWithInterrupt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Xid
name|createXid
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|os
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
operator|++
name|txGenerator
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|bs
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|Xid
argument_list|()
block|{
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
literal|87
return|;
block|}
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|bs
return|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|publishAMessage
parameter_list|()
throws|throws
name|IOException
throws|,
name|XAException
throws|,
name|JMSException
block|{
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

