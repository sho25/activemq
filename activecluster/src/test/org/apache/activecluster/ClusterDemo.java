begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activecluster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|ClusterException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|ClusterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|election
operator|.
name|ElectionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|election
operator|.
name|impl
operator|.
name|BullyElectionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|impl
operator|.
name|ActiveMQClusterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|impl
operator|.
name|DefaultClusterFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|ClusterDemo
block|{
specifier|protected
name|Cluster
name|cluster
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|ElectionStrategy
name|electionStrategy
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|ClusterDemo
name|test
init|=
operator|new
name|ClusterDemo
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|test
operator|.
name|name
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
name|test
operator|.
name|demo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Exception
name|c
init|=
name|e
operator|.
name|getLinkedException
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cause: "
operator|+
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|demo
parameter_list|()
throws|throws
name|Exception
block|{
name|start
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|addClusterListener
argument_list|(
operator|new
name|TestingClusterListener
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Enter 'quit' to terminate"
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"quit"
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getLocalNode
argument_list|()
operator|.
name|setState
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
throws|,
name|ClusterException
block|{
name|cluster
operator|=
name|createCluster
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting node: "
operator|+
name|name
argument_list|)
expr_stmt|;
comment|// TODO could we do cluster.setName() ?
name|Map
name|state
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|state
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getLocalNode
argument_list|()
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|electionStrategy
operator|==
literal|null
condition|)
block|{
name|electionStrategy
operator|=
operator|new
name|BullyElectionStrategy
argument_list|()
expr_stmt|;
block|}
name|electionStrategy
operator|.
name|doElection
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|stop
parameter_list|()
throws|throws
name|JMSException
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Cluster
name|createCluster
parameter_list|()
throws|throws
name|JMSException
throws|,
name|ClusterException
block|{
name|ClusterFactory
name|factory
init|=
operator|new
name|ActiveMQClusterFactory
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|createCluster
argument_list|(
literal|"ORG.CODEHAUS.ACTIVEMQ.TEST.CLUSTER"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

