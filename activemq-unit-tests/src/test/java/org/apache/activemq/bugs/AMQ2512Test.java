begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2512Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ2512Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|QUEUE_NAME
init|=
literal|"dee.q"
decl_stmt|;
specifier|private
specifier|final
name|int
name|INITIAL_MESSAGES_CNT
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|int
name|WORKER_INTERNAL_ITERATIONS
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|int
name|TOTAL_MESSAGES_CNT
init|=
name|INITIAL_MESSAGES_CNT
operator|*
name|WORKER_INTERNAL_ITERATIONS
operator|+
name|INITIAL_MESSAGES_CNT
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|5
operator|*
literal|1024
index|]
decl_stmt|;
specifier|private
specifier|final
name|String
name|TEXT
init|=
operator|new
name|String
argument_list|(
name|payload
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|PRP_INITIAL_ID
init|=
literal|"initial-id"
decl_stmt|;
specifier|private
specifier|final
name|String
name|PRP_WORKER_ID
init|=
literal|"worker-id"
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|LATCH
init|=
operator|new
name|CountDownLatch
argument_list|(
name|TOTAL_MESSAGES_CNT
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|ON_MSG_COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|String
name|connectionURI
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testKahaDBFailure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ConnectionFactory
name|fac
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionURI
argument_list|)
decl_stmt|;
name|connection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Consumer
argument_list|>
name|consumers
init|=
operator|new
name|ArrayList
argument_list|<
name|Consumer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|consumers
operator|.
name|add
argument_list|(
operator|new
name|Consumer
argument_list|(
literal|"worker-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|INITIAL_MESSAGES_CNT
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TextMessage
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|TEXT
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
name|PRP_INITIAL_ID
argument_list|,
literal|"initial-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|LATCH
operator|.
name|await
argument_list|()
expr_stmt|;
specifier|final
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total execution time = "
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|+
literal|" [ms]."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rate = "
operator|+
name|TOTAL_MESSAGES_CNT
operator|/
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|+
literal|" [msg/s]."
argument_list|)
expr_stmt|;
for|for
control|(
name|Consumer
name|c
range|:
name|consumers
control|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|Consumer
implements|implements
name|MessageListener
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Session
name|session
decl_stmt|;
specifier|private
specifier|final
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|Consumer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
try|try
block|{
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
specifier|final
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
operator|+
literal|"?consumer.prefetchSize=10"
argument_list|)
decl_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|TextMessage
name|msg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|propertyExists
argument_list|(
name|PRP_WORKER_ID
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|WORKER_INTERNAL_ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TextMessage
name|newMsg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|newMsg
operator|.
name|setStringProperty
argument_list|(
name|PRP_WORKER_ID
argument_list|,
name|name
operator|+
literal|"-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|newMsg
operator|.
name|setStringProperty
argument_list|(
name|PRP_INITIAL_ID
argument_list|,
name|msg
operator|.
name|getStringProperty
argument_list|(
name|PRP_INITIAL_ID
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|newMsg
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
specifier|final
name|int
name|onMsgCounter
init|=
name|ON_MSG_COUNTER
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|onMsgCounter
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"message received: "
operator|+
name|onMsgCounter
argument_list|)
expr_stmt|;
block|}
name|LATCH
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectionURI
operator|=
name|brokerService
operator|.
name|getTransportConnectorByName
argument_list|(
literal|"openwire"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dataFileDir
init|=
operator|new
name|File
argument_list|(
literal|"target/test-amq-2512/datadb"
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|dataFileDir
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|dataFileDir
argument_list|)
expr_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|dataFileDir
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|setEnableJournalDiskSyncs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataFileDir
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
operator|.
name|setName
argument_list|(
literal|"openwire"
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

