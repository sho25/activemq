begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DurableSubscriptionViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
operator|.
name|VMTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
operator|.
name|VMTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
operator|.
name|VMTransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DurableSubscriptionOfflineTest
extends|extends
name|DurableSubscriptionOfflineTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableSubscriptionOfflineTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://"
operator|+
name|getName
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|connectionFactory
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testConsumeAllMatchedMessages
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create durable subscription
name|Connection
name|con
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// consume messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sent
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testBrowseOfflineSub
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create durable subscription
name|Connection
name|con
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// browse the durable sub
name|ObjectName
index|[]
name|subs
init|=
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subs
operator|.
name|length
argument_list|)
expr_stmt|;
name|ObjectName
name|subName
init|=
name|subs
index|[
literal|0
index|]
decl_stmt|;
name|DurableSubscriptionViewMBean
name|sub
init|=
operator|(
name|DurableSubscriptionViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|subName
argument_list|,
name|DurableSubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeData
index|[]
name|data
init|=
name|sub
operator|.
name|browse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|TabularData
name|tabularData
init|=
name|sub
operator|.
name|browseAsTable
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|tabularData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tabularData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testTwoOfflineSubscriptionCanConsume
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create durable subscription 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create durable subscription 2
name|Connection
name|con2
init|=
name|createConnection
argument_list|(
literal|"cliId2"
argument_list|)
decl_stmt|;
name|Session
name|session2
init|=
name|con2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer2
init|=
name|session2
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener2
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer2
operator|.
name|setMessageListener
argument_list|(
name|listener2
argument_list|)
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test online subs
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sent
argument_list|,
name|listener2
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// consume messages
name|con
operator|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"offline consumer got all"
argument_list|,
name|sent
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testRemovedDurableSubDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|filter
init|=
literal|"$a='A1' AND (($b=true AND $c=true) OR ($d='D1' OR $d='D2'))"
decl_stmt|;
comment|// create durable subscription 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Connection
name|con2
init|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
decl_stmt|;
name|Session
name|session2
init|=
name|con2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session2
operator|.
name|unsubscribe
argument_list|(
literal|"SubsId"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// see if retroactive can consumer any
name|topic
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|topic
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|"?consumer.retroactive=true"
argument_list|)
expr_stmt|;
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testRemovedDurableSubDeletesFromIndex
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|instanceof
name|KahaDBPersistenceAdapter
operator|)
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|numMessages
init|=
literal|2750
decl_stmt|;
name|KahaDBPersistenceAdapter
name|kahaDBPersistenceAdapter
init|=
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
name|PageFile
name|pageFile
init|=
name|kahaDBPersistenceAdapter
operator|.
name|getStore
argument_list|()
operator|.
name|getPageFile
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PageCount "
operator|+
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|+
literal|" f:"
operator|+
name|pageFile
operator|.
name|getFreePageCount
argument_list|()
operator|+
literal|", fileSize:"
operator|+
name|pageFile
operator|.
name|getFile
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|lastDiff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|repeats
init|=
literal|0
init|;
name|repeats
operator|<
literal|2
condition|;
name|repeats
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Iteration: "
operator|+
name|repeats
operator|+
literal|" Count:"
operator|+
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|+
literal|" f:"
operator|+
name|pageFile
operator|.
name|getFreePageCount
argument_list|()
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cliId1"
operator|+
literal|"-"
operator|+
name|repeats
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|Connection
name|con2
init|=
name|createConnection
argument_list|(
literal|"cliId1"
operator|+
literal|"-"
operator|+
name|repeats
argument_list|)
decl_stmt|;
name|Session
name|session2
init|=
name|con2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session2
operator|.
name|unsubscribe
argument_list|(
literal|"SubsId"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PageCount "
operator|+
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|+
literal|" f:"
operator|+
name|pageFile
operator|.
name|getFreePageCount
argument_list|()
operator|+
literal|" diff: "
operator|+
operator|(
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|-
name|pageFile
operator|.
name|getFreePageCount
argument_list|()
operator|)
operator|+
literal|" fileSize:"
operator|+
name|pageFile
operator|.
name|getFile
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastDiff
operator|!=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Only use X pages per iteration: "
operator|+
name|repeats
argument_list|,
name|lastDiff
argument_list|,
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|-
name|pageFile
operator|.
name|getFreePageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastDiff
operator|=
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|-
name|pageFile
operator|.
name|getFreePageCount
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testInterleavedOfflineSubscriptionCanConsumeAfterUnsub
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create offline subs 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create offline subs 2
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|filter
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|2
argument_list|)
operator|>=
literal|1
decl_stmt|;
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
name|filter
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Connection
name|con2
init|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
decl_stmt|;
name|Session
name|session2
init|=
name|con2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session2
operator|.
name|unsubscribe
argument_list|(
literal|"SubsId"
argument_list|)
expr_stmt|;
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// consume all messages
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|(
literal|"SubsId"
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"offline consumer got all"
argument_list|,
name|sent
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testNoDuplicateOnConcurrentSendTranCommitAndActivate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|messageCount
init|=
literal|1000
decl_stmt|;
name|Connection
name|con
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|numConsumers
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|numConsumers
condition|;
name|i
operator|++
control|)
block|{
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli"
operator|+
name|i
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
class|class
name|CheckForDupsClient
implements|implements
name|Runnable
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|id
decl_stmt|;
specifier|public
name|CheckForDupsClient
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cli"
operator|+
name|id
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|long
name|producerSequenceId
init|=
operator|new
name|MessageId
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
operator|.
name|getProducerSequenceId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ID="
operator|+
name|id
operator|+
literal|" not a duplicate: "
operator|+
name|producerSequenceId
argument_list|,
name|ids
operator|.
name|add
argument_list|(
name|producerSequenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// verify no duplicates left
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|long
name|producerSequenceId
init|=
operator|new
name|MessageId
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
operator|.
name|getProducerSequenceId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ID="
operator|+
name|id
operator|+
literal|" not a duplicate: "
operator|+
name|producerSequenceId
argument_list|,
name|ids
operator|.
name|add
argument_list|(
name|producerSequenceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|String
name|payLoad
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|)
decl_stmt|;
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|sendSession
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|sendSession
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|sendSession
operator|.
name|createTextMessage
argument_list|(
name|payLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
comment|// concurrent commit and activate
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sendSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConsumers
condition|;
name|i
operator|++
control|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|CheckForDupsClient
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testOrderOnActivateDeactivate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Iteration: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|doTestOrderOnActivateDeactivate
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|true
comment|/*deleteAllMessages*/
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doTestOrderOnActivateDeactivate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|messageCount
init|=
literal|1000
decl_stmt|;
name|Connection
name|con
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|numConsumers
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|numConsumers
condition|;
name|i
operator|++
control|)
block|{
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli"
operator|+
name|i
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|url
init|=
literal|"failover:(tcp://localhost:"
operator|+
operator|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|)
operator|.
name|getPort
argument_list|()
operator|+
literal|"?wireFormat.maxInactivityDuration=0)?"
operator|+
literal|"jms.watchTopicAdvisories=false&"
operator|+
literal|"jms.alwaysSyncSend=true&jms.dispatchAsync=true&"
operator|+
literal|"jms.sendAcksAsync=true&"
operator|+
literal|"initialReconnectDelay=100&maxReconnectDelay=30000&"
operator|+
literal|"useExponentialBackOff=true"
decl_stmt|;
specifier|final
name|ActiveMQConnectionFactory
name|clientFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
class|class
name|CheckOrderClient
implements|implements
name|Runnable
block|{
specifier|final
name|int
name|id
decl_stmt|;
name|int
name|runCount
init|=
literal|0
decl_stmt|;
specifier|public
name|CheckOrderClient
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Connection
name|con
init|=
name|clientFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setClientID
argument_list|(
literal|"cli"
operator|+
name|id
argument_list|)
expr_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|nextId
init|=
literal|0
decl_stmt|;
operator|++
name|runCount
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|messageCount
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|long
name|producerSequenceId
init|=
operator|new
name|MessageId
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
operator|.
name|getProducerSequenceId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|id
operator|+
literal|" expected order: runCount: "
operator|+
name|runCount
operator|+
literal|" id: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
operator|++
name|nextId
argument_list|,
name|producerSequenceId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|con
operator|.
name|getClientID
argument_list|()
operator|+
literal|" peeked "
operator|+
name|i
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Runnable
name|producer
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|final
name|String
name|payLoad
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
literal|600
index|]
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Connection
name|con
init|=
name|createConnection
argument_list|()
decl_stmt|;
specifier|final
name|Session
name|sendSession
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|sendSession
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|sendSession
operator|.
name|createTextMessage
argument_list|(
name|payLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"About to commit: "
operator|+
name|messageCount
argument_list|)
expr_stmt|;
name|sendSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"committed: "
operator|+
name|messageCount
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
comment|// concurrent commit and activate
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConsumers
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|CheckOrderClient
name|client
init|=
operator|new
name|CheckOrderClient
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
name|executorService
operator|.
name|execute
argument_list|(
name|producer
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testUnmatchedSubUnsubscribeDeletesAll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create offline subs 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|filtered
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|filter
init|=
operator|(
name|i
operator|%
literal|2
operator|==
literal|0
operator|)
decl_stmt|;
comment|//(int) (Math.random() * 2)>= 1;
if|if
condition|(
name|filter
condition|)
name|filtered
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
name|filter
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|filtered
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test offline subs
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|unsubscribe
argument_list|(
literal|"SubsId"
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testAllConsumed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|filter
init|=
literal|"filter = 'true'"
decl_stmt|;
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cli1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sent
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sent
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cli2 pull 2"
argument_list|)
expr_stmt|;
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sent
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
name|i
operator|==
literal|1
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sent
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cli1 again, should get 1 new ones"
argument_list|)
expr_stmt|;
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
comment|// https://issues.apache.org/jira/browse/AMQ-3190
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testNoMissOnMatchingSubAfterRestart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|filter
init|=
literal|"filter = 'true'"
decl_stmt|;
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cli1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send unmatched messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
comment|// message for cli1 to keep it interested
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"ID"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sent
operator|++
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|sent
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|session
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"ID"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sent
operator|++
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
comment|// new sub at id 10
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|destroyBroker
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|sent
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|session
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"ID"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sent
operator|++
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
comment|// pick up the first of the next twenty messages
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"is message 10"
argument_list|,
literal|10
argument_list|,
name|m
operator|.
name|getIntProperty
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// pick up the first few messages for client1
name|con
operator|=
name|createConnection
argument_list|(
literal|"cli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"is message 0"
argument_list|,
literal|0
argument_list|,
name|m
operator|.
name|getIntProperty
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"is message 10"
argument_list|,
literal|10
argument_list|,
name|m
operator|.
name|getIntProperty
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//    // https://issues.apache.org/jira/browse/AMQ-3768
comment|//    public void testPageReuse() throws Exception {
comment|//        Connection con = null;
comment|//        Session session = null;
comment|//
comment|//        final int numConsumers = 115;
comment|//        for (int i=0; i<=numConsumers;i++) {
comment|//            con = createConnection("cli" + i);
comment|//            session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
comment|//            session.createDurableSubscriber(topic, "SubsId", null, true);
comment|//            session.close();
comment|//            con.close();
comment|//        }
comment|//
comment|//        // populate ack locations
comment|//        con = createConnection();
comment|//        session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
comment|//        MessageProducer producer = session.createProducer(null);
comment|//        Message message = session.createTextMessage(new byte[10].toString());
comment|//        producer.send(topic, message);
comment|//        con.close();
comment|//
comment|//        // we have a split, remove all but the last so that
comment|//        // the head pageid changes in the acklocations listindex
comment|//        for (int i=0; i<=numConsumers -1; i++) {
comment|//            con = createConnection("cli" + i);
comment|//            session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
comment|//            session.unsubscribe("SubsId");
comment|//            session.close();
comment|//            con.close();
comment|//        }
comment|//
comment|//        destroyBroker();
comment|//        createBroker(false);
comment|//
comment|//        // create a bunch more subs to reuse the freed page and get us in a knot
comment|//        for (int i=1; i<=numConsumers;i++) {
comment|//            con = createConnection("cli" + i);
comment|//            session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
comment|//            session.createDurableSubscriber(topic, "SubsId", filter, true);
comment|//            session.close();
comment|//            con.close();
comment|//        }
comment|//    }
comment|//
comment|//    public void testRedeliveryFlag() throws Exception {
comment|//
comment|//        Connection con;
comment|//        Session session;
comment|//        final int numClients = 2;
comment|//        for (int i=0; i<numClients; i++) {
comment|//            con = createConnection("cliId" + i);
comment|//            session = con.createSession(false, Session.CLIENT_ACKNOWLEDGE);
comment|//            session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
comment|//            session.close();
comment|//            con.close();
comment|//        }
comment|//
comment|//        final Random random = new Random();
comment|//
comment|//        // send messages
comment|//        con = createConnection();
comment|//        session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
comment|//        MessageProducer producer = session.createProducer(null);
comment|//
comment|//        final int count = 1000;
comment|//        for (int i = 0; i< count; i++) {
comment|//            Message message = session.createMessage();
comment|//            message.setStringProperty("filter", "true");
comment|//            producer.send(topic, message);
comment|//        }
comment|//        session.close();
comment|//        con.close();
comment|//
comment|//        class Client implements Runnable {
comment|//            Connection con;
comment|//            Session session;
comment|//            String clientId;
comment|//            Client(String id) {
comment|//                this.clientId = id;
comment|//            }
comment|//
comment|//            @Override
comment|//            public void run() {
comment|//                MessageConsumer consumer = null;
comment|//                Message message = null;
comment|//
comment|//                try {
comment|//                    for (int i = -1; i< random.nextInt(10); i++) {
comment|//                        // go online and take none
comment|//                        con = createConnection(clientId);
comment|//                        session = con.createSession(false, Session.CLIENT_ACKNOWLEDGE);
comment|//                        consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
comment|//                        session.close();
comment|//                        con.close();
comment|//                    }
comment|//
comment|//                    // consume 1
comment|//                    con = createConnection(clientId);
comment|//                    session = con.createSession(false, Session.CLIENT_ACKNOWLEDGE);
comment|//                    consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
comment|//                    message = consumer.receive(4000);
comment|//                    assertNotNull("got message", message);
comment|//                    // it is not reliable as it depends on broker dispatch rather than client receipt
comment|//                    // and delivered ack
comment|//                    //  assertFalse("not redelivered", message.getJMSRedelivered());
comment|//                    message.acknowledge();
comment|//                    session.close();
comment|//                    con.close();
comment|//
comment|//                    // peek all
comment|//                    for (int j = -1; j< random.nextInt(10); j++) {
comment|//                        con = createConnection(clientId);
comment|//                        session = con.createSession(false, Session.CLIENT_ACKNOWLEDGE);
comment|//                        consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
comment|//
comment|//                        for (int i = 0; i< count - 1; i++) {
comment|//                            assertNotNull("got message", consumer.receive(4000));
comment|//                        }
comment|//                        // no ack
comment|//                        session.close();
comment|//                        con.close();
comment|//                    }
comment|//
comment|//                    // consume remaining
comment|//                    con = createConnection(clientId);
comment|//                    session = con.createSession(false, Session.CLIENT_ACKNOWLEDGE);
comment|//                    consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
comment|//
comment|//                    for (int i = 0; i< count - 1; i++) {
comment|//                        message = consumer.receive(4000);
comment|//                        assertNotNull("got message", message);
comment|//                        assertTrue("is redelivered", message.getJMSRedelivered());
comment|//                    }
comment|//                    message.acknowledge();
comment|//                    session.close();
comment|//                    con.close();
comment|//
comment|//                    con = createConnection(clientId);
comment|//                    session = con.createSession(false, Session.CLIENT_ACKNOWLEDGE);
comment|//                    consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
comment|//                    assertNull("no message left", consumer.receive(2000));
comment|//                } catch (Throwable throwable) {
comment|//                    throwable.printStackTrace();
comment|//                    exceptions.add(throwable);
comment|//                }
comment|//            }
comment|//        }
comment|//        ExecutorService executorService = Executors.newCachedThreadPool();
comment|//        for (int i=0; i<numClients; i++) {
comment|//            executorService.execute(new Client("cliId" + i));
comment|//        }
comment|//        executorService.shutdown();
comment|//        executorService.awaitTermination(10, TimeUnit.MINUTES);
comment|//        assertTrue("No exceptions expected, but was: " + exceptions, exceptions.isEmpty());
comment|//    }
block|}
end_class

end_unit

