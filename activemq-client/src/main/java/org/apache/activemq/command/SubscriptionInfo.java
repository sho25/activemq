begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_comment
comment|/**  * Used to represent a durable subscription.  *   * @openwire:marshaller code="55"  *   */
end_comment

begin_class
specifier|public
class|class
name|SubscriptionInfo
implements|implements
name|DataStructure
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|DURABLE_SUBSCRIPTION_INFO
decl_stmt|;
specifier|protected
name|ActiveMQDestination
name|subscribedDestination
decl_stmt|;
specifier|protected
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|protected
name|String
name|clientId
decl_stmt|;
specifier|protected
name|String
name|subscriptionName
decl_stmt|;
specifier|protected
name|String
name|selector
decl_stmt|;
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
block|}
comment|/**      * This is the a resolved destination that the subscription is receiving      * messages from. This will never be a pattern or a composite destination.      *       * @openwire:property version=1 cache=true      */
specifier|public
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|void
name|setDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|String
name|getSelector
parameter_list|()
block|{
return|return
name|selector
return|;
block|}
specifier|public
name|void
name|setSelector
parameter_list|(
name|String
name|selector
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|String
name|getSubcriptionName
parameter_list|()
block|{
return|return
name|subscriptionName
return|;
block|}
comment|/**      * @param subscriptionName *      */
specifier|public
name|void
name|setSubcriptionName
parameter_list|(
name|String
name|subscriptionName
parameter_list|)
block|{
name|this
operator|.
name|subscriptionName
operator|=
name|subscriptionName
expr_stmt|;
block|}
specifier|public
name|String
name|getSubscriptionName
parameter_list|()
block|{
return|return
name|subscriptionName
return|;
block|}
specifier|public
name|void
name|setSubscriptionName
parameter_list|(
name|String
name|subscriptionName
parameter_list|)
block|{
name|this
operator|.
name|subscriptionName
operator|=
name|subscriptionName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMarshallAware
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|IntrospectionSupport
operator|.
name|toString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h1
init|=
name|clientId
operator|!=
literal|null
condition|?
name|clientId
operator|.
name|hashCode
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|int
name|h2
init|=
name|subscriptionName
operator|!=
literal|null
condition|?
name|subscriptionName
operator|.
name|hashCode
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
return|return
name|h1
operator|^
name|h2
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|SubscriptionInfo
condition|)
block|{
name|SubscriptionInfo
name|other
init|=
operator|(
name|SubscriptionInfo
operator|)
name|obj
decl_stmt|;
name|result
operator|=
operator|(
name|clientId
operator|==
literal|null
operator|&&
name|other
operator|.
name|clientId
operator|==
literal|null
operator|||
name|clientId
operator|!=
literal|null
operator|&&
name|other
operator|.
name|clientId
operator|!=
literal|null
operator|&&
name|clientId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|clientId
argument_list|)
operator|)
operator|&&
operator|(
name|subscriptionName
operator|==
literal|null
operator|&&
name|other
operator|.
name|subscriptionName
operator|==
literal|null
operator|||
name|subscriptionName
operator|!=
literal|null
operator|&&
name|other
operator|.
name|subscriptionName
operator|!=
literal|null
operator|&&
name|subscriptionName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|subscriptionName
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * The destination the client originally subscribed to.. This may not match      * the {@see getDestination} method if the subscribed destination uses      * patterns or composites.      *       * If the subscribed destinationis not set, this just ruturns the      * desitination.      *       * @openwire:property version=3      */
specifier|public
name|ActiveMQDestination
name|getSubscribedDestination
parameter_list|()
block|{
if|if
condition|(
name|subscribedDestination
operator|==
literal|null
condition|)
block|{
return|return
name|getDestination
argument_list|()
return|;
block|}
return|return
name|subscribedDestination
return|;
block|}
specifier|public
name|void
name|setSubscribedDestination
parameter_list|(
name|ActiveMQDestination
name|subscribedDestination
parameter_list|)
block|{
name|this
operator|.
name|subscribedDestination
operator|=
name|subscribedDestination
expr_stmt|;
block|}
block|}
end_class

end_unit

