begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_comment
comment|/**  * Goal which starts activemq broker.  *   * @goal broker  * @phase process-sources  */
end_comment

begin_class
specifier|public
class|class
name|ServerMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Location of the output directory. Defaults to target.      *       * @parameter expression="${project.build.directory}"      * @required      */
specifier|private
name|File
name|outputDirectory
decl_stmt|;
comment|/**      * Location of the predefined config files.      *       * @parameter expression="${configDirectory}"      *            default-value="${basedir}/src/main/resources/broker-conf"      * @required      */
specifier|private
name|String
name|configDirectory
decl_stmt|;
comment|/**      * Type of activemq configuration to use. This is also the filename used.      *       * @parameter expression="${configType}" default-value="activemq"      * @required      */
specifier|private
name|String
name|configType
decl_stmt|;
comment|/**      * Location of activemq config file other those found in resources/config.      *       * @parameter expression="${configFile}"      */
specifier|private
name|File
name|configFile
decl_stmt|;
comment|/**      * Broker URL.      *       * @parameter expression="${url}"      */
specifier|private
name|String
name|url
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|File
name|out
init|=
name|outputDirectory
decl_stmt|;
comment|// Create output directory if it doesn't exist.
if|if
condition|(
operator|!
name|out
operator|.
name|exists
argument_list|()
condition|)
block|{
name|out
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|args
index|[
literal|0
index|]
operator|=
literal|"start"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|url
expr_stmt|;
block|}
else|else
block|{
name|File
name|config
decl_stmt|;
if|if
condition|(
name|configFile
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
name|configFile
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|File
argument_list|(
name|configDirectory
operator|+
name|File
operator|.
name|separator
operator|+
name|configType
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|config
operator|=
name|copy
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|args
index|[
literal|0
index|]
operator|=
literal|"start"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"xbean:"
operator|+
operator|(
name|config
operator|.
name|toURI
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Main
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy activemq configuration file to output directory.      *       * @param source      * @return      * @throws IOException      */
specifier|public
name|File
name|copy
parameter_list|(
name|File
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|FileChannel
name|in
init|=
literal|null
decl_stmt|;
name|FileChannel
name|out
init|=
literal|null
decl_stmt|;
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"activemq.xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|in
operator|.
name|size
argument_list|()
decl_stmt|;
name|MappedByteBuffer
name|buf
init|=
name|in
operator|.
name|map
argument_list|(
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_ONLY
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dest
return|;
block|}
block|}
end_class

end_unit

