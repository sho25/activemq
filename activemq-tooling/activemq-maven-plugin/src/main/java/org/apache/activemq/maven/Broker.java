begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_comment
comment|/**  * Singleton facade between Maven and one ActiveMQ broker.  */
end_comment

begin_class
specifier|public
class|class
name|Broker
block|{
specifier|private
specifier|static
name|BrokerService
name|broker
decl_stmt|;
specifier|private
specifier|static
name|boolean
index|[]
name|shutdown
decl_stmt|;
specifier|private
specifier|static
name|Thread
name|shutdownThread
decl_stmt|;
specifier|public
specifier|static
name|void
name|start
parameter_list|(
name|boolean
name|fork
parameter_list|,
name|String
name|configUri
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"A local broker is already running"
argument_list|)
throw|;
block|}
try|try
block|{
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|configUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|fork
condition|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForShutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForShutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed to start the ActiveMQ Broker"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|stop
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"The local broker is not running"
argument_list|)
throw|;
block|}
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownThread
argument_list|)
expr_stmt|;
comment|// Terminate the shutdown hook thread
synchronized|synchronized
init|(
name|shutdown
init|)
block|{
name|shutdown
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|shutdown
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed to stop the ActiveMQ Broker"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Wait for a shutdown invocation elsewhere      *      * @throws Exception      */
specifier|protected
specifier|static
name|void
name|waitForShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdown
operator|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
expr_stmt|;
name|shutdownThread
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|shutdown
init|)
block|{
name|shutdown
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|shutdown
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownThread
argument_list|)
expr_stmt|;
comment|// Wait for any shutdown event
synchronized|synchronized
init|(
name|shutdown
init|)
block|{
while|while
condition|(
operator|!
name|shutdown
index|[
literal|0
index|]
condition|)
block|{
try|try
block|{
name|shutdown
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
block|}
comment|// Stop broker
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Return the broker service created.      */
specifier|public
specifier|static
name|BrokerService
name|getBroker
parameter_list|()
block|{
return|return
name|broker
return|;
block|}
comment|/**      * Override the default creation of the broker service.  Primarily added for testing purposes.      *      * @param broker      */
specifier|public
specifier|static
name|void
name|setBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|Broker
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
block|}
end_class

end_unit

