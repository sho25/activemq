begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DurableSubscriptionViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|TopicViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DurableSubscriptionOffline2Test
extends|extends
name|DurableSubscriptionOfflineTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableSubscriptionOffline2Test
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Boolean
index|[]
argument_list|>
name|getTestParameters
parameter_list|()
block|{
name|Boolean
index|[]
name|f
init|=
block|{
name|Boolean
operator|.
name|FALSE
block|}
decl_stmt|;
name|Boolean
index|[]
name|t
init|=
block|{
name|Boolean
operator|.
name|TRUE
block|}
decl_stmt|;
name|List
argument_list|<
name|Boolean
index|[]
argument_list|>
name|booleanChoices
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|booleanChoices
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|booleanChoices
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|booleanChoices
return|;
block|}
specifier|public
name|DurableSubscriptionOffline2Test
parameter_list|(
name|Boolean
name|keepDurableSubsActive
parameter_list|)
block|{
name|this
operator|.
name|keepDurableSubsActive
operator|=
name|keepDurableSubsActive
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|">>>> running {} with keepDurableSubsActive: {}"
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|this
operator|.
name|keepDurableSubsActive
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testJMXCountersWithOfflineSubs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create durable subscription 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// restart broker
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|false
comment|/*deleteAllMessages*/
argument_list|)
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// consume some messages
name|con
operator|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sent
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message: "
operator|+
name|i
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got :"
operator|+
name|i
operator|+
literal|", "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
comment|// check some counters while active
name|ObjectName
name|activeDurableSubName
init|=
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"active durable sub name: "
operator|+
name|activeDurableSubName
argument_list|)
expr_stmt|;
specifier|final
name|DurableSubscriptionViewMBean
name|durableSubscriptionView
init|=
operator|(
name|DurableSubscriptionViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|activeDurableSubName
argument_list|,
name|DurableSubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"is active"
argument_list|,
name|durableSubscriptionView
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all enqueued"
argument_list|,
name|keepDurableSubsActive
condition|?
literal|10
else|:
literal|0
argument_list|,
name|durableSubscriptionView
operator|.
name|getEnqueueCounter
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"correct waiting acks"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|5
operator|==
name|durableSubscriptionView
operator|.
name|getMessageCountAwaitingAcknowledge
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct dequeue"
argument_list|,
literal|5
argument_list|,
name|durableSubscriptionView
operator|.
name|getDequeueCounter
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|destinationName
init|=
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTopics
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|TopicViewMBean
name|topicView
init|=
operator|(
name|TopicViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|destinationName
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"correct enqueue"
argument_list|,
literal|10
argument_list|,
name|topicView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic view dequeue not updated"
argument_list|,
literal|5
argument_list|,
name|topicView
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight"
argument_list|,
literal|5
argument_list|,
name|topicView
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check some counters when inactive
name|ObjectName
name|inActiveDurableSubName
init|=
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inactive durable sub name: "
operator|+
name|inActiveDurableSubName
argument_list|)
expr_stmt|;
name|DurableSubscriptionViewMBean
name|durableSubscriptionView1
init|=
operator|(
name|DurableSubscriptionViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|inActiveDurableSubName
argument_list|,
name|DurableSubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"is not active"
argument_list|,
operator|!
name|durableSubscriptionView1
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all enqueued"
argument_list|,
name|keepDurableSubsActive
condition|?
literal|10
else|:
literal|0
argument_list|,
name|durableSubscriptionView1
operator|.
name|getEnqueueCounter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct awaiting ack"
argument_list|,
literal|0
argument_list|,
name|durableSubscriptionView1
operator|.
name|getMessageCountAwaitingAcknowledge
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"correct dequeue"
argument_list|,
name|keepDurableSubsActive
condition|?
literal|5
else|:
literal|0
argument_list|,
name|durableSubscriptionView1
operator|.
name|getDequeueCounter
argument_list|()
argument_list|)
expr_stmt|;
comment|// destination view
name|assertEquals
argument_list|(
literal|"correct enqueue"
argument_list|,
literal|10
argument_list|,
name|topicView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic view dequeue not updated"
argument_list|,
literal|5
argument_list|,
name|topicView
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight back to 0 after deactivate"
argument_list|,
literal|0
argument_list|,
name|topicView
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// consume the rest
name|con
operator|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sent
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message: "
operator|+
name|i
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got :"
operator|+
name|i
operator|+
literal|", "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
name|activeDurableSubName
operator|=
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"durable sub name: "
operator|+
name|activeDurableSubName
argument_list|)
expr_stmt|;
specifier|final
name|DurableSubscriptionViewMBean
name|durableSubscriptionView2
init|=
operator|(
name|DurableSubscriptionViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|activeDurableSubName
argument_list|,
name|DurableSubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"is active"
argument_list|,
name|durableSubscriptionView2
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all enqueued"
argument_list|,
name|keepDurableSubsActive
condition|?
literal|10
else|:
literal|0
argument_list|,
name|durableSubscriptionView2
operator|.
name|getEnqueueCounter
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"correct dequeue"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|val
init|=
name|durableSubscriptionView2
operator|.
name|getDequeueCounter
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dequeue count:"
operator|+
name|val
argument_list|)
expr_stmt|;
return|return
literal|10
operator|==
name|val
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

