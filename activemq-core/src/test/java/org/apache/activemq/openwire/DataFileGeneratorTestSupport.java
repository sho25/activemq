begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|v1
operator|.
name|ActiveMQTextMessageTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|v1
operator|.
name|BrokerInfoTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|v1
operator|.
name|MessageAckTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|DataFileGeneratorTestSupport
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|File
name|moduleBaseDir
decl_stmt|;
specifier|static
specifier|final
name|File
name|controlDir
decl_stmt|;
specifier|static
specifier|final
name|File
name|classFileDir
decl_stmt|;
specifier|private
specifier|static
name|Throwable
name|singletonException
init|=
operator|new
name|Exception
argument_list|(
literal|"shared exception"
argument_list|)
decl_stmt|;
static|static
block|{
name|File
name|basedir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|resource
init|=
name|DataFileGeneratorTestSupport
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"DataFileGeneratorTestSupport.class"
argument_list|)
decl_stmt|;
name|URI
name|baseURI
init|=
operator|new
name|URI
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"../../../../.."
argument_list|)
decl_stmt|;
name|basedir
operator|=
operator|new
name|File
argument_list|(
name|baseURI
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|moduleBaseDir
operator|=
name|basedir
expr_stmt|;
name|controlDir
operator|=
operator|new
name|File
argument_list|(
name|moduleBaseDir
argument_list|,
literal|"src/test/resources/openwire-control"
argument_list|)
expr_stmt|;
name|classFileDir
operator|=
operator|new
name|File
argument_list|(
name|moduleBaseDir
argument_list|,
literal|"src/test/java/org/activemq/openwire"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|counter
decl_stmt|;
specifier|private
name|OpenWireFormat
name|openWireformat
decl_stmt|;
specifier|public
name|void
name|testControlFileIsValid
parameter_list|()
throws|throws
name|Exception
block|{
name|generateControlFile
argument_list|()
expr_stmt|;
name|assertControlFileIsEqual
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|XXX_testGenerateAndReParsingIsTheSame
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|Object
name|expected
init|=
name|createObject
argument_list|()
decl_stmt|;
name|openWireformat
operator|.
name|marshal
argument_list|(
name|expected
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now lets try parse it back again
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Object
name|actual
init|=
name|openWireformat
operator|.
name|unmarshal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Objects should be equal"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// TODO generate a property based equality method?
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|openWireformat
operator|=
name|createOpenWireFormat
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|generateControlFile
parameter_list|()
throws|throws
name|Exception
block|{
name|controlDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|dataFile
init|=
operator|new
name|File
argument_list|(
name|controlDir
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".bin"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|openWireformat
operator|.
name|marshal
argument_list|(
name|createObject
argument_list|()
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|InputStream
name|generateInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|ds
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|openWireformat
operator|.
name|marshal
argument_list|(
name|createObject
argument_list|()
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|assertControlFileIsEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dataFile
init|=
operator|new
name|File
argument_list|(
name|controlDir
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".bin"
argument_list|)
decl_stmt|;
name|FileInputStream
name|is1
init|=
operator|new
name|FileInputStream
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
try|try
block|{
name|InputStream
name|is2
init|=
name|generateInputStream
argument_list|()
decl_stmt|;
name|int
name|a
init|=
name|is1
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|b
init|=
name|is2
operator|.
name|read
argument_list|()
decl_stmt|;
name|pos
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data does not match control file: "
operator|+
name|dataFile
operator|+
literal|" at byte position "
operator|+
name|pos
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
while|while
condition|(
name|a
operator|>=
literal|0
operator|&&
name|b
operator|>=
literal|0
condition|)
block|{
name|a
operator|=
name|is1
operator|.
name|read
argument_list|()
expr_stmt|;
name|b
operator|=
name|is2
operator|.
name|read
argument_list|()
expr_stmt|;
name|pos
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data does not match control file: "
operator|+
name|dataFile
operator|+
literal|" at byte position "
operator|+
name|pos
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|is2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|is1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|Object
name|createObject
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
name|void
name|populateObject
parameter_list|(
name|Object
name|info
parameter_list|)
throws|throws
name|Exception
block|{
comment|// empty method to allow derived classes to call super
comment|// to simplify generated code
block|}
specifier|protected
name|OpenWireFormat
name|createOpenWireFormat
parameter_list|()
block|{
name|OpenWireFormat
name|wf
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|wf
operator|.
name|setCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wf
operator|.
name|setStackTraceEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|wf
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|wf
return|;
block|}
specifier|protected
name|BrokerId
name|createBrokerId
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|BrokerId
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|protected
name|TransactionId
name|createTransactionId
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|LocalTransactionId
argument_list|(
name|createConnectionId
argument_list|(
name|string
argument_list|)
argument_list|,
operator|++
name|counter
argument_list|)
return|;
block|}
specifier|protected
name|ConnectionId
name|createConnectionId
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|ConnectionId
argument_list|(
name|string
argument_list|)
return|;
block|}
specifier|protected
name|SessionId
name|createSessionId
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|SessionId
argument_list|(
name|createConnectionId
argument_list|(
name|string
argument_list|)
argument_list|,
operator|++
name|counter
argument_list|)
return|;
block|}
specifier|protected
name|ProducerId
name|createProducerId
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|ProducerId
argument_list|(
name|createSessionId
argument_list|(
name|string
argument_list|)
argument_list|,
operator|++
name|counter
argument_list|)
return|;
block|}
specifier|protected
name|ConsumerId
name|createConsumerId
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|ConsumerId
argument_list|(
name|createSessionId
argument_list|(
name|string
argument_list|)
argument_list|,
operator|++
name|counter
argument_list|)
return|;
block|}
specifier|protected
name|MessageId
name|createMessageId
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|MessageId
argument_list|(
name|createProducerId
argument_list|(
name|string
argument_list|)
argument_list|,
operator|++
name|counter
argument_list|)
return|;
block|}
specifier|protected
name|ActiveMQDestination
name|createActiveMQDestination
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
name|string
argument_list|)
return|;
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|ActiveMQTextMessageTest
operator|.
name|SINGLETON
operator|.
name|createObject
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|string
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|protected
name|BrokerInfo
name|createBrokerInfo
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|BrokerInfo
operator|)
name|BrokerInfoTest
operator|.
name|SINGLETON
operator|.
name|createObject
argument_list|()
return|;
block|}
specifier|protected
name|MessageAck
name|createMessageAck
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|MessageAck
operator|)
name|MessageAckTest
operator|.
name|SINGLETON
operator|.
name|createObject
argument_list|()
return|;
block|}
specifier|protected
name|DataStructure
name|createDataStructure
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBrokerInfo
argument_list|(
name|string
argument_list|)
return|;
block|}
specifier|protected
name|Throwable
name|createThrowable
parameter_list|(
name|String
name|string
parameter_list|)
block|{
comment|// we have issues with stack frames not being equal so share the same
comment|// exception each time
return|return
name|singletonException
return|;
block|}
block|}
end_class

end_unit

