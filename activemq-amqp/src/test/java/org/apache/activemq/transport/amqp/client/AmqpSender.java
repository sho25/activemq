begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidDestinationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|AsyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|ClientFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|UnmodifiableSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Accepted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Modified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Outcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Rejected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Released
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|TransactionalState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|DeliveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ErrorCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ReceiverSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|SenderSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Delivery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Sender class that manages a Proton sender endpoint.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpSender
extends|extends
name|AmqpAbstractResource
argument_list|<
name|Sender
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpSender
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTE_ARRAY
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SEND_TIMEOUT
init|=
literal|15000
decl_stmt|;
specifier|private
specifier|final
name|AmqpTransferTagGenerator
name|tagGenerator
init|=
operator|new
name|AmqpTransferTagGenerator
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AmqpSession
name|session
decl_stmt|;
specifier|private
specifier|final
name|String
name|address
decl_stmt|;
specifier|private
specifier|final
name|String
name|senderId
decl_stmt|;
specifier|private
specifier|final
name|Target
name|userSpecifiedTarget
decl_stmt|;
specifier|private
name|boolean
name|presettle
decl_stmt|;
specifier|private
name|long
name|sendTimeout
init|=
name|DEFAULT_SEND_TIMEOUT
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Delivery
argument_list|>
name|pending
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Delivery
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|encodeBuffer
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|8
index|]
decl_stmt|;
comment|/**      * Create a new sender instance.      *      * @param session      * 		  The parent session that created the session.      * @param address      *        The address that this sender produces to.      * @param senderId      *        The unique ID assigned to this sender.      */
specifier|public
name|AmqpSender
parameter_list|(
name|AmqpSession
name|session
parameter_list|,
name|String
name|address
parameter_list|,
name|String
name|senderId
parameter_list|)
block|{
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|address
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Address cannot be empty."
argument_list|)
throw|;
block|}
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|senderId
operator|=
name|senderId
expr_stmt|;
name|this
operator|.
name|userSpecifiedTarget
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Create a new sender instance using the given Target when creating the link.      *      * @param session      *        The parent session that created the session.      * @param address      *        The address that this sender produces to.      * @param senderId      *        The unique ID assigned to this sender.      */
specifier|public
name|AmqpSender
parameter_list|(
name|AmqpSession
name|session
parameter_list|,
name|Target
name|target
parameter_list|,
name|String
name|senderId
parameter_list|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User specified Target cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|userSpecifiedTarget
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|target
operator|.
name|getAddress
argument_list|()
expr_stmt|;
name|this
operator|.
name|senderId
operator|=
name|senderId
expr_stmt|;
block|}
comment|/**      * Sends the given message to this senders assigned address.      *      * @param message      *        the message to send.      *      * @throws IOException if an error occurs during the send.      */
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|AmqpMessage
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|send
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends the given message to this senders assigned address using the supplied transaction ID.      *      * @param message      *        the message to send.      * @param txId      *        the transaction ID to assign the outgoing send.      *      * @throws IOException if an error occurs during the send.      */
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|AmqpMessage
name|message
parameter_list|,
specifier|final
name|AmqpTransactionId
name|txId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
specifier|final
name|ClientFuture
name|sendRequest
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
name|session
operator|.
name|getScheduler
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doSend
argument_list|(
name|message
argument_list|,
name|sendRequest
argument_list|,
name|txId
argument_list|)
expr_stmt|;
name|session
operator|.
name|pumpToProtonTransport
argument_list|(
name|sendRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sendRequest
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|session
operator|.
name|getConnection
argument_list|()
operator|.
name|fireClientException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sendTimeout
operator|<=
literal|0
condition|)
block|{
name|sendRequest
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sendRequest
operator|.
name|sync
argument_list|(
name|sendTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Close the sender, a closed sender will throw exceptions if any further send      * calls are made.      *      * @throws IOException if an error occurs while closing the sender.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
name|session
operator|.
name|getScheduler
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|close
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|session
operator|.
name|pumpToProtonTransport
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return this session's parent AmqpSession.      */
specifier|public
name|AmqpSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
comment|/**      * @return an unmodifiable view of the underlying Sender instance.      */
specifier|public
name|Sender
name|getSender
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableSender
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return the assigned address of this sender.      */
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
comment|//----- Sender configuration ---------------------------------------------//
comment|/**      * @return will messages be settle on send.      */
specifier|public
name|boolean
name|isPresettle
parameter_list|()
block|{
return|return
name|presettle
return|;
block|}
comment|/**      * Configure is sent messages are marked as settled on send, defaults to false.      *      * @param presettle      * 		  configure if this sender will presettle all sent messages.      */
specifier|public
name|void
name|setPresettle
parameter_list|(
name|boolean
name|presettle
parameter_list|)
block|{
name|this
operator|.
name|presettle
operator|=
name|presettle
expr_stmt|;
block|}
comment|/**      * @return the currently configured send timeout.      */
specifier|public
name|long
name|getSendTimeout
parameter_list|()
block|{
return|return
name|sendTimeout
return|;
block|}
comment|/**      * Sets the amount of time the sender will block on a send before failing.      *      * @param sendTimeout      *        time in milliseconds to wait.      */
specifier|public
name|void
name|setSendTimeout
parameter_list|(
name|long
name|sendTimeout
parameter_list|)
block|{
name|this
operator|.
name|sendTimeout
operator|=
name|sendTimeout
expr_stmt|;
block|}
comment|//----- Private Sender implementation ------------------------------------//
specifier|private
name|void
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Sender is already closed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOpen
parameter_list|()
block|{
name|Symbol
index|[]
name|outcomes
init|=
operator|new
name|Symbol
index|[]
block|{
name|Accepted
operator|.
name|DESCRIPTOR_SYMBOL
block|,
name|Rejected
operator|.
name|DESCRIPTOR_SYMBOL
block|}
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|Source
argument_list|()
decl_stmt|;
name|source
operator|.
name|setAddress
argument_list|(
name|senderId
argument_list|)
expr_stmt|;
name|source
operator|.
name|setOutcomes
argument_list|(
name|outcomes
argument_list|)
expr_stmt|;
name|Target
name|target
init|=
name|userSpecifiedTarget
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
name|target
operator|=
operator|new
name|Target
argument_list|()
expr_stmt|;
name|target
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|String
name|senderName
init|=
name|senderId
operator|+
literal|":"
operator|+
name|address
decl_stmt|;
name|Sender
name|sender
init|=
name|session
operator|.
name|getEndpoint
argument_list|()
operator|.
name|sender
argument_list|(
name|senderName
argument_list|)
decl_stmt|;
name|sender
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|presettle
condition|)
block|{
name|sender
operator|.
name|setSenderSettleMode
argument_list|(
name|SenderSettleMode
operator|.
name|SETTLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|setSenderSettleMode
argument_list|(
name|SenderSettleMode
operator|.
name|UNSETTLED
argument_list|)
expr_stmt|;
block|}
name|sender
operator|.
name|setReceiverSettleMode
argument_list|(
name|ReceiverSettleMode
operator|.
name|FIRST
argument_list|)
expr_stmt|;
name|setEndpoint
argument_list|(
name|sender
argument_list|)
expr_stmt|;
name|super
operator|.
name|doOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOpenCompletion
parameter_list|()
block|{
comment|// Verify the attach response contained a non-null target
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|Target
name|t
init|=
name|getEndpoint
argument_list|()
operator|.
name|getRemoteTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|doOpenCompletion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// No link terminus was created, the peer will now detach/close us.
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOpenInspection
parameter_list|()
block|{
try|try
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectOpenedResource
argument_list|(
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|getStateInspector
argument_list|()
operator|.
name|markAsInvalid
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doClosedInspection
parameter_list|()
block|{
try|try
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectClosedResource
argument_list|(
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|getStateInspector
argument_list|()
operator|.
name|markAsInvalid
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doDetachedInspection
parameter_list|()
block|{
try|try
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectDetachedResource
argument_list|(
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|getStateInspector
argument_list|()
operator|.
name|markAsInvalid
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doDeliveryUpdateInspection
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
block|{
try|try
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectDeliveryUpdate
argument_list|(
name|getSender
argument_list|()
argument_list|,
name|delivery
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|getStateInspector
argument_list|()
operator|.
name|markAsInvalid
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Exception
name|getOpenAbortException
parameter_list|()
block|{
comment|// Verify the attach response contained a non-null target
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|Target
name|t
init|=
name|getEndpoint
argument_list|()
operator|.
name|getRemoteTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getOpenAbortException
argument_list|()
return|;
block|}
else|else
block|{
comment|// No link terminus was created, the peer has detach/closed us, create IDE.
return|return
operator|new
name|InvalidDestinationException
argument_list|(
literal|"Link creation was refused"
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|doSend
parameter_list|(
name|AmqpMessage
name|message
parameter_list|,
name|AsyncResult
name|request
parameter_list|,
name|AmqpTransactionId
name|txId
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Producer sending message: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|Delivery
name|delivery
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|presettle
condition|)
block|{
name|delivery
operator|=
name|getEndpoint
argument_list|()
operator|.
name|delivery
argument_list|(
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|tag
init|=
name|tagGenerator
operator|.
name|getNextTag
argument_list|()
decl_stmt|;
name|delivery
operator|=
name|getEndpoint
argument_list|()
operator|.
name|delivery
argument_list|(
name|tag
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|delivery
operator|.
name|setContext
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Binary
name|amqpTxId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|txId
operator|!=
literal|null
condition|)
block|{
name|amqpTxId
operator|=
name|txId
operator|.
name|getRemoteTxId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|session
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|amqpTxId
operator|=
name|session
operator|.
name|getTransactionId
argument_list|()
operator|.
name|getRemoteTxId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|amqpTxId
operator|!=
literal|null
condition|)
block|{
name|TransactionalState
name|state
init|=
operator|new
name|TransactionalState
argument_list|()
decl_stmt|;
name|state
operator|.
name|setTxnId
argument_list|(
name|amqpTxId
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|encodeAndSend
argument_list|(
name|message
operator|.
name|getWrappedMessage
argument_list|()
argument_list|,
name|delivery
argument_list|)
expr_stmt|;
if|if
condition|(
name|presettle
condition|)
block|{
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|request
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pending
operator|.
name|add
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|encodeAndSend
parameter_list|(
name|Message
name|message
parameter_list|,
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|encodedSize
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|encodedSize
operator|=
name|message
operator|.
name|encode
argument_list|(
name|encodeBuffer
argument_list|,
literal|0
argument_list|,
name|encodeBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
name|e
parameter_list|)
block|{
name|encodeBuffer
operator|=
operator|new
name|byte
index|[
name|encodeBuffer
operator|.
name|length
operator|*
literal|2
index|]
expr_stmt|;
block|}
block|}
name|int
name|sentSoFar
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|sent
init|=
name|getEndpoint
argument_list|()
operator|.
name|send
argument_list|(
name|encodeBuffer
argument_list|,
name|sentSoFar
argument_list|,
name|encodedSize
operator|-
name|sentSoFar
argument_list|)
decl_stmt|;
if|if
condition|(
name|sent
operator|>
literal|0
condition|)
block|{
name|sentSoFar
operator|+=
name|sent
expr_stmt|;
if|if
condition|(
operator|(
name|encodedSize
operator|-
name|sentSoFar
operator|)
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} failed to send any data from current Message."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processDeliveryUpdates
parameter_list|(
name|AmqpConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Delivery
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|Delivery
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Delivery
name|delivery
range|:
name|pending
control|)
block|{
name|DeliveryState
name|state
init|=
name|delivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|doDeliveryUpdateInspection
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|Outcome
name|outcome
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|TransactionalState
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"State of delivery is Transactional, retrieving outcome: {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|outcome
operator|=
operator|(
operator|(
name|TransactionalState
operator|)
name|state
operator|)
operator|.
name|getOutcome
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Outcome
condition|)
block|{
name|outcome
operator|=
operator|(
name|Outcome
operator|)
name|state
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Message send updated with unsupported state: {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|outcome
operator|=
literal|null
expr_stmt|;
block|}
name|AsyncResult
name|request
init|=
operator|(
name|AsyncResult
operator|)
name|delivery
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Exception
name|deliveryError
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outcome
operator|instanceof
name|Accepted
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Outcome of delivery was accepted: {}"
argument_list|,
name|delivery
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|request
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|outcome
operator|instanceof
name|Rejected
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Outcome of delivery was rejected: {}"
argument_list|,
name|delivery
argument_list|)
expr_stmt|;
name|ErrorCondition
name|remoteError
init|=
operator|(
operator|(
name|Rejected
operator|)
name|outcome
operator|)
operator|.
name|getError
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteError
operator|==
literal|null
condition|)
block|{
name|remoteError
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getRemoteCondition
argument_list|()
expr_stmt|;
block|}
name|deliveryError
operator|=
name|AmqpSupport
operator|.
name|convertToException
argument_list|(
name|remoteError
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outcome
operator|instanceof
name|Released
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Outcome of delivery was released: {}"
argument_list|,
name|delivery
argument_list|)
expr_stmt|;
name|deliveryError
operator|=
operator|new
name|IOException
argument_list|(
literal|"Delivery failed: released by receiver"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outcome
operator|instanceof
name|Modified
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Outcome of delivery was modified: {}"
argument_list|,
name|delivery
argument_list|)
expr_stmt|;
name|deliveryError
operator|=
operator|new
name|IOException
argument_list|(
literal|"Delivery failed: failure at remote"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deliveryError
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|request
operator|.
name|onFailure
argument_list|(
name|deliveryError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|fireClientException
argument_list|(
name|deliveryError
argument_list|)
expr_stmt|;
block|}
block|}
name|tagGenerator
operator|.
name|returnTag
argument_list|(
name|delivery
operator|.
name|getTag
argument_list|()
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
block|}
name|pending
operator|.
name|removeAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{ address = "
operator|+
name|address
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

