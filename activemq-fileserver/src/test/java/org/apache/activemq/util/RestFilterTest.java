begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|IO
import|;
end_import

begin_class
specifier|public
class|class
name|RestFilterTest
extends|extends
name|TestCase
block|{
specifier|public
name|RestFilterTest
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|fileContents
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:8080/fileserver/repository/file.txt"
argument_list|)
decl_stmt|;
comment|// 1. upload
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setChunkedStreamingMode
argument_list|(
name|fileContents
operator|.
name|length
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|connection
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|IO
operator|.
name|copy
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|fileContents
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulCode
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// 2. download
name|connection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IO
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulCode
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|fileContents
operator|.
name|length
argument_list|,
name|baos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. remove
name|connection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"DELETE"
argument_list|)
expr_stmt|;
name|is
operator|=
name|connection
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isSuccessfulCode
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isSuccessfulCode
parameter_list|(
name|int
name|responseCode
parameter_list|)
block|{
return|return
name|responseCode
operator|>=
literal|200
operator|&&
name|responseCode
operator|<
literal|300
return|;
comment|// 2xx => successful
block|}
block|}
end_class

end_unit

