begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|ConstantPendingMessageLimitStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|OldestMessageEvictionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author James Furness  *         https://issues.apache.org/jira/browse/AMQ-3607  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQSlowConsumerManualTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
literal|12345
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ActiveMQTopic
name|TOPIC
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TOPIC"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"nio://localhost:"
operator|+
name|PORT
operator|+
literal|"?socket.tcpNoDelay=true"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDefaultSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"testDefaultSettings"
argument_list|,
literal|30
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDefaultSettingsWithOptimiseAcknowledge
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"testDefaultSettingsWithOptimiseAcknowledge"
argument_list|,
literal|30
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBounded
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"testBounded"
argument_list|,
literal|30
argument_list|,
literal|5
argument_list|,
literal|25
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBoundedWithOptimiseAcknowledge
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|"testBoundedWithOptimiseAcknowledge"
argument_list|,
literal|30
argument_list|,
literal|5
argument_list|,
literal|25
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runTest
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|sendMessageCount
parameter_list|,
name|int
name|prefetchLimit
parameter_list|,
name|int
name|messageLimit
parameter_list|,
name|boolean
name|evictOldestMessage
parameter_list|,
name|boolean
name|disableFlowControl
parameter_list|,
name|boolean
name|optimizeAcknowledge
parameter_list|,
name|boolean
name|persistent
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBroker
argument_list|(
name|persistent
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|buildPolicy
argument_list|(
name|TOPIC
argument_list|,
name|prefetchLimit
argument_list|,
name|messageLimit
argument_list|,
name|evictOldestMessage
argument_list|,
name|disableFlowControl
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Slow consumer
name|Session
name|slowConsumerSession
init|=
name|buildSession
argument_list|(
literal|"SlowConsumer"
argument_list|,
name|URL
argument_list|,
name|optimizeAcknowledge
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|blockSlowConsumer
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|slowConsumerReceiveCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|slowConsumerReceived
init|=
name|sendMessageCount
operator|<=
literal|1000
condition|?
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
name|MessageConsumer
name|slowConsumer
init|=
name|createSubscriber
argument_list|(
name|slowConsumerSession
argument_list|,
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|slowConsumerReceiveCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slowConsumerReceived
operator|!=
literal|null
condition|)
name|slowConsumerReceived
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SlowConsumer: Receive "
operator|+
name|count
argument_list|)
expr_stmt|;
name|blockSlowConsumer
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                         }
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Fast consumer
name|Session
name|fastConsumerSession
init|=
name|buildSession
argument_list|(
literal|"FastConsumer"
argument_list|,
name|URL
argument_list|,
name|optimizeAcknowledge
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|fastConsumerReceiveCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|fastConsumerReceived
init|=
name|sendMessageCount
operator|<=
literal|1000
condition|?
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
name|MessageConsumer
name|fastConsumer
init|=
name|createSubscriber
argument_list|(
name|fastConsumerSession
argument_list|,
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|fastConsumerReceiveCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fastConsumerReceived
operator|!=
literal|null
condition|)
name|fastConsumerReceived
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FastConsumer: Receive "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                         }
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Wait for consumers to connect
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Publisher
name|AtomicInteger
name|sentCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|sent
init|=
name|sendMessageCount
operator|<=
literal|1000
condition|?
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
name|Session
name|publisherSession
init|=
name|buildSession
argument_list|(
literal|"Publisher"
argument_list|,
name|URL
argument_list|,
name|optimizeAcknowledge
argument_list|)
decl_stmt|;
name|MessageProducer
name|publisher
init|=
name|createPublisher
argument_list|(
name|publisherSession
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
name|i
operator|++
control|)
block|{
name|sentCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|sent
operator|!=
literal|null
condition|)
name|sent
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10000
operator|==
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Publisher: Send "
operator|+
name|i
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|send
argument_list|(
name|publisherSession
operator|.
name|createTextMessage
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Wait for messages to arrive
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|": Publisher Sent: "
operator|+
name|sentCount
operator|+
literal|" "
operator|+
name|sent
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|": Whilst slow consumer blocked:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t- SlowConsumer Received: "
operator|+
name|slowConsumerReceiveCount
operator|+
literal|" "
operator|+
name|slowConsumerReceived
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t- FastConsumer Received: "
operator|+
name|fastConsumerReceiveCount
operator|+
literal|" "
operator|+
name|fastConsumerReceived
argument_list|)
expr_stmt|;
comment|// Unblock slow consumer
name|blockSlowConsumer
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Wait for messages to arrive
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|": After slow consumer unblocked:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t- SlowConsumer Received: "
operator|+
name|slowConsumerReceiveCount
operator|+
literal|" "
operator|+
name|slowConsumerReceived
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t- FastConsumer Received: "
operator|+
name|fastConsumerReceiveCount
operator|+
literal|" "
operator|+
name|fastConsumerReceived
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|close
argument_list|()
expr_stmt|;
name|publisherSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|slowConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|slowConsumerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|fastConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fastConsumerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Fast consumer missed messages whilst slow consumer was blocking"
argument_list|,
name|sent
argument_list|,
name|fastConsumerReceived
argument_list|)
expr_stmt|;
comment|// this is too timine dependent  as sometimes there is message eviction, would need to check the dlq
comment|//Assert.assertEquals("Slow consumer received incorrect message count", Math.min(sendMessageCount, prefetchLimit + (messageLimit> 0 ? messageLimit : Integer.MAX_VALUE)), slowConsumerReceived.size());
block|}
specifier|private
specifier|static
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|persistent
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"TestBroker"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
name|persistent
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|URL
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|private
specifier|static
name|MessageConsumer
name|createSubscriber
parameter_list|(
name|Session
name|session
parameter_list|,
name|MessageListener
name|messageListener
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|TOPIC
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
specifier|private
specifier|static
name|MessageProducer
name|createPublisher
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|TOPIC
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
return|return
name|producer
return|;
block|}
specifier|private
specifier|static
name|Session
name|buildSession
parameter_list|(
name|String
name|clientId
parameter_list|,
name|String
name|url
parameter_list|,
name|boolean
name|optimizeAcknowledge
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setCopyMessageOnSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setDisableTimeStampsByDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setOptimizeAcknowledge
argument_list|(
name|optimizeAcknowledge
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimizeAcknowledge
condition|)
block|{
name|connectionFactory
operator|.
name|setOptimizeAcknowledgeTimeOut
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|session
return|;
block|}
specifier|private
specifier|static
name|PolicyMap
name|buildPolicy
parameter_list|(
name|ActiveMQTopic
name|topic
parameter_list|,
name|int
name|prefetchLimit
parameter_list|,
name|int
name|messageLimit
parameter_list|,
name|boolean
name|evictOldestMessage
parameter_list|,
name|boolean
name|disableFlowControl
parameter_list|)
block|{
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|policyEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|evictOldestMessage
condition|)
block|{
name|policyEntry
operator|.
name|setMessageEvictionStrategy
argument_list|(
operator|new
name|OldestMessageEvictionStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|disableFlowControl
condition|)
block|{
name|policyEntry
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefetchLimit
operator|>
literal|0
condition|)
block|{
name|policyEntry
operator|.
name|setTopicPrefetch
argument_list|(
name|prefetchLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageLimit
operator|>
literal|0
condition|)
block|{
name|ConstantPendingMessageLimitStrategy
name|messageLimitStrategy
init|=
operator|new
name|ConstantPendingMessageLimitStrategy
argument_list|()
decl_stmt|;
name|messageLimitStrategy
operator|.
name|setLimit
argument_list|(
name|messageLimit
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setPendingMessageLimitStrategy
argument_list|(
name|messageLimitStrategy
argument_list|)
expr_stmt|;
block|}
name|policyMap
operator|.
name|put
argument_list|(
name|topic
argument_list|,
name|policyEntry
argument_list|)
expr_stmt|;
return|return
name|policyMap
return|;
block|}
block|}
end_class

end_unit

