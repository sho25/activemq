begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|transform
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|DecoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|ConnectionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|ProtocolTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|TransportImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|framing
operator|.
name|TransportFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|DescribedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Modified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Rejected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Released
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|transaction
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|transport
operator|.
name|DeliveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|transport
operator|.
name|SenderSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|transport
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_class
class|class
name|AmqpProtocolConverter
block|{
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|EndpointState
argument_list|>
name|UNINITIALIZED_SET
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|EndpointState
operator|.
name|UNINITIALIZED
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|EndpointState
argument_list|>
name|INITIALIZED_SET
init|=
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|UNINITIALIZED_SET
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|EndpointState
argument_list|>
name|ACTIVE_STATE
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|EndpointState
operator|.
name|ACTIVE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|EndpointState
argument_list|>
name|CLOSED_STATE
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|EndpointState
operator|.
name|CLOSED
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|EndpointState
argument_list|>
name|ALL_STATES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|EndpointState
operator|.
name|CLOSED
argument_list|,
name|EndpointState
operator|.
name|ACTIVE
argument_list|,
name|EndpointState
operator|.
name|UNINITIALIZED
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpProtocolConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
specifier|public
name|byte
index|[]
name|EMPTY_BYTE_ARRAY
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|final
name|AmqpTransport
name|amqpTransport
decl_stmt|;
specifier|public
name|AmqpProtocolConverter
parameter_list|(
name|AmqpTransport
name|amqpTransport
parameter_list|,
name|BrokerContext
name|brokerContext
parameter_list|)
block|{
name|this
operator|.
name|amqpTransport
operator|=
name|amqpTransport
expr_stmt|;
block|}
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|//
comment|//    private static final Buffer PING_RESP_FRAME = new PINGRESP().encode();
comment|//
comment|//
comment|//    private final LongSequenceGenerator messageIdGenerator = new LongSequenceGenerator();
comment|//    private final LongSequenceGenerator consumerIdGenerator = new LongSequenceGenerator();
comment|//
comment|//    private final ConcurrentHashMap<ConsumerId, AmqpSubscription> subscriptionsByConsumerId = new ConcurrentHashMap<ConsumerId, AmqpSubscription>();
comment|//    private final ConcurrentHashMap<UTF8Buffer, AmqpSubscription> amqpSubscriptionByTopic = new ConcurrentHashMap<UTF8Buffer, AmqpSubscription>();
comment|//    private final Map<UTF8Buffer, ActiveMQTopic> activeMQTopicMap = new LRUCache<UTF8Buffer, ActiveMQTopic>();
comment|//    private final Map<Destination, UTF8Buffer> amqpTopicMap = new LRUCache<Destination, UTF8Buffer>();
comment|//    private final Map<Short, MessageAck> consumerAcks = new LRUCache<Short, MessageAck>();
comment|//    private final Map<Short, PUBREC> publisherRecs = new LRUCache<Short, PUBREC>();
comment|//
comment|//    private final AtomicBoolean connected = new AtomicBoolean(false);
comment|//    private CONNECT connect;
comment|//    private String clientId;
comment|//    private final String QOS_PROPERTY_NAME = "QoSPropertyName";
name|TransportImpl
name|protonTransport
init|=
operator|new
name|TransportImpl
argument_list|()
decl_stmt|;
name|ConnectionImpl
name|protonConnection
init|=
operator|new
name|ConnectionImpl
argument_list|()
decl_stmt|;
block|{
name|this
operator|.
name|protonTransport
operator|.
name|bind
parameter_list|(
name|this
operator|.
name|protonConnection
parameter_list|)
constructor_decl|;
name|this
operator|.
name|protonTransport
operator|.
name|setProtocolTracer
argument_list|(
operator|new
name|ProtocolTracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|receivedFrame
parameter_list|(
name|TransportFrame
name|transportFrame
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"RECV: %05d | %s"
argument_list|,
name|transportFrame
operator|.
name|getChannel
argument_list|()
argument_list|,
name|transportFrame
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sentFrame
parameter_list|(
name|TransportFrame
name|transportFrame
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SENT: %05d | %s"
argument_list|,
name|transportFrame
operator|.
name|getChannel
argument_list|()
argument_list|,
name|transportFrame
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|pumpProtonToSocket
parameter_list|()
block|{
try|try
block|{
name|int
name|size
init|=
literal|1024
operator|*
literal|64
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|count
init|=
name|protonTransport
operator|.
name|output
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
specifier|final
name|Buffer
name|buffer
decl_stmt|;
name|buffer
operator|=
operator|new
name|Buffer
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|//                    System.out.println("writing: " + buffer.toString().substring(5).replaceAll("(..)", "$1 "));
name|amqpTransport
operator|.
name|sendToAmqp
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//            System.out.println("write done");
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|amqpTransport
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|AmqpSessionContext
block|{
specifier|private
specifier|final
name|SessionId
name|sessionId
decl_stmt|;
name|long
name|nextProducerId
init|=
literal|0
decl_stmt|;
name|long
name|nextConsumerId
init|=
literal|0
decl_stmt|;
specifier|public
name|AmqpSessionContext
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|sessionId
operator|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert a AMQP command      */
specifier|public
name|void
name|onAMQPData
parameter_list|(
name|Buffer
name|frame
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
try|try
block|{
comment|//            System.out.println("reading: " + frame.toString().substring(5).replaceAll("(..)", "$1 "));
name|protonTransport
operator|.
name|input
argument_list|(
name|frame
operator|.
name|data
argument_list|,
name|frame
operator|.
name|offset
argument_list|,
name|frame
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Could not decode AMQP frame: "
operator|+
name|frame
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Handle the amqp open..
if|if
condition|(
name|protonConnection
operator|.
name|getLocalState
argument_list|()
operator|==
name|EndpointState
operator|.
name|UNINITIALIZED
operator|&&
name|protonConnection
operator|.
name|getRemoteState
argument_list|()
operator|!=
name|EndpointState
operator|.
name|UNINITIALIZED
condition|)
block|{
name|onConnectionOpen
argument_list|()
expr_stmt|;
block|}
comment|// Lets map amqp sessions to openwire sessions..
name|Session
name|session
init|=
name|protonConnection
operator|.
name|sessionHead
argument_list|(
name|UNINITIALIZED_SET
argument_list|,
name|INITIALIZED_SET
argument_list|)
decl_stmt|;
while|while
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|onSessionOpen
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|=
name|protonConnection
operator|.
name|sessionHead
argument_list|(
name|UNINITIALIZED_SET
argument_list|,
name|INITIALIZED_SET
argument_list|)
expr_stmt|;
block|}
name|Link
name|link
init|=
name|protonConnection
operator|.
name|linkHead
argument_list|(
name|UNINITIALIZED_SET
argument_list|,
name|INITIALIZED_SET
argument_list|)
decl_stmt|;
while|while
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
name|onLinkOpen
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|link
operator|=
name|protonConnection
operator|.
name|linkHead
argument_list|(
name|UNINITIALIZED_SET
argument_list|,
name|INITIALIZED_SET
argument_list|)
expr_stmt|;
block|}
name|Delivery
name|delivery
init|=
name|protonConnection
operator|.
name|getWorkHead
argument_list|()
decl_stmt|;
while|while
condition|(
name|delivery
operator|!=
literal|null
condition|)
block|{
name|AmqpDeliveryListener
name|listener
init|=
operator|(
name|AmqpDeliveryListener
operator|)
name|delivery
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
block|}
name|delivery
operator|=
name|delivery
operator|.
name|getWorkNext
argument_list|()
expr_stmt|;
block|}
name|link
operator|=
name|protonConnection
operator|.
name|linkHead
argument_list|(
name|ACTIVE_STATE
argument_list|,
name|CLOSED_STATE
argument_list|)
expr_stmt|;
while|while
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|AmqpDeliveryListener
operator|)
name|link
operator|.
name|getContext
argument_list|()
operator|)
operator|.
name|onClose
argument_list|()
expr_stmt|;
name|link
operator|.
name|close
argument_list|()
expr_stmt|;
name|link
operator|=
name|link
operator|.
name|next
argument_list|(
name|ACTIVE_STATE
argument_list|,
name|CLOSED_STATE
argument_list|)
expr_stmt|;
block|}
name|link
operator|=
name|protonConnection
operator|.
name|linkHead
argument_list|(
name|ACTIVE_STATE
argument_list|,
name|ALL_STATES
argument_list|)
expr_stmt|;
while|while
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|AmqpDeliveryListener
operator|)
name|link
operator|.
name|getContext
argument_list|()
operator|)
operator|.
name|drainCheck
argument_list|()
expr_stmt|;
name|link
operator|=
name|link
operator|.
name|next
argument_list|(
name|ACTIVE_STATE
argument_list|,
name|CLOSED_STATE
argument_list|)
expr_stmt|;
block|}
name|session
operator|=
name|protonConnection
operator|.
name|sessionHead
argument_list|(
name|ACTIVE_STATE
argument_list|,
name|CLOSED_STATE
argument_list|)
expr_stmt|;
while|while
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
comment|//TODO - close links?
name|onSessionClose
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|=
name|session
operator|.
name|next
argument_list|(
name|ACTIVE_STATE
argument_list|,
name|CLOSED_STATE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|protonConnection
operator|.
name|getLocalState
argument_list|()
operator|==
name|EndpointState
operator|.
name|ACTIVE
operator|&&
name|protonConnection
operator|.
name|getRemoteState
argument_list|()
operator|==
name|EndpointState
operator|.
name|CLOSED
condition|)
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Could not process AMQP commands"
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
name|boolean
name|closing
init|=
literal|false
decl_stmt|;
name|boolean
name|closedSocket
init|=
literal|false
decl_stmt|;
specifier|private
name|void
name|doClose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|closing
operator|=
literal|true
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|connectionId
argument_list|)
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|closedSocket
condition|)
block|{
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onAMQPException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|closedSocket
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AMQP client disconnected"
argument_list|)
expr_stmt|;
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onActiveMQCommand
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|ResponseHandler
name|rh
init|=
name|resposeHandlers
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rh
operator|!=
literal|null
condition|)
block|{
name|rh
operator|.
name|onResponse
argument_list|(
name|this
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pass down any unexpected errors. Should this close the connection?
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|ConsumerContext
name|consumerContext
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerContext
operator|!=
literal|null
condition|)
block|{
name|consumerContext
operator|.
name|onMessageDispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ConnectionError
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
comment|// Pass down any unexpected async errors. Should this close the connection?
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ConnectionError
operator|)
name|command
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
comment|//ignore
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Do not know how to process ActiveMQ Command "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|CONNECTION_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|CONNECTION_ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ConnectionInfo
name|connectionInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
specifier|private
name|long
name|nextSessionId
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|nextTempDestinationId
init|=
literal|0
decl_stmt|;
name|HashMap
argument_list|<
name|Sender
argument_list|,
name|ActiveMQDestination
argument_list|>
name|tempDestinations
init|=
operator|new
name|HashMap
argument_list|<
name|Sender
argument_list|,
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
specifier|abstract
class|class
name|AmqpDeliveryListener
block|{
specifier|abstract
specifier|public
name|void
name|onDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
name|void
name|onClose
parameter_list|()
throws|throws
name|Exception
block|{}
specifier|public
name|void
name|drainCheck
parameter_list|()
block|{}
block|}
specifier|private
name|void
name|onConnectionOpen
parameter_list|()
throws|throws
name|AmqpProtocolException
block|{
name|connectionInfo
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
comment|//        configureInactivityMonitor(connect.keepAlive());
name|String
name|clientId
init|=
name|protonConnection
operator|.
name|getRemoteContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
operator|&&
operator|!
name|clientId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|""
operator|+
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//        String userName = "";
comment|//        if (connect.userName() != null) {
comment|//            userName = connect.userName().toString();
comment|//        }
comment|//        String passswd = "";
comment|//        if (connect.password() != null) {
comment|//            passswd = connect.password().toString();
comment|//        }
comment|//        connectionInfo.setUserName(userName);
comment|//        connectionInfo.setPassword(passswd);
name|connectionInfo
operator|.
name|setTransportContext
argument_list|(
name|amqpTransport
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|connectionInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|protonConnection
operator|.
name|open
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|// TODO: figure out how to close /w an error.
comment|//                    protonConnection.setLocalError(new EndpointError(exception.getClass().getName(), exception.getMessage()));
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
name|amqpTransport
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|onSessionOpen
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|AmqpSessionContext
name|sessionContext
init|=
operator|new
name|AmqpSessionContext
argument_list|(
name|connectionId
argument_list|,
name|nextSessionId
operator|++
argument_list|)
decl_stmt|;
name|session
operator|.
name|setContext
argument_list|(
name|sessionContext
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|SessionInfo
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|onSessionClose
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|AmqpSessionContext
name|sessionContext
init|=
operator|(
name|AmqpSessionContext
operator|)
name|session
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|session
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|onLinkOpen
parameter_list|(
name|Link
name|link
parameter_list|)
block|{
name|link
operator|.
name|setSource
argument_list|(
name|link
operator|.
name|getRemoteSource
argument_list|()
argument_list|)
expr_stmt|;
name|link
operator|.
name|setTarget
argument_list|(
name|link
operator|.
name|getRemoteTarget
argument_list|()
argument_list|)
expr_stmt|;
name|AmqpSessionContext
name|sessionContext
init|=
operator|(
name|AmqpSessionContext
operator|)
name|link
operator|.
name|getSession
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
operator|instanceof
name|Receiver
condition|)
block|{
name|onReceiverOpen
argument_list|(
operator|(
name|Receiver
operator|)
name|link
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onSenderOpen
argument_list|(
operator|(
name|Sender
operator|)
name|link
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|//InboundTransformer inboundTransformer = new AMQPNativeInboundTransformer(ActiveMQJMSVendor.INSTANCE);
name|InboundTransformer
name|inboundTransformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
specifier|abstract
class|class
name|BaseProducerContext
extends|extends
name|AmqpDeliveryListener
block|{
name|ByteArrayOutputStream
name|current
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
block|{
name|Receiver
name|receiver
init|=
operator|(
operator|(
name|Receiver
operator|)
name|delivery
operator|.
name|getLink
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|delivery
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"it was not readable!"
argument_list|)
expr_stmt|;
comment|//                delivery.settle();
comment|//                receiver.advance();
return|return;
block|}
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|current
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
name|int
name|count
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|receiver
operator|.
name|recv
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|current
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// Expecting more deliveries..
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|receiver
operator|.
name|advance
argument_list|()
expr_stmt|;
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|Buffer
name|buffer
init|=
name|current
operator|.
name|toBuffer
argument_list|()
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
name|onMessage
argument_list|(
name|receiver
argument_list|,
name|delivery
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|abstract
specifier|protected
name|void
name|onMessage
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
name|Delivery
name|delivery
parameter_list|,
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
class|class
name|ProducerContext
extends|extends
name|BaseProducerContext
block|{
specifier|private
specifier|final
name|ProducerId
name|producerId
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|ProducerContext
parameter_list|(
name|ProducerId
name|producerId
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|producerId
operator|=
name|producerId
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMessage
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
name|Delivery
name|delivery
parameter_list|,
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
name|EncodedMessage
name|em
init|=
operator|new
name|EncodedMessage
argument_list|(
name|delivery
operator|.
name|getMessageFormat
argument_list|()
argument_list|,
name|buffer
operator|.
name|data
argument_list|,
name|buffer
operator|.
name|offset
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|inboundTransformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getDestination
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setJMSDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|producerId
argument_list|,
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DeliveryState
name|remoteState
init|=
name|delivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteState
operator|!=
literal|null
operator|&&
name|remoteState
operator|instanceof
name|TransactionalState
condition|)
block|{
name|TransactionalState
name|s
init|=
operator|(
name|TransactionalState
operator|)
name|remoteState
decl_stmt|;
name|long
name|txid
init|=
name|toLong
argument_list|(
name|s
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|onSend
argument_list|()
expr_stmt|;
comment|//            sendToActiveMQ(message, createResponseHandler(command));
name|sendToActiveMQ
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|nextTransactionId
init|=
literal|0
decl_stmt|;
class|class
name|Transaction
block|{      }
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Transaction
argument_list|>
name|transactions
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Transaction
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|data
return|;
block|}
specifier|private
name|long
name|toLong
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
name|value
operator|.
name|getArray
argument_list|()
argument_list|,
name|value
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buffer
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|readLong
argument_list|()
return|;
block|}
name|AmqpDeliveryListener
name|coordinatorContext
init|=
operator|new
name|BaseProducerContext
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onMessage
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
specifier|final
name|Delivery
name|delivery
parameter_list|,
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|buffer
operator|.
name|offset
decl_stmt|;
name|int
name|len
init|=
name|buffer
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|decoded
init|=
name|msg
operator|.
name|decode
argument_list|(
name|buffer
operator|.
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
assert|assert
name|decoded
operator|>
literal|0
operator|:
literal|"Make progress decoding the message"
assert|;
name|offset
operator|+=
name|decoded
expr_stmt|;
name|len
operator|-=
name|decoded
expr_stmt|;
block|}
name|Object
name|action
init|=
operator|(
operator|(
name|AmqpValue
operator|)
name|msg
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"COORDINATOR received: "
operator|+
name|action
operator|+
literal|", ["
operator|+
name|buffer
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|instanceof
name|Declare
condition|)
block|{
name|Declare
name|declare
init|=
operator|(
name|Declare
operator|)
name|action
decl_stmt|;
if|if
condition|(
name|declare
operator|.
name|getGlobalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"don't know how to handle a declare /w a set GlobalId"
argument_list|)
throw|;
block|}
name|long
name|txid
init|=
name|nextTransactionId
operator|++
decl_stmt|;
name|TransactionInfo
name|txinfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionId
argument_list|,
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
argument_list|,
name|TransactionInfo
operator|.
name|BEGIN
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|txinfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"started transaction "
operator|+
name|txid
argument_list|)
expr_stmt|;
name|Declared
name|declared
init|=
operator|new
name|Declared
argument_list|()
decl_stmt|;
name|declared
operator|.
name|setTxnId
argument_list|(
operator|new
name|Binary
argument_list|(
name|toBytes
argument_list|(
name|txid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|declared
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|instanceof
name|Discharge
condition|)
block|{
name|Discharge
name|discharge
init|=
operator|(
name|Discharge
operator|)
name|action
decl_stmt|;
name|long
name|txid
init|=
name|toLong
argument_list|(
name|discharge
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|byte
name|operation
decl_stmt|;
if|if
condition|(
name|discharge
operator|.
name|getFail
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"rollback transaction "
operator|+
name|txid
argument_list|)
expr_stmt|;
name|operation
operator|=
name|TransactionInfo
operator|.
name|ROLLBACK
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"commit transaction "
operator|+
name|txid
argument_list|)
expr_stmt|;
name|operation
operator|=
name|TransactionInfo
operator|.
name|COMMIT_ONE_PHASE
expr_stmt|;
block|}
name|TransactionInfo
name|txinfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionId
argument_list|,
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
argument_list|,
name|operation
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|txinfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|er
init|=
operator|(
name|ExceptionResponse
operator|)
name|response
decl_stmt|;
name|Rejected
name|rejected
init|=
operator|new
name|Rejected
argument_list|()
decl_stmt|;
name|ArrayList
name|errors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|er
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|rejected
operator|.
name|setError
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|rejected
argument_list|)
expr_stmt|;
block|}
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected coordinator message type: "
operator|+
name|action
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|void
name|onReceiverOpen
parameter_list|(
specifier|final
name|Receiver
name|receiver
parameter_list|,
name|AmqpSessionContext
name|sessionContext
parameter_list|)
block|{
comment|// Client is producing to this receiver object
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|transport
operator|.
name|Target
name|remoteTarget
init|=
name|receiver
operator|.
name|getRemoteTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteTarget
operator|instanceof
name|Coordinator
condition|)
block|{
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|setContext
argument_list|(
name|coordinatorContext
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
literal|1024
operator|*
literal|64
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|open
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|,
name|sessionContext
operator|.
name|nextProducerId
operator|++
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
name|createDestination
argument_list|(
name|remoteTarget
argument_list|)
decl_stmt|;
name|ProducerContext
name|producerContext
init|=
operator|new
name|ProducerContext
argument_list|(
name|producerId
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|setContext
argument_list|(
name|producerContext
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
literal|1024
operator|*
literal|64
argument_list|)
expr_stmt|;
name|ProducerInfo
name|producerInfo
init|=
operator|new
name|ProducerInfo
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
name|producerInfo
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|producerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|receiver
operator|.
name|open
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// If the connection attempt fails we close the socket.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|receiver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ActiveMQDestination
name|createDestination
parameter_list|(
name|Object
name|terminus
parameter_list|)
block|{
if|if
condition|(
name|terminus
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|terminus
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Source
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Source
name|source
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Source
operator|)
name|terminus
decl_stmt|;
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|source
operator|.
name|getAddress
argument_list|()
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|terminus
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Target
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Target
name|target
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Target
operator|)
name|terminus
decl_stmt|;
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|target
operator|.
name|getAddress
argument_list|()
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|terminus
operator|instanceof
name|Coordinator
condition|)
block|{
name|Coordinator
name|target
init|=
operator|(
name|Coordinator
operator|)
name|terminus
decl_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected terminus type: "
operator|+
name|terminus
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Source
name|createSource
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Source
name|rc
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Source
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setAddress
argument_list|(
name|inboundTransformer
operator|.
name|getVendor
argument_list|()
operator|.
name|toAddress
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
name|OutboundTransformer
name|outboundTransformer
init|=
operator|new
name|AutoOutboundTransformer
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
class|class
name|ConsumerContext
extends|extends
name|AmqpDeliveryListener
block|{
specifier|private
specifier|final
name|ConsumerId
name|consumerId
decl_stmt|;
specifier|private
specifier|final
name|Sender
name|sender
decl_stmt|;
specifier|private
name|boolean
name|presettle
decl_stmt|;
specifier|public
name|ConsumerContext
parameter_list|(
name|ConsumerId
name|consumerId
parameter_list|,
name|Sender
name|sender
parameter_list|)
block|{
name|this
operator|.
name|consumerId
operator|=
name|consumerId
expr_stmt|;
name|this
operator|.
name|sender
operator|=
name|sender
expr_stmt|;
name|this
operator|.
name|presettle
operator|=
name|sender
operator|.
name|getRemoteSenderSettleMode
argument_list|()
operator|==
name|SenderSettleMode
operator|.
name|SETTLED
expr_stmt|;
block|}
name|long
name|nextTagId
init|=
literal|0
decl_stmt|;
name|HashSet
argument_list|<
name|byte
index|[]
argument_list|>
name|tagCache
init|=
operator|new
name|HashSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|nextTag
parameter_list|()
block|{
name|byte
index|[]
name|rc
decl_stmt|;
if|if
condition|(
name|tagCache
operator|!=
literal|null
operator|&&
operator|!
name|tagCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iterator
init|=
name|tagCache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|rc
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|rc
operator|=
name|Long
operator|.
name|toHexString
argument_list|(
name|nextTagId
operator|++
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|rc
return|;
block|}
name|void
name|checkinTag
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|tagCache
operator|.
name|size
argument_list|()
operator|<
literal|1024
condition|)
block|{
name|tagCache
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|()
throws|throws
name|Exception
block|{
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|consumerId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
name|outbound
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|()
decl_stmt|;
comment|// called when the connection receives a JMS message from ActiveMQ
specifier|public
name|void
name|onMessageDispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
throws|throws
name|Exception
block|{
name|outbound
operator|.
name|addLast
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|pumpOutbound
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
name|Buffer
name|currentBuffer
decl_stmt|;
name|Delivery
name|currentDelivery
decl_stmt|;
specifier|public
name|void
name|pumpOutbound
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
literal|true
condition|)
block|{
while|while
condition|(
name|currentBuffer
operator|!=
literal|null
condition|)
block|{
name|int
name|sent
init|=
name|sender
operator|.
name|send
argument_list|(
name|currentBuffer
operator|.
name|data
argument_list|,
name|currentBuffer
operator|.
name|offset
argument_list|,
name|currentBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|sent
operator|>
literal|0
condition|)
block|{
name|currentBuffer
operator|.
name|moveHead
argument_list|(
name|sent
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentBuffer
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|presettle
condition|)
block|{
name|settle
argument_list|(
name|currentDelivery
argument_list|,
name|MessageAck
operator|.
name|INDIVIDUAL_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
name|currentBuffer
operator|=
literal|null
expr_stmt|;
name|currentDelivery
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
return|return;
block|}
block|}
if|if
condition|(
name|outbound
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|MessageDispatch
name|md
init|=
name|outbound
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|ActiveMQMessage
name|jms
init|=
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|jms
operator|.
name|setRedeliveryCounter
argument_list|(
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|EncodedMessage
name|amqp
init|=
name|outboundTransformer
operator|.
name|transform
argument_list|(
name|jms
argument_list|)
decl_stmt|;
if|if
condition|(
name|amqp
operator|!=
literal|null
operator|&&
name|amqp
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentBuffer
operator|=
operator|new
name|Buffer
argument_list|(
name|amqp
operator|.
name|getArray
argument_list|()
argument_list|,
name|amqp
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|amqp
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|presettle
condition|)
block|{
name|currentDelivery
operator|=
name|sender
operator|.
name|delivery
argument_list|(
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|byte
index|[]
name|tag
init|=
name|nextTag
argument_list|()
decl_stmt|;
name|currentDelivery
operator|=
name|sender
operator|.
name|delivery
argument_list|(
name|tag
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|currentDelivery
operator|.
name|setContext
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: message could not be generated what now?
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|settle
parameter_list|(
specifier|final
name|Delivery
name|delivery
parameter_list|,
name|int
name|ackType
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|tag
init|=
name|delivery
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
operator|&&
name|tag
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|checkinTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ackType
operator|==
operator|-
literal|1
condition|)
block|{
comment|// we are going to settle, but redeliver.. we we won't yet ack to ActiveMQ
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|onMessageDispatch
argument_list|(
operator|(
name|MessageDispatch
operator|)
name|delivery
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|delivery
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setConsumerId
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setFirstMessageId
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setLastMessageId
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
operator|(
name|byte
operator|)
name|ackType
argument_list|)
expr_stmt|;
name|DeliveryState
name|remoteState
init|=
name|delivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteState
operator|!=
literal|null
operator|&&
name|remoteState
operator|instanceof
name|TransactionalState
condition|)
block|{
name|TransactionalState
name|s
init|=
operator|(
name|TransactionalState
operator|)
name|remoteState
decl_stmt|;
name|long
name|txid
init|=
name|toLong
argument_list|(
name|s
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|drainCheck
parameter_list|()
block|{
if|if
condition|(
name|outbound
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sender
operator|.
name|drained
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|delivery
operator|.
name|getContext
argument_list|()
decl_stmt|;
specifier|final
name|DeliveryState
name|state
init|=
name|delivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|Accepted
condition|)
block|{
if|if
condition|(
operator|!
name|delivery
operator|.
name|remotelySettled
argument_list|()
condition|)
block|{
name|delivery
operator|.
name|disposition
argument_list|(
operator|new
name|Accepted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|settle
argument_list|(
name|delivery
argument_list|,
name|MessageAck
operator|.
name|INDIVIDUAL_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Rejected
condition|)
block|{
comment|// re-deliver /w incremented delivery counter.
name|md
operator|.
name|setRedeliveryCounter
argument_list|(
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|settle
argument_list|(
name|delivery
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Released
condition|)
block|{
comment|// re-deliver&& don't increment the counter.
name|settle
argument_list|(
name|delivery
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Modified
condition|)
block|{
name|Modified
name|modified
init|=
operator|(
name|Modified
operator|)
name|state
decl_stmt|;
if|if
condition|(
name|modified
operator|.
name|getDeliveryFailed
argument_list|()
condition|)
block|{
comment|// increment delivery counter..
name|md
operator|.
name|setRedeliveryCounter
argument_list|(
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|byte
name|ackType
init|=
operator|-
literal|1
decl_stmt|;
name|Boolean
name|undeliverableHere
init|=
name|modified
operator|.
name|getUndeliverableHere
argument_list|()
decl_stmt|;
if|if
condition|(
name|undeliverableHere
operator|!=
literal|null
operator|&&
name|undeliverableHere
condition|)
block|{
comment|// receiver does not want the message..
comment|// perhaps we should DLQ it?
name|ackType
operator|=
name|MessageAck
operator|.
name|POSION_ACK_TYPE
expr_stmt|;
block|}
name|settle
argument_list|(
name|delivery
argument_list|,
name|ackType
argument_list|)
expr_stmt|;
block|}
name|pumpOutbound
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerContext
argument_list|>
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerContext
argument_list|>
argument_list|()
decl_stmt|;
name|void
name|onSenderOpen
parameter_list|(
specifier|final
name|Sender
name|sender
parameter_list|,
name|AmqpSessionContext
name|sessionContext
parameter_list|)
block|{
comment|// sender.get
name|ConsumerId
name|id
init|=
operator|new
name|ConsumerId
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|,
name|sessionContext
operator|.
name|nextConsumerId
operator|++
argument_list|)
decl_stmt|;
name|ConsumerContext
name|consumerContext
init|=
operator|new
name|ConsumerContext
argument_list|(
name|id
argument_list|,
name|sender
argument_list|)
decl_stmt|;
name|subscriptionsByConsumerId
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|consumerContext
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|dest
decl_stmt|;
specifier|final
name|Source
name|remoteSource
init|=
name|sender
operator|.
name|getRemoteSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteSource
operator|!=
literal|null
condition|)
block|{
name|dest
operator|=
name|createDestination
argument_list|(
name|remoteSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets create a temp dest.
comment|//            if (topic) {
comment|//                dest = new ActiveMQTempTopic(info.getConnectionId(), tempDestinationIdGenerator.getNextSequenceId());
comment|//            } else {
name|dest
operator|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionId
argument_list|,
name|nextTempDestinationId
operator|++
argument_list|)
expr_stmt|;
comment|//            }
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tempDestinations
operator|.
name|put
argument_list|(
name|sender
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setSource
argument_list|(
name|createSource
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sender
operator|.
name|setContext
argument_list|(
name|consumerContext
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
operator|new
name|ConsumerInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setDispatchAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
name|filter
init|=
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|type
operator|.
name|messaging
operator|.
name|Source
operator|)
name|remoteSource
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|DescribedType
name|type
init|=
operator|(
name|DescribedType
operator|)
name|filter
operator|.
name|get
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"jms-selector"
argument_list|)
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSelector
argument_list|(
name|type
operator|.
name|getDescribed
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
name|consumerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|sender
operator|.
name|open
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|//    void onUnSubscribe(UNSUBSCRIBE command) {
comment|//        UTF8Buffer[] topics = command.topics();
comment|//        if (topics != null) {
comment|//            for (int i = 0; i< topics.length; i++) {
comment|//                onUnSubscribe(topics[i]);
comment|//            }
comment|//        }
comment|//        UNSUBACK ack = new UNSUBACK();
comment|//        ack.messageId(command.messageId());
comment|//        pumpOut(ack.encode());
comment|//
comment|//    }
comment|//
comment|//    void onUnSubscribe(UTF8Buffer topicName) {
comment|//        AmqpSubscription subs = amqpSubscriptionByTopic.remove(topicName);
comment|//        if (subs != null) {
comment|//            ConsumerInfo info = subs.getConsumerInfo();
comment|//            if (info != null) {
comment|//                subscriptionsByConsumerId.remove(info.getConsumerId());
comment|//            }
comment|//            RemoveInfo removeInfo = info.createRemoveCommand();
comment|//            sendToActiveMQ(removeInfo, null);
comment|//        }
comment|//    }
comment|//
comment|//
comment|//    /**
comment|//     * Dispatch a ActiveMQ command
comment|//     */
comment|//
comment|//
comment|//
comment|//    void onAMQPPublish(PUBLISH command) throws IOException, JMSException {
comment|//        checkConnected();
comment|//    }
comment|//
comment|//    void onAMQPPubAck(PUBACK command) {
comment|//        short messageId = command.messageId();
comment|//        MessageAck ack;
comment|//        synchronized (consumerAcks) {
comment|//            ack = consumerAcks.remove(messageId);
comment|//        }
comment|//        if (ack != null) {
comment|//            amqpTransport.sendToActiveMQ(ack);
comment|//        }
comment|//    }
comment|//
comment|//    void onAMQPPubRec(PUBREC commnand) {
comment|//        //from a subscriber - send a PUBREL in response
comment|//        PUBREL pubrel = new PUBREL();
comment|//        pubrel.messageId(commnand.messageId());
comment|//        pumpOut(pubrel.encode());
comment|//    }
comment|//
comment|//    void onAMQPPubRel(PUBREL command) {
comment|//        PUBREC ack;
comment|//        synchronized (publisherRecs) {
comment|//            ack = publisherRecs.remove(command.messageId());
comment|//        }
comment|//        if (ack == null) {
comment|//            LOG.warn("Unknown PUBREL: " + command.messageId() + " received");
comment|//        }
comment|//        PUBCOMP pubcomp = new PUBCOMP();
comment|//        pubcomp.messageId(command.messageId());
comment|//        pumpOut(pubcomp.encode());
comment|//    }
comment|//
comment|//    void onAMQPPubComp(PUBCOMP command) {
comment|//        short messageId = command.messageId();
comment|//        MessageAck ack;
comment|//        synchronized (consumerAcks) {
comment|//            ack = consumerAcks.remove(messageId);
comment|//        }
comment|//        if (ack != null) {
comment|//            amqpTransport.sendToActiveMQ(ack);
comment|//        }
comment|//    }
comment|//
comment|//
comment|//
comment|//
comment|//    public AmqpTransport amqpTransport {
comment|//        return amqpTransport;
comment|//    }
comment|//
comment|//
comment|//
comment|//    void configureInactivityMonitor(short heartBeat) {
comment|//        try {
comment|//
comment|//            int heartBeatMS = heartBeat * 1000;
comment|//            AmqpInactivityMonitor monitor = amqpTransport.getInactivityMonitor();
comment|//            monitor.setProtocolConverter(this);
comment|//            monitor.setReadCheckTime(heartBeatMS);
comment|//            monitor.setInitialDelayTime(heartBeatMS);
comment|//            monitor.startMonitorThread();
comment|//
comment|//        } catch (Exception ex) {
comment|//            LOG.warn("Failed to start AMQP InactivityMonitor ", ex);
comment|//        }
comment|//
comment|//        LOG.debug(getClientId() + " AMQP Connection using heart beat of  " + heartBeat + " secs");
comment|//    }
comment|//
comment|//
comment|//
comment|//    void checkConnected() throws AmqpProtocolException {
comment|//        if (!connected.get()) {
comment|//            throw new AmqpProtocolException("Not connected.");
comment|//        }
comment|//    }
comment|//
comment|//    private String getClientId() {
comment|//        if (clientId == null) {
comment|//            if (connect != null&& connect.clientId() != null) {
comment|//                clientId = connect.clientId().toString();
comment|//            }
comment|//        } else {
comment|//            clientId = "";
comment|//        }
comment|//        return clientId;
comment|//    }
comment|//
comment|//    private void stopTransport() {
comment|//        try {
comment|//            amqpTransport.stop();
comment|//        } catch (Throwable e) {
comment|//            LOG.debug("Failed to stop AMQP transport ", e);
comment|//        }
comment|//    }
comment|//
comment|//    ResponseHandler createResponseHandler(final PUBLISH command) {
comment|//
comment|//        if (command != null) {
comment|//            switch (command.qos()) {
comment|//                case AT_LEAST_ONCE:
comment|//                    return new ResponseHandler() {
comment|//                        public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
comment|//                            if (response.isException()) {
comment|//                                LOG.warn("Failed to send AMQP Publish: ", command, ((ExceptionResponse) response).getException());
comment|//                            } else {
comment|//                                PUBACK ack = new PUBACK();
comment|//                                ack.messageId(command.messageId());
comment|//                                converter.amqpTransport.sendToAmqp(ack.encode());
comment|//                            }
comment|//                        }
comment|//                    };
comment|//                case EXACTLY_ONCE:
comment|//                    return new ResponseHandler() {
comment|//                        public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
comment|//                            if (response.isException()) {
comment|//                                LOG.warn("Failed to send AMQP Publish: ", command, ((ExceptionResponse) response).getException());
comment|//                            } else {
comment|//                                PUBREC ack = new PUBREC();
comment|//                                ack.messageId(command.messageId());
comment|//                                synchronized (publisherRecs) {
comment|//                                    publisherRecs.put(command.messageId(), ack);
comment|//                                }
comment|//                                converter.amqpTransport.sendToAmqp(ack.encode());
comment|//                            }
comment|//                        }
comment|//                    };
comment|//                case AT_MOST_ONCE:
comment|//                    break;
comment|//            }
comment|//        }
comment|//        return null;
comment|//    }
comment|//
comment|//    private String convertAMQPToActiveMQ(String name) {
comment|//        String result = name.replace('#', '>');
comment|//        result = result.replace('+', '*');
comment|//        result = result.replace('/', '.');
comment|//        return result;
comment|//    }
comment|////////////////////////////////////////////////////////////////////////////
comment|//
comment|// Implementation methods
comment|//
comment|////////////////////////////////////////////////////////////////////////////
specifier|private
specifier|final
name|Object
name|commnadIdMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastCommandId
decl_stmt|;
name|int
name|generateCommandId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commnadIdMutex
init|)
block|{
return|return
name|lastCommandId
operator|++
return|;
block|}
block|}
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
name|resposeHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
argument_list|()
decl_stmt|;
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|,
name|ResponseHandler
name|handler
parameter_list|)
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|generateCommandId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resposeHandlers
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|amqpTransport
operator|.
name|sendToActiveMQ
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception detail"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|amqpTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop AMQP Transport "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

