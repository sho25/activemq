begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MarshallingSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_comment
comment|/**  * A<CODE>MapMessage</CODE> object is used to send a set of name-value pairs.  * The names are<CODE>String</CODE> objects, and the values are primitive  * data types in the Java programming language. The names must have a value that  * is not null, and not an empty string. The entries can be accessed  * sequentially or randomly by name. The order of the entries is undefined.  *<CODE>MapMessage</CODE> inherits from the<CODE>Message</CODE> interface  * and adds a message body that contains a Map.  *<P>  * The primitive types can be read or written explicitly using methods for each  * type. They may also be read or written generically as objects. For instance,  * a call to<CODE>MapMessage.setInt("foo", 6)</CODE> is equivalent to  *<CODE> MapMessage.setObject("foo", new Integer(6))</CODE>. Both forms are  * provided, because the explicit form is convenient for static programming, and  * the object form is needed when types are not known at compile time.  *<P>  * When a client receives a<CODE>MapMessage</CODE>, it is in read-only mode.  * If a client attempts to write to the message at this point, a  *<CODE>MessageNotWriteableException</CODE> is thrown. If  *<CODE>clearBody</CODE> is called, the message can now be both read from and  * written to.  *<P>  *<CODE>MapMessage</CODE> objects support the following conversion table. The  * marked cases must be supported. The unmarked cases must throw a  *<CODE>JMSException</CODE>. The<CODE>String</CODE> -to-primitive  * conversions may throw a runtime exception if the primitive's  *<CODE>valueOf()</CODE> method does not accept it as a valid  *<CODE> String</CODE> representation of the primitive.  *<P>  * A value written as the row type can be read as the column type.<p/>  *  *<PRE>  * | | boolean byte short char int long float double String byte[] |----------------------------------------------------------------------  * |boolean | X X |byte | X X X X X |short | X X X X |char | X X |int | X X X |long | X X |float | X X X |double | X X  * |String | X X X X X X X X |byte[] | X |----------------------------------------------------------------------  *&lt;p/&gt;  *</PRE>  *  *<p/>  *<P>  * Attempting to read a null value as a primitive type must be treated as  * calling the primitive's corresponding<code>valueOf(String)</code>  * conversion method with a null value. Since<code>char</code> does not  * support a<code>String</code> conversion, attempting to read a null value  * as a<code>char</code> must throw a<code>NullPointerException</code>.  *  * @openwire:marshaller code="25"  * @see javax.jms.Session#createMapMessage()  * @see javax.jms.BytesMessage  * @see javax.jms.Message  * @see javax.jms.ObjectMessage  * @see javax.jms.StreamMessage  * @see javax.jms.TextMessage  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQMapMessage
extends|extends
name|ActiveMQMessage
implements|implements
name|MapMessage
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|ACTIVEMQ_MAP_MESSAGE
decl_stmt|;
specifier|protected
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Object
name|readResolve
parameter_list|()
throws|throws
name|ObjectStreamException
block|{
if|if
condition|(
name|this
operator|.
name|map
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|copy
parameter_list|()
block|{
name|ActiveMQMapMessage
name|copy
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|ActiveMQMapMessage
name|copy
parameter_list|)
block|{
name|storeContent
argument_list|()
expr_stmt|;
name|super
operator|.
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
comment|// We only need to marshal the content if we are hitting the wire.
annotation|@
name|Override
specifier|public
name|void
name|beforeMarshall
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|beforeMarshall
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|storeContent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearMarshalledState
parameter_list|()
throws|throws
name|JMSException
block|{
name|super
operator|.
name|clearMarshalledState
argument_list|()
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeContent
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|getContent
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
name|bytesOut
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
name|getConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
name|connection
operator|.
name|isUseCompression
argument_list|()
condition|)
block|{
name|compressed
operator|=
literal|true
expr_stmt|;
name|os
operator|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|DataOutputStream
name|dataOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|MarshallingSupport
operator|.
name|marshalPrimitiveMap
argument_list|(
name|map
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|setContent
argument_list|(
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Builds the message body from data      *      * @throws JMSException      * @throws IOException      */
specifier|private
name|void
name|loadContent
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|getContent
argument_list|()
operator|!=
literal|null
operator|&&
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ByteSequence
name|content
init|=
name|getContent
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCompressed
argument_list|()
condition|)
block|{
name|is
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|DataInputStream
name|dataIn
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|map
operator|=
name|MarshallingSupport
operator|.
name|unmarshalPrimitiveMap
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJMSXMimeType
parameter_list|()
block|{
return|return
literal|"jms/map-message"
return|;
block|}
comment|/**      * Clears out the message body. Clearing a message's body does not clear its      * header values or property entries.      *<P>      * If this message body was read-only, calling this method leaves the      * message body in the same state as an empty body in a newly created      * message.      */
annotation|@
name|Override
specifier|public
name|void
name|clearBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|super
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the<CODE>boolean</CODE> value with the specified name.      *      * @param name the name of the<CODE>boolean</CODE>      * @return the<CODE>boolean</CODE> value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a boolean from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the<CODE>byte</CODE> value with the specified name.      *      * @param name the name of the<CODE>byte</CODE>      * @return the<CODE>byte</CODE> value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|byte
name|getByte
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
operator|(
name|Byte
operator|)
name|value
operator|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
condition|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a byte from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the<CODE>short</CODE> value with the specified name.      *      * @param name the name of the<CODE>short</CODE>      * @return the<CODE>short</CODE> value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|short
name|getShort
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
return|return
operator|(
operator|(
name|Short
operator|)
name|value
operator|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
operator|(
name|Byte
operator|)
name|value
operator|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
condition|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a short from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the Unicode character value with the specified name.      *      * @param name the name of the Unicode character      * @return the Unicode character value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|char
name|getChar
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Character
condition|)
block|{
return|return
operator|(
operator|(
name|Character
operator|)
name|value
operator|)
operator|.
name|charValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a short from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the<CODE>int</CODE> value with the specified name.      *      * @param name the name of the<CODE>int</CODE>      * @return the<CODE>int</CODE> value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
return|return
operator|(
operator|(
name|Short
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
operator|(
name|Byte
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read an int from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the<CODE>long</CODE> value with the specified name.      *      * @param name the name of the<CODE>long</CODE>      * @return the<CODE>long</CODE> value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
return|return
operator|(
operator|(
name|Short
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
operator|(
name|Byte
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a long from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the<CODE>float</CODE> value with the specified name.      *      * @param name the name of the<CODE>float</CODE>      * @return the<CODE>float</CODE> value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
operator|(
name|Float
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a float from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the<CODE>double</CODE> value with the specified name.      *      * @param name the name of the<CODE>double</CODE>      * @return the<CODE>double</CODE> value with the specified name      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|double
name|getDouble
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
operator|(
name|Float
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a double from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the<CODE>String</CODE> value with the specified name.      *      * @param name the name of the<CODE>String</CODE>      * @return the<CODE>String</CODE> value with the specified name; if there      *         is no item by this name, a null value is returned      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Use getBytes to read a byte array"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the byte array value with the specified name.      *      * @param name the name of the byte array      * @return a copy of the byte array value with the specified name; if there      *         is no item by this name, a null value is returned.      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      * @throws MessageFormatException if this type conversion is invalid.      */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|value
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" cannot read a byte[] from "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the value of the object with the specified name.      *<P>      * This method can be used to return, in objectified format, an object in      * the Java programming language ("Java object") that had been stored in the      * Map with the equivalent<CODE>setObject</CODE> method call, or its      * equivalent primitive<CODE>set<I>type</I></CODE> method.      *<P>      * Note that byte values are returned as<CODE>byte[]</CODE>, not      *<CODE>Byte[]</CODE>.      *      * @param name the name of the Java object      * @return a copy of the Java object value with the specified name, in      *         objectified format (for example, if the object was set as an      *<CODE>int</CODE>, an<CODE>Integer</CODE> is returned); if      *         there is no item by this name, a null value is returned      * @throws JMSException if the JMS provider fails to read the message due to      *                 some internal error.      */
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|UTF8Buffer
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Returns an<CODE>Enumeration</CODE> of all the names in the      *<CODE>MapMessage</CODE> object.      *      * @return an enumeration of all the names in this<CODE>MapMessage</CODE>      * @throws JMSException      */
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getMapNames
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The name of the property cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The name of the property cannot be an emprty string."
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a<CODE>boolean</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>boolean</CODE>      * @param value the<CODE>boolean</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setBoolean
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|value
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a<CODE>byte</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>byte</CODE>      * @param value the<CODE>byte</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setByte
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a<CODE>short</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>short</CODE>      * @param value the<CODE>short</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setShort
parameter_list|(
name|String
name|name
parameter_list|,
name|short
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a Unicode character value with the specified name into the Map.      *      * @param name the name of the Unicode character      * @param value the Unicode character value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setChar
parameter_list|(
name|String
name|name
parameter_list|,
name|char
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|Character
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets an<CODE>int</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>int</CODE>      * @param value the<CODE>int</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setInt
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a<CODE>long</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>long</CODE>      * @param value the<CODE>long</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setLong
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a<CODE>float</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>float</CODE>      * @param value the<CODE>float</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Float
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a<CODE>double</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>double</CODE>      * @param value the<CODE>double</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Double
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a<CODE>String</CODE> value with the specified name into the Map.      *      * @param name the name of the<CODE>String</CODE>      * @param value the<CODE>String</CODE> value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a byte array value with the specified name into the Map.      *      * @param name the name of the byte array      * @param value the byte array value to set in the Map; the array is copied      *                so that the value for<CODE>name</CODE> will not be      *                altered by future modifications      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws NullPointerException if the name is null, or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setBytes
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets a portion of the byte array value with the specified name into the      * Map.      *      * @param name the name of the byte array      * @param value the byte array value to set in the Map      * @param offset the initial offset within the byte array      * @param length the number of bytes to use      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setBytes
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets an object value with the specified name into the Map.      *<P>      * This method works only for the objectified primitive object types (<code>Integer</code>,<code>Double</code>,      *<code>Long</code>&nbsp;...),<code>String</code> objects, and byte      * arrays.      *      * @param name the name of the Java object      * @param value the Java object value to set in the Map      * @throws JMSException if the JMS provider fails to write the message due      *                 to some internal error.      * @throws IllegalArgumentException if the name is null or if the name is an      *                 empty string.      * @throws MessageFormatException if the object is invalid.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
annotation|@
name|Override
specifier|public
name|void
name|setObject
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// byte[] not allowed on properties
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|byte
index|[]
operator|)
condition|)
block|{
name|checkValidObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Indicates whether an item exists in this<CODE>MapMessage</CODE>      * object.      *      * @param name the name of the item to test      * @return true if the item exists      * @throws JMSException if the JMS provider fails to determine if the item      *                 exists due to some internal error.      */
annotation|@
name|Override
specifier|public
name|boolean
name|itemExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|void
name|initializeReading
parameter_list|()
throws|throws
name|JMSException
block|{
name|loadContent
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initializeWriting
parameter_list|()
throws|throws
name|MessageNotWriteableException
block|{
name|checkReadOnlyBody
argument_list|()
expr_stmt|;
name|setContent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compress
parameter_list|()
throws|throws
name|IOException
block|{
name|storeContent
argument_list|()
expr_stmt|;
name|super
operator|.
name|compress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" ActiveMQMapMessage{ "
operator|+
literal|"theTable = "
operator|+
name|map
operator|+
literal|" }"
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getContentMap
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

