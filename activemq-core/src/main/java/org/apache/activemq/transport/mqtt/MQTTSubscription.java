begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_comment
comment|/**  * Keeps track of the STOMP subscription so that acking is correctly done.  */
end_comment

begin_class
specifier|public
class|class
name|MQTTSubscription
block|{
specifier|protected
specifier|final
name|MQTTProtocolConverter
name|protocolConverter
decl_stmt|;
specifier|protected
specifier|final
name|String
name|subscriptionId
decl_stmt|;
specifier|protected
specifier|final
name|ConsumerInfo
name|consumerInfo
decl_stmt|;
specifier|protected
specifier|final
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|MessageDispatch
argument_list|>
name|dispatchedMessage
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|MessageDispatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
name|unconsumedMessage
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|protected
name|String
name|transformation
decl_stmt|;
specifier|public
name|MQTTSubscription
parameter_list|(
name|MQTTProtocolConverter
name|protocolConverter
parameter_list|,
name|String
name|subscriptionId
parameter_list|,
name|ConsumerInfo
name|consumerInfo
parameter_list|,
name|String
name|transformation
parameter_list|)
block|{
name|this
operator|.
name|protocolConverter
operator|=
name|protocolConverter
expr_stmt|;
name|this
operator|.
name|subscriptionId
operator|=
name|subscriptionId
expr_stmt|;
name|this
operator|.
name|consumerInfo
operator|=
name|consumerInfo
expr_stmt|;
name|this
operator|.
name|transformation
operator|=
name|transformation
expr_stmt|;
block|}
name|void
name|onMessageDispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|/*         if (ackMode == CLIENT_ACK) {             synchronized (this) {                 dispatchedMessage.put(message.getMessageId(), md);             }         } else if (ackMode == INDIVIDUAL_ACK) {             synchronized (this) {                 dispatchedMessage.put(message.getMessageId(), md);             }         } else if (ackMode == AUTO_ACK) {             MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);             protocolConverter.getStompTransport().sendToActiveMQ(ack);         }         */
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|protocolConverter
operator|.
name|getMQTTTransport
argument_list|()
operator|.
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|MQTTFrame
name|command
init|=
name|protocolConverter
operator|.
name|convertMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|protocolConverter
operator|.
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSubscriptionId
parameter_list|()
block|{
return|return
name|subscriptionId
return|;
block|}
specifier|public
name|void
name|setDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
specifier|public
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|ConsumerInfo
name|getConsumerInfo
parameter_list|()
block|{
return|return
name|consumerInfo
return|;
block|}
block|}
end_class

end_unit

