begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|endpoint
operator|.
name|MessageEndpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|cglib
operator|.
name|MockObjectTestCase
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|ServerSessionImplTest
extends|extends
name|MockObjectTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_URL
init|=
literal|"vm://localhost"
decl_stmt|;
specifier|private
name|ServerSessionImpl
name|serverSession
decl_stmt|;
specifier|private
name|Mock
name|pool
decl_stmt|;
specifier|private
name|Mock
name|workManager
decl_stmt|;
specifier|private
name|MessageEndpoint
name|messageEndpoint
decl_stmt|;
specifier|private
name|ActiveMQConnection
name|con
decl_stmt|;
specifier|private
name|ActiveMQSession
name|session
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
argument_list|(
name|BROKER_URL
argument_list|)
decl_stmt|;
name|con
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
operator|(
name|ActiveMQSession
operator|)
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|pool
operator|=
name|mock
argument_list|(
name|ServerSessionPoolImpl
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ActiveMQEndpointWorker
operator|.
name|class
block|,
name|int
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|10
block|}
argument_list|)
expr_stmt|;
name|workManager
operator|=
name|mock
argument_list|(
name|WorkManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageEndpoint
operator|=
operator|new
name|MockMessageEndpoint
argument_list|()
expr_stmt|;
name|serverSession
operator|=
operator|new
name|ServerSessionImpl
argument_list|(
operator|(
name|ServerSessionPoolImpl
operator|)
name|pool
operator|.
name|proxy
argument_list|()
argument_list|,
name|session
argument_list|,
operator|(
name|WorkManager
operator|)
name|workManager
operator|.
name|proxy
argument_list|()
argument_list|,
name|messageEndpoint
argument_list|,
literal|false
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|MockMessageEndpoint
implements|implements
name|MessageEndpoint
implements|,
name|MessageListener
block|{
specifier|public
name|void
name|afterDelivery
parameter_list|()
throws|throws
name|ResourceException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|beforeDelivery
parameter_list|(
name|Method
name|arg0
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|ResourceException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|release
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported yet."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Need to re-work this test case, it broke since the amq4 internals changed and      * mocks were being using against the internals.      *      */
specifier|public
name|void
name|testDummy
parameter_list|()
block|{     }
comment|/*     public void testBatch() throws Exception {         DummyActiveMQConnection connection = new DummyActiveMQConnection(new ActiveMQConnectionFactory(),                  null,                  null,                  getMockTransportChannel());         ServerSessionPoolImpl pool = new ServerSessionPoolImpl(null, 1);         DummyActiveMQSession session = new DummyActiveMQSession(connection);         MemoryBoundedQueue queue = connection.getMemoryBoundedQueue("Session(" + session.getSessionId() + ")");         queue.enqueue(new ActiveMQTextMessage());         queue.enqueue(new ActiveMQTextMessage());         queue.enqueue(new ActiveMQTextMessage());         DummyMessageEndpoint endpoint = new DummyMessageEndpoint();         ServerSessionImpl serverSession = new ServerSessionImpl(pool, session, null, endpoint, true, 2);         serverSession.run();         assertEquals(2, endpoint.messagesPerBatch.size());         assertEquals(new Integer(2), endpoint.messagesPerBatch.get(0));         assertEquals(new Integer(1), endpoint.messagesPerBatch.get(1));     }      private class DummyMessageEndpoint implements MessageEndpoint, MessageListener {         protected List messagesPerBatch = new ArrayList();         protected int nbMessages = -1000;         public void beforeDelivery(Method arg0) throws NoSuchMethodException, ResourceException {             nbMessages = 0;         }         public void afterDelivery() throws ResourceException {             messagesPerBatch.add(new Integer(nbMessages));             nbMessages = -1000;         }         public void release() {         }         public void onMessage(Message arg0) {             nbMessages ++;         }     }      private class DummyActiveMQSession extends ActiveMQSession {         protected DummyActiveMQSession(ActiveMQConnection connection, SessionId sessionId, int acknowledgeMode, boolean asyncDispatch) throws JMSException {             super(connection, sessionId, acknowledgeMode, asyncDispatch);         }     }      private class DummyActiveMQConnection extends ActiveMQConnection {         protected DummyActiveMQConnection(Transport transport, String userName, String password, JMSStatsImpl factoryStats) throws IOException {             super(transport, userName, password, factoryStats);         }     }      private TransportChannel getMockTransportChannel() {         Mock tc = new Mock(TransportChannel.class);         tc.expects(once()).method("setPacketListener");         tc.expects(once()).method("setExceptionListener");         tc.expects(once()).method("addTransportStatusEventListener");         tc.expects(atLeastOnce()).method("asyncSend");         tc.expects(atLeastOnce()).method("send");         return (TransportChannel) tc.proxy();     }     */
specifier|public
name|void
name|testRunDetectsStoppedSession
parameter_list|()
throws|throws
name|Exception
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|pool
operator|.
name|expects
argument_list|(
name|once
argument_list|()
argument_list|)
operator|.
name|method
argument_list|(
literal|"removeFromPool"
argument_list|)
operator|.
name|with
argument_list|(
name|eq
argument_list|(
name|serverSession
argument_list|)
argument_list|)
expr_stmt|;
name|serverSession
operator|.
name|run
argument_list|()
expr_stmt|;
name|pool
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

