begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activecluster
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|ClusterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|ClusterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|election
operator|.
name|ElectionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|election
operator|.
name|impl
operator|.
name|BullyElectionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * Represents a node list  *  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|StateServiceImpl
implements|implements
name|StateService
block|{
specifier|private
specifier|final
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StateServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Cluster
name|cluster
decl_stmt|;
specifier|private
name|Object
name|clusterLock
decl_stmt|;
specifier|private
name|Map
name|nodes
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|long
name|inactiveTime
decl_stmt|;
specifier|private
name|List
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Destination
name|localDestination
decl_stmt|;
specifier|private
name|Runnable
name|localNodePing
decl_stmt|;
specifier|private
name|NodeImpl
name|coordinator
decl_stmt|;
specifier|private
name|ElectionStrategy
name|electionStrategy
decl_stmt|;
comment|/**      * @param cluster      * @param clusterLock      * @param localNodePing      * @param timer      * @param inactiveTime      */
comment|/**      * Constructor StateServiceImpl      * @param cluster      * @param clusterLock      * @param localNodePing      * @param timer      * @param inactiveTime      */
specifier|public
name|StateServiceImpl
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|Object
name|clusterLock
parameter_list|,
name|Runnable
name|localNodePing
parameter_list|,
name|Timer
name|timer
parameter_list|,
name|long
name|inactiveTime
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|clusterLock
operator|=
name|clusterLock
expr_stmt|;
name|this
operator|.
name|localDestination
operator|=
name|cluster
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
expr_stmt|;
name|this
operator|.
name|localNodePing
operator|=
name|localNodePing
expr_stmt|;
name|this
operator|.
name|inactiveTime
operator|=
name|inactiveTime
expr_stmt|;
name|long
name|delay
init|=
name|inactiveTime
operator|/
literal|3
decl_stmt|;
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|createTimerTask
argument_list|()
argument_list|,
name|delay
argument_list|,
name|delay
argument_list|)
expr_stmt|;
operator|(
name|this
operator|.
name|coordinator
operator|=
operator|(
name|NodeImpl
operator|)
name|cluster
operator|.
name|getLocalNode
argument_list|()
operator|)
operator|.
name|setCoordinator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|electionStrategy
operator|=
operator|new
name|BullyElectionStrategy
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return the current election strategy      */
specifier|public
name|ElectionStrategy
name|getElectionStrategy
parameter_list|()
block|{
return|return
name|electionStrategy
return|;
block|}
comment|/**      * set the election strategy      *      * @param electionStrategy      */
specifier|public
name|void
name|setElectionStrategy
parameter_list|(
name|ElectionStrategy
name|electionStrategy
parameter_list|)
block|{
name|this
operator|.
name|electionStrategy
operator|=
name|electionStrategy
expr_stmt|;
block|}
comment|/**      * Get time of since last communication      * @return length of time inactive      */
specifier|public
name|long
name|getInactiveTime
parameter_list|()
block|{
return|return
name|inactiveTime
return|;
block|}
comment|/**      * Set the time inactive      * @param inactiveTime      */
specifier|public
name|void
name|setInactiveTime
parameter_list|(
name|long
name|inactiveTime
parameter_list|)
block|{
name|this
operator|.
name|inactiveTime
operator|=
name|inactiveTime
expr_stmt|;
block|}
comment|/**      * Get A Map of nodes - where key = destination, value = node      * @return map of destination/nodes      */
specifier|public
name|Map
name|getNodes
parameter_list|()
block|{
name|HashMap
name|answer
init|=
operator|new
name|HashMap
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|nodes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|NodeEntry
name|nodeEntry
init|=
operator|(
name|NodeEntry
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|nodeEntry
operator|.
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Got a keepalive      * @param node       */
specifier|public
name|void
name|keepAlive
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|Object
name|key
init|=
name|node
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|localDestination
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|NodeEntry
name|entry
init|=
operator|(
name|NodeEntry
operator|)
name|nodes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|NodeEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|nodeAdded
argument_list|(
name|node
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|clusterLock
init|)
block|{
name|clusterLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// has the data changed
if|if
condition|(
name|stateHasChanged
argument_list|(
name|entry
operator|.
name|node
argument_list|,
name|node
argument_list|)
condition|)
block|{
name|entry
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|nodeUpdated
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|// lets update the timer at which the node will be considered
comment|// to be dead
name|entry
operator|.
name|lastKeepAlive
operator|=
name|getTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * shutdown the node      */
specifier|public
name|void
name|shutdown
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|Object
name|key
init|=
name|node
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|ClusterEvent
name|event
init|=
operator|new
name|ClusterEvent
argument_list|(
name|cluster
argument_list|,
name|node
argument_list|,
name|ClusterEvent
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|listeners
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClusterListener
name|listener
init|=
operator|(
name|ClusterListener
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|listener
operator|.
name|onNodeRemoved
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * check nodes are alive      *      */
specifier|public
name|void
name|checkForTimeouts
parameter_list|()
block|{
name|localNodePing
operator|.
name|run
argument_list|()
expr_stmt|;
name|long
name|time
init|=
name|getTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|nodes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeEntry
name|nodeEntry
init|=
operator|(
name|NodeEntry
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeEntry
operator|.
name|lastKeepAlive
operator|+
name|inactiveTime
operator|<
name|time
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nodeFailed
argument_list|(
name|nodeEntry
operator|.
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|TimerTask
name|createTimerTask
parameter_list|()
block|{
return|return
operator|new
name|TimerTask
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkForTimeouts
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|addClusterListener
parameter_list|(
name|ClusterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeClusterListener
parameter_list|(
name|ClusterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|nodeAdded
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|ClusterEvent
name|event
init|=
operator|new
name|ClusterEvent
argument_list|(
name|cluster
argument_list|,
name|node
argument_list|,
name|ClusterEvent
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
comment|// lets take a copy to make contention easier
name|Object
index|[]
name|array
init|=
name|listeners
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|array
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ClusterListener
name|listener
init|=
operator|(
name|ClusterListener
operator|)
name|array
index|[
name|i
index|]
decl_stmt|;
name|listener
operator|.
name|onNodeAdd
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|doElection
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|nodeUpdated
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|ClusterEvent
name|event
init|=
operator|new
name|ClusterEvent
argument_list|(
name|cluster
argument_list|,
name|node
argument_list|,
name|ClusterEvent
operator|.
name|UPDATE_NODE
argument_list|)
decl_stmt|;
comment|// lets take a copy to make contention easier
name|Object
index|[]
name|array
init|=
name|listeners
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|array
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ClusterListener
name|listener
init|=
operator|(
name|ClusterListener
operator|)
name|array
index|[
name|i
index|]
decl_stmt|;
name|listener
operator|.
name|onNodeUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|nodeFailed
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|ClusterEvent
name|event
init|=
operator|new
name|ClusterEvent
argument_list|(
name|cluster
argument_list|,
name|node
argument_list|,
name|ClusterEvent
operator|.
name|REMOVE_NODE
argument_list|)
decl_stmt|;
comment|// lets take a copy to make contention easier
name|Object
index|[]
name|array
init|=
name|listeners
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|array
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ClusterListener
name|listener
init|=
operator|(
name|ClusterListener
operator|)
name|array
index|[
name|i
index|]
decl_stmt|;
name|listener
operator|.
name|onNodeFailed
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|doElection
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|coordinatorChanged
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|ClusterEvent
name|event
init|=
operator|new
name|ClusterEvent
argument_list|(
name|cluster
argument_list|,
name|node
argument_list|,
name|ClusterEvent
operator|.
name|ELECTED_COORDINATOR
argument_list|)
decl_stmt|;
comment|// lets take a copy to make contention easier
name|Object
index|[]
name|array
init|=
name|listeners
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|array
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ClusterListener
name|listener
init|=
operator|(
name|ClusterListener
operator|)
name|array
index|[
name|i
index|]
decl_stmt|;
name|listener
operator|.
name|onCoordinatorChanged
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doElection
parameter_list|()
block|{
if|if
condition|(
name|electionStrategy
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|NodeImpl
name|newElected
init|=
operator|(
name|NodeImpl
operator|)
name|electionStrategy
operator|.
name|doElection
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|newElected
operator|!=
literal|null
operator|&&
operator|!
name|newElected
operator|.
name|equals
argument_list|(
name|coordinator
argument_list|)
condition|)
block|{
name|coordinator
operator|.
name|setCoordinator
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|coordinator
operator|=
name|newElected
expr_stmt|;
name|coordinator
operator|.
name|setCoordinator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|coordinatorChanged
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"do election failed"
argument_list|,
name|jmsEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * For performance we may wish to use a less granualar timing mechanism      * only updating the time every x millis since we're only using      * the time as a judge of when a node has not pinged for at least a few      * hundred millis etc.      */
specifier|protected
name|long
name|getTimeMillis
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
specifier|protected
specifier|static
class|class
name|NodeEntry
block|{
specifier|public
name|Node
name|node
decl_stmt|;
specifier|public
name|long
name|lastKeepAlive
decl_stmt|;
block|}
comment|/**      * @return true if the node has changed state from the old in memory copy to the      *         newly arrived copy      */
specifier|protected
name|boolean
name|stateHasChanged
parameter_list|(
name|Node
name|oldNode
parameter_list|,
name|Node
name|newNode
parameter_list|)
block|{
name|Map
name|oldState
init|=
name|oldNode
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
name|newState
init|=
name|newNode
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
name|newState
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|oldState
operator|==
literal|null
operator|||
name|newState
operator|==
literal|null
operator|||
operator|!
name|oldState
operator|.
name|equals
argument_list|(
name|newState
argument_list|)
return|;
block|}
block|}
end_class

end_unit

