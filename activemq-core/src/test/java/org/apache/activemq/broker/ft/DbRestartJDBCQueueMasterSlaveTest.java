begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ft
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_class
specifier|public
class|class
name|DbRestartJDBCQueueMasterSlaveTest
extends|extends
name|JDBCQueueMasterSlaveTest
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DbRestartJDBCQueueMasterSlaveTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|messageSent
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|++
name|inflightMessageCount
operator|==
name|failureCount
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STOPPING DB!@!!!!"
argument_list|)
expr_stmt|;
specifier|final
name|EmbeddedDataSource
name|ds
init|=
name|getExistingDataSource
argument_list|()
decl_stmt|;
name|ds
operator|.
name|setShutdownDatabase
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DB STOPPED!@!!!!"
argument_list|)
expr_stmt|;
name|Thread
name|dbRestartThread
init|=
operator|new
name|Thread
argument_list|(
literal|"db-re-start-thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for master broker to Stop"
argument_list|)
expr_stmt|;
name|master
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|ds
operator|.
name|setShutdownDatabase
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DB RESTARTED!@!!!!"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|dbRestartThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|sendToProducer
parameter_list|(
name|MessageProducer
name|producer
parameter_list|,
name|Destination
name|producerDestination
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
block|{
comment|// do some retries as db failures filter back to the client until broker sees
comment|// db lock failure and shuts down
name|boolean
name|sent
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
name|producer
operator|.
name|send
argument_list|(
name|producerDestination
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sent
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception on producer send:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{                     }
block|}
block|}
do|while
condition|(
operator|!
name|sent
condition|)
do|;
block|}
block|}
block|}
end_class

end_unit

