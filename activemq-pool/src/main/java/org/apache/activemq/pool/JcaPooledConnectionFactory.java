begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2006 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|ConnectionPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|JcaConnectionPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JcaPooledConnectionFactory
extends|extends
name|XaPooledConnectionFactory
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JcaPooledConnectionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|protected
name|ConnectionPool
name|createConnectionPool
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
return|return
operator|new
name|JcaConnectionPool
argument_list|(
name|connection
argument_list|,
name|getTransactionManager
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Connection
name|wrap
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|)
block|{
comment|// Add a transport Listener so that we can notice if this connection
comment|// should be expired due to a connection failure.
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|addTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|setHasExpired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// only log if not stopped
if|if
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expiring connection "
operator|+
name|connection
operator|+
literal|" on IOException: "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// log stacktrace at debug level
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expiring connection "
operator|+
name|connection
operator|+
literal|" on IOException: "
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{                     }
block|}
argument_list|)
expr_stmt|;
comment|// make sure that we set the hasFailed flag, in case the transport already failed
comment|// prior to the addition of our new TransportListener
name|setHasExpired
argument_list|(
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|isTransportFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|// may want to return an amq EnhancedConnection
return|return
name|connection
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|unWrap
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|cleanUpTempDestinations
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

