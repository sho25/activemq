begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerInvocationHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SecurityJMXTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SecurityJMXTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDeniedViaStompNoStackTrace
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|gotExpected
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|stackTrace
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Appender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|String
name|message
init|=
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"Async error occurred"
argument_list|)
condition|)
block|{
name|gotExpected
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stackTrace
operator|.
name|set
argument_list|(
name|event
operator|.
name|getThrowableInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|toVerify
init|=
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|TransportConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".Service"
argument_list|)
decl_stmt|;
name|toVerify
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
name|TransportConnector
name|stomp
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"stomp://localhost:0"
argument_list|)
decl_stmt|;
name|broker
operator|.
name|startTransportConnector
argument_list|(
name|stomp
argument_list|)
expr_stmt|;
name|StompConnection
name|stompConnection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|stompConnection
operator|.
name|open
argument_list|(
name|stomp
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|stomp
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"guest"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
comment|// async sub
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/queue/USERS.Q"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|toVerify
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Got async error:"
argument_list|,
name|gotExpected
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No stack trace"
argument_list|,
name|stackTrace
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMoveMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXServiceURL
name|url
init|=
operator|new
name|JMXServiceURL
argument_list|(
literal|"service:jmx:rmi:///jndi/rmi://localhost:1199/jmxrmi"
argument_list|)
decl_stmt|;
name|JMXConnector
name|connector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connector
operator|.
name|connect
argument_list|()
expr_stmt|;
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,"
operator|+
literal|"destinationType=Queue,destinationName=TEST.Q"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queueMbean
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|connection
argument_list|,
name|name
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|msgId
init|=
name|queueMbean
operator|.
name|sendTextMessage
argument_list|(
literal|"test"
argument_list|,
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|queueMbean
operator|.
name|moveMessageTo
argument_list|(
name|msgId
argument_list|,
literal|"TEST1.Q"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBrowseExpiredMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXServiceURL
name|url
init|=
operator|new
name|JMXServiceURL
argument_list|(
literal|"service:jmx:rmi:///jndi/rmi://localhost:1199/jmxrmi"
argument_list|)
decl_stmt|;
name|JMXConnector
name|connector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connector
operator|.
name|connect
argument_list|()
expr_stmt|;
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,"
operator|+
literal|"destinationType=Queue,destinationName=TEST.Q"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queueMbean
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|connection
argument_list|,
name|name
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"timeToLive"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"JMSDeliveryMode"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|queueMbean
operator|.
name|sendTextMessage
argument_list|(
name|headers
argument_list|,
literal|"test"
argument_list|,
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
comment|// allow message to expire on the queue
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|Connection
name|c
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// browser consumer will force expriation check on addConsumer
name|QueueBrowser
name|browser
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createBrowser
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST.Q"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"no message in the q"
argument_list|,
operator|!
name|browser
operator|.
name|getEnumeration
argument_list|()
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify dlq got the message, no security exception as brokers context is now used
name|browser
operator|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createBrowser
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"one message in the dlq"
argument_list|,
name|browser
operator|.
name|getEnumeration
argument_list|()
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createBroker
argument_list|(
literal|"org/apache/activemq/security/simple-auth-broker.xml"
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading broker configuration from the classpath with URI: "
operator|+
name|uri
argument_list|)
expr_stmt|;
return|return
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"xbean:"
operator|+
name|uri
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

