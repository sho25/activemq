begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_comment
comment|/**  * A client uses a<CODE>TopicSubscriber</CODE> object to receive messages  * that have been published to a topic. A<CODE>TopicSubscriber</CODE> object  * is the publish/subscribe form of a message consumer. A<CODE>  * MessageConsumer</CODE> can be created by using<CODE>  * Session.createConsumer</CODE>.  *<p/>  *<P>  * A<CODE>TopicSession</CODE> allows the creation of multiple<CODE>  * TopicSubscriber</CODE> objects per topic. It will deliver each message for  * a topic to each subscriber eligible to receive it. Each copy of the message  * is treated as a completely separate message. Work done on one copy has no  * effect on the others; acknowledging one does not acknowledge the others; one  * message may be delivered immediately, while another waits for its subscriber  * to process messages ahead of it.  *<p/>  *<P>  * Regular<CODE>TopicSubscriber</CODE> objects are not durable. They receive  * only messages that are published while they are active.  *<p/>  *<P>  * Messages filtered out by a subscriber's message selector will never be  * delivered to the subscriber. From the subscriber's perspective, they do not  * exist.  *<p/>  *<P>  * In some cases, a connection may both publish and subscribe to a topic. The  * subscriber<CODE>NoLocal</CODE> attribute allows a subscriber to inhibit  * the delivery of messages published by its own connection.  *<p/>  *<P>  * If a client needs to receive all the messages published on a topic,  * including the ones published while the subscriber is inactive, it uses a  * durable<CODE>TopicSubscriber</CODE>. The JMS provider retains a record  * of this durable subscription and insures that all messages from the topic's  * publishers are retained until they are acknowledged by this durable  * subscriber or they have expired.  *<p/>  *<P>  * Sessions with durable subscribers must always provide the same client  * identifier. In addition, each client must specify a name that uniquely  * identifies (within client identifier) each durable subscription it creates.  * Only one session at a time can have a<CODE>TopicSubscriber</CODE> for a  * particular durable subscription.  *<p/>  *<P>  * A client can change an existing durable subscription by creating a durable  *<CODE>TopicSubscriber</CODE> with the same name and a new topic and/or  * message selector. Changing a durable subscription is equivalent to  * unsubscribing (deleting) the old one and creating a new one.  *<p/>  *<P>  * The<CODE>unsubscribe</CODE> method is used to delete a durable  * subscription. The<CODE>unsubscribe</CODE> method can be used at the  *<CODE>Session</CODE> or<CODE>TopicSession</CODE> level. This method  * deletes the state being maintained on behalf of the subscriber by its  * provider.  *<p/>  *<P>  * Creating a<CODE>MessageConsumer</CODE> provides the same features as  * creating a<CODE>TopicSubscriber</CODE>. To create a durable subscriber,  * use of<CODE>Session.CreateDurableSubscriber</CODE> is recommended. The  *<CODE>TopicSubscriber</CODE> is provided to support existing code.  *  * @see javax.jms.Session#createConsumer  * @see javax.jms.Session#createDurableSubscriber  * @see javax.jms.TopicSession  * @see javax.jms.TopicSession#createSubscriber  * @see javax.jms.TopicSubscriber  * @see javax.jms.MessageConsumer  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQTopicSubscriber
extends|extends
name|ActiveMQMessageConsumer
implements|implements
name|TopicSubscriber
block|{
comment|/**      * @param theSession      * @param value       * @param dest      * @param name      * @param selector      * @param cnum      * @param noLocalValue      * @param browserValue      * @param asyncDispatch       * @throws JMSException      */
specifier|protected
name|ActiveMQTopicSubscriber
parameter_list|(
name|ActiveMQSession
name|theSession
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|selector
parameter_list|,
name|int
name|prefetch
parameter_list|,
name|boolean
name|noLocalValue
parameter_list|,
name|boolean
name|browserValue
parameter_list|,
name|boolean
name|asyncDispatch
parameter_list|)
throws|throws
name|JMSException
block|{
name|super
argument_list|(
name|theSession
argument_list|,
name|consumerId
argument_list|,
name|dest
argument_list|,
name|name
argument_list|,
name|selector
argument_list|,
name|prefetch
argument_list|,
name|noLocalValue
argument_list|,
name|browserValue
argument_list|,
name|asyncDispatch
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the<CODE>Topic</CODE> associated with this subscriber.      *      * @return this subscriber's<CODE>Topic</CODE>      * @throws JMSException if the JMS provider fails to get the topic for this topic      *                      subscriber due to some internal error.      */
specifier|public
name|Topic
name|getTopic
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
operator|(
name|Topic
operator|)
name|super
operator|.
name|getDestination
argument_list|()
return|;
block|}
comment|/**      * Gets the<CODE>NoLocal</CODE> attribute for this subscriber. The      * default value for this attribute is false.      *      * @return true if locally published messages are being inhibited      * @throws JMSException if the JMS provider fails to get the<CODE>NoLocal      *</CODE> attribute for this topic subscriber due to some      *                      internal error.      */
specifier|public
name|boolean
name|getNoLocal
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|isNoLocal
argument_list|()
return|;
block|}
block|}
end_class

end_unit

