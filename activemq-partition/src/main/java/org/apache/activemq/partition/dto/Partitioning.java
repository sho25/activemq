begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|partition
operator|.
name|dto
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|annotation
operator|.
name|JsonDeserialize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|annotation
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * The main Configuration class for the PartitionBroker plugin  */
end_comment

begin_class
specifier|public
class|class
name|Partitioning
block|{
specifier|static
specifier|final
specifier|public
name|ObjectMapper
name|MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
static|static
block|{
name|MAPPER
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
expr_stmt|;
name|MAPPER
operator|.
name|disable
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
specifier|public
name|ObjectMapper
name|TO_STRING_MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
static|static
block|{
name|TO_STRING_MAPPER
operator|.
name|disable
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|)
expr_stmt|;
name|TO_STRING_MAPPER
operator|.
name|enable
argument_list|(
name|SerializationFeature
operator|.
name|INDENT_OUTPUT
argument_list|)
expr_stmt|;
block|}
comment|/**      * If a client connects with a clientId which is listed in the      * map, then he will be immediately reconnected      * to the partition target immediately.      */
annotation|@
name|JsonProperty
argument_list|(
literal|"by_client_id"
argument_list|)
annotation|@
name|JsonDeserialize
argument_list|(
name|contentAs
operator|=
name|Target
operator|.
name|class
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byClientId
decl_stmt|;
comment|/**      * If a client connects with a user priciple which is listed in the      * map, then he will be immediately reconnected      * to the partition target immediately.      */
annotation|@
name|JsonProperty
argument_list|(
literal|"by_user_name"
argument_list|)
annotation|@
name|JsonDeserialize
argument_list|(
name|contentAs
operator|=
name|Target
operator|.
name|class
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byUserName
decl_stmt|;
comment|/**      * If a client connects with source ip which is listed in the      * map, then he will be immediately reconnected      * to the partition target immediately.      */
annotation|@
name|JsonProperty
argument_list|(
literal|"by_source_ip"
argument_list|)
annotation|@
name|JsonDeserialize
argument_list|(
name|contentAs
operator|=
name|Target
operator|.
name|class
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|bySourceIp
decl_stmt|;
comment|/**      * Used to map the preferred partitioning of queues across      * a set of brokers.  Once a it is deemed that a connection mostly      * works with a set of targets configured in this map, the client      * will be reconnected to the appropriate target.      */
annotation|@
name|JsonProperty
argument_list|(
literal|"by_queue"
argument_list|)
annotation|@
name|JsonDeserialize
argument_list|(
name|contentAs
operator|=
name|Target
operator|.
name|class
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byQueue
decl_stmt|;
comment|/**      * Used to map the preferred partitioning of topics across      * a set of brokers.  Once a it is deemed that a connection mostly      * works with a set of targets configured in this map, the client      * will be reconnected to the appropriate target.      */
annotation|@
name|JsonProperty
argument_list|(
literal|"by_topic"
argument_list|)
annotation|@
name|JsonDeserialize
argument_list|(
name|contentAs
operator|=
name|Target
operator|.
name|class
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byTopic
decl_stmt|;
comment|/**      * Maps broker names to broker URLs.      */
annotation|@
name|JsonProperty
argument_list|(
literal|"brokers"
argument_list|)
annotation|@
name|JsonDeserialize
argument_list|(
name|contentAs
operator|=
name|String
operator|.
name|class
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|brokers
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|TO_STRING_MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getBrokers
parameter_list|()
block|{
return|return
name|brokers
return|;
block|}
specifier|public
name|void
name|setBrokers
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|brokers
parameter_list|)
block|{
name|this
operator|.
name|brokers
operator|=
name|brokers
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|getByClientId
parameter_list|()
block|{
return|return
name|byClientId
return|;
block|}
specifier|public
name|void
name|setByClientId
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byClientId
parameter_list|)
block|{
name|this
operator|.
name|byClientId
operator|=
name|byClientId
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|getByQueue
parameter_list|()
block|{
return|return
name|byQueue
return|;
block|}
specifier|public
name|void
name|setByQueue
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byQueue
parameter_list|)
block|{
name|this
operator|.
name|byQueue
operator|=
name|byQueue
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|getBySourceIp
parameter_list|()
block|{
return|return
name|bySourceIp
return|;
block|}
specifier|public
name|void
name|setBySourceIp
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|bySourceIp
parameter_list|)
block|{
name|this
operator|.
name|bySourceIp
operator|=
name|bySourceIp
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|getByTopic
parameter_list|()
block|{
return|return
name|byTopic
return|;
block|}
specifier|public
name|void
name|setByTopic
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byTopic
parameter_list|)
block|{
name|this
operator|.
name|byTopic
operator|=
name|byTopic
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|getByUserName
parameter_list|()
block|{
return|return
name|byUserName
return|;
block|}
specifier|public
name|void
name|setByUserName
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|byUserName
parameter_list|)
block|{
name|this
operator|.
name|byUserName
operator|=
name|byUserName
expr_stmt|;
block|}
block|}
end_class

end_unit

