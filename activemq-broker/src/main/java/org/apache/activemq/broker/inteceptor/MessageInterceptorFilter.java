begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|inteceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_class
class|class
name|MessageInterceptorFilter
extends|extends
name|BrokerFilter
block|{
specifier|private
name|DestinationMap
name|interceptorMap
init|=
operator|new
name|DestinationMap
argument_list|()
decl_stmt|;
name|MessageInterceptorFilter
parameter_list|(
name|Broker
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|MessageInterceptor
name|addMessageInterceptor
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|MessageInterceptor
name|messageInterceptor
parameter_list|)
block|{
name|ActiveMQDestination
name|activeMQDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
name|interceptorMap
operator|.
name|put
argument_list|(
name|activeMQDestination
argument_list|,
name|messageInterceptor
argument_list|)
expr_stmt|;
return|return
name|messageInterceptor
return|;
block|}
name|void
name|removeMessageInterceptor
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|MessageInterceptor
name|interceptor
parameter_list|)
block|{
name|ActiveMQDestination
name|activeMQDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
name|interceptorMap
operator|.
name|remove
argument_list|(
name|activeMQDestination
argument_list|,
name|interceptor
argument_list|)
expr_stmt|;
block|}
name|MessageInterceptor
name|addMessageInterceptorForQueue
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|MessageInterceptor
name|messageInterceptor
parameter_list|)
block|{
name|ActiveMQDestination
name|activeMQDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
name|interceptorMap
operator|.
name|put
argument_list|(
name|activeMQDestination
argument_list|,
name|messageInterceptor
argument_list|)
expr_stmt|;
return|return
name|messageInterceptor
return|;
block|}
name|void
name|removeMessageInterceptorForQueue
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|MessageInterceptor
name|interceptor
parameter_list|)
block|{
name|ActiveMQDestination
name|activeMQDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
name|interceptorMap
operator|.
name|remove
argument_list|(
name|activeMQDestination
argument_list|,
name|interceptor
argument_list|)
expr_stmt|;
block|}
name|MessageInterceptor
name|addMessageInterceptorForTopic
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|MessageInterceptor
name|messageInterceptor
parameter_list|)
block|{
name|ActiveMQDestination
name|activeMQDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
decl_stmt|;
name|interceptorMap
operator|.
name|put
argument_list|(
name|activeMQDestination
argument_list|,
name|messageInterceptor
argument_list|)
expr_stmt|;
return|return
name|messageInterceptor
return|;
block|}
name|void
name|removeMessageInterceptorForTopic
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|MessageInterceptor
name|interceptor
parameter_list|)
block|{
name|ActiveMQDestination
name|activeMQDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
decl_stmt|;
name|interceptorMap
operator|.
name|remove
argument_list|(
name|activeMQDestination
argument_list|,
name|interceptor
argument_list|)
expr_stmt|;
block|}
name|MessageInterceptor
name|addMessageInterceptor
parameter_list|(
name|ActiveMQDestination
name|activeMQDestination
parameter_list|,
name|MessageInterceptor
name|messageInterceptor
parameter_list|)
block|{
name|interceptorMap
operator|.
name|put
argument_list|(
name|activeMQDestination
argument_list|,
name|messageInterceptor
argument_list|)
expr_stmt|;
return|return
name|messageInterceptor
return|;
block|}
name|void
name|removeMessageInterceptor
parameter_list|(
name|ActiveMQDestination
name|activeMQDestination
parameter_list|,
name|MessageInterceptor
name|interceptor
parameter_list|)
block|{
name|interceptorMap
operator|.
name|remove
argument_list|(
name|activeMQDestination
argument_list|,
name|interceptor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Re-inject into the Broker chain      */
name|void
name|injectMessage
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
name|ProducerBrokerExchange
name|pe
init|=
name|producerExchange
decl_stmt|;
if|if
condition|(
name|pe
operator|==
literal|null
condition|)
block|{
name|pe
operator|=
operator|new
name|ProducerBrokerExchange
argument_list|()
expr_stmt|;
name|ConnectionContext
name|cc
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setBroker
argument_list|(
name|this
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setConnectionContext
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setMutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setProducerState
argument_list|(
operator|new
name|ProducerState
argument_list|(
operator|new
name|ProducerInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|send
argument_list|(
name|pe
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|activeMQDestination
init|=
name|messageSend
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|interceptorMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|activeMQDestination
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|MessageInterceptor
argument_list|>
name|set
init|=
name|interceptorMap
operator|.
name|get
argument_list|(
name|activeMQDestination
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|MessageInterceptor
name|mi
range|:
name|set
control|)
block|{
name|mi
operator|.
name|intercept
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

