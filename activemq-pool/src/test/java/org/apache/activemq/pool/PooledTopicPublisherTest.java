begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicPublisher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SocketProxy
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|PooledTopicPublisherTest
extends|extends
name|TestSupport
block|{
specifier|private
name|TopicConnection
name|connection
decl_stmt|;
specifier|public
name|void
name|testPooledConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|PooledConnectionFactory
name|pcf
init|=
operator|new
name|PooledConnectionFactory
argument_list|()
decl_stmt|;
name|pcf
operator|.
name|setConnectionFactory
argument_list|(
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://test"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|TopicConnection
operator|)
name|pcf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|TopicSession
name|session
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicPublisher
name|publisher
init|=
name|session
operator|.
name|createPublisher
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|publish
argument_list|(
name|session
operator|.
name|createMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetGetExceptionListener
parameter_list|()
throws|throws
name|Exception
block|{
name|PooledConnectionFactory
name|pcf
init|=
operator|new
name|PooledConnectionFactory
argument_list|()
decl_stmt|;
name|pcf
operator|.
name|setConnectionFactory
argument_list|(
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://test"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|TopicConnection
operator|)
name|pcf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|ExceptionListener
name|listener
init|=
operator|new
name|ExceptionListener
argument_list|()
block|{
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|exception
parameter_list|)
block|{             }
block|}
decl_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|listener
argument_list|,
name|connection
operator|.
name|getExceptionListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPooledConnectionAfterInactivity
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|TransportConnector
name|networkConnector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|SocketProxy
name|proxy
init|=
operator|new
name|SocketProxy
argument_list|(
name|networkConnector
operator|.
name|getConnectUri
argument_list|()
argument_list|)
decl_stmt|;
name|PooledConnectionFactory
name|pcf
init|=
operator|new
name|PooledConnectionFactory
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|proxy
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"?trace=true&wireFormat.maxInactivityDuration=500&wireFormat.maxInactivityDurationInitalDelay=500"
decl_stmt|;
name|pcf
operator|.
name|setConnectionFactory
argument_list|(
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|PooledConnection
name|conn
init|=
operator|(
name|PooledConnection
operator|)
name|pcf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|amq
init|=
name|conn
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|gotException
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|//amq.set
name|conn
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|ExceptionListener
argument_list|()
block|{
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|exception
parameter_list|)
block|{
name|gotException
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setClientID
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// let it hang, simulate a server hang so inactivity timeout kicks in
name|proxy
operator|.
name|pause
argument_list|()
expr_stmt|;
comment|//assertTrue("got an exception", gotException.await(5, TimeUnit.SECONDS));
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

