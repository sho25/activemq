begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @author Filip Hanik  * @org.apache.xbean.XBean element="discardingDLQBrokerPlugin"  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|DiscardingDLQBrokerPlugin
implements|implements
name|BrokerPlugin
block|{
specifier|public
name|DiscardingDLQBrokerPlugin
parameter_list|()
block|{     }
specifier|public
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DiscardingDLQBrokerPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|dropTemporaryTopics
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|dropTemporaryQueues
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|dropAll
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|dropOnly
decl_stmt|;
specifier|private
name|int
name|reportInterval
init|=
literal|1000
decl_stmt|;
comment|/**      * Installs the plugin into the interceptor chain of the broker, returning the new intercepted broker to use.      * @param broker Broker      * @throws Exception      * @return Broker      * @todo Implement this org.apache.activemq.broker.BrokerPlugin method      */
specifier|public
name|Broker
name|installPlugin
parameter_list|(
name|Broker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Installing Discarding Dead Letter Queue broker plugin[dropAll="
operator|+
name|isDropAll
argument_list|()
operator|+
literal|"; dropTemporaryTopics="
operator|+
name|isDropTemporaryTopics
argument_list|()
operator|+
literal|"; dropTemporaryQueues="
operator|+
name|isDropTemporaryQueues
argument_list|()
operator|+
literal|"; dropOnly="
operator|+
name|getDropOnly
argument_list|()
operator|+
literal|"; reportInterval="
operator|+
name|getReportInterval
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|DiscardingDLQBroker
name|cb
init|=
operator|new
name|DiscardingDLQBroker
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|cb
operator|.
name|setDropAll
argument_list|(
name|isDropAll
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setDropTemporaryQueues
argument_list|(
name|isDropTemporaryQueues
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setDropTemporaryTopics
argument_list|(
name|isDropTemporaryTopics
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setDestFilter
argument_list|(
name|getDestFilter
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|setReportInterval
argument_list|(
name|getReportInterval
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cb
return|;
block|}
specifier|public
name|boolean
name|isDropAll
parameter_list|()
block|{
return|return
name|dropAll
return|;
block|}
specifier|public
name|boolean
name|isDropTemporaryQueues
parameter_list|()
block|{
return|return
name|dropTemporaryQueues
return|;
block|}
specifier|public
name|boolean
name|isDropTemporaryTopics
parameter_list|()
block|{
return|return
name|dropTemporaryTopics
return|;
block|}
specifier|public
name|String
name|getDropOnly
parameter_list|()
block|{
return|return
name|dropOnly
return|;
block|}
specifier|public
name|int
name|getReportInterval
parameter_list|()
block|{
return|return
name|reportInterval
return|;
block|}
specifier|public
name|void
name|setDropTemporaryTopics
parameter_list|(
name|boolean
name|dropTemporaryTopics
parameter_list|)
block|{
name|this
operator|.
name|dropTemporaryTopics
operator|=
name|dropTemporaryTopics
expr_stmt|;
block|}
specifier|public
name|void
name|setDropTemporaryQueues
parameter_list|(
name|boolean
name|dropTemporaryQueues
parameter_list|)
block|{
name|this
operator|.
name|dropTemporaryQueues
operator|=
name|dropTemporaryQueues
expr_stmt|;
block|}
specifier|public
name|void
name|setDropAll
parameter_list|(
name|boolean
name|dropAll
parameter_list|)
block|{
name|this
operator|.
name|dropAll
operator|=
name|dropAll
expr_stmt|;
block|}
specifier|public
name|void
name|setDropOnly
parameter_list|(
name|String
name|dropOnly
parameter_list|)
block|{
name|this
operator|.
name|dropOnly
operator|=
name|dropOnly
expr_stmt|;
block|}
specifier|public
name|void
name|setReportInterval
parameter_list|(
name|int
name|reportInterval
parameter_list|)
block|{
name|this
operator|.
name|reportInterval
operator|=
name|reportInterval
expr_stmt|;
block|}
specifier|public
name|Pattern
index|[]
name|getDestFilter
parameter_list|()
block|{
if|if
condition|(
name|getDropOnly
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|getDropOnly
argument_list|()
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|list
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Pattern
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

