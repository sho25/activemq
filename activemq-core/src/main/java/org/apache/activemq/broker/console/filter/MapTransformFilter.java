begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
operator|.
name|formatter
operator|.
name|GlobalWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
operator|.
name|AmqMessagesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_class
specifier|public
class|class
name|MapTransformFilter
extends|extends
name|ResultTransformFilter
block|{
comment|/**      * Creates a Map transform filter that is able to transform a variety of objects to a properties map object      * @param next - the next query filter      */
specifier|public
name|MapTransformFilter
parameter_list|(
name|QueryFilter
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Transform the given object to a Map object      * @param object - object to transform      * @return map object      */
specifier|protected
name|Object
name|transformElement
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Use reflection to determine how the object should be transformed
try|try
block|{
name|Method
name|method
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"transformToMap"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|object
operator|.
name|getClass
argument_list|()
block|}
argument_list|)
decl_stmt|;
return|return
operator|(
name|Map
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|object
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|GlobalWriter
operator|.
name|print
argument_list|(
literal|"Unable to transform mbean of type: "
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|". No corresponding transformToMap method found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Transform an ObjectInstance mbean to a Map      * @param obj - ObjectInstance format of an mbean      * @return map object      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ObjectInstance
name|obj
parameter_list|)
block|{
return|return
name|transformToMap
argument_list|(
name|obj
operator|.
name|getObjectName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Transform an ObjectName mbean to a Map      * @param objname - ObjectName format of an mbean      * @return map object      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ObjectName
name|objname
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Parse object properties
name|Map
name|objProps
init|=
name|objname
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|objProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|objProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|props
return|;
block|}
comment|/**      * Transform an Attribute List format of an mbean to a Map      * @param list - AttributeList format of an mbean      * @return map object      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|AttributeList
name|list
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|attrib
init|=
operator|(
name|Attribute
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// If attribute is an ObjectName
if|if
condition|(
name|attrib
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MBeansAttributeQueryFilter
operator|.
name|KEY_OBJECT_NAME_ATTRIBUTE
argument_list|)
condition|)
block|{
name|props
operator|.
name|putAll
argument_list|(
name|transformToMap
argument_list|(
operator|(
name|ObjectName
operator|)
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|attrib
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|attrib
operator|.
name|getName
argument_list|()
argument_list|,
name|attrib
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|props
return|;
block|}
comment|/**      * Transform an ActiveMQTextMessage to a Map      * @param msg - text message to trasnform      * @return map object      * @throws JMSException      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ActiveMQTextMessage
name|msg
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|transformToMap
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_BODY_PREFIX
operator|+
literal|"JMSText"
argument_list|,
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
comment|/**      * Transform an ActiveMQBytesMessage to a Map      * @param msg - bytes message to transform      * @return map object      * @throws JMSException      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ActiveMQBytesMessage
name|msg
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|transformToMap
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|bodyLength
init|=
name|msg
operator|.
name|getBodyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|msgBody
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// Create separate bytes messages
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|bodyLength
operator|/
name|Integer
operator|.
name|MAX_VALUE
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|msgBody
operator|=
operator|new
name|byte
index|[
name|Integer
operator|.
name|MAX_VALUE
index|]
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_BODY_PREFIX
operator|+
literal|"JMSBytes:"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
operator|new
name|String
argument_list|(
name|msgBody
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|msgBody
operator|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|bodyLength
operator|%
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
index|]
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_BODY_PREFIX
operator|+
literal|"JMSBytes:"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
operator|new
name|String
argument_list|(
name|msgBody
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
comment|/**      * Transform an ActiveMQMessage to a Map      * @param msg - object message to transform      * @return map object      * @throws JMSException      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ActiveMQObjectMessage
name|msg
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|transformToMap
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getObject
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Just add the class name and toString value of the object
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_BODY_PREFIX
operator|+
literal|"JMSObjectClass"
argument_list|,
name|msg
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_BODY_PREFIX
operator|+
literal|"JMSObjectString"
argument_list|,
name|msg
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
comment|/**      * Transform an ActiveMQMapMessage to a Map      * @param msg - map message to transform      * @return map object      * @throws JMSException      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ActiveMQMapMessage
name|msg
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|transformToMap
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get map properties
name|Enumeration
name|e
init|=
name|msg
operator|.
name|getMapNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|msg
operator|.
name|getObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_BODY_PREFIX
operator|+
name|key
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|props
return|;
block|}
comment|/**      * Transform an ActiveMQStreamMessage to a Map      * @param msg - stream message to transform      * @return map object      * @throws JMSException      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ActiveMQStreamMessage
name|msg
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|transformToMap
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
argument_list|)
argument_list|)
expr_stmt|;
comment|// Just set the toString of the message as the body of the stream message
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_BODY_PREFIX
operator|+
literal|"JMSStreamMessage"
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
comment|/**      * Transform an ActiveMQMessage to a Map      * @param msg - message to transform      * @return map object      * @throws JMSException      */
specifier|protected
name|Map
name|transformToMap
parameter_list|(
name|ActiveMQMessage
name|msg
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Get JMS properties
if|if
condition|(
name|msg
operator|.
name|getJMSCorrelationID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSCorrelationID"
argument_list|,
name|msg
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSDeliveryMode"
argument_list|,
operator|(
name|msg
operator|.
name|getJMSDeliveryMode
argument_list|()
operator|==
name|DeliveryMode
operator|.
name|PERSISTENT
operator|)
condition|?
literal|"persistent"
else|:
literal|"non-persistent"
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getJMSDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSDestination"
argument_list|,
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|msg
operator|.
name|getJMSDestination
argument_list|()
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSExpiration"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|msg
operator|.
name|getJMSExpiration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSMessageID"
argument_list|,
name|msg
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSPriority"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|msg
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSRedelivered"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|msg
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getJMSReplyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSReplyTo"
argument_list|,
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|msg
operator|.
name|getJMSReplyTo
argument_list|()
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSTimestamp"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|msg
operator|.
name|getJMSTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getJMSType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_HEADER_PREFIX
operator|+
literal|"JMSType"
argument_list|,
name|msg
operator|.
name|getJMSType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get custom properties
name|Enumeration
name|e
init|=
name|msg
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getObjectProperty
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_CUSTOM_PREFIX
operator|+
name|name
argument_list|,
name|msg
operator|.
name|getObjectProperty
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|props
return|;
block|}
block|}
end_class

end_unit

