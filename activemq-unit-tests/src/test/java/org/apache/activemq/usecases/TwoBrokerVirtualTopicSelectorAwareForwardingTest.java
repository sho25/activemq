begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerMBeanSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|VirtualDestinationSelectorCacheViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|SubQueueSelectorCacheBrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ProducerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
operator|.
name|getDestination
import|;
end_import

begin_comment
comment|/**  * @author<a href="http://www.christianposta.com/blog">Christian Posta</a>  */
end_comment

begin_class
specifier|public
class|class
name|TwoBrokerVirtualTopicSelectorAwareForwardingTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TwoBrokerVirtualTopicSelectorAwareForwardingTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PERSIST_SELECTOR_CACHE_FILE_BASEPATH
init|=
literal|"./target/selectorCache-"
decl_stmt|;
specifier|public
name|void
name|testJMX
parameter_list|()
throws|throws
name|Exception
block|{
name|clearSelectorCacheFiles
argument_list|()
expr_stmt|;
comment|// borkerA is local and brokerB is remote
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"foo = 'bar'"
argument_list|)
expr_stmt|;
specifier|final
name|BrokerService
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
decl_stmt|;
name|String
name|testQueue
init|=
literal|"queue://Consumer.B.VirtualTopic.tempTopic"
decl_stmt|;
name|VirtualDestinationSelectorCacheViewMBean
name|cache
init|=
name|getVirtualDestinationSelectorCacheMBean
argument_list|(
name|brokerA
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectors
init|=
name|cache
operator|.
name|selectorsForDestination
argument_list|(
name|testQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|selectors
operator|.
name|contains
argument_list|(
literal|"foo = 'bar'"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
name|cache
operator|.
name|deleteSelectorForDestination
argument_list|(
name|testQueue
argument_list|,
literal|"foo = 'bar'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|selectors
operator|=
name|cache
operator|.
name|selectorsForDestination
argument_list|(
name|testQueue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"ceposta = 'redhat'"
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
name|Destination
name|dest
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|selectors
operator|=
name|cache
operator|.
name|selectorsForDestination
argument_list|(
name|testQueue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|deleteAllSelectorsForDestination
argument_list|(
name|testQueue
argument_list|)
expr_stmt|;
name|selectors
operator|=
name|cache
operator|.
name|selectorsForDestination
argument_list|(
name|testQueue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMessageLeaks
parameter_list|()
throws|throws
name|Exception
block|{
name|clearSelectorCacheFiles
argument_list|()
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
specifier|final
name|BrokerService
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
decl_stmt|;
comment|// Create the remote virtual topic consumer with selector
name|ActiveMQDestination
name|consumerQueue
init|=
name|createDestination
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// create it so that the queue is there and messages don't get lost
name|MessageConsumer
name|consumer1
init|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|consumerQueue
argument_list|,
literal|"SYMBOL = 'AAPL'"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer2
init|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|consumerQueue
argument_list|,
literal|"SYMBOL = 'AAPL'"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|virtualTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.tempTopic"
argument_list|)
decl_stmt|;
name|ProducerThreadTester
name|producerTester
init|=
name|createProducerTester
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|)
decl_stmt|;
name|producerTester
operator|.
name|setRunIndefinitely
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|producerTester
operator|.
name|setSleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|producerTester
operator|.
name|addMessageProperty
argument_list|(
literal|"AAPL"
argument_list|)
expr_stmt|;
name|producerTester
operator|.
name|addMessageProperty
argument_list|(
literal|"VIX"
argument_list|)
expr_stmt|;
name|producerTester
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|currentCount
init|=
name|producerTester
operator|.
name|getSentCount
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|">>>> currently sent: total="
operator|+
name|currentCount
operator|+
literal|", AAPL="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"AAPL"
argument_list|)
operator|+
literal|", VIX="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"VIX"
argument_list|)
argument_list|)
expr_stmt|;
comment|// let some messages get sent
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|MessageIdList
name|consumer1Messages
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|consumer1
argument_list|)
decl_stmt|;
name|consumer1Messages
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|50
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// switch one of the consumers to SYMBOL = 'VIX'
name|consumer1
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer1
operator|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|consumerQueue
argument_list|,
literal|"SYMBOL = 'VIX'"
argument_list|)
expr_stmt|;
comment|// wait till new consumer is on board
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|currentCount
operator|=
name|producerTester
operator|.
name|getSentCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|">>>> currently sent: total="
operator|+
name|currentCount
operator|+
literal|", AAPL="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"AAPL"
argument_list|)
operator|+
literal|", VIX="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"VIX"
argument_list|)
argument_list|)
expr_stmt|;
comment|// let some messages get sent
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// switch the other consumer to SYMBOL = 'VIX'
name|consumer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer2
operator|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|consumerQueue
argument_list|,
literal|"SYMBOL = 'VIX'"
argument_list|)
expr_stmt|;
comment|// wait till new consumer is on board
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|currentCount
operator|=
name|producerTester
operator|.
name|getSentCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|">>>> currently sent: total="
operator|+
name|currentCount
operator|+
literal|", AAPL="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"AAPL"
argument_list|)
operator|+
literal|", VIX="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"VIX"
argument_list|)
argument_list|)
expr_stmt|;
comment|// let some messages get sent
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|currentCount
operator|=
name|producerTester
operator|.
name|getSentCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|">>>> currently sent: total="
operator|+
name|currentCount
operator|+
literal|", AAPL="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"AAPL"
argument_list|)
operator|+
literal|", VIX="
operator|+
name|producerTester
operator|.
name|getCountForProperty
argument_list|(
literal|"VIX"
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure if there are messages that are orphaned in the queue that this number doesn't
comment|// grow...
specifier|final
name|long
name|currentDepth
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|">>>>> Orphaned messages? "
operator|+
name|currentDepth
argument_list|)
expr_stmt|;
comment|// wait 5s to see if we can get a growth in the depth of the queue
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
name|currentDepth
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// stop producers
name|producerTester
operator|.
name|setRunning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|producerTester
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// pause to let consumers catch up
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
operator|<=
name|currentDepth
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ProducerThreadTester
name|createProducerTester
parameter_list|(
name|String
name|brokerName
parameter_list|,
name|javax
operator|.
name|jms
operator|.
name|Destination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerItem
name|brokerItem
init|=
name|brokers
operator|.
name|get
argument_list|(
name|brokerName
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|brokerItem
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ProducerThreadTester
name|rc
init|=
operator|new
name|ProducerThreadTester
argument_list|(
name|sess
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|rc
operator|.
name|setPersistent
argument_list|(
name|persistentDelivery
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|testSelectorConsumptionWithNoMatchAtHeadOfQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|clearSelectorCacheFiles
argument_list|()
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|BrokerService
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
decl_stmt|;
comment|// Create the remote virtual topic consumer with selector
name|ActiveMQDestination
name|consumerQueue
init|=
name|createDestination
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// create it so that the queue is there and messages don't get lost
name|MessageConsumer
name|selectingConsumer
init|=
name|establishConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|consumerQueue
argument_list|)
decl_stmt|;
comment|// send messages with NO selection criteria first, and then with a property to be selected
comment|// this should put messages at the head of the queue that don't match selection
name|ActiveMQTopic
name|virtualTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.tempTopic"
argument_list|)
decl_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// close the consumer w/out consuming any messages; they'll be marked redelivered
name|selectingConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|selectingConsumer
operator|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|consumerQueue
argument_list|,
literal|"foo = 'bar'"
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|,
name|asMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|MessageIdList
name|selectingConsumerMessages
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|selectingConsumer
argument_list|)
decl_stmt|;
name|selectingConsumerMessages
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectingConsumerMessages
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|selectingConsumerMessages
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|10
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectingConsumerMessages
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert broker A stats
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MessageConsumer
name|establishConsumer
parameter_list|(
name|String
name|broker
parameter_list|,
name|ActiveMQDestination
name|consumerQueue
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerItem
name|item
init|=
name|brokers
operator|.
name|get
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|item
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
return|return
name|s
operator|.
name|createConsumer
argument_list|(
name|consumerQueue
argument_list|)
return|;
block|}
specifier|public
name|void
name|testSelectorsAndNonSelectors
parameter_list|()
throws|throws
name|Exception
block|{
name|clearSelectorCacheFiles
argument_list|()
expr_stmt|;
comment|// borkerA is local and brokerB is remote
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
specifier|final
name|BrokerService
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
decl_stmt|;
specifier|final
name|BrokerService
name|brokerB
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
decl_stmt|;
comment|// Create the remote virtual topic consumer with selector
name|ActiveMQDestination
name|consumerBQueue
init|=
name|createDestination
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MessageConsumer
name|selectingConsumer
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|consumerBQueue
argument_list|,
literal|"foo = 'bar'"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|nonSelectingConsumer
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|consumerBQueue
argument_list|)
decl_stmt|;
comment|// let advisories propogate
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
name|Destination
name|dest
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|Destination
name|destination
init|=
name|getDestination
argument_list|(
name|brokerB
argument_list|,
name|consumerBQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|destination
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// publisher publishes to this
name|ActiveMQTopic
name|virtualTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.tempTopic"
argument_list|)
decl_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|10
argument_list|,
name|asMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MessageIdList
name|selectingConsumerMessages
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|selectingConsumer
argument_list|)
decl_stmt|;
name|MessageIdList
name|nonSelectingConsumerMessages
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|nonSelectingConsumer
argument_list|)
decl_stmt|;
comment|// we only expect half of the messages that get sent with the selector, because they get load balanced
name|selectingConsumerMessages
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|5
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|selectingConsumerMessages
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|nonSelectingConsumerMessages
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|15
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|nonSelectingConsumerMessages
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert broker A stats
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert broker B stats
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//now let's close the consumer without the selector
name|nonSelectingConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// let advisories propogate
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
name|Destination
name|dest
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|)
expr_stmt|;
comment|// and let's send messages with a selector that doesnt' match
name|selectingConsumerMessages
operator|.
name|flushMessages
argument_list|()
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|10
argument_list|,
name|asMap
argument_list|(
literal|"ceposta"
argument_list|,
literal|"redhat"
argument_list|)
argument_list|)
expr_stmt|;
name|selectingConsumerMessages
operator|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|selectingConsumer
argument_list|)
expr_stmt|;
name|selectingConsumerMessages
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selectingConsumerMessages
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert broker A stats
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert broker B stats
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lets disconect the selecting consumer for a sec and send messages with a selector that DOES match
name|selectingConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// let advisories propogate
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
name|Destination
name|dest
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|selectingConsumerMessages
operator|.
name|flushMessages
argument_list|()
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|10
argument_list|,
name|asMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert broker A stats
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert broker B stats
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|selectingConsumer
operator|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|consumerBQueue
argument_list|,
literal|"foo = 'bar'"
argument_list|)
expr_stmt|;
name|selectingConsumerMessages
operator|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|selectingConsumer
argument_list|)
expr_stmt|;
name|selectingConsumerMessages
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|selectingConsumerMessages
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// let advisories propogate
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
name|Destination
name|dest
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|)
expr_stmt|;
comment|// assert broker A stats
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert broker B stats
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VirtualDestinationSelectorCacheViewMBean
name|getVirtualDestinationSelectorCacheMBean
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|ObjectName
name|objectName
init|=
name|BrokerMBeanSupport
operator|.
name|createVirtualDestinationSelectorCacheName
argument_list|(
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
argument_list|,
literal|"plugin"
argument_list|,
literal|"virtualDestinationCache"
argument_list|)
decl_stmt|;
return|return
operator|(
name|VirtualDestinationSelectorCacheViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|objectName
argument_list|,
name|VirtualDestinationSelectorCacheViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|void
name|testSelectorAwareForwarding
parameter_list|()
throws|throws
name|Exception
block|{
name|clearSelectorCacheFiles
argument_list|()
expr_stmt|;
comment|// borkerA is local and brokerB is remote
name|bridgeAndConfigureBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
specifier|final
name|BrokerService
name|brokerB
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
decl_stmt|;
specifier|final
name|BrokerService
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
decl_stmt|;
comment|// Create the remote virtual topic consumer with selector
name|MessageConsumer
name|remoteConsumer
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"foo = 'bar'"
argument_list|)
decl_stmt|;
comment|// let advisories propogate
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
name|Destination
name|dest
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|ActiveMQQueue
name|queueB
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|getDestination
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|queueB
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|virtualTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.tempTopic"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|getDestination
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
argument_list|,
name|virtualTopic
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getDestination
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
argument_list|,
name|virtualTopic
argument_list|)
argument_list|)
expr_stmt|;
comment|// send two types of messages, one unwanted and the other wanted
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|,
name|asMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|,
name|asMap
argument_list|(
literal|"ceposta"
argument_list|,
literal|"redhat"
argument_list|)
argument_list|)
expr_stmt|;
name|MessageIdList
name|msgsB
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|remoteConsumer
argument_list|)
decl_stmt|;
comment|// wait for the wanted one to arrive at the remote consumer
name|msgsB
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// ensure we don't get any more messages
name|msgsB
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// remote consumer should only get one of the messages
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|msgsB
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// and the enqueue count for the remote queue should only be 1
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// now let's remove the consumer on broker B and recreate it with new selector
name|remoteConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now let's shut down broker A and clear its persistent selector cache
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|deleteSelectorCacheFile
argument_list|(
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|destination
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|remoteConsumer
operator|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"ceposta = 'redhat'"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|destination
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now let's start broker A back up
name|brokerA
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|brokerA
operator|.
name|getNetworkConnectors
argument_list|()
argument_list|)
expr_stmt|;
comment|// give a sec to let advisories propogate
comment|// let advisories propogate
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
name|Destination
name|dest
init|=
name|brokerA
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|)
expr_stmt|;
comment|// send two types of messages, one unwanted and the other wanted
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|,
name|asMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|,
name|asMap
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|,
name|asMap
argument_list|(
literal|"ceposta"
argument_list|,
literal|"redhat"
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|virtualTopic
argument_list|,
literal|1
argument_list|,
name|asMap
argument_list|(
literal|"ceposta"
argument_list|,
literal|"redhat"
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets get messages on consumer B
name|msgsB
operator|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|remoteConsumer
argument_list|)
expr_stmt|;
name|msgsB
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// ensure we don't get any more messages
name|msgsB
operator|.
name|waitForMessagesToArrive
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// remote consumer should only get 10 of the messages
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|msgsB
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// queue should be drained
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// and the enqueue count for the remote queue should only be 1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|brokerB
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.B.VirtualTopic.tempTopic"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|private
name|void
name|bridgeAndConfigureBrokers
parameter_list|(
name|String
name|local
parameter_list|,
name|String
name|remote
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|bridge
init|=
name|bridgeBrokers
argument_list|(
name|local
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|options
init|=
operator|new
name|String
argument_list|(
literal|"?useJmx=false&deleteAllMessagesOnStartup=true"
argument_list|)
decl_stmt|;
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/BrokerB"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|clearSelectorCacheFiles
parameter_list|()
block|{
name|String
index|[]
name|brokerNames
init|=
operator|new
name|String
index|[]
block|{
literal|"BrokerA"
block|,
literal|"BrokerB"
block|}
decl_stmt|;
for|for
control|(
name|String
name|brokerName
range|:
name|brokerNames
control|)
block|{
name|deleteSelectorCacheFile
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteSelectorCacheFile
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|File
name|brokerPersisteFile
init|=
operator|new
name|File
argument_list|(
name|PERSIST_SELECTOR_CACHE_FILE_BASEPATH
operator|+
name|brokerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokerPersisteFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|brokerPersisteFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|BrokerService
name|createAndConfigureBroker
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBroker
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Make topics "selectorAware"
name|VirtualTopic
name|virtualTopic
init|=
operator|new
name|VirtualTopic
argument_list|()
decl_stmt|;
name|virtualTopic
operator|.
name|setSelectorAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|interceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|interceptor
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|virtualTopic
block|}
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{
name|interceptor
block|}
argument_list|)
expr_stmt|;
name|configurePersistenceAdapter
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|SubQueueSelectorCacheBrokerPlugin
name|selectorCacheBrokerPlugin
init|=
operator|new
name|SubQueueSelectorCacheBrokerPlugin
argument_list|()
decl_stmt|;
name|selectorCacheBrokerPlugin
operator|.
name|setSingleSelectorPerDestination
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|File
name|persisteFile
init|=
operator|new
name|File
argument_list|(
name|PERSIST_SELECTOR_CACHE_FILE_BASEPATH
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
decl_stmt|;
name|selectorCacheBrokerPlugin
operator|.
name|setPersistFile
argument_list|(
name|persisteFile
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
name|selectorCacheBrokerPlugin
block|}
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|protected
name|void
name|configurePersistenceAdapter
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dataFileDir
init|=
operator|new
name|File
argument_list|(
literal|"target/test-amq-data/kahadb/"
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
decl_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|dataFileDir
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
block|}
class|class
name|ProducerThreadTester
extends|extends
name|ProducerThread
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|selectors
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|selectorCounts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|ProducerThreadTester
parameter_list|(
name|Session
name|session
parameter_list|,
name|javax
operator|.
name|jms
operator|.
name|Destination
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|TextMessage
name|msg
init|=
name|createTextMessage
argument_list|(
name|this
operator|.
name|session
argument_list|,
literal|"Message-"
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|value
init|=
name|getRandomKey
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
literal|"SYMBOL"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|AtomicInteger
name|currentCount
init|=
name|selectorCounts
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|currentCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetCounters
parameter_list|()
block|{
name|super
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|selectorCounts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|selectorCounts
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getRandomKey
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|(
name|selectors
argument_list|)
decl_stmt|;
return|return
name|keys
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|addMessageProperty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|selectors
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|selectors
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|selectorCounts
operator|.
name|put
argument_list|(
name|value
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCountForProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|selectorCounts
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

