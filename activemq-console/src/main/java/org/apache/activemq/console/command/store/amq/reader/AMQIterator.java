begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
operator|.
name|store
operator|.
name|amq
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|BooleanExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|selector
operator|.
name|SelectorParser
import|;
end_import

begin_comment
comment|/**  * An Iterator for the AMQReader  *  */
end_comment

begin_class
class|class
name|AMQIterator
implements|implements
name|Iterator
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
name|AMQReader
name|reader
decl_stmt|;
specifier|private
name|BooleanExpression
name|expression
decl_stmt|;
specifier|private
name|MessageLocation
name|currentLocation
decl_stmt|;
specifier|private
name|MessageLocation
name|nextLocation
decl_stmt|;
specifier|private
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
name|AMQIterator
parameter_list|(
name|AMQReader
name|reader
parameter_list|,
name|BooleanExpression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|nextLocation
operator|=
name|reader
operator|.
name|getNextMessage
argument_list|(
name|currentLocation
argument_list|)
expr_stmt|;
name|Message
name|next
init|=
name|nextLocation
operator|!=
literal|null
condition|?
name|nextLocation
operator|.
name|getMessage
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
else|else
block|{
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|MessageEvaluationContext
name|context
init|=
operator|new
name|MessageEvaluationContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setMessageReference
argument_list|(
operator|(
name|MessageReference
operator|)
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|expression
operator|.
name|matches
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|this
operator|.
name|nextLocation
operator|=
name|reader
operator|.
name|getNextMessage
argument_list|(
name|currentLocation
argument_list|)
expr_stmt|;
name|next
operator|=
name|nextLocation
operator|!=
literal|null
condition|?
name|nextLocation
operator|.
name|getMessage
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|valid
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to get next message from reader "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Message
name|next
parameter_list|()
block|{
if|if
condition|(
name|valid
operator|&&
operator|(
name|nextLocation
operator|!=
literal|null
operator|||
name|hasNext
argument_list|()
operator|)
condition|)
block|{
name|this
operator|.
name|currentLocation
operator|=
name|nextLocation
expr_stmt|;
return|return
name|nextLocation
operator|.
name|getMessage
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

