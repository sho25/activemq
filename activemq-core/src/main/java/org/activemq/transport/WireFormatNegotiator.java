begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_class
specifier|public
class|class
name|WireFormatNegotiator
extends|extends
name|TransportFilter
block|{
specifier|private
specifier|final
name|WireFormat
name|wireFormat
decl_stmt|;
specifier|private
specifier|final
name|int
name|minimumVersion
decl_stmt|;
specifier|private
name|boolean
name|firstStart
init|=
literal|true
decl_stmt|;
specifier|private
name|CountDownLatch
name|readyCountDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**      * Negotiator      *       * @param next      * @param preferedFormat      */
specifier|public
name|WireFormatNegotiator
parameter_list|(
name|Transport
name|next
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|,
name|int
name|minimumVersion
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
name|this
operator|.
name|minimumVersion
operator|=
name|minimumVersion
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstStart
condition|)
block|{
name|WireFormatInfo
name|info
init|=
name|createWireFormatInfo
argument_list|()
decl_stmt|;
name|next
operator|.
name|oneway
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|oneway
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|readyCountDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
name|super
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|WireFormatInfo
name|createWireFormatInfo
parameter_list|()
block|{
name|WireFormatInfo
name|info
init|=
operator|new
name|WireFormatInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setVersion
argument_list|(
name|wireFormat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wireFormat
operator|instanceof
name|OpenWireFormat
condition|)
block|{
name|info
operator|.
name|setStackTraceEnabled
argument_list|(
operator|(
operator|(
name|OpenWireFormat
operator|)
name|wireFormat
operator|)
operator|.
name|isStackTraceEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTcpNoDelayEnabled
argument_list|(
operator|(
operator|(
name|OpenWireFormat
operator|)
name|wireFormat
operator|)
operator|.
name|isTcpNoDelayEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCacheEnabled
argument_list|(
operator|(
operator|(
name|OpenWireFormat
operator|)
name|wireFormat
operator|)
operator|.
name|isCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|.
name|isWireFormatInfo
argument_list|()
condition|)
block|{
name|WireFormatInfo
name|info
init|=
operator|(
name|WireFormatInfo
operator|)
name|command
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|commandListener
operator|.
name|onException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Remote wire format magic is invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|getVersion
argument_list|()
operator|<
name|minimumVersion
condition|)
block|{
name|commandListener
operator|.
name|onException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Remote wire format ("
operator|+
name|info
operator|.
name|getVersion
argument_list|()
operator|+
literal|") is lower the minimum version required ("
operator|+
name|minimumVersion
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|getVersion
argument_list|()
operator|!=
name|wireFormat
operator|.
name|getVersion
argument_list|()
condition|)
block|{
comment|// Match the remote side.
name|wireFormat
operator|.
name|setVersion
argument_list|(
name|info
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wireFormat
operator|instanceof
name|OpenWireFormat
condition|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|isStackTraceEnabled
argument_list|()
condition|)
block|{
operator|(
operator|(
name|OpenWireFormat
operator|)
name|wireFormat
operator|)
operator|.
name|setStackTraceEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|isTcpNoDelayEnabled
argument_list|()
condition|)
block|{
operator|(
operator|(
name|OpenWireFormat
operator|)
name|wireFormat
operator|)
operator|.
name|setTcpNoDelayEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|isCacheEnabled
argument_list|()
condition|)
block|{
operator|(
operator|(
name|OpenWireFormat
operator|)
name|wireFormat
operator|)
operator|.
name|setCacheEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|readyCountDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|commandListener
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

