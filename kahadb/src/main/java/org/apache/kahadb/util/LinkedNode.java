begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Provides a base class for you to extend when you want object to maintain a  * doubly linked list to other objects without using a collection class.  *   * @author chirino  */
end_comment

begin_class
specifier|public
class|class
name|LinkedNode
parameter_list|<
name|T
extends|extends
name|LinkedNode
parameter_list|<
name|T
parameter_list|>
parameter_list|>
block|{
specifier|protected
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
specifier|protected
name|T
name|next
decl_stmt|;
specifier|protected
name|T
name|prev
decl_stmt|;
specifier|public
name|LinkedNode
parameter_list|()
block|{     }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|T
name|getThis
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
specifier|public
name|T
name|getHeadNode
parameter_list|()
block|{
return|return
name|list
operator|.
name|head
return|;
block|}
specifier|public
name|T
name|getTailNode
parameter_list|()
block|{
return|return
name|list
operator|.
name|head
operator|.
name|prev
return|;
block|}
specifier|public
name|T
name|getNext
parameter_list|()
block|{
return|return
name|isTailNode
argument_list|()
condition|?
literal|null
else|:
name|next
return|;
block|}
specifier|public
name|T
name|getPrevious
parameter_list|()
block|{
return|return
name|isHeadNode
argument_list|()
condition|?
literal|null
else|:
name|prev
return|;
block|}
specifier|public
name|T
name|getNextCircular
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|T
name|getPreviousCircular
parameter_list|()
block|{
return|return
name|prev
return|;
block|}
specifier|public
name|boolean
name|isHeadNode
parameter_list|()
block|{
return|return
name|list
operator|.
name|head
operator|==
name|this
return|;
block|}
specifier|public
name|boolean
name|isTailNode
parameter_list|()
block|{
return|return
name|list
operator|.
name|head
operator|.
name|prev
operator|==
name|this
return|;
block|}
comment|/**      * @param node      *            the node to link after this node.      * @return this      */
specifier|public
name|void
name|linkAfter
parameter_list|(
name|T
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot link to yourself"
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You only insert nodes that are not in a list"
argument_list|)
throw|;
block|}
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This node is not yet in a list"
argument_list|)
throw|;
block|}
name|node
operator|.
name|list
operator|=
name|list
expr_stmt|;
comment|// given we linked this<->next and are inserting node in between
name|node
operator|.
name|prev
operator|=
name|getThis
argument_list|()
expr_stmt|;
comment|// link this<-node
name|node
operator|.
name|next
operator|=
name|next
expr_stmt|;
comment|// link node->next
name|next
operator|.
name|prev
operator|=
name|node
expr_stmt|;
comment|// link node<-next
name|next
operator|=
name|node
expr_stmt|;
comment|// this->node
name|list
operator|.
name|size
operator|++
expr_stmt|;
block|}
comment|/**      * @param rightList      *            the node to link after this node.      * @return this      */
specifier|public
name|void
name|linkAfter
parameter_list|(
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|rightList
parameter_list|)
block|{
if|if
condition|(
name|rightList
operator|==
name|list
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot link to yourself"
argument_list|)
throw|;
block|}
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This node is not yet in a list"
argument_list|)
throw|;
block|}
name|T
name|rightHead
init|=
name|rightList
operator|.
name|head
decl_stmt|;
name|T
name|rightTail
init|=
name|rightList
operator|.
name|head
operator|.
name|prev
decl_stmt|;
name|list
operator|.
name|reparent
argument_list|(
name|rightList
argument_list|)
expr_stmt|;
comment|// given we linked this<->next and are inserting list in between
name|rightHead
operator|.
name|prev
operator|=
name|getThis
argument_list|()
expr_stmt|;
comment|// link this<-list
name|rightTail
operator|.
name|next
operator|=
name|next
expr_stmt|;
comment|// link list->next
name|next
operator|.
name|prev
operator|=
name|rightTail
expr_stmt|;
comment|// link list<-next
name|next
operator|=
name|rightHead
expr_stmt|;
comment|// this->list
block|}
comment|/**      * @param node      *            the node to link after this node.      * @return      * @return this      */
specifier|public
name|void
name|linkBefore
parameter_list|(
name|T
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot link to yourself"
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You only insert nodes that are not in a list"
argument_list|)
throw|;
block|}
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This node is not yet in a list"
argument_list|)
throw|;
block|}
name|node
operator|.
name|list
operator|=
name|list
expr_stmt|;
comment|// given we linked prev<->this and are inserting node in between
name|node
operator|.
name|next
operator|=
name|getThis
argument_list|()
expr_stmt|;
comment|// node->this
name|node
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
comment|// prev<-node
name|prev
operator|.
name|next
operator|=
name|node
expr_stmt|;
comment|// prev->node
name|prev
operator|=
name|node
expr_stmt|;
comment|// node<-this
if|if
condition|(
name|this
operator|==
name|list
operator|.
name|head
condition|)
block|{
name|list
operator|.
name|head
operator|=
name|node
expr_stmt|;
block|}
name|list
operator|.
name|size
operator|++
expr_stmt|;
block|}
comment|/**      * @param leftList      *            the node to link after this node.      * @return      * @return this      */
specifier|public
name|void
name|linkBefore
parameter_list|(
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|leftList
parameter_list|)
block|{
if|if
condition|(
name|leftList
operator|==
name|list
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot link to yourself"
argument_list|)
throw|;
block|}
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This node is not yet in a list"
argument_list|)
throw|;
block|}
name|T
name|leftHead
init|=
name|leftList
operator|.
name|head
decl_stmt|;
name|T
name|leftTail
init|=
name|leftList
operator|.
name|head
operator|.
name|prev
decl_stmt|;
name|list
operator|.
name|reparent
argument_list|(
name|leftList
argument_list|)
expr_stmt|;
comment|// given we linked prev<->this and are inserting list in between
name|leftTail
operator|.
name|next
operator|=
name|getThis
argument_list|()
expr_stmt|;
comment|// list->this
name|leftHead
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
comment|// prev<-list
name|prev
operator|.
name|next
operator|=
name|leftHead
expr_stmt|;
comment|// prev->list
name|prev
operator|=
name|leftTail
expr_stmt|;
comment|// list<-this
if|if
condition|(
name|isHeadNode
argument_list|()
condition|)
block|{
name|list
operator|.
name|head
operator|=
name|leftHead
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|linkToTail
parameter_list|(
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This node is already linked to a node"
argument_list|)
throw|;
block|}
if|if
condition|(
name|target
operator|.
name|head
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|prev
operator|=
name|target
operator|.
name|head
operator|=
name|getThis
argument_list|()
expr_stmt|;
name|list
operator|=
name|target
expr_stmt|;
name|list
operator|.
name|size
operator|++
expr_stmt|;
block|}
else|else
block|{
name|target
operator|.
name|head
operator|.
name|prev
operator|.
name|linkAfter
argument_list|(
name|getThis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|linkToHead
parameter_list|(
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This node is already linked to a node"
argument_list|)
throw|;
block|}
if|if
condition|(
name|target
operator|.
name|head
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|prev
operator|=
name|target
operator|.
name|head
operator|=
name|getThis
argument_list|()
expr_stmt|;
name|list
operator|=
name|target
expr_stmt|;
name|list
operator|.
name|size
operator|++
expr_stmt|;
block|}
else|else
block|{
name|target
operator|.
name|head
operator|.
name|linkBefore
argument_list|(
name|getThis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes this node out of the linked list it is chained in.      */
specifier|public
name|boolean
name|unlink
parameter_list|()
block|{
comment|// If we are allready unlinked...
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getThis
argument_list|()
operator|==
name|prev
condition|)
block|{
comment|// We are the only item in the list
name|list
operator|.
name|head
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// given we linked prev<->this<->next
name|next
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
comment|// prev<-next
name|prev
operator|.
name|next
operator|=
name|next
expr_stmt|;
comment|// prev->next
if|if
condition|(
name|isHeadNode
argument_list|()
condition|)
block|{
name|list
operator|.
name|head
operator|=
name|next
expr_stmt|;
block|}
block|}
name|list
operator|.
name|size
operator|--
expr_stmt|;
name|list
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Splits the list into 2 lists. This node becomes the tail of this list.      * Then 2nd list is returned.      *       * @return An empty list if this is a tail node.      */
specifier|public
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|splitAfter
parameter_list|()
block|{
if|if
condition|(
name|isTailNode
argument_list|()
condition|)
block|{
return|return
operator|new
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
comment|// Create the new list
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|newList
init|=
operator|new
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|head
operator|=
name|next
expr_stmt|;
comment|// Update the head and tail of the new list so that they point to each
comment|// other.
name|newList
operator|.
name|head
operator|.
name|prev
operator|=
name|list
operator|.
name|head
operator|.
name|prev
expr_stmt|;
comment|// new list: tail<-head
name|newList
operator|.
name|head
operator|.
name|prev
operator|.
name|next
operator|=
name|newList
operator|.
name|head
expr_stmt|;
comment|// new list: tail->head
name|next
operator|=
name|list
operator|.
name|head
expr_stmt|;
comment|// old list: tail->head
name|list
operator|.
name|head
operator|.
name|prev
operator|=
name|getThis
argument_list|()
expr_stmt|;
comment|// old list: tail<-head
comment|// Update all the nodes in the new list so that they know of their new
comment|// list owner.
name|T
name|n
init|=
name|newList
operator|.
name|head
decl_stmt|;
do|do
block|{
name|n
operator|.
name|list
operator|=
name|newList
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|next
expr_stmt|;
name|newList
operator|.
name|size
operator|++
expr_stmt|;
name|list
operator|.
name|size
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|n
operator|!=
name|newList
operator|.
name|head
condition|)
do|;
return|return
name|newList
return|;
block|}
comment|/**      * Splits the list into 2 lists. This node becomes the head of this list.      * Then 2nd list is returned.      *       * @return An empty list if this is a head node.      */
specifier|public
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|splitBefore
parameter_list|()
block|{
if|if
condition|(
name|isHeadNode
argument_list|()
condition|)
block|{
return|return
operator|new
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
comment|// Create the new list
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|newList
init|=
operator|new
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|head
operator|=
name|list
operator|.
name|head
expr_stmt|;
name|list
operator|.
name|head
operator|=
name|getThis
argument_list|()
expr_stmt|;
name|T
name|newListTail
init|=
name|prev
decl_stmt|;
name|prev
operator|=
name|newList
operator|.
name|head
operator|.
name|prev
expr_stmt|;
comment|// old list: tail<-head
name|prev
operator|.
name|next
operator|=
name|getThis
argument_list|()
expr_stmt|;
comment|// old list: tail->head
name|newList
operator|.
name|head
operator|.
name|prev
operator|=
name|newListTail
expr_stmt|;
comment|// new list: tail<-head
name|newListTail
operator|.
name|next
operator|=
name|newList
operator|.
name|head
expr_stmt|;
comment|// new list: tail->head
comment|// Update all the nodes in the new list so that they know of their new
comment|// list owner.
name|T
name|n
init|=
name|newList
operator|.
name|head
decl_stmt|;
do|do
block|{
name|n
operator|.
name|list
operator|=
name|newList
expr_stmt|;
name|n
operator|=
name|n
operator|.
name|next
expr_stmt|;
name|newList
operator|.
name|size
operator|++
expr_stmt|;
name|list
operator|.
name|size
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|n
operator|!=
name|newList
operator|.
name|head
condition|)
do|;
return|return
name|newList
return|;
block|}
specifier|public
name|boolean
name|isLinked
parameter_list|()
block|{
return|return
name|list
operator|!=
literal|null
return|;
block|}
specifier|public
name|LinkedNodeList
argument_list|<
name|T
argument_list|>
name|getList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

