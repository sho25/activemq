begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2003-2004 The Apache Software Foundation  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or   implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activecluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|ClusterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|ClusterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|impl
operator|.
name|DefaultClusterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_comment
comment|/**  * Test ActiveCluster, ActiveMQ, with an eye to putting WADI on top of them.  *   * @author<a href="mailto:jules@coredevelopers.net">Jules Gosnell</a>  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|ClusterFunctionTest
extends|extends
name|TestCase
block|{
specifier|protected
name|Log
name|_log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClusterFunctionTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ClusterFunctionTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|_connectionFactory
decl_stmt|;
specifier|protected
name|Connection
name|_connection
decl_stmt|;
specifier|protected
name|DefaultClusterFactory
name|_clusterFactory
decl_stmt|;
specifier|protected
name|Cluster
name|_cluster0
decl_stmt|;
specifier|protected
name|Cluster
name|_cluster1
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testResponsePassed
operator|=
literal|false
expr_stmt|;
name|_connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"peer://cluster?persistent=false"
argument_list|)
expr_stmt|;
name|_clusterFactory
operator|=
operator|new
name|DefaultClusterFactory
argument_list|(
name|_connectionFactory
argument_list|)
expr_stmt|;
name|_cluster0
operator|=
name|_clusterFactory
operator|.
name|createCluster
argument_list|(
literal|"ORG.CODEHAUS.WADI.TEST.CLUSTER"
argument_list|)
expr_stmt|;
name|_cluster1
operator|=
name|_clusterFactory
operator|.
name|createCluster
argument_list|(
literal|"ORG.CODEHAUS.WADI.TEST.CLUSTER"
argument_list|)
expr_stmt|;
name|_cluster0
operator|.
name|start
argument_list|()
expr_stmt|;
name|_log
operator|.
name|info
argument_list|(
literal|"started node0: "
operator|+
name|_cluster0
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|_cluster1
operator|.
name|start
argument_list|()
expr_stmt|;
name|_log
operator|.
name|info
argument_list|(
literal|"started node1: "
operator|+
name|_cluster1
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|JMSException
block|{
comment|//      _cluster1.stop();
name|_cluster1
operator|=
literal|null
expr_stmt|;
comment|//      _cluster0.stop();
name|_cluster0
operator|=
literal|null
expr_stmt|;
name|_clusterFactory
operator|=
literal|null
expr_stmt|;
comment|//      _connection.stop();
name|_connection
operator|=
literal|null
expr_stmt|;
comment|//      _connectionFactory.stop();
block|}
comment|//----------------------------------------
class|class
name|MyClusterListener
implements|implements
name|ClusterListener
block|{
specifier|public
name|void
name|onNodeAdd
parameter_list|(
name|ClusterEvent
name|ce
parameter_list|)
block|{
name|_log
operator|.
name|info
argument_list|(
literal|"node added: "
operator|+
name|ce
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onNodeFailed
parameter_list|(
name|ClusterEvent
name|ce
parameter_list|)
block|{
name|_log
operator|.
name|info
argument_list|(
literal|"node failed: "
operator|+
name|ce
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onNodeRemoved
parameter_list|(
name|ClusterEvent
name|ce
parameter_list|)
block|{
name|_log
operator|.
name|info
argument_list|(
literal|"node removed: "
operator|+
name|ce
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onNodeUpdate
parameter_list|(
name|ClusterEvent
name|ce
parameter_list|)
block|{
name|_log
operator|.
name|info
argument_list|(
literal|"node updated: "
operator|+
name|ce
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onCoordinatorChanged
parameter_list|(
name|ClusterEvent
name|ce
parameter_list|)
block|{
name|_log
operator|.
name|info
argument_list|(
literal|"coordinator changed: "
operator|+
name|ce
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|_cluster0
operator|.
name|addClusterListener
argument_list|(
operator|new
name|MyClusterListener
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
literal|"testing123"
argument_list|)
expr_stmt|;
name|_cluster0
operator|.
name|getLocalNode
argument_list|()
operator|.
name|setState
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|_log
operator|.
name|info
argument_list|(
literal|"nodes: "
operator|+
name|_cluster0
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * An invokable piece of work.      */
specifier|static
interface|interface
name|Invocation
extends|extends
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|void
name|invoke
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|ObjectMessage
name|om
parameter_list|)
function_decl|;
block|}
comment|/**      * Listen for messages, if they contain Invocations, invoke() them.      */
class|class
name|InvocationListener
implements|implements
name|MessageListener
block|{
specifier|protected
name|Cluster
name|_cluster
decl_stmt|;
specifier|public
name|InvocationListener
parameter_list|(
name|Cluster
name|cluster
parameter_list|)
block|{
name|_cluster
operator|=
name|cluster
expr_stmt|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|_log
operator|.
name|info
argument_list|(
literal|"message received: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|ObjectMessage
name|om
init|=
literal|null
decl_stmt|;
name|Object
name|tmp
init|=
literal|null
decl_stmt|;
name|Invocation
name|invocation
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
operator|&&
operator|(
name|om
operator|=
operator|(
name|ObjectMessage
operator|)
name|message
operator|)
operator|!=
literal|null
operator|&&
operator|(
name|tmp
operator|=
name|om
operator|.
name|getObject
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|tmp
operator|instanceof
name|Invocation
operator|&&
operator|(
name|invocation
operator|=
operator|(
name|Invocation
operator|)
name|tmp
operator|)
operator|!=
literal|null
condition|)
block|{
name|_log
operator|.
name|info
argument_list|(
literal|"invoking message on: "
operator|+
name|_cluster
operator|.
name|getLocalNode
argument_list|()
argument_list|)
expr_stmt|;
name|invocation
operator|.
name|invoke
argument_list|(
name|_cluster
argument_list|,
name|om
argument_list|)
expr_stmt|;
name|_log
operator|.
name|info
argument_list|(
literal|"message successfully invoked on: "
operator|+
name|_cluster
operator|.
name|getLocalNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_log
operator|.
name|warn
argument_list|(
literal|"bad message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|_log
operator|.
name|warn
argument_list|(
literal|"unexpected problem"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * A request for a piece of work which involves sending a response back to the original requester.      */
specifier|static
class|class
name|Request
implements|implements
name|Invocation
block|{
specifier|public
name|void
name|invoke
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|ObjectMessage
name|om2
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"request received"
argument_list|)
expr_stmt|;
name|ObjectMessage
name|om
init|=
name|cluster
operator|.
name|createObjectMessage
argument_list|()
decl_stmt|;
name|om
operator|.
name|setJMSReplyTo
argument_list|(
name|cluster
operator|.
name|createDestination
argument_list|(
name|cluster
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|om
operator|.
name|setObject
argument_list|(
operator|new
name|Response
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sending response"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|send
argument_list|(
name|om2
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|,
name|om
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"request processed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"problem sending response"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|boolean
name|testResponsePassed
init|=
literal|false
decl_stmt|;
comment|/**      * A response containing a piece of work.      */
specifier|static
class|class
name|Response
implements|implements
name|Invocation
block|{
specifier|public
name|void
name|invoke
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|ObjectMessage
name|om
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"response arrived from: "
operator|+
name|om
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|)
expr_stmt|;
comment|// set a flag to test later
name|ClusterFunctionTest
operator|.
name|testResponsePassed
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"response processed on: "
operator|+
name|cluster
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"problem processing response"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageListener
name|listener0
init|=
operator|new
name|InvocationListener
argument_list|(
name|_cluster0
argument_list|)
decl_stmt|;
name|MessageListener
name|listener1
init|=
operator|new
name|InvocationListener
argument_list|(
name|_cluster1
argument_list|)
decl_stmt|;
comment|// 1->(n-1) messages (excludes self)
name|_cluster0
operator|.
name|createConsumer
argument_list|(
name|_cluster0
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|setMessageListener
argument_list|(
name|listener0
argument_list|)
expr_stmt|;
comment|// 1->1 messages
name|_cluster0
operator|.
name|createConsumer
argument_list|(
name|_cluster0
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|setMessageListener
argument_list|(
name|listener0
argument_list|)
expr_stmt|;
comment|// 1->(n-1) messages (excludes self)
name|_cluster1
operator|.
name|createConsumer
argument_list|(
name|_cluster1
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|setMessageListener
argument_list|(
name|listener1
argument_list|)
expr_stmt|;
comment|// 1->1 messages
name|_cluster1
operator|.
name|createConsumer
argument_list|(
name|_cluster1
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|setMessageListener
argument_list|(
name|listener1
argument_list|)
expr_stmt|;
name|ObjectMessage
name|om
init|=
name|_cluster0
operator|.
name|createObjectMessage
argument_list|()
decl_stmt|;
name|om
operator|.
name|setJMSReplyTo
argument_list|(
name|_cluster0
operator|.
name|createDestination
argument_list|(
name|_cluster0
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|om
operator|.
name|setObject
argument_list|(
operator|new
name|Request
argument_list|()
argument_list|)
expr_stmt|;
name|testResponsePassed
operator|=
literal|false
expr_stmt|;
name|_cluster0
operator|.
name|send
argument_list|(
name|_cluster0
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|,
name|om
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testResponsePassed
argument_list|)
expr_stmt|;
name|_log
operator|.
name|info
argument_list|(
literal|"request/response between same node OK"
argument_list|)
expr_stmt|;
name|testResponsePassed
operator|=
literal|false
expr_stmt|;
name|_cluster0
operator|.
name|send
argument_list|(
name|_cluster1
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|,
name|om
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testResponsePassed
argument_list|)
expr_stmt|;
name|_log
operator|.
name|info
argument_list|(
literal|"request/response between two different nodes OK"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

