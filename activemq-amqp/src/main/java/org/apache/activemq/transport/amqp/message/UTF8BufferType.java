begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|DecoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|EncoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|EncodingCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|PrimitiveType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|PrimitiveTypeEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|TypeEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|WritableBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_comment
comment|/**  * AMQP Type used to allow to proton-j codec to deal with UTF8Buffer types as if  * they were String elements.  */
end_comment

begin_class
specifier|public
class|class
name|UTF8BufferType
implements|implements
name|PrimitiveType
argument_list|<
name|UTF8Buffer
argument_list|>
block|{
specifier|private
specifier|final
name|UTF8BufferEncoding
name|largeBufferEncoding
decl_stmt|;
specifier|private
specifier|final
name|UTF8BufferEncoding
name|smallBufferEncoding
decl_stmt|;
specifier|public
name|UTF8BufferType
parameter_list|(
name|EncoderImpl
name|encoder
parameter_list|,
name|DecoderImpl
name|decoder
parameter_list|)
block|{
name|this
operator|.
name|largeBufferEncoding
operator|=
operator|new
name|LargeUTF8BufferEncoding
argument_list|(
name|encoder
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
name|this
operator|.
name|smallBufferEncoding
operator|=
operator|new
name|SmallUTF8BufferEncoding
argument_list|(
name|encoder
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|UTF8Buffer
argument_list|>
name|getTypeClass
parameter_list|()
block|{
return|return
name|UTF8Buffer
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrimitiveTypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
name|getEncoding
parameter_list|(
name|UTF8Buffer
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|getLength
argument_list|()
operator|<=
literal|255
condition|?
name|smallBufferEncoding
else|:
name|largeBufferEncoding
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrimitiveTypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
name|getCanonicalEncoding
parameter_list|()
block|{
return|return
name|largeBufferEncoding
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|?
extends|extends
name|PrimitiveTypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
argument_list|>
name|getAllEncodings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|smallBufferEncoding
argument_list|,
name|largeBufferEncoding
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|UTF8Buffer
name|value
parameter_list|)
block|{
specifier|final
name|TypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
name|encoding
init|=
name|getEncoding
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|encoding
operator|.
name|writeConstructor
argument_list|()
expr_stmt|;
name|encoding
operator|.
name|writeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
class|class
name|UTF8BufferEncoding
implements|implements
name|PrimitiveTypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
block|{
specifier|private
specifier|final
name|EncoderImpl
name|encoder
decl_stmt|;
specifier|private
specifier|final
name|DecoderImpl
name|decoder
decl_stmt|;
specifier|public
name|UTF8BufferEncoding
parameter_list|(
name|EncoderImpl
name|encoder
parameter_list|,
name|DecoderImpl
name|decoder
parameter_list|)
block|{
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
name|this
operator|.
name|decoder
operator|=
name|decoder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getConstructorSize
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFixedSizeVal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|encodesJavaPrimitive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**          * @return the number of bytes the size portion of the encoded value requires.          */
specifier|public
specifier|abstract
name|int
name|getSizeBytes
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|writeConstructor
parameter_list|()
block|{
name|getEncoder
argument_list|()
operator|.
name|writeRaw
argument_list|(
name|getEncodingCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeValue
parameter_list|(
name|UTF8Buffer
name|value
parameter_list|)
block|{
name|writeSize
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|WritableBuffer
name|buffer
init|=
name|getEncoder
argument_list|()
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|value
operator|.
name|getData
argument_list|()
argument_list|,
name|value
operator|.
name|getOffset
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          * Write the size of the buffer using the appropriate type (byte or int) depending          * on the encoding type being used.          *          * @param value          *      The UTF8Buffer value that is being encoded.          */
specifier|public
specifier|abstract
name|void
name|writeSize
parameter_list|(
name|UTF8Buffer
name|value
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|int
name|getValueSize
parameter_list|(
name|UTF8Buffer
name|value
parameter_list|)
block|{
return|return
name|getSizeBytes
argument_list|()
operator|+
name|value
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|UTF8Buffer
argument_list|>
name|getTypeClass
parameter_list|()
block|{
return|return
name|UTF8Buffer
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrimitiveType
argument_list|<
name|UTF8Buffer
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|UTF8BufferType
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|encodesSuperset
parameter_list|(
name|TypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
name|encoding
parameter_list|)
block|{
return|return
operator|(
name|getType
argument_list|()
operator|==
name|encoding
operator|.
name|getType
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UTF8Buffer
name|readValue
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No decoding to UTF8Buffer exists"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|skipValue
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No decoding to UTF8Buffer exists"
argument_list|)
throw|;
block|}
specifier|public
name|DecoderImpl
name|getDecoder
parameter_list|()
block|{
return|return
name|decoder
return|;
block|}
specifier|public
name|EncoderImpl
name|getEncoder
parameter_list|()
block|{
return|return
name|encoder
return|;
block|}
block|}
specifier|public
class|class
name|LargeUTF8BufferEncoding
extends|extends
name|UTF8BufferEncoding
block|{
specifier|public
name|LargeUTF8BufferEncoding
parameter_list|(
name|EncoderImpl
name|encoder
parameter_list|,
name|DecoderImpl
name|decoder
parameter_list|)
block|{
name|super
argument_list|(
name|encoder
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getEncodingCode
parameter_list|()
block|{
return|return
name|EncodingCodes
operator|.
name|STR32
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSizeBytes
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|BYTES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSize
parameter_list|(
name|UTF8Buffer
name|value
parameter_list|)
block|{
name|getEncoder
argument_list|()
operator|.
name|getBuffer
argument_list|()
operator|.
name|putInt
argument_list|(
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SmallUTF8BufferEncoding
extends|extends
name|UTF8BufferEncoding
block|{
specifier|public
name|SmallUTF8BufferEncoding
parameter_list|(
name|EncoderImpl
name|encoder
parameter_list|,
name|DecoderImpl
name|decoder
parameter_list|)
block|{
name|super
argument_list|(
name|encoder
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getEncodingCode
parameter_list|()
block|{
return|return
name|EncodingCodes
operator|.
name|STR8
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSizeBytes
parameter_list|()
block|{
return|return
name|Byte
operator|.
name|BYTES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSize
parameter_list|(
name|UTF8Buffer
name|value
parameter_list|)
block|{
name|getEncoder
argument_list|()
operator|.
name|getBuffer
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

