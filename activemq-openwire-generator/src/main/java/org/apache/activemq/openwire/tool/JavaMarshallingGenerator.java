begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JAnnotationValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JProperty
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision: 384826 $  */
end_comment

begin_class
specifier|public
class|class
name|JavaMarshallingGenerator
extends|extends
name|MultiSourceGenerator
block|{
specifier|protected
name|List
name|concreteClasses
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|File
name|factoryFile
decl_stmt|;
specifier|protected
name|String
name|factoryFileName
init|=
literal|"MarshallerFactory"
decl_stmt|;
specifier|protected
name|String
name|indent
init|=
literal|"    "
decl_stmt|;
specifier|protected
name|String
name|targetDir
init|=
literal|"src/main/java"
decl_stmt|;
specifier|public
name|Object
name|run
parameter_list|()
block|{
if|if
condition|(
name|destDir
operator|==
literal|null
condition|)
block|{
name|destDir
operator|=
operator|new
name|File
argument_list|(
name|targetDir
operator|+
literal|"/org/apache/activemq/openwire/v"
operator|+
name|getOpenwireVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|answer
init|=
name|super
operator|.
name|run
argument_list|()
decl_stmt|;
name|processFactory
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|generateFile
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|generateLicence
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"package org.apache.activemq.openwire.v"
operator|+
name|getOpenwireVersion
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import java.io.DataInput;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import java.io.DataOutput;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import java.io.IOException;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.activemq.openwire.*;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.activemq.command.*;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getJclass
argument_list|()
operator|.
name|getImportedPackages
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JPackage
name|pkg
init|=
name|getJclass
argument_list|()
operator|.
name|getImportedPackages
argument_list|()
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|pkg
operator|.
name|getClasses
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|JClass
name|clazz
init|=
name|pkg
operator|.
name|getClasses
argument_list|()
index|[
name|j
index|]
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import "
operator|+
name|clazz
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Marshalling code for Open Wire Format for "
operator|+
name|getClassName
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * NOTE!: This file is auto generated - do not modify!"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *        if you need to make a change, please see the modify the groovy scripts in the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *        under src/gram/script and then use maven openwire:generate to regenerate "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *        this file."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * @version $Revision$"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"public "
operator|+
name|getAbstractClassText
argument_list|()
operator|+
literal|"class "
operator|+
name|getClassName
argument_list|()
operator|+
literal|" extends "
operator|+
name|getBaseClass
argument_list|()
operator|+
literal|" {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAbstractClass
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * Return the type of Data Structure we marshal"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @return short representation of the type data structure"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    public byte getDataStructureType() {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        return "
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".DATA_STRUCTURE_TYPE;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @return a new object instance"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    public DataStructure createObject() {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        return new "
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * Un-marshal an object instance from the data input stream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @param o the object to un-marshal"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @param dataIn the data input stream to build the object from"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @throws IOException"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        super.tightUnmarshal(wireFormat, o, dataIn, bs);"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" info = ("
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")o;"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMarshallerAware
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        info.beforeUnmarshall(wireFormat);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
block|}
name|generateTightUnmarshalBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMarshallerAware
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        info.afterUnmarshall(wireFormat);"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * Write the booleans that this object uses to a BooleanStream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" info = ("
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")o;"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMarshallerAware
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        info.beforeMarshall(wireFormat);"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        int rc = super.tightMarshal1(wireFormat, o, bs);"
argument_list|)
expr_stmt|;
name|int
name|baseSize
init|=
name|generateTightMarshal1Body
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        return rc + "
operator|+
name|baseSize
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * Write a object instance to data output stream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @param o the instance to be marshaled"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @param dataOut the output stream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @throws IOException thrown if an error occurs"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        super.tightMarshal2(wireFormat, o, dataOut, bs);"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" info = ("
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")o;"
argument_list|)
expr_stmt|;
block|}
name|generateTightMarshal2Body
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMarshallerAware
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        info.afterMarshall(wireFormat);"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * Un-marshal an object instance from the data input stream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @param o the object to un-marshal"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @param dataIn the data input stream to build the object from"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * @throws IOException"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        super.looseUnmarshal(wireFormat, o, dataIn);"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" info = ("
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")o;"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMarshallerAware
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        info.beforeUnmarshall(wireFormat);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
block|}
name|generateLooseUnmarshalBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMarshallerAware
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        info.afterUnmarshall(wireFormat);"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * Write the booleans that this object uses to a BooleanStream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" info = ("
operator|+
name|getJclass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")o;"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMarshallerAware
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        info.beforeMarshall(wireFormat);"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        super.looseMarshal(wireFormat, o, dataOut);"
argument_list|)
expr_stmt|;
name|generateLooseMarshalBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateLicence
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Licensed to the Apache Software Foundation (ASF) under one or more"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * contributor license agreements.  See the NOTICE file distributed with"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * this work for additional information regarding copyright ownership."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * The ASF licenses this file to You under the Apache License, Version 2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * (the \"License\"); you may not use this file except in compliance with"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * the License.  You may obtain a copy of the License at"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * http://www.apache.org/licenses/LICENSE-2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Unless required by applicable law or agreed to in writing, software"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * distributed under the License is distributed on an \"AS IS\" BASIS,"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * See the License for the specific language governing permissions and"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * limitations under the License."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processFactory
parameter_list|()
block|{
if|if
condition|(
name|factoryFile
operator|==
literal|null
condition|)
block|{
name|factoryFile
operator|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|factoryFileName
operator|+
name|filePostFix
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|factoryFile
argument_list|)
argument_list|)
expr_stmt|;
name|generateFactory
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|generateFactory
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|generateLicence
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"package org.apache.activemq.openwire.v"
operator|+
name|getOpenwireVersion
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.activemq.openwire.DataStreamMarshaller;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"import org.apache.activemq.openwire.OpenWireFormat;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * MarshallerFactory for Open Wire Format."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * NOTE!: This file is auto generated - do not modify!"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *        if you need to make a change, please see the modify the groovy scripts in the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *        under src/gram/script and then use maven openwire:generate to regenerate "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *        this file."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * @version $Revision$"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"public class MarshallerFactory {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    /**"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     * Creates a Map of command type -> Marshallers"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"     */"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    static final private DataStreamMarshaller marshaller[] = new DataStreamMarshaller[256];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    static {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|(
name|getConcreteClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|JClass
name|c1
init|=
operator|(
name|JClass
operator|)
name|o1
decl_stmt|;
name|JClass
name|c2
init|=
operator|(
name|JClass
operator|)
name|o2
decl_stmt|;
return|return
name|c1
operator|.
name|getSimpleName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSimpleName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JClass
name|jclass
init|=
operator|(
name|JClass
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        add(new "
operator|+
name|jclass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"Marshaller());"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    static private void add(DataStreamMarshaller dsm) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        marshaller[dsm.getDataStructureType()] = dsm;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    static public DataStreamMarshaller[] createMarshallerMap(OpenWireFormat wireFormat) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        return marshaller;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processClass
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
name|super
operator|.
name|processClass
argument_list|(
name|jclass
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jclass
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|concreteClasses
operator|.
name|add
argument_list|(
name|jclass
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getClassName
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
return|return
name|super
operator|.
name|getClassName
argument_list|(
name|jclass
argument_list|)
operator|+
literal|"Marshaller"
return|;
block|}
specifier|protected
name|String
name|getBaseClassName
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
name|String
name|answer
init|=
literal|"BaseDataStreamMarshaller"
decl_stmt|;
name|JClass
name|superclass
init|=
name|jclass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|String
name|superName
init|=
name|superclass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|superName
operator|.
name|equals
argument_list|(
literal|"Object"
argument_list|)
operator|&&
operator|!
name|superName
operator|.
name|equals
argument_list|(
literal|"JNDIBaseStorable"
argument_list|)
operator|&&
operator|!
name|superName
operator|.
name|equals
argument_list|(
literal|"DataStructureSupport"
argument_list|)
condition|)
block|{
name|answer
operator|=
name|superName
operator|+
literal|"Marshaller"
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|initialiseManuallyMaintainedClasses
parameter_list|()
block|{ 	}
specifier|protected
name|void
name|generateTightUnmarshalBody
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyTypeName
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
operator|&&
operator|!
name|propertyTypeName
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
name|generateTightUnmarshalBodyForArrayProperty
argument_list|(
name|out
argument_list|,
name|property
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateTightUnmarshalBodyForProperty
argument_list|(
name|out
argument_list|,
name|property
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|generateTightUnmarshalBodyForProperty
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|JProperty
name|property
parameter_list|,
name|JAnnotationValue
name|size
parameter_list|)
block|{
name|String
name|setter
init|=
name|property
operator|.
name|getSetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(bs.readBoolean());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readByte());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readChar());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readShort());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readInt());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(tightUnmarshalLong(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(tightUnmarshalString(dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(tightUnmarshalConstByteArray(dataIn, bs, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"));"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(tightUnmarshalByteArray(dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(tightUnmarshalByteSequence(dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|") tightUnmarsalThrowable(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|") tightUnmarsalCachedObject(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|") tightUnmarsalNestedObject(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|generateTightUnmarshalBodyForArrayProperty
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|JProperty
name|property
parameter_list|,
name|JAnnotationValue
name|size
parameter_list|)
block|{
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|arrayType
init|=
name|propertyType
operator|.
name|getArrayComponentType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|String
name|setter
init|=
name|property
operator|.
name|getSetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
name|arrayType
operator|+
literal|" value[] = new "
operator|+
name|arrayType
operator|+
literal|"["
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
literal|"for( int i=0; i< "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"; i++ ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                value[i] = ("
operator|+
name|arrayType
operator|+
literal|") tightUnmarsalNestedObject(wireFormat,dataIn, bs);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(value);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        if (bs.readBoolean()) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            short size = dataIn.readShort();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
name|arrayType
operator|+
literal|" value[] = new "
operator|+
name|arrayType
operator|+
literal|"[size];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            for( int i=0; i< size; i++ ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                value[i] = ("
operator|+
name|arrayType
operator|+
literal|") tightUnmarsalNestedObject(wireFormat,dataIn, bs);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(value);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        else {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(null);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|generateTightMarshal1Body
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|int
name|baseSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|getter
init|=
literal|"info."
operator|+
name|property
operator|.
name|getGetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()"
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        bs.writeBoolean("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc+=tightMarshalLong1(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalString1("
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
if|if
condition|(
name|size
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalByteArray1("
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalConstByteArray1("
operator|+
name|getter
operator|+
literal|", bs, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalByteSequence1("
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalObjectArrayConstSize1(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalObjectArray1(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|propertyType
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalThrowable1(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)"
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)"
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|baseSize
return|;
block|}
specifier|protected
name|void
name|generateTightMarshal2Body
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|getter
init|=
literal|"info."
operator|+
name|property
operator|.
name|getGetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()"
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        bs.readBoolean();"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeByte("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeChar("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeShort("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeInt("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalLong2(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalString2("
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
name|String
name|mandatory
init|=
name|getMandatoryFlag
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalConstByteArray2("
operator|+
name|getter
operator|+
literal|", dataOut, bs, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalByteArray2("
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalByteSequence2("
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalObjectArrayConstSize2(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalObjectArray2(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|propertyType
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalThrowable2(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalCachedObject2(wireFormat, (DataStructure)"
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        tightMarshalNestedObject2(wireFormat, (DataStructure)"
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|generateLooseMarshalBody
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|getter
init|=
literal|"info."
operator|+
name|property
operator|.
name|getGetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()"
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeBoolean("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeByte("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeChar("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeShort("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        dataOut.writeInt("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalLong(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalString("
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalConstByteArray(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalByteArray(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalByteSequence(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalObjectArrayConstSize(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalObjectArray(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|propertyType
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalThrowable(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalCachedObject(wireFormat, (DataStructure)"
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        looseMarshalNestedObject(wireFormat, (DataStructure)"
operator|+
name|getter
operator|+
literal|", dataOut);"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|generateLooseUnmarshalBody
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyTypeName
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
operator|&&
operator|!
name|propertyTypeName
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
name|generateLooseUnmarshalBodyForArrayProperty
argument_list|(
name|out
argument_list|,
name|property
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateLooseUnmarshalBodyForProperty
argument_list|(
name|out
argument_list|,
name|property
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|generateLooseUnmarshalBodyForProperty
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|JProperty
name|property
parameter_list|,
name|JAnnotationValue
name|size
parameter_list|)
block|{
name|String
name|setter
init|=
name|property
operator|.
name|getSetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readBoolean());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readByte());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readChar());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readShort());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(dataIn.readInt());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(looseUnmarshalLong(wireFormat, dataIn));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(looseUnmarshalString(dataIn));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(looseUnmarshalConstByteArray(dataIn, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"));"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(looseUnmarshalByteArray(dataIn));"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(looseUnmarshalByteSequence(dataIn));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|") looseUnmarsalThrowable(wireFormat, dataIn));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|") looseUnmarsalCachedObject(wireFormat, dataIn));"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|") looseUnmarsalNestedObject(wireFormat, dataIn));"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|generateLooseUnmarshalBodyForArrayProperty
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|JProperty
name|property
parameter_list|,
name|JAnnotationValue
name|size
parameter_list|)
block|{
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|arrayType
init|=
name|propertyType
operator|.
name|getArrayComponentType
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
decl_stmt|;
name|String
name|setter
init|=
name|property
operator|.
name|getSetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
name|arrayType
operator|+
literal|" value[] = new "
operator|+
name|arrayType
operator|+
literal|"["
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
literal|"for( int i=0; i< "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"; i++ ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                value[i] = ("
operator|+
name|arrayType
operator|+
literal|") looseUnmarsalNestedObject(wireFormat,dataIn);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(value);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        if (dataIn.readBoolean()) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            short size = dataIn.readShort();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
name|arrayType
operator|+
literal|" value[] = new "
operator|+
name|arrayType
operator|+
literal|"[size];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            for( int i=0; i< size; i++ ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                value[i] = ("
operator|+
name|arrayType
operator|+
literal|") looseUnmarsalNestedObject(wireFormat,dataIn);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(value);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        else {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(null);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns whether or not the given annotation has a mandatory flag on it or 	 * not 	 */
specifier|protected
name|String
name|getMandatoryFlag
parameter_list|(
name|JAnnotation
name|annotation
parameter_list|)
block|{
name|JAnnotationValue
name|value
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"mandatory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|text
init|=
name|value
operator|.
name|asString
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
block|}
return|return
literal|"false"
return|;
block|}
specifier|public
name|List
name|getConcreteClasses
parameter_list|()
block|{
return|return
name|concreteClasses
return|;
block|}
specifier|public
name|void
name|setConcreteClasses
parameter_list|(
name|List
name|concreteClasses
parameter_list|)
block|{
name|this
operator|.
name|concreteClasses
operator|=
name|concreteClasses
expr_stmt|;
block|}
specifier|public
name|File
name|getFactoryFile
parameter_list|()
block|{
return|return
name|factoryFile
return|;
block|}
specifier|public
name|void
name|setFactoryFile
parameter_list|(
name|File
name|factoryFile
parameter_list|)
block|{
name|this
operator|.
name|factoryFile
operator|=
name|factoryFile
expr_stmt|;
block|}
specifier|public
name|String
name|getFactoryFileName
parameter_list|()
block|{
return|return
name|factoryFileName
return|;
block|}
specifier|public
name|void
name|setFactoryFileName
parameter_list|(
name|String
name|factoryFileName
parameter_list|)
block|{
name|this
operator|.
name|factoryFileName
operator|=
name|factoryFileName
expr_stmt|;
block|}
specifier|public
name|String
name|getIndent
parameter_list|()
block|{
return|return
name|indent
return|;
block|}
specifier|public
name|void
name|setIndent
parameter_list|(
name|String
name|indent
parameter_list|)
block|{
name|this
operator|.
name|indent
operator|=
name|indent
expr_stmt|;
block|}
specifier|public
name|String
name|getTargetDir
parameter_list|()
block|{
return|return
name|targetDir
return|;
block|}
specifier|public
name|void
name|setTargetDir
parameter_list|(
name|String
name|sourceDir
parameter_list|)
block|{
name|this
operator|.
name|targetDir
operator|=
name|sourceDir
expr_stmt|;
block|}
block|}
end_class

end_unit

