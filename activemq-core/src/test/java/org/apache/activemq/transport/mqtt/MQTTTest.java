begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|AutoFailTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|CONNECT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
operator|.
name|utf8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
specifier|protected
name|LinkedList
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|LinkedList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|numberOfMessages
decl_stmt|;
name|AutoFailTestSupport
name|autoFailTestSupport
init|=
operator|new
name|AutoFailTestSupport
argument_list|()
block|{}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|autoFailTestSupport
operator|.
name|startAutoFailThread
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numberOfMessages
operator|=
literal|2000
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|autoFailTestSupport
operator|.
name|stopAutoFailThread
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendAndReceiveMQTT
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
operator|new
name|MQTT
argument_list|()
decl_stmt|;
specifier|final
name|BlockingConnection
name|subscribeConnection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|subscribeConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
name|topic
init|=
operator|new
name|Topic
argument_list|(
literal|"foo/bah"
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|)
decl_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
name|topic
block|}
decl_stmt|;
name|subscribeConnection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfMessages
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Message
name|message
init|=
name|subscribeConnection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|BlockingConnection
name|publisherConnection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|publisherConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Message "
operator|+
name|i
decl_stmt|;
name|publisherConnection
operator|.
name|publish
argument_list|(
name|topic
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|subscribeConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publisherConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendAndReceiveAtMostOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|utf8
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|)
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendAndReceiveAtLeastOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|utf8
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendAndReceiveExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|publisher
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|BlockingConnection
name|pubConnection
init|=
name|publisher
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|pubConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|MQTT
name|subscriber
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|BlockingConnection
name|subConnection
init|=
name|subscriber
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|subConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|utf8
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
decl_stmt|;
name|subConnection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|pubConnection
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|subConnection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|pubConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendAndReceiveLargeMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|publisher
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|BlockingConnection
name|pubConnection
init|=
name|publisher
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|pubConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|MQTT
name|subscriber
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|BlockingConnection
name|subConnection
init|=
name|subscriber
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|subConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|utf8
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
decl_stmt|;
name|subConnection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|pubConnection
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|subConnection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|payload
argument_list|,
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|pubConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendMQTTReceiveJMS
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
name|ActiveMQConnectionFactory
operator|.
name|DEFAULT_BROKER_BIND_URL
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
specifier|final
name|String
name|DESTINATION_NAME
init|=
literal|"foo.*"
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|ActiveMQConnection
name|activeMQConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
operator|new
name|ActiveMQConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|activeMQConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|activeMQConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|jmsTopic
init|=
name|s
operator|.
name|createTopic
argument_list|(
name|DESTINATION_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|jmsTopic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"foo/bah"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ByteSequence
name|bs
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|bs
operator|.
name|data
argument_list|,
name|bs
operator|.
name|offset
argument_list|,
name|bs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|activeMQConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendJMSReceiveMQTT
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
name|ActiveMQConnectionFactory
operator|.
name|DEFAULT_BROKER_BIND_URL
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|ActiveMQConnection
name|activeMQConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
operator|new
name|ActiveMQConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|activeMQConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|activeMQConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|jmsTopic
init|=
name|s
operator|.
name|createTopic
argument_list|(
literal|"foo.far"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|jmsTopic
argument_list|)
decl_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|utf8
argument_list|(
literal|"foo/+"
argument_list|)
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|)
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"This is Test Message: "
operator|+
name|i
decl_stmt|;
name|TextMessage
name|sendMessage
init|=
name|s
operator|.
name|createTextMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|sendMessage
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInactivityTimeoutDisconnectsClient
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|TransportConnector
name|mqttConnector
init|=
name|brokerService
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"mqtt"
argument_list|)
decl_stmt|;
comment|// manually need to create the client so we don't send keep alive (PINGREQ) frames to keep the conn
comment|// from timing out
name|Transport
name|clientTransport
init|=
name|createManualMQTTClient
argument_list|()
decl_stmt|;
name|clientTransport
operator|.
name|start
argument_list|()
expr_stmt|;
name|CONNECT
name|connectFrame
init|=
operator|new
name|CONNECT
argument_list|()
operator|.
name|clientId
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"testClient"
argument_list|)
argument_list|)
operator|.
name|keepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|clientTransport
operator|.
name|oneway
argument_list|(
name|connectFrame
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for broker to register the MQTT connection
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mqttConnector
operator|.
name|getConnections
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// wait for the inactivity monitor to remove the connection due to inactivity
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mqttConnector
operator|.
name|getConnections
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have seen client transport exception"
argument_list|,
name|exceptions
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Transport
name|createManualMQTTClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|Transport
name|clientTransport
init|=
operator|new
name|TcpTransport
argument_list|(
operator|new
name|MQTTWireFormat
argument_list|()
argument_list|,
name|SocketFactory
operator|.
name|getDefault
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:1883"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|clientTransport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{             }
block|}
argument_list|)
expr_stmt|;
return|return
name|clientTransport
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPingKeepsInactivityMonitorAlive
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|connection
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTurnOffInactivityMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
name|brokerService
argument_list|,
literal|"?transport.useInactivityMonitor=false"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|connection
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPingOnMQTTNIO
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"mqtt+nio://localhost:1883"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|connection
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultKeepAliveWhenClientSpecifiesZero
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default keep alive in milliseconds
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"mqtt://localhost:1883?transport.defaultKeepAlive=2000"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|connection
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addMQTTConnector
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"mqtt://localhost:1883"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addMQTTConnector
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|String
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"mqtt://localhost:1883"
operator|+
name|config
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MQTT
name|createMQTTConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
operator|new
name|MQTT
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|,
literal|1883
argument_list|)
expr_stmt|;
comment|// shut off connect retry
name|mqtt
operator|.
name|setConnectAttemptsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setReconnectAttemptsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|mqtt
return|;
block|}
block|}
end_class

end_unit

