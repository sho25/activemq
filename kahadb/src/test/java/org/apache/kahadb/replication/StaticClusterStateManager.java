begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBClusterNodeStatus
import|;
end_import

begin_class
specifier|public
class|class
name|StaticClusterStateManager
implements|implements
name|ClusterStateManager
block|{
specifier|final
specifier|private
name|ArrayList
argument_list|<
name|ClusterListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|ClusterListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
specifier|private
name|int
name|startCounter
decl_stmt|;
specifier|synchronized
specifier|public
name|ClusterState
name|getClusterState
parameter_list|()
block|{
return|return
name|clusterState
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|setClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|this
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
name|fireClusterChange
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|addListener
parameter_list|(
name|ClusterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|fireClusterChange
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|removeListener
parameter_list|(
name|ClusterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|startCounter
operator|++
expr_stmt|;
name|fireClusterChange
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|private
name|void
name|fireClusterChange
parameter_list|()
block|{
if|if
condition|(
name|startCounter
operator|>
literal|0
operator|&&
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
operator|&&
name|clusterState
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClusterListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onClusterChange
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|startCounter
operator|--
expr_stmt|;
block|}
specifier|public
name|void
name|addMember
parameter_list|(
name|String
name|node
parameter_list|)
block|{     }
specifier|public
name|void
name|removeMember
parameter_list|(
name|String
name|node
parameter_list|)
block|{     }
specifier|public
name|void
name|setMemberStatus
parameter_list|(
name|PBClusterNodeStatus
name|status
parameter_list|)
block|{     }
block|}
end_class

end_unit

