begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|BrokerProducer
extends|extends
name|DefaultAsyncProducer
block|{
specifier|private
specifier|final
name|BrokerEndpoint
name|brokerEndpoint
decl_stmt|;
specifier|public
name|BrokerProducer
parameter_list|(
name|BrokerEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|brokerEndpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
comment|//In the middle of the broker - InOut doesn't make any sense
comment|//so we do in only
return|return
name|processInOnly
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// must catch exception to ensure callback is invoked as expected
comment|// to let Camel error handling deal with this
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|protected
name|boolean
name|processInOnly
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
name|ActiveMQMessage
name|message
init|=
name|getMessage
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setDestination
argument_list|(
name|brokerEndpoint
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
comment|//if the ProducerBrokerExchange is null the broker will create it
name|ProducerBrokerExchange
name|producerBrokerExchange
init|=
operator|(
name|ProducerBrokerExchange
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|BrokerEndpoint
operator|.
name|PRODUCER_BROKER_EXCHANGE
argument_list|)
decl_stmt|;
name|brokerEndpoint
operator|.
name|inject
argument_list|(
name|producerBrokerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|ActiveMQMessage
name|getMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|JMSException
block|{
name|Message
name|camelMessage
init|=
name|getMessageFromExchange
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|checkOriginalMessage
argument_list|(
name|camelMessage
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|result
init|=
call|(
name|ActiveMQMessage
call|)
argument_list|(
operator|(
name|JmsMessage
operator|)
name|camelMessage
argument_list|)
operator|.
name|getJmsMessage
argument_list|()
decl_stmt|;
name|applyNewHeaders
argument_list|(
name|result
argument_list|,
name|camelMessage
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|Message
name|getMessageFromExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
return|return
name|exchange
operator|.
name|getOut
argument_list|()
return|;
block|}
return|return
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkOriginalMessage
parameter_list|(
name|Message
name|camelMessage
parameter_list|)
throws|throws
name|IllegalStateException
block|{
comment|/**          * We purposely don't want to support injecting messages half-way through          * broker processing - use the activemq camel component for that - but          * we will support changing message headers and destinations.          */
if|if
condition|(
operator|!
operator|(
name|camelMessage
operator|instanceof
name|JmsMessage
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not the original message from the broker "
operator|+
name|camelMessage
argument_list|)
throw|;
block|}
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
operator|(
operator|(
name|JmsMessage
operator|)
name|camelMessage
operator|)
operator|.
name|getJmsMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|message
operator|instanceof
name|ActiveMQMessage
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not the original message from the broker "
operator|+
name|message
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|applyNewHeaders
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|JMSException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|message
operator|.
name|setObjectProperty
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

