begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|ReflectionUtilTest
extends|extends
name|TestCase
block|{
specifier|private
name|boolean
name|booleanData
decl_stmt|;
specifier|private
name|int
name|intData
decl_stmt|;
specifier|private
name|long
name|longData
decl_stmt|;
specifier|private
name|short
name|shortData
decl_stmt|;
specifier|private
name|double
name|doubleData
decl_stmt|;
specifier|private
name|float
name|floatData
decl_stmt|;
specifier|private
name|byte
name|byteData
decl_stmt|;
specifier|private
name|char
name|charData
decl_stmt|;
specifier|private
name|String
name|stringData
decl_stmt|;
specifier|private
name|ReflectionUtilTest
name|testData
decl_stmt|;
specifier|public
name|void
name|testDataTypeConfig
parameter_list|()
block|{
comment|// Initialize variables;
name|booleanData
operator|=
literal|false
expr_stmt|;
name|intData
operator|=
literal|0
expr_stmt|;
name|longData
operator|=
literal|0
expr_stmt|;
name|shortData
operator|=
literal|0
expr_stmt|;
name|doubleData
operator|=
literal|0.0
expr_stmt|;
name|floatData
operator|=
literal|0.0F
expr_stmt|;
name|byteData
operator|=
literal|0
expr_stmt|;
name|charData
operator|=
literal|'0'
expr_stmt|;
name|stringData
operator|=
literal|"false"
expr_stmt|;
name|Object
name|targetObj
init|=
operator|new
name|ReflectionUtilTest
argument_list|()
decl_stmt|;
comment|// Set properties
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.booleanData"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.intData"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.longData"
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.shortData"
argument_list|,
literal|"3000"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.doubleData"
argument_list|,
literal|"1234.567"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.floatData"
argument_list|,
literal|"9876.543"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.byteData"
argument_list|,
literal|"127"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.charData"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.stringData"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"test.testData"
argument_list|,
literal|"TEST.FOO.BAR"
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|targetObj
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// Check config
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|isBooleanData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getIntData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getLongData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3000
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getShortData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234.567
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getDoubleData
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9876.543
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getFloatData
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|127
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getByteData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'A'
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getCharData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getStringData
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TEST.FOO.BAR"
argument_list|,
operator|(
operator|(
name|ReflectionUtilTest
operator|)
name|targetObj
operator|)
operator|.
name|getTestData
argument_list|()
operator|.
name|getStringData
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNestedConfig
parameter_list|()
block|{
name|ReflectionUtilTest
name|t1
init|=
operator|new
name|ReflectionUtilTest
argument_list|()
decl_stmt|;
name|ReflectionUtilTest
name|t2
init|=
operator|new
name|ReflectionUtilTest
argument_list|()
decl_stmt|;
name|ReflectionUtilTest
name|t3
init|=
operator|new
name|ReflectionUtilTest
argument_list|()
decl_stmt|;
name|ReflectionUtilTest
name|t4
init|=
operator|new
name|ReflectionUtilTest
argument_list|()
decl_stmt|;
name|ReflectionUtilTest
name|t5
init|=
operator|new
name|ReflectionUtilTest
argument_list|()
decl_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|t1
argument_list|,
literal|"test.stringData"
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t1"
argument_list|,
name|t1
operator|.
name|getStringData
argument_list|()
argument_list|)
expr_stmt|;
name|t1
operator|.
name|setTestData
argument_list|(
name|t2
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|t1
argument_list|,
literal|"test.testData.stringData"
argument_list|,
literal|"t2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t2"
argument_list|,
name|t2
operator|.
name|getStringData
argument_list|()
argument_list|)
expr_stmt|;
name|t2
operator|.
name|setTestData
argument_list|(
name|t3
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|t1
argument_list|,
literal|"test.testData.testData.stringData"
argument_list|,
literal|"t3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t3"
argument_list|,
name|t3
operator|.
name|getStringData
argument_list|()
argument_list|)
expr_stmt|;
name|t3
operator|.
name|setTestData
argument_list|(
name|t4
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|t1
argument_list|,
literal|"test.testData.testData.testData.stringData"
argument_list|,
literal|"t4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t4"
argument_list|,
name|t4
operator|.
name|getStringData
argument_list|()
argument_list|)
expr_stmt|;
name|t4
operator|.
name|setTestData
argument_list|(
name|t5
argument_list|)
expr_stmt|;
name|ReflectionUtil
operator|.
name|configureClass
argument_list|(
name|t1
argument_list|,
literal|"test.testData.testData.testData.testData.stringData"
argument_list|,
literal|"t5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t5"
argument_list|,
name|t5
operator|.
name|getStringData
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBooleanData
parameter_list|()
block|{
return|return
name|booleanData
return|;
block|}
specifier|public
name|void
name|setBooleanData
parameter_list|(
name|boolean
name|booleanData
parameter_list|)
block|{
name|this
operator|.
name|booleanData
operator|=
name|booleanData
expr_stmt|;
block|}
specifier|public
name|int
name|getIntData
parameter_list|()
block|{
return|return
name|intData
return|;
block|}
specifier|public
name|void
name|setIntData
parameter_list|(
name|int
name|intData
parameter_list|)
block|{
name|this
operator|.
name|intData
operator|=
name|intData
expr_stmt|;
block|}
specifier|public
name|long
name|getLongData
parameter_list|()
block|{
return|return
name|longData
return|;
block|}
specifier|public
name|void
name|setLongData
parameter_list|(
name|long
name|longData
parameter_list|)
block|{
name|this
operator|.
name|longData
operator|=
name|longData
expr_stmt|;
block|}
specifier|public
name|short
name|getShortData
parameter_list|()
block|{
return|return
name|shortData
return|;
block|}
specifier|public
name|void
name|setShortData
parameter_list|(
name|short
name|shortData
parameter_list|)
block|{
name|this
operator|.
name|shortData
operator|=
name|shortData
expr_stmt|;
block|}
specifier|public
name|double
name|getDoubleData
parameter_list|()
block|{
return|return
name|doubleData
return|;
block|}
specifier|public
name|void
name|setDoubleData
parameter_list|(
name|double
name|doubleData
parameter_list|)
block|{
name|this
operator|.
name|doubleData
operator|=
name|doubleData
expr_stmt|;
block|}
specifier|public
name|float
name|getFloatData
parameter_list|()
block|{
return|return
name|floatData
return|;
block|}
specifier|public
name|void
name|setFloatData
parameter_list|(
name|float
name|floatData
parameter_list|)
block|{
name|this
operator|.
name|floatData
operator|=
name|floatData
expr_stmt|;
block|}
specifier|public
name|byte
name|getByteData
parameter_list|()
block|{
return|return
name|byteData
return|;
block|}
specifier|public
name|void
name|setByteData
parameter_list|(
name|byte
name|byteData
parameter_list|)
block|{
name|this
operator|.
name|byteData
operator|=
name|byteData
expr_stmt|;
block|}
specifier|public
name|char
name|getCharData
parameter_list|()
block|{
return|return
name|charData
return|;
block|}
specifier|public
name|void
name|setCharData
parameter_list|(
name|char
name|charData
parameter_list|)
block|{
name|this
operator|.
name|charData
operator|=
name|charData
expr_stmt|;
block|}
specifier|public
name|String
name|getStringData
parameter_list|()
block|{
return|return
name|stringData
return|;
block|}
specifier|public
name|void
name|setStringData
parameter_list|(
name|String
name|stringData
parameter_list|)
block|{
name|this
operator|.
name|stringData
operator|=
name|stringData
expr_stmt|;
block|}
specifier|public
name|ReflectionUtilTest
name|getTestData
parameter_list|()
block|{
return|return
name|testData
return|;
block|}
specifier|public
name|void
name|setTestData
parameter_list|(
name|ReflectionUtilTest
name|testData
parameter_list|)
block|{
name|this
operator|.
name|testData
operator|=
name|testData
expr_stmt|;
block|}
specifier|public
specifier|static
name|ReflectionUtilTest
name|valueOf
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|ReflectionUtilTest
name|obj
init|=
operator|new
name|ReflectionUtilTest
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setStringData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
block|}
end_class

end_unit

