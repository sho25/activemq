begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|jndi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQInitialContextFactoryTest
extends|extends
name|JNDITestSupport
block|{
specifier|public
name|void
name|testConnectionFactoriesArePresent
parameter_list|()
throws|throws
name|NamingException
block|{
name|String
name|lookupName
init|=
name|getConnectionFactoryLookupName
argument_list|()
decl_stmt|;
name|assertConnectionFactoryPresent
argument_list|(
name|lookupName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDestinationsArePresent
parameter_list|()
throws|throws
name|NamingException
block|{
comment|//Retrieving destinations context is not yet implemented on the broker. For this test, a jndi file properties will be used.
name|InitialContext
name|context
init|=
operator|new
name|InitialContext
argument_list|()
decl_stmt|;
comment|//make sure contest is not null
name|assertTrue
argument_list|(
literal|"Created context"
argument_list|,
name|context
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Object
name|topicDestination
init|=
name|context
operator|.
name|lookup
argument_list|(
literal|"MyTopic"
argument_list|)
decl_stmt|;
comment|// check if MyTopic is an ActiveMQTopic
name|assertTrue
argument_list|(
literal|"Should have found a topic but found: "
operator|+
name|topicDestination
argument_list|,
name|topicDestination
operator|instanceof
name|ActiveMQTopic
argument_list|)
expr_stmt|;
name|Object
name|queueDestination
init|=
name|context
operator|.
name|lookup
argument_list|(
literal|"MyQueue"
argument_list|)
decl_stmt|;
comment|// check if MyQueue is an ActiveMQueue
name|assertTrue
argument_list|(
literal|"Should have found a queue but found: "
operator|+
name|queueDestination
argument_list|,
name|queueDestination
operator|instanceof
name|ActiveMQQueue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDynamicallyGrowing
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|answer
init|=
name|context
operator|.
name|lookup
argument_list|(
literal|"dynamicQueues/FOO.BAR"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have found a queue but found: "
operator|+
name|answer
argument_list|,
name|answer
operator|instanceof
name|ActiveMQQueue
argument_list|)
expr_stmt|;
name|ActiveMQQueue
name|queue
init|=
operator|(
name|ActiveMQQueue
operator|)
name|answer
decl_stmt|;
name|assertEquals
argument_list|(
literal|"queue name"
argument_list|,
literal|"FOO.BAR"
argument_list|,
name|queue
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|=
name|context
operator|.
name|lookup
argument_list|(
literal|"dynamicTopics/A.B.C"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have found a topic but found: "
operator|+
name|answer
argument_list|,
name|answer
operator|instanceof
name|ActiveMQTopic
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|answer
decl_stmt|;
name|assertEquals
argument_list|(
literal|"topic name"
argument_list|,
literal|"A.B.C"
argument_list|,
name|topic
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getConnectionFactoryLookupName
parameter_list|()
block|{
return|return
literal|"ConnectionFactory"
return|;
block|}
block|}
end_class

end_unit

