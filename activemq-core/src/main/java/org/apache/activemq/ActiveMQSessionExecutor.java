begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A utility class used by the Session for dispatching messages asynchronously  * to consumers  *   *   * @see javax.jms.Session  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQSessionExecutor
implements|implements
name|Task
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMQSessionExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQSession
name|session
decl_stmt|;
specifier|private
specifier|final
name|MessageDispatchChannel
name|messageQueue
decl_stmt|;
specifier|private
name|boolean
name|dispatchedBySessionPool
decl_stmt|;
specifier|private
specifier|volatile
name|TaskRunner
name|taskRunner
decl_stmt|;
specifier|private
name|boolean
name|startedOrWarnedThatNotStarted
decl_stmt|;
name|ActiveMQSessionExecutor
parameter_list|(
name|ActiveMQSession
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|session
operator|.
name|connection
operator|!=
literal|null
operator|&&
name|this
operator|.
name|session
operator|.
name|connection
operator|.
name|isMessagePrioritySupported
argument_list|()
condition|)
block|{
name|this
operator|.
name|messageQueue
operator|=
operator|new
name|SimplePriorityMessageDispatchChannel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|messageQueue
operator|=
operator|new
name|FifoMessageDispatchChannel
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|setDispatchedBySessionPool
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|dispatchedBySessionPool
operator|=
name|value
expr_stmt|;
name|wakeup
argument_list|()
expr_stmt|;
block|}
name|void
name|execute
parameter_list|(
name|MessageDispatch
name|message
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|startedOrWarnedThatNotStarted
condition|)
block|{
name|ActiveMQConnection
name|connection
init|=
name|session
operator|.
name|connection
decl_stmt|;
name|long
name|aboutUnstartedConnectionTimeout
init|=
name|connection
operator|.
name|getWarnAboutUnstartedConnectionTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|isStarted
argument_list|()
operator|||
name|aboutUnstartedConnectionTimeout
operator|<
literal|0L
condition|)
block|{
name|startedOrWarnedThatNotStarted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|long
name|elapsedTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|connection
operator|.
name|getTimeCreated
argument_list|()
decl_stmt|;
comment|// lets only warn when a significant amount of time has passed
comment|// just in case its normal operation
if|if
condition|(
name|elapsedTime
operator|>
name|aboutUnstartedConnectionTimeout
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received a message on a connection which is not yet started. Have you forgotten to call Connection.start()? Connection: "
operator|+
name|connection
operator|+
literal|" Received: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|startedOrWarnedThatNotStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|session
operator|.
name|isSessionAsyncDispatch
argument_list|()
operator|&&
operator|!
name|dispatchedBySessionPool
condition|)
block|{
name|dispatch
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageQueue
operator|.
name|enqueue
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|wakeup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|dispatchedBySessionPool
condition|)
block|{
if|if
condition|(
name|session
operator|.
name|isSessionAsyncDispatch
argument_list|()
condition|)
block|{
try|try
block|{
name|TaskRunner
name|taskRunner
init|=
name|this
operator|.
name|taskRunner
decl_stmt|;
if|if
condition|(
name|taskRunner
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|taskRunner
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
block|{
comment|// stop has been called
return|return;
block|}
name|this
operator|.
name|taskRunner
operator|=
name|session
operator|.
name|connection
operator|.
name|getSessionTaskRunner
argument_list|()
operator|.
name|createTaskRunner
argument_list|(
name|this
argument_list|,
literal|"ActiveMQ Session: "
operator|+
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|taskRunner
operator|=
name|this
operator|.
name|taskRunner
expr_stmt|;
block|}
block|}
name|taskRunner
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|iterate
argument_list|()
condition|)
block|{                 }
block|}
block|}
block|}
name|void
name|executeFirst
parameter_list|(
name|MessageDispatch
name|message
parameter_list|)
block|{
name|messageQueue
operator|.
name|enqueueFirst
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|wakeup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasUncomsumedMessages
parameter_list|()
block|{
return|return
operator|!
name|messageQueue
operator|.
name|isClosed
argument_list|()
operator|&&
name|messageQueue
operator|.
name|isRunning
argument_list|()
operator|&&
operator|!
name|messageQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|void
name|dispatch
parameter_list|(
name|MessageDispatch
name|message
parameter_list|)
block|{
comment|// TODO - we should use a Map for this indexed by consumerId
for|for
control|(
name|ActiveMQMessageConsumer
name|consumer
range|:
name|this
operator|.
name|session
operator|.
name|consumers
control|)
block|{
name|ConsumerId
name|consumerId
init|=
name|message
operator|.
name|getConsumerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumerId
operator|.
name|equals
argument_list|(
name|consumer
operator|.
name|getConsumerId
argument_list|()
argument_list|)
condition|)
block|{
name|consumer
operator|.
name|dispatch
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
operator|!
name|messageQueue
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|messageQueue
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasUncomsumedMessages
argument_list|()
condition|)
block|{
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|stop
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|messageQueue
operator|.
name|isRunning
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|messageQueue
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|taskRunner
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|taskRunner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskRunner
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|messageQueue
operator|.
name|isRunning
argument_list|()
return|;
block|}
name|void
name|close
parameter_list|()
block|{
name|messageQueue
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|messageQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|MessageDispatch
name|dequeueNoWait
parameter_list|()
block|{
return|return
name|messageQueue
operator|.
name|dequeueNoWait
argument_list|()
return|;
block|}
specifier|protected
name|void
name|clearMessagesInProgress
parameter_list|()
block|{
name|messageQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|messageQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
comment|// Deliver any messages queued on the consumer to their listeners.
for|for
control|(
name|ActiveMQMessageConsumer
name|consumer
range|:
name|this
operator|.
name|session
operator|.
name|consumers
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|iterate
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// No messages left queued on the listeners.. so now dispatch messages
comment|// queued on the session
name|MessageDispatch
name|message
init|=
name|messageQueue
operator|.
name|dequeueNoWait
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|dispatch
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
operator|!
name|messageQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
name|List
name|getUnconsumedMessages
parameter_list|()
block|{
return|return
name|messageQueue
operator|.
name|removeAll
argument_list|()
return|;
block|}
block|}
end_class

end_unit

