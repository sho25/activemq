begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_class
specifier|public
class|class
name|JobSchedulerStoreTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|JobSchedulerStore
name|store
init|=
operator|new
name|JobSchedulerStore
argument_list|()
decl_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
literal|"target/test/ScheduledDB"
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUMBER
init|=
literal|1000
decl_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ByteSequence
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteSequence
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER
condition|;
name|i
operator|++
control|)
block|{
name|ByteSequence
name|buff
init|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|String
argument_list|(
literal|"testjob"
operator|+
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|buff
argument_list|)
expr_stmt|;
block|}
name|JobScheduler
name|js
init|=
name|store
operator|.
name|getJobScheduler
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
for|for
control|(
name|ByteSequence
name|job
range|:
name|list
control|)
block|{
name|js
operator|.
name|schedule
argument_list|(
literal|"id:"
operator|+
operator|(
name|count
operator|++
operator|)
argument_list|,
name|job
argument_list|,
name|startTime
argument_list|,
literal|10000
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ByteSequence
argument_list|>
name|test
init|=
name|js
operator|.
name|getNextScheduleJobs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|test
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
name|js
operator|=
name|store
operator|.
name|getJobScheduler
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|test
operator|=
name|js
operator|.
name|getNextScheduleJobs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|test
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|orig
init|=
operator|new
name|String
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|payload
init|=
operator|new
name|String
argument_list|(
name|test
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|orig
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

