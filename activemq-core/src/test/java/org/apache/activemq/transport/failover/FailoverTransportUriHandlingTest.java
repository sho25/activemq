begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
operator|.
name|FailoverTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FailoverTransportUriHandlingTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFailoverTransportAddWithInitialUnknown
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverTransport
name|transport
init|=
operator|new
name|FailoverTransport
argument_list|()
decl_stmt|;
specifier|final
name|String
name|initialUri
init|=
literal|"tcp://no.existing.hostname:61616"
decl_stmt|;
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|initialUri
argument_list|)
expr_stmt|;
name|String
index|[]
name|uriArray
init|=
operator|new
name|String
index|[]
block|{
literal|"tcp://127.0.0.2:61616"
block|,
literal|"tcp://localhost:61616"
block|,
literal|"tcp://localhost:61617"
block|}
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uriArray
control|)
block|{
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|getRegisteredUrlsFromPrivateField
argument_list|(
name|transport
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uriArray
control|)
block|{
name|assertTrue
argument_list|(
literal|"Collection should contain: "
operator|+
name|uri
argument_list|,
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverTransportAddWithInitialKnown
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverTransport
name|transport
init|=
operator|new
name|FailoverTransport
argument_list|()
decl_stmt|;
specifier|final
name|String
name|initialUri
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|initialUri
argument_list|)
expr_stmt|;
name|String
index|[]
name|uriArray
init|=
operator|new
name|String
index|[]
block|{
literal|"tcp://127.0.0.2:61616"
block|,
literal|"tcp://no.existing.hostname:61616"
block|,
literal|"tcp://localhost:61617"
block|}
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uriArray
control|)
block|{
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|getRegisteredUrlsFromPrivateField
argument_list|(
name|transport
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uriArray
control|)
block|{
name|assertTrue
argument_list|(
literal|"Collection should contain: "
operator|+
name|uri
argument_list|,
name|uris
operator|.
name|contains
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverTransportAddWithPreventsDups
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverTransport
name|transport
init|=
operator|new
name|FailoverTransport
argument_list|()
decl_stmt|;
specifier|final
name|String
name|initialUri
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|initialUri
argument_list|)
expr_stmt|;
name|String
index|[]
name|uriArray
init|=
operator|new
name|String
index|[]
block|{
literal|"tcp://127.0.0.2:61616"
block|,
literal|"tcp://localhost:61616"
block|,
literal|"tcp://no.existing.hostname:61616"
block|,
literal|"tcp://localhost:61617"
block|,
literal|"tcp://127.0.0.1:61616"
block|}
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uriArray
control|)
block|{
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|getRegisteredUrlsFromPrivateField
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure even the unknowns get checked.
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
literal|"tcp://no.existing.hostname:61616"
argument_list|)
expr_stmt|;
name|uris
operator|=
name|getRegisteredUrlsFromPrivateField
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverTransportAddArray
parameter_list|()
throws|throws
name|Exception
block|{
name|FailoverTransport
name|transport
init|=
operator|new
name|FailoverTransport
argument_list|()
decl_stmt|;
specifier|final
name|String
name|initialUri
init|=
literal|"tcp://no.existing.hostname:61616"
decl_stmt|;
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|initialUri
argument_list|)
expr_stmt|;
name|URI
index|[]
name|uriArray
init|=
operator|new
name|URI
index|[]
block|{
operator|new
name|URI
argument_list|(
literal|"tcp://127.0.0.2:61616"
argument_list|)
block|,
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
block|,
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:61617"
argument_list|)
block|}
decl_stmt|;
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|uriArray
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|uris
init|=
name|getRegisteredUrlsFromPrivateField
argument_list|(
name|transport
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|uriArray
control|)
block|{
name|assertTrue
argument_list|(
literal|"Collection should contain: "
operator|+
name|uri
argument_list|,
name|uris
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure even the unknowns get checked.
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
literal|"tcp://no.existing.hostname:61616"
argument_list|)
expr_stmt|;
name|uris
operator|=
name|getRegisteredUrlsFromPrivateField
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|.
name|add
argument_list|(
literal|false
argument_list|,
name|uriArray
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|uris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Collection
argument_list|<
name|URI
argument_list|>
name|getRegisteredUrlsFromPrivateField
parameter_list|(
name|FailoverTransport
name|failoverTransport
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|Field
name|urisField
init|=
name|failoverTransport
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"uris"
argument_list|)
decl_stmt|;
name|urisField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Collection
argument_list|<
name|URI
argument_list|>
operator|)
name|urisField
operator|.
name|get
argument_list|(
name|failoverTransport
argument_list|)
return|;
block|}
block|}
end_class

end_unit

